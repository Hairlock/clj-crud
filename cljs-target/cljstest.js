/**
 * React v0.9.0
 *
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define(e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.React=e()}}(function(){return function e(t,n,o){function r(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);throw new Error("Cannot find module '"+a+"'")}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return r(n?n:e)},c,c.exports,e,t,n,o)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<o.length;a++)r(o[a]);return r}({1:[function(e,t){"use strict";var n={componentDidMount:function(){this.props.autoFocus&&this.getDOMNode().focus()}};t.exports=n},{}],2:[function(e,t){"use strict";function n(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var o={columnCount:!0,fillOpacity:!0,flex:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},r=["Webkit","ms","Moz","O"];Object.keys(o).forEach(function(e){r.forEach(function(t){o[n(t,e)]=o[e]})});var i={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},a={isUnitlessNumber:o,shorthandPropertyExpansions:i};t.exports=a},{}],3:[function(e,t){"use strict";var n=e("./CSSProperty"),o=e("./dangerousStyleValue"),r=e("./escapeTextForBrowser"),i=e("./hyphenate"),a=e("./memoizeStringOnly"),s=a(function(e){return r(i(e))}),u={createMarkupForStyles:function(e){var t="";for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];null!=r&&(t+=s(n)+":",t+=o(n,r)+";")}return t||null},setValueForStyles:function(e,t){var r=e.style;for(var i in t)if(t.hasOwnProperty(i)){var a=o(i,t[i]);if(a)r[i]=a;else{var s=n.shorthandPropertyExpansions[i];if(s)for(var u in s)r[u]="";else r[i]=""}}}};t.exports=u},{"./CSSProperty":2,"./dangerousStyleValue":92,"./escapeTextForBrowser":94,"./hyphenate":105,"./memoizeStringOnly":114}],4:[function(e,t){"use strict";function n(e){return"SELECT"===e.nodeName||"INPUT"===e.nodeName&&"file"===e.type}function o(e){var t=R.getPooled(I.change,T,e);C.accumulateTwoPhaseDispatches(t),M.batchedUpdates(r,t)}function r(e){y.enqueueEvents(e),y.processEventQueue()}function i(e,t){O=e,T=t,O.attachEvent("onchange",o)}function a(){O&&(O.detachEvent("onchange",o),O=null,T=null)}function s(e,t,n){return e===P.topChange?n:void 0}function u(e,t,n){e===P.topFocus?(a(),i(t,n)):e===P.topBlur&&a()}function c(e,t){O=e,T=t,N=e.value,S=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(O,"value",A),O.attachEvent("onpropertychange",p)}function l(){O&&(delete O.value,O.detachEvent("onpropertychange",p),O=null,T=null,N=null,S=null)}function p(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==N&&(N=t,o(e))}}function d(e,t,n){return e===P.topInput?n:void 0}function f(e,t,n){e===P.topFocus?(l(),c(t,n)):e===P.topBlur&&l()}function h(e){return e!==P.topSelectionChange&&e!==P.topKeyUp&&e!==P.topKeyDown||!O||O.value===N?void 0:(N=O.value,T)}function m(e){return"INPUT"===e.nodeName&&("checkbox"===e.type||"radio"===e.type)}function v(e,t,n){return e===P.topClick?n:void 0}var g=e("./EventConstants"),y=e("./EventPluginHub"),C=e("./EventPropagators"),E=e("./ExecutionEnvironment"),M=e("./ReactUpdates"),R=e("./SyntheticEvent"),D=e("./isEventSupported"),x=e("./isTextInputElement"),b=e("./keyOf"),P=g.topLevelTypes,I={change:{phasedRegistrationNames:{bubbled:b({onChange:null}),captured:b({onChangeCapture:null})},dependencies:[P.topBlur,P.topChange,P.topClick,P.topFocus,P.topInput,P.topKeyDown,P.topKeyUp,P.topSelectionChange]}},O=null,T=null,N=null,S=null,_=!1;E.canUseDOM&&(_=D("change")&&(!("documentMode"in document)||document.documentMode>8));var w=!1;E.canUseDOM&&(w=D("input")&&(!("documentMode"in document)||document.documentMode>9));var A={get:function(){return S.get.call(this)},set:function(e){N=""+e,S.set.call(this,e)}},k={eventTypes:I,extractEvents:function(e,t,o,r){var i,a;if(n(t)?_?i=s:a=u:x(t)?w?i=d:(i=h,a=f):m(t)&&(i=v),i){var c=i(e,t,o);if(c){var l=R.getPooled(I.change,c,r);return C.accumulateTwoPhaseDispatches(l),l}}a&&a(e,t,o)}};t.exports=k},{"./EventConstants":14,"./EventPluginHub":16,"./EventPropagators":19,"./ExecutionEnvironment":20,"./ReactUpdates":68,"./SyntheticEvent":75,"./isEventSupported":107,"./isTextInputElement":109,"./keyOf":113}],5:[function(e,t){"use strict";var n=0,o={createReactRootIndex:function(){return n++}};t.exports=o},{}],6:[function(e,t){"use strict";function n(e){switch(e){case g.topCompositionStart:return C.compositionStart;case g.topCompositionEnd:return C.compositionEnd;case g.topCompositionUpdate:return C.compositionUpdate}}function o(e,t){return e===g.topKeyDown&&t.keyCode===h}function r(e,t){switch(e){case g.topKeyUp:return-1!==f.indexOf(t.keyCode);case g.topKeyDown:return t.keyCode!==h;case g.topKeyPress:case g.topMouseDown:case g.topBlur:return!0;default:return!1}}function i(e){this.root=e,this.startSelection=c.getSelection(e),this.startValue=this.getText()}var a=e("./EventConstants"),s=e("./EventPropagators"),u=e("./ExecutionEnvironment"),c=e("./ReactInputSelection"),l=e("./SyntheticCompositionEvent"),p=e("./getTextContentAccessor"),d=e("./keyOf"),f=[9,13,27,32],h=229,m=u.canUseDOM&&"CompositionEvent"in window,v=!m||"documentMode"in document&&document.documentMode>8,g=a.topLevelTypes,y=null,C={compositionEnd:{phasedRegistrationNames:{bubbled:d({onCompositionEnd:null}),captured:d({onCompositionEndCapture:null})},dependencies:[g.topBlur,g.topCompositionEnd,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:d({onCompositionStart:null}),captured:d({onCompositionStartCapture:null})},dependencies:[g.topBlur,g.topCompositionStart,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:d({onCompositionUpdate:null}),captured:d({onCompositionUpdateCapture:null})},dependencies:[g.topBlur,g.topCompositionUpdate,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]}};i.prototype.getText=function(){return this.root.value||this.root[p()]},i.prototype.getData=function(){var e=this.getText(),t=this.startSelection.start,n=this.startValue.length-this.startSelection.end;return e.substr(t,e.length-n-t)};var E={eventTypes:C,extractEvents:function(e,t,a,u){var c,p;if(m?c=n(e):y?r(e,u)&&(c=C.compositionEnd):o(e,u)&&(c=C.compositionStart),v&&(y||c!==C.compositionStart?c===C.compositionEnd&&y&&(p=y.getData(),y=null):y=new i(t)),c){var d=l.getPooled(c,a,u);return p&&(d.data=p),s.accumulateTwoPhaseDispatches(d),d}}};t.exports=E},{"./EventConstants":14,"./EventPropagators":19,"./ExecutionEnvironment":20,"./ReactInputSelection":50,"./SyntheticCompositionEvent":73,"./getTextContentAccessor":103,"./keyOf":113}],7:[function(e,t){"use strict";function n(e,t,n){var o=e.childNodes;o[n]!==t&&(t.parentNode===e&&e.removeChild(t),n>=o.length?e.appendChild(t):e.insertBefore(t,o[n]))}var o,r=e("./Danger"),i=e("./ReactMultiChildUpdateTypes"),a=e("./getTextContentAccessor"),s=a();o="textContent"===s?function(e,t){e.textContent=t}:function(e,t){for(;e.firstChild;)e.removeChild(e.firstChild);if(t){var n=e.ownerDocument||document;e.appendChild(n.createTextNode(t))}};var u={dangerouslyReplaceNodeWithMarkup:r.dangerouslyReplaceNodeWithMarkup,updateTextContent:o,processUpdates:function(e,t){for(var a,s=null,u=null,c=0;a=e[c];c++)if(a.type===i.MOVE_EXISTING||a.type===i.REMOVE_NODE){var l=a.fromIndex,p=a.parentNode.childNodes[l],d=a.parentID;s=s||{},s[d]=s[d]||[],s[d][l]=p,u=u||[],u.push(p)}var f=r.dangerouslyRenderMarkup(t);if(u)for(var h=0;h<u.length;h++)u[h].parentNode.removeChild(u[h]);for(var m=0;a=e[m];m++)switch(a.type){case i.INSERT_MARKUP:n(a.parentNode,f[a.markupIndex],a.toIndex);break;case i.MOVE_EXISTING:n(a.parentNode,s[a.parentID][a.fromIndex],a.toIndex);break;case i.TEXT_CONTENT:o(a.parentNode,a.textContent);break;case i.REMOVE_NODE:}}};t.exports=u},{"./Danger":10,"./ReactMultiChildUpdateTypes":56,"./getTextContentAccessor":103}],8:[function(e,t){"use strict";var n=e("./invariant"),o={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:16,injectDOMPropertyConfig:function(e){var t=e.Properties||{},r=e.DOMAttributeNames||{},a=e.DOMPropertyNames||{},s=e.DOMMutationMethods||{};e.isCustomAttribute&&i._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var u in t){n(!i.isStandardName[u]),i.isStandardName[u]=!0;var c=u.toLowerCase();i.getPossibleStandardName[c]=u;var l=r[u];l&&(i.getPossibleStandardName[l]=u),i.getAttributeName[u]=l||c,i.getPropertyName[u]=a[u]||u;var p=s[u];p&&(i.getMutationMethod[u]=p);var d=t[u];i.mustUseAttribute[u]=d&o.MUST_USE_ATTRIBUTE,i.mustUseProperty[u]=d&o.MUST_USE_PROPERTY,i.hasSideEffects[u]=d&o.HAS_SIDE_EFFECTS,i.hasBooleanValue[u]=d&o.HAS_BOOLEAN_VALUE,i.hasPositiveNumericValue[u]=d&o.HAS_POSITIVE_NUMERIC_VALUE,n(!i.mustUseAttribute[u]||!i.mustUseProperty[u]),n(i.mustUseProperty[u]||!i.hasSideEffects[u]),n(!i.hasBooleanValue[u]||!i.hasPositiveNumericValue[u])}}},r={},i={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasPositiveNumericValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(e){return i._isCustomAttributeFunctions.some(function(t){return t.call(null,e)})},getDefaultValueForProperty:function(e,t){var n,o=r[e];return o||(r[e]=o={}),t in o||(n=document.createElement(e),o[t]=n[t]),o[t]},injection:o};t.exports=i},{"./invariant":106}],9:[function(e,t){"use strict";function n(e,t){return null==t||o.hasBooleanValue[e]&&!t||o.hasPositiveNumericValue[e]&&(isNaN(t)||1>t)}var o=e("./DOMProperty"),r=e("./escapeTextForBrowser"),i=e("./memoizeStringOnly"),a=i(function(e){return r(e)+'="'}),s={createMarkupForID:function(e){return a(o.ID_ATTRIBUTE_NAME)+r(e)+'"'},createMarkupForProperty:function(e,t){if(o.isStandardName[e]){if(n(e,t))return"";var i=o.getAttributeName[e];return o.hasBooleanValue[e]?r(i):a(i)+r(t)+'"'}return o.isCustomAttribute(e)?null==t?"":a(e)+r(t)+'"':null},setValueForProperty:function(e,t,r){if(o.isStandardName[t]){var i=o.getMutationMethod[t];if(i)i(e,r);else if(n(t,r))this.deleteValueForProperty(e,t);else if(o.mustUseAttribute[t])e.setAttribute(o.getAttributeName[t],""+r);else{var a=o.getPropertyName[t];o.hasSideEffects[t]&&e[a]===r||(e[a]=r)}}else o.isCustomAttribute(t)&&(null==r?e.removeAttribute(o.getAttributeName[t]):e.setAttribute(t,""+r))},deleteValueForProperty:function(e,t){if(o.isStandardName[t]){var n=o.getMutationMethod[t];if(n)n(e,void 0);else if(o.mustUseAttribute[t])e.removeAttribute(o.getAttributeName[t]);else{var r=o.getPropertyName[t],i=o.getDefaultValueForProperty(e.nodeName,t);o.hasSideEffects[t]&&e[r]===i||(e[r]=i)}}else o.isCustomAttribute(t)&&e.removeAttribute(t)}};t.exports=s},{"./DOMProperty":8,"./escapeTextForBrowser":94,"./memoizeStringOnly":114}],10:[function(e,t){"use strict";function n(e){return e.substring(1,e.indexOf(" "))}var o=e("./ExecutionEnvironment"),r=e("./createNodesFromMarkup"),i=e("./emptyFunction"),a=e("./getMarkupWrap"),s=e("./invariant"),u=/^(<[^ \/>]+)/,c="data-danger-index",l={dangerouslyRenderMarkup:function(e){s(o.canUseDOM);for(var t,l={},p=0;p<e.length;p++)s(e[p]),t=n(e[p]),t=a(t)?t:"*",l[t]=l[t]||[],l[t][p]=e[p];var d=[],f=0;for(t in l)if(l.hasOwnProperty(t)){var h=l[t];for(var m in h)if(h.hasOwnProperty(m)){var v=h[m];h[m]=v.replace(u,"$1 "+c+'="'+m+'" ')}var g=r(h.join(""),i);for(p=0;p<g.length;++p){var y=g[p];y.hasAttribute&&y.hasAttribute(c)&&(m=+y.getAttribute(c),y.removeAttribute(c),s(!d.hasOwnProperty(m)),d[m]=y,f+=1)}}return s(f===d.length),s(d.length===e.length),d},dangerouslyReplaceNodeWithMarkup:function(e,t){s(o.canUseDOM),s(t),s("html"!==e.tagName.toLowerCase());var n=r(t,i)[0];e.parentNode.replaceChild(n,e)}};t.exports=l},{"./ExecutionEnvironment":20,"./createNodesFromMarkup":90,"./emptyFunction":93,"./getMarkupWrap":100,"./invariant":106}],11:[function(e,t){"use strict";var n=e("./DOMProperty"),o=n.injection.MUST_USE_ATTRIBUTE,r=n.injection.MUST_USE_PROPERTY,i=n.injection.HAS_BOOLEAN_VALUE,a=n.injection.HAS_SIDE_EFFECTS,s=n.injection.HAS_POSITIVE_NUMERIC_VALUE,u={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,accessKey:null,action:null,allowFullScreen:o|i,allowTransparency:o,alt:null,async:i,autoComplete:null,autoPlay:i,cellPadding:null,cellSpacing:null,charSet:o,checked:r|i,className:r,cols:o|s,colSpan:null,content:null,contentEditable:null,contextMenu:o,controls:r|i,crossOrigin:null,data:null,dateTime:o,defer:i,dir:null,disabled:o|i,download:null,draggable:null,encType:null,form:o,formNoValidate:i,frameBorder:o,height:o,hidden:o|i,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:r,label:null,lang:null,list:null,loop:r|i,max:null,maxLength:o,mediaGroup:null,method:null,min:null,multiple:r|i,muted:r|i,name:null,noValidate:i,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:r|i,rel:null,required:i,role:o,rows:o|s,rowSpan:null,sandbox:null,scope:null,scrollLeft:r,scrollTop:r,seamless:o|i,selected:r|i,size:o|s,span:s,spellCheck:null,src:null,srcDoc:r,step:null,style:null,tabIndex:null,target:null,title:null,type:null,value:r|a,width:o,wmode:o,autoCapitalize:null,autoCorrect:null,property:null,cx:o,cy:o,d:o,fill:o,fx:o,fy:o,gradientTransform:o,gradientUnits:o,offset:o,points:o,r:o,rx:o,ry:o,spreadMethod:o,stopColor:o,stopOpacity:o,stroke:o,strokeLinecap:o,strokeWidth:o,transform:o,version:o,viewBox:o,x1:o,x2:o,x:o,y1:o,y2:o,y:o},DOMAttributeNames:{className:"class",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",htmlFor:"for",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeLinecap:"stroke-linecap",strokeWidth:"stroke-width",viewBox:"viewBox"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",encType:"enctype",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc"},DOMMutationMethods:{className:function(e,t){e.className=t||""}}};t.exports=u},{"./DOMProperty":8}],12:[function(e,t){"use strict";var n=e("./keyOf"),o=[n({ResponderEventPlugin:null}),n({SimpleEventPlugin:null}),n({TapEventPlugin:null}),n({EnterLeaveEventPlugin:null}),n({ChangeEventPlugin:null}),n({SelectEventPlugin:null}),n({CompositionEventPlugin:null}),n({AnalyticsEventPlugin:null}),n({MobileSafariClickEventPlugin:null})];t.exports=o},{"./keyOf":113}],13:[function(e,t){"use strict";var n=e("./EventConstants"),o=e("./EventPropagators"),r=e("./SyntheticMouseEvent"),i=e("./ReactMount"),a=e("./keyOf"),s=n.topLevelTypes,u=i.getFirstReactDOM,c={mouseEnter:{registrationName:a({onMouseEnter:null}),dependencies:[s.topMouseOut,s.topMouseOver]},mouseLeave:{registrationName:a({onMouseLeave:null}),dependencies:[s.topMouseOut,s.topMouseOver]}},l=[null,null],p={eventTypes:c,extractEvents:function(e,t,n,a){if(e===s.topMouseOver&&(a.relatedTarget||a.fromElement))return null;if(e!==s.topMouseOut&&e!==s.topMouseOver)return null;var p;if(t.window===t)p=t;else{var d=t.ownerDocument;p=d?d.defaultView||d.parentWindow:window}var f,h;if(e===s.topMouseOut?(f=t,h=u(a.relatedTarget||a.toElement)||p):(f=p,h=t),f===h)return null;var m=f?i.getID(f):"",v=h?i.getID(h):"",g=r.getPooled(c.mouseLeave,m,a);g.type="mouseleave",g.target=f,g.relatedTarget=h;var y=r.getPooled(c.mouseEnter,v,a);return y.type="mouseenter",y.target=h,y.relatedTarget=f,o.accumulateEnterLeaveDispatches(g,y,m,v),l[0]=g,l[1]=y,l}};t.exports=p},{"./EventConstants":14,"./EventPropagators":19,"./ReactMount":53,"./SyntheticMouseEvent":78,"./keyOf":113}],14:[function(e,t){"use strict";var n=e("./keyMirror"),o=n({bubbled:null,captured:null}),r=n({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),i={topLevelTypes:r,PropagationPhases:o};t.exports=i},{"./keyMirror":112}],15:[function(e,t){var n=e("./emptyFunction"),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent(t,n)}}):void 0},capture:function(e,t,o){return e.addEventListener?(e.addEventListener(t,o,!0),{remove:function(){e.removeEventListener(t,o,!0)}}):{remove:n}}};t.exports=o},{"./emptyFunction":93}],16:[function(e,t){"use strict";var n=e("./EventPluginRegistry"),o=e("./EventPluginUtils"),r=e("./ExecutionEnvironment"),i=e("./accumulate"),a=e("./forEachAccumulated"),s=e("./invariant"),u=(e("./isEventSupported"),{}),c=null,l=function(e){if(e){var t=o.executeDispatch,r=n.getPluginModuleForEvent(e);r&&r.executeDispatch&&(t=r.executeDispatch),o.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e)}},p=null,d={injection:{injectMount:o.injection.injectMount,injectInstanceHandle:function(e){p=e},getInstanceHandle:function(){return p},injectEventPluginOrder:n.injectEventPluginOrder,injectEventPluginsByName:n.injectEventPluginsByName},eventNameDispatchConfigs:n.eventNameDispatchConfigs,registrationNameModules:n.registrationNameModules,putListener:function(e,t,n){s(r.canUseDOM),s(!n||"function"==typeof n);var o=u[t]||(u[t]={});o[e]=n},getListener:function(e,t){var n=u[t];return n&&n[e]},deleteListener:function(e,t){var n=u[t];n&&delete n[e]},deleteAllListeners:function(e){for(var t in u)delete u[t][e]},extractEvents:function(e,t,o,r){for(var a,s=n.plugins,u=0,c=s.length;c>u;u++){var l=s[u];if(l){var p=l.extractEvents(e,t,o,r);p&&(a=i(a,p))}}return a},enqueueEvents:function(e){e&&(c=i(c,e))},processEventQueue:function(){var e=c;c=null,a(e,l),s(!c)},__purge:function(){u={}},__getListenerBank:function(){return u}};t.exports=d},{"./EventPluginRegistry":17,"./EventPluginUtils":18,"./ExecutionEnvironment":20,"./accumulate":84,"./forEachAccumulated":96,"./invariant":106,"./isEventSupported":107}],17:[function(e,t){"use strict";function n(){if(a)for(var e in s){var t=s[e],n=a.indexOf(e);if(i(n>-1),!u.plugins[n]){i(t.extractEvents),u.plugins[n]=t;var r=t.eventTypes;for(var c in r)i(o(r[c],t,c))}}}function o(e,t,n){i(!u.eventNameDispatchConfigs[n]),u.eventNameDispatchConfigs[n]=e;var o=e.phasedRegistrationNames;if(o){for(var a in o)if(o.hasOwnProperty(a)){var s=o[a];r(s,t,n)}return!0}return e.registrationName?(r(e.registrationName,t,n),!0):!1}function r(e,t,n){i(!u.registrationNameModules[e]),u.registrationNameModules[e]=t,u.registrationNameDependencies[e]=t.eventTypes[n].dependencies}var i=e("./invariant"),a=null,s={},u={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){i(!a),a=Array.prototype.slice.call(e),n()},injectEventPluginsByName:function(e){var t=!1;for(var o in e)if(e.hasOwnProperty(o)){var r=e[o];s[o]!==r&&(i(!s[o]),s[o]=r,t=!0)}t&&n()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return u.registrationNameModules[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var o=u.registrationNameModules[t.phasedRegistrationNames[n]];if(o)return o}return null},_resetEventPlugins:function(){a=null;for(var e in s)s.hasOwnProperty(e)&&delete s[e];u.plugins.length=0;var t=u.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var o=u.registrationNameModules;for(var r in o)o.hasOwnProperty(r)&&delete o[r]}};t.exports=u},{"./invariant":106}],18:[function(e,t){"use strict";function n(e){return e===h.topMouseUp||e===h.topTouchEnd||e===h.topTouchCancel}function o(e){return e===h.topMouseMove||e===h.topTouchMove}function r(e){return e===h.topMouseDown||e===h.topTouchStart}function i(e,t){var n=e._dispatchListeners,o=e._dispatchIDs;if(Array.isArray(n))for(var r=0;r<n.length&&!e.isPropagationStopped();r++)t(e,n[r],o[r]);else n&&t(e,n,o)}function a(e,t,n){e.currentTarget=f.Mount.getNode(n);var o=t(e,n);return e.currentTarget=null,o}function s(e,t){i(e,t),e._dispatchListeners=null,e._dispatchIDs=null}function u(e){var t=e._dispatchListeners,n=e._dispatchIDs;if(Array.isArray(t)){for(var o=0;o<t.length&&!e.isPropagationStopped();o++)if(t[o](e,n[o]))return n[o]}else if(t&&t(e,n))return n;return null}function c(e){var t=e._dispatchListeners,n=e._dispatchIDs;d(!Array.isArray(t));var o=t?t(e,n):null;return e._dispatchListeners=null,e._dispatchIDs=null,o}function l(e){return!!e._dispatchListeners}var p=e("./EventConstants"),d=e("./invariant"),f={Mount:null,injectMount:function(e){f.Mount=e}},h=p.topLevelTypes,m={isEndish:n,isMoveish:o,isStartish:r,executeDirectDispatch:c,executeDispatch:a,executeDispatchesInOrder:s,executeDispatchesInOrderStopAtTrue:u,hasDispatches:l,injection:f,useTouchEvents:!1};t.exports=m},{"./EventConstants":14,"./invariant":106}],19:[function(e,t){"use strict";function n(e,t,n){var o=t.dispatchConfig.phasedRegistrationNames[n];return m(e,o)}function o(e,t,o){var r=t?h.bubbled:h.captured,i=n(e,o,r);i&&(o._dispatchListeners=d(o._dispatchListeners,i),o._dispatchIDs=d(o._dispatchIDs,e))}function r(e){e&&e.dispatchConfig.phasedRegistrationNames&&p.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,o,e)}function i(e,t,n){if(n&&n.dispatchConfig.registrationName){var o=n.dispatchConfig.registrationName,r=m(e,o);r&&(n._dispatchListeners=d(n._dispatchListeners,r),n._dispatchIDs=d(n._dispatchIDs,e))}}function a(e){e&&e.dispatchConfig.registrationName&&i(e.dispatchMarker,null,e)}function s(e){f(e,r)}function u(e,t,n,o){p.injection.getInstanceHandle().traverseEnterLeave(n,o,i,e,t)}function c(e){f(e,a)}var l=e("./EventConstants"),p=e("./EventPluginHub"),d=e("./accumulate"),f=e("./forEachAccumulated"),h=l.PropagationPhases,m=p.getListener,v={accumulateTwoPhaseDispatches:s,accumulateDirectDispatches:c,accumulateEnterLeaveDispatches:u};t.exports=v},{"./EventConstants":14,"./EventPluginHub":16,"./accumulate":84,"./forEachAccumulated":96}],20:[function(e,t){"use strict";var n="undefined"!=typeof window,o={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&(window.addEventListener||window.attachEvent),isInWorker:!n};t.exports=o},{}],21:[function(e,t){"use strict";function n(e){u(null==e.props.checkedLink||null==e.props.valueLink)}function o(e){n(e),u(null==e.props.value&&null==e.props.onChange)}function r(e){n(e),u(null==e.props.checked&&null==e.props.onChange)}function i(e){this.props.valueLink.requestChange(e.target.value)}function a(e){this.props.checkedLink.requestChange(e.target.checked)}var s=e("./ReactPropTypes"),u=e("./invariant"),c={Mixin:{propTypes:{value:function(){},checked:function(){},onChange:s.func}},getValue:function(e){return e.props.valueLink?(o(e),e.props.valueLink.value):e.props.value},getChecked:function(e){return e.props.checkedLink?(r(e),e.props.checkedLink.value):e.props.checked},getOnChange:function(e){return e.props.valueLink?(o(e),i):e.props.checkedLink?(r(e),a):e.props.onChange}};t.exports=c},{"./ReactPropTypes":62,"./invariant":106}],22:[function(e,t){"use strict";var n=e("./EventConstants"),o=e("./emptyFunction"),r=n.topLevelTypes,i={eventTypes:null,extractEvents:function(e,t,n,i){if(e===r.topTouchStart){var a=i.target;a&&!a.onclick&&(a.onclick=o)}}};t.exports=i},{"./EventConstants":14,"./emptyFunction":93}],23:[function(e,t){"use strict";var n=e("./invariant"),o=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},r=function(e,t){var n=this;if(n.instancePool.length){var o=n.instancePool.pop();return n.call(o,e,t),o}return new n(e,t)},i=function(e,t,n){var o=this;if(o.instancePool.length){var r=o.instancePool.pop();return o.call(r,e,t,n),r}return new o(e,t,n)},a=function(e,t,n,o,r){var i=this;if(i.instancePool.length){var a=i.instancePool.pop();return i.call(a,e,t,n,o,r),a}return new i(e,t,n,o,r)},s=function(e){var t=this;n(e instanceof t),e.destructor&&e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},u=10,c=o,l=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||c,n.poolSize||(n.poolSize=u),n.release=s,n},p={addPoolingTo:l,oneArgumentPooler:o,twoArgumentPooler:r,threeArgumentPooler:i,fiveArgumentPooler:a};t.exports=p},{"./invariant":106}],24:[function(e,t){"use strict";var n=e("./DOMPropertyOperations"),o=e("./EventPluginUtils"),r=e("./ReactChildren"),i=e("./ReactComponent"),a=e("./ReactCompositeComponent"),s=e("./ReactContext"),u=e("./ReactCurrentOwner"),c=e("./ReactDOM"),l=e("./ReactDOMComponent"),p=e("./ReactDefaultInjection"),d=e("./ReactInstanceHandles"),f=e("./ReactMount"),h=e("./ReactMultiChild"),m=e("./ReactPerf"),v=e("./ReactPropTypes"),g=e("./ReactServerRendering"),y=e("./ReactTextComponent"),C=e("./onlyChild");p.inject();var E={Children:{map:r.map,forEach:r.forEach,only:C},DOM:c,PropTypes:v,initializeTouchEvents:function(e){o.useTouchEvents=e},createClass:a.createClass,constructAndRenderComponent:f.constructAndRenderComponent,constructAndRenderComponentByID:f.constructAndRenderComponentByID,renderComponent:m.measure("React","renderComponent",f.renderComponent),renderComponentToString:g.renderComponentToString,unmountComponentAtNode:f.unmountComponentAtNode,isValidClass:a.isValidClass,isValidComponent:i.isValidComponent,withContext:s.withContext,__internals:{Component:i,CurrentOwner:u,DOMComponent:l,DOMPropertyOperations:n,InstanceHandles:d,Mount:f,MultiChild:h,TextComponent:y}};E.version="0.9.0",t.exports=E},{"./DOMPropertyOperations":9,"./EventPluginUtils":18,"./ReactChildren":25,"./ReactComponent":26,"./ReactCompositeComponent":29,"./ReactContext":30,"./ReactCurrentOwner":31,"./ReactDOM":32,"./ReactDOMComponent":34,"./ReactDefaultInjection":44,"./ReactInstanceHandles":51,"./ReactMount":53,"./ReactMultiChild":55,"./ReactPerf":58,"./ReactPropTypes":62,"./ReactServerRendering":66,"./ReactTextComponent":67,"./onlyChild":121}],25:[function(e,t){"use strict";function n(e,t){this.forEachFunction=e,this.forEachContext=t}function o(e,t,n,o){var r=e;r.forEachFunction.call(r.forEachContext,t,o)}function r(e,t,r){if(null==e)return e;var i=n.getPooled(t,r);l(e,o,i),n.release(i)}function i(e,t,n){this.mapResult=e,this.mapFunction=t,this.mapContext=n}function a(e,t,n,o){var r=e,i=r.mapResult,a=r.mapFunction.call(r.mapContext,t,o);c(!i.hasOwnProperty(n)),i[n]=a}function s(e,t,n){if(null==e)return e;var o={},r=i.getPooled(o,t,n);return l(e,a,r),i.release(r),o}var u=e("./PooledClass"),c=e("./invariant"),l=e("./traverseAllChildren"),p=u.twoArgumentPooler,d=u.threeArgumentPooler;u.addPoolingTo(n,p),u.addPoolingTo(i,d);var f={forEach:r,map:s};t.exports=f},{"./PooledClass":23,"./invariant":106,"./traverseAllChildren":125}],26:[function(e,t){"use strict";var n=e("./ReactComponentEnvironment"),o=e("./ReactCurrentOwner"),r=e("./ReactOwner"),i=e("./ReactUpdates"),a=e("./invariant"),s=e("./keyMirror"),u=e("./merge"),c=s({MOUNTED:null,UNMOUNTED:null}),l={isValidComponent:function(e){if(!e||!e.type||!e.type.prototype)return!1;var t=e.type.prototype;return"function"==typeof t.mountComponentIntoNode&&"function"==typeof t.receiveComponent},LifeCycle:c,BackendIDOperations:n.BackendIDOperations,unmountIDFromEnvironment:n.unmountIDFromEnvironment,mountImageIntoNode:n.mountImageIntoNode,ReactReconcileTransaction:n.ReactReconcileTransaction,Mixin:u(n.Mixin,{isMounted:function(){return this._lifeCycleState===c.MOUNTED},setProps:function(e,t){this.replaceProps(u(this._pendingProps||this.props,e),t)},replaceProps:function(e,t){a(this.isMounted()),a(0===this._mountDepth),this._pendingProps=e,i.enqueueUpdate(this,t)},construct:function(e,t){this.props=e||{},this._owner=o.current,this._lifeCycleState=c.UNMOUNTED,this._pendingProps=null,this._pendingCallbacks=null,this._pendingOwner=this._owner;var n=arguments.length-1;if(1===n)this.props.children=t;else if(n>1){for(var r=Array(n),i=0;n>i;i++)r[i]=arguments[i+1];this.props.children=r}},mountComponent:function(e,t,n){a(!this.isMounted());var o=this.props;null!=o.ref&&r.addComponentAsRefTo(this,o.ref,this._owner),this._rootNodeID=e,this._lifeCycleState=c.MOUNTED,this._mountDepth=n},unmountComponent:function(){a(this.isMounted());var e=this.props;null!=e.ref&&r.removeComponentAsRefFrom(this,e.ref,this._owner),l.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null,this._lifeCycleState=c.UNMOUNTED},receiveComponent:function(e,t){a(this.isMounted()),this._pendingOwner=e._owner,this._pendingProps=e.props,this._performUpdateIfNecessary(t)},performUpdateIfNecessary:function(){var e=l.ReactReconcileTransaction.getPooled();e.perform(this._performUpdateIfNecessary,this,e),l.ReactReconcileTransaction.release(e)},_performUpdateIfNecessary:function(e){if(null!=this._pendingProps){var t=this.props,n=this._owner;this.props=this._pendingProps,this._owner=this._pendingOwner,this._pendingProps=null,this.updateComponent(e,t,n)}},updateComponent:function(e,t,n){var o=this.props;(this._owner!==n||o.ref!==t.ref)&&(null!=t.ref&&r.removeComponentAsRefFrom(this,t.ref,n),null!=o.ref&&r.addComponentAsRefTo(this,o.ref,this._owner))},mountComponentIntoNode:function(e,t,n){var o=l.ReactReconcileTransaction.getPooled();o.perform(this._mountComponentIntoNode,this,e,t,o,n),l.ReactReconcileTransaction.release(o)},_mountComponentIntoNode:function(e,t,n,o){var r=this.mountComponent(e,n,0);l.mountImageIntoNode(r,t,o)},isOwnedBy:function(e){return this._owner===e},getSiblingByRef:function(e){var t=this._owner;return t&&t.refs?t.refs[e]:null}})};t.exports=l},{"./ReactComponentEnvironment":28,"./ReactCurrentOwner":31,"./ReactOwner":57,"./ReactUpdates":68,"./invariant":106,"./keyMirror":112,"./merge":115}],27:[function(e,t){"use strict";var n=e("./ReactDOMIDOperations"),o=e("./ReactMarkupChecksum"),r=e("./ReactMount"),i=e("./ReactPerf"),a=e("./ReactReconcileTransaction"),s=e("./getReactRootElementInContainer"),u=e("./invariant"),c=1,l=9,p={Mixin:{getDOMNode:function(){return u(this.isMounted()),r.getNode(this._rootNodeID)}},ReactReconcileTransaction:a,BackendIDOperations:n,unmountIDFromEnvironment:function(e){r.purgeID(e)},mountImageIntoNode:i.measure("ReactComponentBrowserEnvironment","mountImageIntoNode",function(e,t,n){if(u(t&&(t.nodeType===c||t.nodeType===l)),n){if(o.canReuseMarkup(e,s(t)))return;u(t.nodeType!==l)}u(t.nodeType!==l);var r=t.parentNode;if(r){var i=t.nextSibling;r.removeChild(t),t.innerHTML=e,i?r.insertBefore(t,i):r.appendChild(t)}else t.innerHTML=e})};t.exports=p},{"./ReactDOMIDOperations":36,"./ReactMarkupChecksum":52,"./ReactMount":53,"./ReactPerf":58,"./ReactReconcileTransaction":64,"./getReactRootElementInContainer":102,"./invariant":106}],28:[function(e,t){"use strict";var n=e("./ReactComponentBrowserEnvironment"),o=n;t.exports=o},{"./ReactComponentBrowserEnvironment":27}],29:[function(e,t){"use strict";function n(e,t){for(var n in t)t.hasOwnProperty(n)&&E("function"==typeof t[n])
}function o(e,t){var n=I[t];N.hasOwnProperty(t)&&E(n===P.OVERRIDE_BASE),e.hasOwnProperty(t)&&E(n===P.DEFINE_MANY||n===P.DEFINE_MANY_MERGED)}function r(e){var t=e._compositeLifeCycleState;E(e.isMounted()||t===T.MOUNTING),E(t!==T.RECEIVING_STATE),E(t!==T.UNMOUNTING)}function i(e,t){E(!l(t)),E(!p.isValidComponent(t));var n=e.componentConstructor,r=n.prototype;for(var i in t){var a=t[i];if(t.hasOwnProperty(i))if(o(r,i),O.hasOwnProperty(i))O[i](e,a);else{var s=i in I,d=i in r,f=a&&a.__reactDontBind,h="function"==typeof a,m=h&&!s&&!d&&!f;m?(r.__reactAutoBindMap||(r.__reactAutoBindMap={}),r.__reactAutoBindMap[i]=a,r[i]=a):r[i]=d?I[i]===P.DEFINE_MANY_MERGED?u(r[i],a):c(r[i],a):a}}}function a(e,t){if(t)for(var n in t){var o=t[n];if(!t.hasOwnProperty(n)||!o)return;var r=n in e,i=o;if(r){var a=e[n],s=typeof a,u=typeof o;E("function"===s&&"function"===u),i=c(a,o)}e[n]=i,e.componentConstructor[n]=i}}function s(e,t){return E(e&&t&&"object"==typeof e&&"object"==typeof t),x(t,function(t,n){E(void 0===e[n]),e[n]=t}),e}function u(e,t){return function(){var n=e.apply(this,arguments),o=t.apply(this,arguments);return null==n?o:null==o?n:s(n,o)}}function c(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function l(e){return e instanceof Function&&"componentConstructor"in e&&e.componentConstructor instanceof Function}var p=e("./ReactComponent"),d=e("./ReactContext"),f=e("./ReactCurrentOwner"),h=e("./ReactErrorUtils"),m=e("./ReactOwner"),v=e("./ReactPerf"),g=e("./ReactPropTransferer"),y=e("./ReactPropTypeLocations"),C=(e("./ReactPropTypeLocationNames"),e("./ReactUpdates")),E=e("./invariant"),M=e("./keyMirror"),R=e("./merge"),D=e("./mixInto"),x=e("./objMap"),b=e("./shouldUpdateReactComponent"),P=M({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),I={mixins:P.DEFINE_MANY,statics:P.DEFINE_MANY,propTypes:P.DEFINE_MANY,contextTypes:P.DEFINE_MANY,childContextTypes:P.DEFINE_MANY,getDefaultProps:P.DEFINE_MANY_MERGED,getInitialState:P.DEFINE_MANY_MERGED,getChildContext:P.DEFINE_MANY_MERGED,render:P.DEFINE_ONCE,componentWillMount:P.DEFINE_MANY,componentDidMount:P.DEFINE_MANY,componentWillReceiveProps:P.DEFINE_MANY,shouldComponentUpdate:P.DEFINE_ONCE,componentWillUpdate:P.DEFINE_MANY,componentDidUpdate:P.DEFINE_MANY,componentWillUnmount:P.DEFINE_MANY,updateComponent:P.OVERRIDE_BASE},O={displayName:function(e,t){e.componentConstructor.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)i(e,t[n])},childContextTypes:function(e,t){var o=e.componentConstructor;n(o,t,y.childContext),o.childContextTypes=R(o.childContextTypes,t)},contextTypes:function(e,t){var o=e.componentConstructor;n(o,t,y.context),o.contextTypes=R(o.contextTypes,t)},propTypes:function(e,t){var o=e.componentConstructor;n(o,t,y.prop),o.propTypes=R(o.propTypes,t)},statics:function(e,t){a(e,t)}},T=M({MOUNTING:null,UNMOUNTING:null,RECEIVING_PROPS:null,RECEIVING_STATE:null}),N={construct:function(){p.Mixin.construct.apply(this,arguments),this.state=null,this._pendingState=null,this.context=this._processContext(d.current),this._currentContext=d.current,this._pendingContext=null,this._compositeLifeCycleState=null},isMounted:function(){return p.Mixin.isMounted.call(this)&&this._compositeLifeCycleState!==T.MOUNTING},mountComponent:v.measure("ReactCompositeComponent","mountComponent",function(e,t,n){p.Mixin.mountComponent.call(this,e,t,n),this._compositeLifeCycleState=T.MOUNTING,this._defaultProps=this.getDefaultProps?this.getDefaultProps():null,this.props=this._processProps(this.props),this.__reactAutoBindMap&&this._bindAutoBindMethods(),this.state=this.getInitialState?this.getInitialState():null,E("object"==typeof this.state&&!Array.isArray(this.state)),this._pendingState=null,this._pendingForceUpdate=!1,this.componentWillMount&&(this.componentWillMount(),this._pendingState&&(this.state=this._pendingState,this._pendingState=null)),this._renderedComponent=this._renderValidatedComponent(),this._compositeLifeCycleState=null;var o=this._renderedComponent.mountComponent(e,t,n+1);return this.componentDidMount&&t.getReactMountReady().enqueue(this,this.componentDidMount),o}),unmountComponent:function(){this._compositeLifeCycleState=T.UNMOUNTING,this.componentWillUnmount&&this.componentWillUnmount(),this._compositeLifeCycleState=null,this._defaultProps=null,this._renderedComponent.unmountComponent(),this._renderedComponent=null,p.Mixin.unmountComponent.call(this),this.refs&&(this.refs=null)},setState:function(e,t){E("object"==typeof e||null==e),this.replaceState(R(this._pendingState||this.state,e),t)},replaceState:function(e,t){r(this),this._pendingState=e,C.enqueueUpdate(this,t)},_processContext:function(e){var t=null,n=this.constructor.contextTypes;if(n){t={};for(var o in n)t[o]=e[o]}return t},_processChildContext:function(e){var t=this.getChildContext&&this.getChildContext();if(this.constructor.displayName||"ReactCompositeComponent",t){E("object"==typeof this.constructor.childContextTypes);for(var n in t)E(n in this.constructor.childContextTypes);return R(e,t)}return e},_processProps:function(e){var t=R(e),n=this._defaultProps;for(var o in n)"undefined"==typeof t[o]&&(t[o]=n[o]);return t},_checkPropTypes:function(e,t,n){var o=this.constructor.displayName;for(var r in e)e.hasOwnProperty(r)&&e[r](t,r,o,n)},performUpdateIfNecessary:function(){var e=this._compositeLifeCycleState;e!==T.MOUNTING&&e!==T.RECEIVING_PROPS&&p.Mixin.performUpdateIfNecessary.call(this)},_performUpdateIfNecessary:function(e){if(null!=this._pendingProps||null!=this._pendingState||null!=this._pendingContext||this._pendingForceUpdate){var t=this._pendingContext||this._currentContext,n=this._processContext(t);this._pendingContext=null;var o=this.props;null!=this._pendingProps&&(o=this._processProps(this._pendingProps),this._pendingProps=null,this._compositeLifeCycleState=T.RECEIVING_PROPS,this.componentWillReceiveProps&&this.componentWillReceiveProps(o,n)),this._compositeLifeCycleState=T.RECEIVING_STATE;var r=this._pendingOwner,i=this._pendingState||this.state;this._pendingState=null;try{this._pendingForceUpdate||!this.shouldComponentUpdate||this.shouldComponentUpdate(o,i,n)?(this._pendingForceUpdate=!1,this._performComponentUpdate(o,r,i,t,n,e)):(this.props=o,this._owner=r,this.state=i,this._currentContext=t,this.context=n)}finally{this._compositeLifeCycleState=null}}},_performComponentUpdate:function(e,t,n,o,r,i){var a=this.props,s=this._owner,u=this.state,c=this.context;this.componentWillUpdate&&this.componentWillUpdate(e,n,r),this.props=e,this._owner=t,this.state=n,this._currentContext=o,this.context=r,this.updateComponent(i,a,s,u,c),this.componentDidUpdate&&i.getReactMountReady().enqueue(this,this.componentDidUpdate.bind(this,a,u,c))},receiveComponent:function(e,t){e!==this&&(this._pendingContext=e._currentContext,p.Mixin.receiveComponent.call(this,e,t))},updateComponent:v.measure("ReactCompositeComponent","updateComponent",function(e,t,n){p.Mixin.updateComponent.call(this,e,t,n);var o=this._renderedComponent,r=this._renderValidatedComponent();if(b(o,r))o.receiveComponent(r,e);else{var i=this._rootNodeID,a=o._rootNodeID;o.unmountComponent(),this._renderedComponent=r;var s=r.mountComponent(i,e,this._mountDepth+1);p.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(a,s)}}),forceUpdate:function(e){var t=this._compositeLifeCycleState;E(this.isMounted()||t===T.MOUNTING),E(t!==T.RECEIVING_STATE&&t!==T.UNMOUNTING),this._pendingForceUpdate=!0,C.enqueueUpdate(this,e)},_renderValidatedComponent:v.measure("ReactCompositeComponent","_renderValidatedComponent",function(){var e,t=d.current;d.current=this._processChildContext(this._currentContext),f.current=this;try{e=this.render()}finally{d.current=t,f.current=null}return E(p.isValidComponent(e)),e}),_bindAutoBindMethods:function(){for(var e in this.__reactAutoBindMap)if(this.__reactAutoBindMap.hasOwnProperty(e)){var t=this.__reactAutoBindMap[e];this[e]=this._bindAutoBindMethod(h.guard(t,this.constructor.displayName+"."+e))}},_bindAutoBindMethod:function(e){var t=this,n=function(){return e.apply(t,arguments)};return n}},S=function(){};D(S,p.Mixin),D(S,m.Mixin),D(S,g.Mixin),D(S,N);var _={LifeCycle:T,Base:S,createClass:function(e){var t=function(){};t.prototype=new S,t.prototype.constructor=t;var n=function(){var e=new t;return e.construct.apply(e,arguments),e};n.componentConstructor=t,t.ConvenienceConstructor=n,n.originalSpec=e,i(n,e),E(t.prototype.render),n.type=t,t.prototype.type=t;for(var o in I)t.prototype[o]||(t.prototype[o]=null);return n},isValidClass:l};t.exports=_},{"./ReactComponent":26,"./ReactContext":30,"./ReactCurrentOwner":31,"./ReactErrorUtils":45,"./ReactOwner":57,"./ReactPerf":58,"./ReactPropTransferer":59,"./ReactPropTypeLocationNames":60,"./ReactPropTypeLocations":61,"./ReactUpdates":68,"./invariant":106,"./keyMirror":112,"./merge":115,"./mixInto":118,"./objMap":119,"./shouldUpdateReactComponent":123}],30:[function(e,t){"use strict";var n=e("./merge"),o={current:{},withContext:function(e,t){var r,i=o.current;o.current=n(i,e);try{r=t()}finally{o.current=i}return r}};t.exports=o},{"./merge":115}],31:[function(e,t){"use strict";var n={current:null};t.exports=n},{}],32:[function(e,t){"use strict";function n(e,t){var n=function(){};n.prototype=new o(e,t),n.prototype.constructor=n,n.displayName=e;var r=function(){var e=new n;return e.construct.apply(e,arguments),e};return r.type=n,n.prototype.type=n,n.ConvenienceConstructor=r,r.componentConstructor=n,r}var o=e("./ReactDOMComponent"),r=e("./mergeInto"),i=e("./objMapKeyVal"),a=i({a:!1,abbr:!1,address:!1,area:!1,article:!1,aside:!1,audio:!1,b:!1,base:!1,bdi:!1,bdo:!1,big:!1,blockquote:!1,body:!1,br:!0,button:!1,canvas:!1,caption:!1,cite:!1,code:!1,col:!0,colgroup:!1,data:!1,datalist:!1,dd:!1,del:!1,details:!1,dfn:!1,div:!1,dl:!1,dt:!1,em:!1,embed:!0,fieldset:!1,figcaption:!1,figure:!1,footer:!1,form:!1,h1:!1,h2:!1,h3:!1,h4:!1,h5:!1,h6:!1,head:!1,header:!1,hr:!0,html:!1,i:!1,iframe:!1,img:!0,input:!0,ins:!1,kbd:!1,keygen:!0,label:!1,legend:!1,li:!1,link:!1,main:!1,map:!1,mark:!1,menu:!1,menuitem:!1,meta:!0,meter:!1,nav:!1,noscript:!1,object:!1,ol:!1,optgroup:!1,option:!1,output:!1,p:!1,param:!0,pre:!1,progress:!1,q:!1,rp:!1,rt:!1,ruby:!1,s:!1,samp:!1,script:!1,section:!1,select:!1,small:!1,source:!1,span:!1,strong:!1,style:!1,sub:!1,summary:!1,sup:!1,table:!1,tbody:!1,td:!1,textarea:!1,tfoot:!1,th:!1,thead:!1,time:!1,title:!1,tr:!1,track:!0,u:!1,ul:!1,"var":!1,video:!1,wbr:!1,circle:!1,defs:!1,g:!1,line:!1,linearGradient:!1,path:!1,polygon:!1,polyline:!1,radialGradient:!1,rect:!1,stop:!1,svg:!1,text:!1},n),s={injectComponentClasses:function(e){r(a,e)}};a.injection=s,t.exports=a},{"./ReactDOMComponent":34,"./mergeInto":117,"./objMapKeyVal":120}],33:[function(e,t){"use strict";var n=e("./AutoFocusMixin"),o=e("./ReactCompositeComponent"),r=e("./ReactDOM"),i=e("./keyMirror"),a=r.button,s=i({onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0}),u=o.createClass({displayName:"ReactDOMButton",mixins:[n],render:function(){var e={};for(var t in this.props)!this.props.hasOwnProperty(t)||this.props.disabled&&s[t]||(e[t]=this.props[t]);return a(e,this.props.children)}});t.exports=u},{"./AutoFocusMixin":1,"./ReactCompositeComponent":29,"./ReactDOM":32,"./keyMirror":112}],34:[function(e,t){"use strict";function n(e){e&&(h(null==e.children||null==e.dangerouslySetInnerHTML),h(null==e.style||"object"==typeof e.style))}function o(e,t,n,o){var r=l.findReactContainerForID(e);if(r){var i=r.nodeType===D?r.ownerDocument:r;C(t,i)}o.getPutListenerQueue().enqueuePutListener(e,t,n)}function r(e,t){this._tagOpen="<"+e,this._tagClose=t?"":"</"+e+">",this.tagName=e.toUpperCase()}var i=e("./CSSPropertyOperations"),a=e("./DOMProperty"),s=e("./DOMPropertyOperations"),u=e("./ReactComponent"),c=e("./ReactEventEmitter"),l=e("./ReactMount"),p=e("./ReactMultiChild"),d=e("./ReactPerf"),f=e("./escapeTextForBrowser"),h=e("./invariant"),m=e("./keyOf"),v=e("./merge"),g=e("./mixInto"),y=c.deleteListener,C=c.listenTo,E=c.registrationNameModules,M={string:!0,number:!0},R=m({style:null}),D=1;r.Mixin={mountComponent:d.measure("ReactDOMComponent","mountComponent",function(e,t,o){return u.Mixin.mountComponent.call(this,e,t,o),n(this.props),this._createOpenTagMarkupAndPutListeners(t)+this._createContentMarkup(t)+this._tagClose}),_createOpenTagMarkupAndPutListeners:function(e){var t=this.props,n=this._tagOpen;for(var r in t)if(t.hasOwnProperty(r)){var a=t[r];if(null!=a)if(E[r])o(this._rootNodeID,r,a,e);else{r===R&&(a&&(a=t.style=v(t.style)),a=i.createMarkupForStyles(a));var u=s.createMarkupForProperty(r,a);u&&(n+=" "+u)}}var c=s.createMarkupForID(this._rootNodeID);return n+" "+c+">"},_createContentMarkup:function(e){var t=this.props.dangerouslySetInnerHTML;if(null!=t){if(null!=t.__html)return t.__html}else{var n=M[typeof this.props.children]?this.props.children:null,o=null!=n?null:this.props.children;if(null!=n)return f(n);if(null!=o){var r=this.mountChildren(o,e);return r.join("")}}return""},receiveComponent:function(e,t){n(e.props),u.Mixin.receiveComponent.call(this,e,t)},updateComponent:d.measure("ReactDOMComponent","updateComponent",function(e,t,n){u.Mixin.updateComponent.call(this,e,t,n),this._updateDOMProperties(t,e),this._updateDOMChildren(t,e)}),_updateDOMProperties:function(e,t){var n,r,i,s=this.props;for(n in e)if(!s.hasOwnProperty(n)&&e.hasOwnProperty(n))if(n===R){var c=e[n];for(r in c)c.hasOwnProperty(r)&&(i=i||{},i[r]="")}else E[n]?y(this._rootNodeID,n):(a.isStandardName[n]||a.isCustomAttribute(n))&&u.BackendIDOperations.deletePropertyByID(this._rootNodeID,n);for(n in s){var l=s[n],p=e[n];if(s.hasOwnProperty(n)&&l!==p)if(n===R)if(l&&(l=s.style=v(l)),p){for(r in p)p.hasOwnProperty(r)&&!l.hasOwnProperty(r)&&(i=i||{},i[r]="");for(r in l)l.hasOwnProperty(r)&&p[r]!==l[r]&&(i=i||{},i[r]=l[r])}else i=l;else E[n]?o(this._rootNodeID,n,l,t):(a.isStandardName[n]||a.isCustomAttribute(n))&&u.BackendIDOperations.updatePropertyByID(this._rootNodeID,n,l)}i&&u.BackendIDOperations.updateStylesByID(this._rootNodeID,i)},_updateDOMChildren:function(e,t){var n=this.props,o=M[typeof e.children]?e.children:null,r=M[typeof n.children]?n.children:null,i=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,a=n.dangerouslySetInnerHTML&&n.dangerouslySetInnerHTML.__html,s=null!=o?null:e.children,c=null!=r?null:n.children,l=null!=o||null!=i,p=null!=r||null!=a;null!=s&&null==c?this.updateChildren(null,t):l&&!p&&this.updateTextContent(""),null!=r?o!==r&&this.updateTextContent(""+r):null!=a?i!==a&&u.BackendIDOperations.updateInnerHTMLByID(this._rootNodeID,a):null!=c&&this.updateChildren(c,t)},unmountComponent:function(){this.unmountChildren(),c.deleteAllListeners(this._rootNodeID),u.Mixin.unmountComponent.call(this)}},g(r,u.Mixin),g(r,r.Mixin),g(r,p.Mixin),t.exports=r},{"./CSSPropertyOperations":3,"./DOMProperty":8,"./DOMPropertyOperations":9,"./ReactComponent":26,"./ReactEventEmitter":46,"./ReactMount":53,"./ReactMultiChild":55,"./ReactPerf":58,"./escapeTextForBrowser":94,"./invariant":106,"./keyOf":113,"./merge":115,"./mixInto":118}],35:[function(e,t){"use strict";var n=e("./ReactCompositeComponent"),o=e("./ReactDOM"),r=e("./ReactEventEmitter"),i=e("./EventConstants"),a=o.form,s=n.createClass({displayName:"ReactDOMForm",render:function(){return this.transferPropsTo(a(null,this.props.children))},componentDidMount:function(){r.trapBubbledEvent(i.topLevelTypes.topReset,"reset",this.getDOMNode()),r.trapBubbledEvent(i.topLevelTypes.topSubmit,"submit",this.getDOMNode())}});t.exports=s},{"./EventConstants":14,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":46}],36:[function(e,t){"use strict";var n,o=e("./CSSPropertyOperations"),r=e("./DOMChildrenOperations"),i=e("./DOMPropertyOperations"),a=e("./ReactMount"),s=e("./ReactPerf"),u=e("./invariant"),c={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},l={updatePropertyByID:s.measure("ReactDOMIDOperations","updatePropertyByID",function(e,t,n){var o=a.getNode(e);u(!c.hasOwnProperty(t)),null!=n?i.setValueForProperty(o,t,n):i.deleteValueForProperty(o,t)}),deletePropertyByID:s.measure("ReactDOMIDOperations","deletePropertyByID",function(e,t,n){var o=a.getNode(e);u(!c.hasOwnProperty(t)),i.deleteValueForProperty(o,t,n)}),updateStylesByID:s.measure("ReactDOMIDOperations","updateStylesByID",function(e,t){var n=a.getNode(e);o.setValueForStyles(n,t)}),updateInnerHTMLByID:s.measure("ReactDOMIDOperations","updateInnerHTMLByID",function(e,t){var o=a.getNode(e);if(void 0===n){var r=document.createElement("div");r.innerHTML=" ",n=""===r.innerHTML}n&&o.parentNode.replaceChild(o,o),n&&t.match(/^[ \r\n\t\f]/)?(o.innerHTML=""+t,o.firstChild.deleteData(0,1)):o.innerHTML=t}),updateTextContentByID:s.measure("ReactDOMIDOperations","updateTextContentByID",function(e,t){var n=a.getNode(e);r.updateTextContent(n,t)}),dangerouslyReplaceNodeWithMarkupByID:s.measure("ReactDOMIDOperations","dangerouslyReplaceNodeWithMarkupByID",function(e,t){var n=a.getNode(e);r.dangerouslyReplaceNodeWithMarkup(n,t)}),dangerouslyProcessChildrenUpdates:s.measure("ReactDOMIDOperations","dangerouslyProcessChildrenUpdates",function(e,t){for(var n=0;n<e.length;n++)e[n].parentNode=a.getNode(e[n].parentID);r.processUpdates(e,t)})};t.exports=l},{"./CSSPropertyOperations":3,"./DOMChildrenOperations":7,"./DOMPropertyOperations":9,"./ReactMount":53,"./ReactPerf":58,"./invariant":106}],37:[function(e,t){"use strict";var n=e("./ReactCompositeComponent"),o=e("./ReactDOM"),r=e("./ReactEventEmitter"),i=e("./EventConstants"),a=o.img,s=n.createClass({displayName:"ReactDOMImg",tagName:"IMG",render:function(){return a(this.props)},componentDidMount:function(){var e=this.getDOMNode();r.trapBubbledEvent(i.topLevelTypes.topLoad,"load",e),r.trapBubbledEvent(i.topLevelTypes.topError,"error",e)}});t.exports=s},{"./EventConstants":14,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactEventEmitter":46}],38:[function(e,t){"use strict";var n=e("./AutoFocusMixin"),o=e("./DOMPropertyOperations"),r=e("./LinkedValueUtils"),i=e("./ReactCompositeComponent"),a=e("./ReactDOM"),s=e("./ReactMount"),u=e("./invariant"),c=e("./merge"),l=a.input,p={},d=i.createClass({displayName:"ReactDOMInput",mixins:[n,r.Mixin],getInitialState:function(){var e=this.props.defaultValue;return{checked:this.props.defaultChecked||!1,value:null!=e?e:null}},shouldComponentUpdate:function(){return!this._isChanging},render:function(){var e=c(this.props);e.defaultChecked=null,e.defaultValue=null;var t=r.getValue(this);e.value=null!=t?t:this.state.value;var n=r.getChecked(this);return e.checked=null!=n?n:this.state.checked,e.onChange=this._handleChange,l(e,this.props.children)},componentDidMount:function(){var e=s.getID(this.getDOMNode());p[e]=this},componentWillUnmount:function(){var e=this.getDOMNode(),t=s.getID(e);delete p[t]},componentDidUpdate:function(){var e=this.getDOMNode();null!=this.props.checked&&o.setValueForProperty(e,"checked",this.props.checked||!1);var t=r.getValue(this);null!=t&&o.setValueForProperty(e,"value",""+t)},_handleChange:function(e){var t,n=r.getOnChange(this);n&&(this._isChanging=!0,t=n.call(this,e),this._isChanging=!1),this.setState({checked:e.target.checked,value:e.target.value});var o=this.props.name;if("radio"===this.props.type&&null!=o){for(var i=this.getDOMNode(),a=i;a.parentNode;)a=a.parentNode;for(var c=a.querySelectorAll("input[name="+JSON.stringify(""+o)+'][type="radio"]'),l=0,d=c.length;d>l;l++){var f=c[l];if(f!==i&&f.form===i.form){var h=s.getID(f);u(h);var m=p[h];u(m),m.setState({checked:!1})}}}return t}});t.exports=d},{"./AutoFocusMixin":1,"./DOMPropertyOperations":9,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./ReactMount":53,"./invariant":106,"./merge":115}],39:[function(e,t){"use strict";var n=e("./ReactCompositeComponent"),o=e("./ReactDOM"),r=o.option,i=n.createClass({displayName:"ReactDOMOption",componentWillMount:function(){null!=this.props.selected},render:function(){return r(this.props,this.props.children)}});t.exports=i},{"./ReactCompositeComponent":29,"./ReactDOM":32}],40:[function(e,t){"use strict";function n(e,t){null!=e[t]&&u(e.multiple?Array.isArray(e[t]):!Array.isArray(e[t]))}function o(e,t){var n,o,r,i=e.props.multiple,a=null!=t?t:e.state.value,s=e.getDOMNode().options;if(i)for(n={},o=0,r=a.length;r>o;++o)n[""+a[o]]=!0;else n=""+a;for(o=0,r=s.length;r>o;o++){var u=i?n.hasOwnProperty(s[o].value):s[o].value===n;u!==s[o].selected&&(s[o].selected=u)}}var r=e("./AutoFocusMixin"),i=e("./LinkedValueUtils"),a=e("./ReactCompositeComponent"),s=e("./ReactDOM"),u=e("./invariant"),c=e("./merge"),l=s.select,p=a.createClass({displayName:"ReactDOMSelect",mixins:[r,i.Mixin],propTypes:{defaultValue:n,value:n},getInitialState:function(){return{value:this.props.defaultValue||(this.props.multiple?[]:"")}},componentWillReceiveProps:function(e){!this.props.multiple&&e.multiple?this.setState({value:[this.state.value]}):this.props.multiple&&!e.multiple&&this.setState({value:this.state.value[0]})},shouldComponentUpdate:function(){return!this._isChanging},render:function(){var e=c(this.props);return e.onChange=this._handleChange,e.value=null,l(e,this.props.children)},componentDidMount:function(){o(this,i.getValue(this))},componentDidUpdate:function(){var e=i.getValue(this);null!=e&&o(this,e)},_handleChange:function(e){var t,n=i.getOnChange(this);n&&(this._isChanging=!0,t=n.call(this,e),this._isChanging=!1);var o;if(this.props.multiple){o=[];for(var r=e.target.options,a=0,s=r.length;s>a;a++)r[a].selected&&o.push(r[a].value)}else o=e.target.value;return this.setState({value:o}),t}});t.exports=p},{"./AutoFocusMixin":1,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./invariant":106,"./merge":115}],41:[function(e,t){"use strict";function n(e){var t=document.selection,n=t.createRange(),o=n.text.length,r=n.duplicate();r.moveToElementText(e),r.setEndPoint("EndToStart",n);var i=r.text.length,a=i+o;return{start:i,end:a}}function o(e){var t=window.getSelection();if(0===t.rangeCount)return null;var n=t.anchorNode,o=t.anchorOffset,r=t.focusNode,i=t.focusOffset,a=t.getRangeAt(0),s=a.toString().length,u=a.cloneRange();u.selectNodeContents(e),u.setEnd(a.startContainer,a.startOffset);var c=u.toString().length,l=c+s,p=document.createRange();p.setStart(n,o),p.setEnd(r,i);var d=p.collapsed;return p.detach(),{start:d?l:c,end:d?c:l}}function r(e,t){var n,o,r=document.selection.createRange().duplicate();"undefined"==typeof t.end?(n=t.start,o=n):t.start>t.end?(n=t.end,o=t.start):(n=t.start,o=t.end),r.moveToElementText(e),r.moveStart("character",n),r.setEndPoint("EndToStart",r),r.moveEnd("character",o-n),r.select()}function i(e,t){var n=window.getSelection(),o=e[s()].length,r=Math.min(t.start,o),i="undefined"==typeof t.end?r:Math.min(t.end,o);if(!n.extend&&r>i){var u=i;i=r,r=u}var c=a(e,r),l=a(e,i);if(c&&l){var p=document.createRange();p.setStart(c.node,c.offset),n.removeAllRanges(),r>i?(n.addRange(p),n.extend(l.node,l.offset)):(p.setEnd(l.node,l.offset),n.addRange(p)),p.detach()}}var a=e("./getNodeForCharacterOffset"),s=e("./getTextContentAccessor"),u={getOffsets:function(e){var t=document.selection?n:o;return t(e)},setOffsets:function(e,t){var n=document.selection?r:i;n(e,t)}};t.exports=u},{"./getNodeForCharacterOffset":101,"./getTextContentAccessor":103}],42:[function(e,t){"use strict";var n=e("./AutoFocusMixin"),o=e("./DOMPropertyOperations"),r=e("./LinkedValueUtils"),i=e("./ReactCompositeComponent"),a=e("./ReactDOM"),s=e("./invariant"),u=e("./merge"),c=a.textarea,l=i.createClass({displayName:"ReactDOMTextarea",mixins:[n,r.Mixin],getInitialState:function(){var e=this.props.defaultValue,t=this.props.children;null!=t&&(s(null==e),Array.isArray(t)&&(s(t.length<=1),t=t[0]),e=""+t),null==e&&(e="");var n=r.getValue(this);return{initialValue:""+(null!=n?n:e),value:e}},shouldComponentUpdate:function(){return!this._isChanging},render:function(){var e=u(this.props),t=r.getValue(this);return s(null==e.dangerouslySetInnerHTML),e.defaultValue=null,e.value=null!=t?t:this.state.value,e.onChange=this._handleChange,c(e,this.state.initialValue)},componentDidUpdate:function(){var e=r.getValue(this);if(null!=e){var t=this.getDOMNode();o.setValueForProperty(t,"value",""+e)}},_handleChange:function(e){var t,n=r.getOnChange(this);return n&&(this._isChanging=!0,t=n.call(this,e),this._isChanging=!1),this.setState({value:e.target.value}),t}});t.exports=l},{"./AutoFocusMixin":1,"./DOMPropertyOperations":9,"./LinkedValueUtils":21,"./ReactCompositeComponent":29,"./ReactDOM":32,"./invariant":106,"./merge":115}],43:[function(e,t){"use strict";function n(){this.reinitializeTransaction()}var o=e("./ReactUpdates"),r=e("./Transaction"),i=e("./emptyFunction"),a=e("./mixInto"),s={initialize:i,close:function(){p.isBatchingUpdates=!1}},u={initialize:i,close:o.flushBatchedUpdates.bind(o)},c=[u,s];a(n,r.Mixin),a(n,{getTransactionWrappers:function(){return c}});var l=new n,p={isBatchingUpdates:!1,batchedUpdates:function(e,t){var n=p.isBatchingUpdates;p.isBatchingUpdates=!0,n?e(t):l.perform(e,null,t)}};t.exports=p},{"./ReactUpdates":68,"./Transaction":82,"./emptyFunction":93,"./mixInto":118}],44:[function(e,t){"use strict";function n(){o.EventEmitter.injectTopLevelCallbackCreator(d),o.EventPluginHub.injectEventPluginOrder(c),o.EventPluginHub.injectInstanceHandle(M),o.EventPluginHub.injectMount(R),o.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:b,EnterLeaveEventPlugin:l,ChangeEventPlugin:a,CompositionEventPlugin:u,MobileSafariClickEventPlugin:p,SelectEventPlugin:D}),o.DOM.injectComponentClasses({button:h,form:m,img:v,input:g,option:y,select:C,textarea:E,html:I(f.html),head:I(f.head),title:I(f.title),body:I(f.body)}),o.DOMProperty.injectDOMPropertyConfig(i),o.Updates.injectBatchingStrategy(P),o.RootIndex.injectCreateReactRootIndex(r.canUseDOM?s.createReactRootIndex:x.createReactRootIndex)}var o=e("./ReactInjection"),r=e("./ExecutionEnvironment"),i=e("./DefaultDOMPropertyConfig"),a=e("./ChangeEventPlugin"),s=e("./ClientReactRootIndex"),u=e("./CompositionEventPlugin"),c=e("./DefaultEventPluginOrder"),l=e("./EnterLeaveEventPlugin"),p=e("./MobileSafariClickEventPlugin"),d=e("./ReactEventTopLevelCallback"),f=e("./ReactDOM"),h=e("./ReactDOMButton"),m=e("./ReactDOMForm"),v=e("./ReactDOMImg"),g=e("./ReactDOMInput"),y=e("./ReactDOMOption"),C=e("./ReactDOMSelect"),E=e("./ReactDOMTextarea"),M=e("./ReactInstanceHandles"),R=e("./ReactMount"),D=e("./SelectEventPlugin"),x=e("./ServerReactRootIndex"),b=e("./SimpleEventPlugin"),P=e("./ReactDefaultBatchingStrategy"),I=e("./createFullPageComponent");t.exports={inject:n}},{"./ChangeEventPlugin":4,"./ClientReactRootIndex":5,"./CompositionEventPlugin":6,"./DefaultDOMPropertyConfig":11,"./DefaultEventPluginOrder":12,"./EnterLeaveEventPlugin":13,"./ExecutionEnvironment":20,"./MobileSafariClickEventPlugin":22,"./ReactDOM":32,"./ReactDOMButton":33,"./ReactDOMForm":35,"./ReactDOMImg":37,"./ReactDOMInput":38,"./ReactDOMOption":39,"./ReactDOMSelect":40,"./ReactDOMTextarea":42,"./ReactDefaultBatchingStrategy":43,"./ReactEventTopLevelCallback":48,"./ReactInjection":49,"./ReactInstanceHandles":51,"./ReactMount":53,"./SelectEventPlugin":69,"./ServerReactRootIndex":70,"./SimpleEventPlugin":71,"./createFullPageComponent":89}],45:[function(e,t){"use strict";var n={guard:function(e){return e}};t.exports=n},{}],46:[function(e,t){"use strict";function n(e){return null==e[C]&&(e[C]=g++,m[e[C]]={}),m[e[C]]}function o(e,t,n){a.listen(n,t,E.TopLevelCallbackCreator.createTopLevelCallback(e))}function r(e,t,n){a.capture(n,t,E.TopLevelCallbackCreator.createTopLevelCallback(e))}var i=e("./EventConstants"),a=e("./EventListener"),s=e("./EventPluginHub"),u=e("./EventPluginRegistry"),c=e("./ExecutionEnvironment"),l=e("./ReactEventEmitterMixin"),p=e("./ViewportMetrics"),d=e("./invariant"),f=e("./isEventSupported"),h=e("./merge"),m={},v=!1,g=0,y={topBlur:"blur",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topWheel:"wheel"},C="_reactListenersID"+String(Math.random()).slice(2),E=h(l,{TopLevelCallbackCreator:null,injection:{injectTopLevelCallbackCreator:function(e){E.TopLevelCallbackCreator=e}},setEnabled:function(e){d(c.canUseDOM),E.TopLevelCallbackCreator&&E.TopLevelCallbackCreator.setEnabled(e)},isEnabled:function(){return!(!E.TopLevelCallbackCreator||!E.TopLevelCallbackCreator.isEnabled())},listenTo:function(e,t){for(var a=t,s=n(a),c=u.registrationNameDependencies[e],l=i.topLevelTypes,p=0,d=c.length;d>p;p++){var h=c[p];if(!s[h]){var m=l[h];m===l.topWheel?f("wheel")?o(l.topWheel,"wheel",a):f("mousewheel")?o(l.topWheel,"mousewheel",a):o(l.topWheel,"DOMMouseScroll",a):m===l.topScroll?f("scroll",!0)?r(l.topScroll,"scroll",a):o(l.topScroll,"scroll",window):m===l.topFocus||m===l.topBlur?(f("focus",!0)?(r(l.topFocus,"focus",a),r(l.topBlur,"blur",a)):f("focusin")&&(o(l.topFocus,"focusin",a),o(l.topBlur,"focusout",a)),s[l.topBlur]=!0,s[l.topFocus]=!0):y[h]&&o(m,y[h],a),s[h]=!0}}},ensureScrollValueMonitoring:function(){if(!v){var e=p.refreshScrollValues;a.listen(window,"scroll",e),a.listen(window,"resize",e),v=!0}},eventNameDispatchConfigs:s.eventNameDispatchConfigs,registrationNameModules:s.registrationNameModules,putListener:s.putListener,getListener:s.getListener,deleteListener:s.deleteListener,deleteAllListeners:s.deleteAllListeners,trapBubbledEvent:o,trapCapturedEvent:r});t.exports=E},{"./EventConstants":14,"./EventListener":15,"./EventPluginHub":16,"./EventPluginRegistry":17,"./ExecutionEnvironment":20,"./ReactEventEmitterMixin":47,"./ViewportMetrics":83,"./invariant":106,"./isEventSupported":107,"./merge":115}],47:[function(e,t){"use strict";function n(e){o.enqueueEvents(e),o.processEventQueue()}var o=e("./EventPluginHub"),r=e("./ReactUpdates"),i={handleTopLevel:function(e,t,i,a){var s=o.extractEvents(e,t,i,a);r.batchedUpdates(n,s)}};t.exports=i},{"./EventPluginHub":16,"./ReactUpdates":68}],48:[function(e,t){"use strict";function n(e){var t=u.getID(e),n=s.getReactRootIDFromNodeID(t),o=u.findReactContainerForID(n),r=u.getFirstReactDOM(o);return r}function o(e,t,o){for(var r=u.getFirstReactDOM(c(t))||window,i=r;i;)o.ancestors.push(i),i=n(i);for(var s=0,l=o.ancestors.length;l>s;s++){r=o.ancestors[s];var p=u.getID(r)||"";a.handleTopLevel(e,r,p,t)}}function r(){this.ancestors=[]}var i=e("./PooledClass"),a=e("./ReactEventEmitter"),s=e("./ReactInstanceHandles"),u=e("./ReactMount"),c=e("./getEventTarget"),l=e("./mixInto"),p=!0;l(r,{destructor:function(){this.ancestors.length=0}}),i.addPoolingTo(r);var d={setEnabled:function(e){p=!!e},isEnabled:function(){return p},createTopLevelCallback:function(e){return function(t){if(p){var n=r.getPooled();try{o(e,t,n)}finally{r.release(n)}}}}};t.exports=d},{"./PooledClass":23,"./ReactEventEmitter":46,"./ReactInstanceHandles":51,"./ReactMount":53,"./getEventTarget":99,"./mixInto":118}],49:[function(e,t){"use strict";var n=e("./DOMProperty"),o=e("./EventPluginHub"),r=e("./ReactDOM"),i=e("./ReactEventEmitter"),a=e("./ReactPerf"),s=e("./ReactRootIndex"),u=e("./ReactUpdates"),c={DOMProperty:n.injection,EventPluginHub:o.injection,DOM:r.injection,EventEmitter:i.injection,Perf:a.injection,RootIndex:s.injection,Updates:u.injection};t.exports=c
},{"./DOMProperty":8,"./EventPluginHub":16,"./ReactDOM":32,"./ReactEventEmitter":46,"./ReactPerf":58,"./ReactRootIndex":65,"./ReactUpdates":68}],50:[function(e,t){"use strict";function n(e){return r(document.documentElement,e)}var o=e("./ReactDOMSelection"),r=e("./containsNode"),i=e("./getActiveElement"),a={hasSelectionCapabilities:function(e){return e&&("INPUT"===e.nodeName&&"text"===e.type||"TEXTAREA"===e.nodeName||"true"===e.contentEditable)},getSelectionInformation:function(){var e=i();return{focusedElem:e,selectionRange:a.hasSelectionCapabilities(e)?a.getSelection(e):null}},restoreSelection:function(e){var t=i(),o=e.focusedElem,r=e.selectionRange;t!==o&&n(o)&&(a.hasSelectionCapabilities(o)&&a.setSelection(o,r),o.focus())},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&"INPUT"===e.nodeName){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=o.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,r=t.end;if("undefined"==typeof r&&(r=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length);else if(document.selection&&"INPUT"===e.nodeName){var i=e.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",r-n),i.select()}else o.setOffsets(e,t)}};t.exports=a},{"./ReactDOMSelection":41,"./containsNode":86,"./getActiveElement":97}],51:[function(e,t){"use strict";function n(e){return d+e.toString(36)}function o(e,t){return e.charAt(t)===d||t===e.length}function r(e){return""===e||e.charAt(0)===d&&e.charAt(e.length-1)!==d}function i(e,t){return 0===t.indexOf(e)&&o(t,e.length)}function a(e){return e?e.substr(0,e.lastIndexOf(d)):""}function s(e,t){if(p(r(e)&&r(t)),p(i(e,t)),e===t)return e;for(var n=e.length+f,a=n;a<t.length&&!o(t,a);a++);return t.substr(0,a)}function u(e,t){var n=Math.min(e.length,t.length);if(0===n)return"";for(var i=0,a=0;n>=a;a++)if(o(e,a)&&o(t,a))i=a;else if(e.charAt(a)!==t.charAt(a))break;var s=e.substr(0,i);return p(r(s)),s}function c(e,t,n,o,r,u){e=e||"",t=t||"",p(e!==t);var c=i(t,e);p(c||i(e,t));for(var l=0,d=c?a:s,f=e;;f=d(f,t)){var m;if(r&&f===e||u&&f===t||(m=n(f,c,o)),m===!1||f===t)break;p(l++<h)}}var l=e("./ReactRootIndex"),p=e("./invariant"),d=".",f=d.length,h=100,m={createReactRootID:function(){return n(l.createReactRootIndex())},createReactID:function(e,t){return e+t},getReactRootIDFromNodeID:function(e){if(e&&e.charAt(0)===d&&e.length>1){var t=e.indexOf(d,1);return t>-1?e.substr(0,t):e}return null},traverseEnterLeave:function(e,t,n,o,r){var i=u(e,t);i!==e&&c(e,i,n,o,!1,!0),i!==t&&c(i,t,n,r,!0,!1)},traverseTwoPhase:function(e,t,n){e&&(c("",e,t,n,!0,!1),c(e,"",t,n,!1,!0))},traverseAncestors:function(e,t,n){c("",e,t,n,!0,!1)},_getFirstCommonAncestorID:u,_getNextDescendantID:s,isAncestorIDOf:i,SEPARATOR:d};t.exports=m},{"./ReactRootIndex":65,"./invariant":106}],52:[function(e,t){"use strict";var n=e("./adler32"),o={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=n(e);return e.replace(">"," "+o.CHECKSUM_ATTR_NAME+'="'+t+'">')},canReuseMarkup:function(e,t){var r=t.getAttribute(o.CHECKSUM_ATTR_NAME);r=r&&parseInt(r,10);var i=n(e);return i===r}};t.exports=o},{"./adler32":85}],53:[function(e,t){"use strict";function n(e){var t=v(e);return t&&O.getID(t)}function o(e){var t=r(e);if(t)if(M.hasOwnProperty(t)){var n=M[t];n!==e&&(g(!s(n,t)),M[t]=e)}else M[t]=e;return t}function r(e){return e&&e.getAttribute&&e.getAttribute(E)||""}function i(e,t){var n=r(e);n!==t&&delete M[n],e.setAttribute(E,t),M[t]=e}function a(e){return M.hasOwnProperty(e)&&s(M[e],e)||(M[e]=O.findReactNodeByID(e)),M[e]}function s(e,t){if(e){g(r(e)===t);var n=O.findReactContainerForID(t);if(n&&m(n,e))return!0}return!1}function u(e){delete M[e]}function c(e){var t=M[e];return t&&s(t,e)?void(I=t):!1}function l(e){I=null,f.traverseAncestors(e,c);var t=I;return I=null,t}var p=e("./DOMProperty"),d=e("./ReactEventEmitter"),f=e("./ReactInstanceHandles"),h=e("./ReactPerf"),m=e("./containsNode"),v=e("./getReactRootElementInContainer"),g=e("./invariant"),y=e("./shouldUpdateReactComponent"),C=f.SEPARATOR,E=p.ID_ATTRIBUTE_NAME,M={},R=1,D=9,x={},b={},P=[],I=null,O={totalInstantiationTime:0,totalInjectionTime:0,useTouchEvents:!1,_instancesByReactRootID:x,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,o){var r=t.props;return O.scrollMonitor(n,function(){e.replaceProps(r,o)}),e},_registerComponent:function(e,t){g(t&&(t.nodeType===R||t.nodeType===D)),d.ensureScrollValueMonitoring();var n=O.registerContainer(t);return x[n]=e,n},_renderNewRootComponent:h.measure("ReactMount","_renderNewRootComponent",function(e,t,n){var o=O._registerComponent(e,t);return e.mountComponentIntoNode(o,t,n),e}),renderComponent:function(e,t,o){var r=x[n(t)];if(r){if(y(r,e))return O._updateRootComponent(r,e,t,o);O.unmountComponentAtNode(t)}var i=v(t),a=i&&O.isRenderedByReact(i),s=a&&!r,u=O._renderNewRootComponent(e,t,s);return o&&o.call(u),u},constructAndRenderComponent:function(e,t,n){return O.renderComponent(e(t),n)},constructAndRenderComponentByID:function(e,t,n){var o=document.getElementById(n);return g(o),O.constructAndRenderComponent(e,t,o)},registerContainer:function(e){var t=n(e);return t&&(t=f.getReactRootIDFromNodeID(t)),t||(t=f.createReactRootID()),b[t]=e,t},unmountComponentAtNode:function(e){var t=n(e),o=x[t];return o?(O.unmountComponentFromNode(o,e),delete x[t],delete b[t],!0):!1},unmountComponentFromNode:function(e,t){for(e.unmountComponent(),t.nodeType===D&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)},findReactContainerForID:function(e){var t=f.getReactRootIDFromNodeID(e),n=b[t];return n},findReactNodeByID:function(e){var t=O.findReactContainerForID(e);return O.findComponentRoot(t,e)},isRenderedByReact:function(e){if(1!==e.nodeType)return!1;var t=O.getID(e);return t?t.charAt(0)===C:!1},getFirstReactDOM:function(e){for(var t=e;t&&t.parentNode!==t;){if(O.isRenderedByReact(t))return t;t=t.parentNode}return null},findComponentRoot:function(e,t){var n=P,o=0,r=l(t)||e;for(n[0]=r.firstChild,n.length=1;o<n.length;){for(var i,a=n[o++];a;){var s=O.getID(a);s?t===s?i=a:f.isAncestorIDOf(s,t)&&(n.length=o=0,n.push(a.firstChild)):n.push(a.firstChild),a=a.nextSibling}if(i)return n.length=0,i}n.length=0,g(!1)},getReactRootID:n,getID:o,setID:i,getNode:a,purgeID:u};t.exports=O},{"./DOMProperty":8,"./ReactEventEmitter":46,"./ReactInstanceHandles":51,"./ReactPerf":58,"./containsNode":86,"./getReactRootElementInContainer":102,"./invariant":106,"./shouldUpdateReactComponent":123}],54:[function(e,t){"use strict";function n(e){this._queue=e||null}var o=e("./PooledClass"),r=e("./mixInto");r(n,{enqueue:function(e,t){this._queue=this._queue||[],this._queue.push({component:e,callback:t})},notifyAll:function(){var e=this._queue;if(e){this._queue=null;for(var t=0,n=e.length;n>t;t++){var o=e[t].component,r=e[t].callback;r.call(o)}e.length=0}},reset:function(){this._queue=null},destructor:function(){this.reset()}}),o.addPoolingTo(n),t.exports=n},{"./PooledClass":23,"./mixInto":118}],55:[function(e,t){"use strict";function n(e,t,n){f.push({parentID:e,parentNode:null,type:c.INSERT_MARKUP,markupIndex:h.push(t)-1,textContent:null,fromIndex:null,toIndex:n})}function o(e,t,n){f.push({parentID:e,parentNode:null,type:c.MOVE_EXISTING,markupIndex:null,textContent:null,fromIndex:t,toIndex:n})}function r(e,t){f.push({parentID:e,parentNode:null,type:c.REMOVE_NODE,markupIndex:null,textContent:null,fromIndex:t,toIndex:null})}function i(e,t){f.push({parentID:e,parentNode:null,type:c.TEXT_CONTENT,markupIndex:null,textContent:t,fromIndex:null,toIndex:null})}function a(){f.length&&(u.BackendIDOperations.dangerouslyProcessChildrenUpdates(f,h),s())}function s(){f.length=0,h.length=0}var u=e("./ReactComponent"),c=e("./ReactMultiChildUpdateTypes"),l=e("./flattenChildren"),p=e("./shouldUpdateReactComponent"),d=0,f=[],h=[],m={Mixin:{mountChildren:function(e,t){var n=l(e),o=[],r=0;this._renderedChildren=n;for(var i in n){var a=n[i];if(n.hasOwnProperty(i)){var s=this._rootNodeID+i,u=a.mountComponent(s,t,this._mountDepth+1);a._mountIndex=r,o.push(u),r++}}return o},updateTextContent:function(e){d++;var t=!0;try{var n=this._renderedChildren;for(var o in n)n.hasOwnProperty(o)&&this._unmountChildByName(n[o],o);this.setTextContent(e),t=!1}finally{d--,d||(t?s():a())}},updateChildren:function(e,t){d++;var n=!0;try{this._updateChildren(e,t),n=!1}finally{d--,d||(n?s():a())}},_updateChildren:function(e,t){var n=l(e),o=this._renderedChildren;if(n||o){var r,i=0,a=0;for(r in n)if(n.hasOwnProperty(r)){var s=o&&o[r],u=n[r];p(s,u)?(this.moveChild(s,a,i),i=Math.max(s._mountIndex,i),s.receiveComponent(u,t),s._mountIndex=a):(s&&(i=Math.max(s._mountIndex,i),this._unmountChildByName(s,r)),this._mountChildByNameAtIndex(u,r,a,t)),a++}for(r in o)!o.hasOwnProperty(r)||n&&n[r]||this._unmountChildByName(o[r],r)}},unmountChildren:function(){var e=this._renderedChildren;for(var t in e){var n=e[t];n.unmountComponent&&n.unmountComponent()}this._renderedChildren=null},moveChild:function(e,t,n){e._mountIndex<n&&o(this._rootNodeID,e._mountIndex,t)},createChild:function(e,t){n(this._rootNodeID,t,e._mountIndex)},removeChild:function(e){r(this._rootNodeID,e._mountIndex)},setTextContent:function(e){i(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,t,n,o){var r=this._rootNodeID+t,i=e.mountComponent(r,o,this._mountDepth+1);e._mountIndex=n,this.createChild(e,i),this._renderedChildren=this._renderedChildren||{},this._renderedChildren[t]=e},_unmountChildByName:function(e,t){u.isValidComponent(e)&&(this.removeChild(e),e._mountIndex=null,e.unmountComponent(),delete this._renderedChildren[t])}}};t.exports=m},{"./ReactComponent":26,"./ReactMultiChildUpdateTypes":56,"./flattenChildren":95,"./shouldUpdateReactComponent":123}],56:[function(e,t){"use strict";var n=e("./keyMirror"),o=n({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,TEXT_CONTENT:null});t.exports=o},{"./keyMirror":112}],57:[function(e,t){"use strict";var n=e("./invariant"),o={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,r){n(o.isValidOwner(r)),r.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,r){n(o.isValidOwner(r)),r.refs[t]===e&&r.detachRef(t)},Mixin:{attachRef:function(e,t){n(t.isOwnedBy(this));var o=this.refs||(this.refs={});o[e]=t},detachRef:function(e){delete this.refs[e]}}};t.exports=o},{"./invariant":106}],58:[function(e,t){"use strict";function n(e,t,n){return n}var o={enableMeasure:!1,storedMeasure:n,measure:function(e,t,n){return n},injection:{injectMeasure:function(e){o.storedMeasure=e}}};t.exports=o},{}],59:[function(e,t){"use strict";function n(e){return function(t,n,o){t[n]=t.hasOwnProperty(n)?e(t[n],o):o}}var o=e("./emptyFunction"),r=e("./invariant"),i=e("./joinClasses"),a=e("./merge"),s={children:o,className:n(i),key:o,ref:o,style:n(a)},u={TransferStrategies:s,mergeProps:function(e,t){var n=a(e);for(var o in t)if(t.hasOwnProperty(o)){var r=s[o];r?r(n,o,t[o]):n.hasOwnProperty(o)||(n[o]=t[o])}return n},Mixin:{transferPropsTo:function(e){return r(e._owner===this),e.props=u.mergeProps(e.props,this.props),e}}};t.exports=u},{"./emptyFunction":93,"./invariant":106,"./joinClasses":111,"./merge":115}],60:[function(e,t){"use strict";var n={};t.exports=n},{}],61:[function(e,t){"use strict";var n=e("./keyMirror"),o=n({prop:null,context:null,childContext:null});t.exports=o},{"./keyMirror":112}],62:[function(e,t){"use strict";function n(e){switch(typeof e){case"number":case"string":return!0;case"object":if(Array.isArray(e))return e.every(n);if(h.isValidComponent(e))return!0;for(var t in e)if(!n(e[t]))return!1;return!0;default:return!1}}function o(e){var t=typeof e;return"object"===t&&Array.isArray(e)?"array":t}function r(){function e(){return!0}return f(e)}function i(e){function t(t,n){var r=o(n),i=r===e;return i}return f(t)}function a(e){function t(e,t){var o=n[t];return o}var n=m(e);return f(t)}function s(e){function t(t,n,r,i,a){var s=o(n),u="object"===s;if(u)for(var c in e){var l=e[c];if(l&&!l(n,c,i,a))return!1}return u}return f(t)}function u(e){function t(t,n){var o=n instanceof e;return o}return f(t)}function c(e){function t(t,n,o,r,i){var a=Array.isArray(n);if(a)for(var s=0;s<n.length;s++)if(!e(n,s,r,i))return!1;return a}return f(t)}function l(){function e(e,t){var o=n(t);return o}return f(e)}function p(){function e(e,t){var n=h.isValidComponent(t);return n}return f(e)}function d(e){return function(t,n,o,r){for(var i=!1,a=0;a<e.length;a++){var s=e[a];if("function"==typeof s.weak&&(s=s.weak),s(t,n,o,r)){i=!0;break}}return i}}function f(e){function t(t,n,o,r,i,a){var s=o[r];if(null!=s)return e(n,s,r,i||g,a);var u=!t;return u}var n=t.bind(null,!1,!0);return n.weak=t.bind(null,!1,!1),n.isRequired=t.bind(null,!0,!0),n.weak.isRequired=t.bind(null,!0,!1),n.isRequired.weak=n.weak.isRequired,n}var h=e("./ReactComponent"),m=(e("./ReactPropTypeLocationNames"),e("./warning"),e("./createObjectFrom")),v={array:i("array"),bool:i("boolean"),func:i("function"),number:i("number"),object:i("object"),string:i("string"),shape:s,oneOf:a,oneOfType:d,arrayOf:c,instanceOf:u,renderable:l(),component:p(),any:r()},g="<<anonymous>>";t.exports=v},{"./ReactComponent":26,"./ReactPropTypeLocationNames":60,"./createObjectFrom":91,"./warning":126}],63:[function(e,t){"use strict";function n(){this.listenersToPut=[]}var o=e("./PooledClass"),r=e("./ReactEventEmitter"),i=e("./mixInto");i(n,{enqueuePutListener:function(e,t,n){this.listenersToPut.push({rootNodeID:e,propKey:t,propValue:n})},putListeners:function(){for(var e=0;e<this.listenersToPut.length;e++){var t=this.listenersToPut[e];r.putListener(t.rootNodeID,t.propKey,t.propValue)}},reset:function(){this.listenersToPut.length=0},destructor:function(){this.reset()}}),o.addPoolingTo(n),t.exports=n},{"./PooledClass":23,"./ReactEventEmitter":46,"./mixInto":118}],64:[function(e,t){"use strict";function n(){this.reinitializeTransaction(),this.reactMountReady=s.getPooled(null),this.putListenerQueue=u.getPooled()}var o=e("./ExecutionEnvironment"),r=e("./PooledClass"),i=e("./ReactEventEmitter"),a=e("./ReactInputSelection"),s=e("./ReactMountReady"),u=e("./ReactPutListenerQueue"),c=e("./Transaction"),l=e("./mixInto"),p={initialize:a.getSelectionInformation,close:a.restoreSelection},d={initialize:function(){var e=i.isEnabled();return i.setEnabled(!1),e},close:function(e){i.setEnabled(e)}},f={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},h={initialize:function(){this.putListenerQueue.reset()},close:function(){this.putListenerQueue.putListeners()}},m=[h,p,d,f],v={getTransactionWrappers:function(){return o.canUseDOM?m:[]},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){s.release(this.reactMountReady),this.reactMountReady=null,u.release(this.putListenerQueue),this.putListenerQueue=null}};l(n,c.Mixin),l(n,v),r.addPoolingTo(n),t.exports=n},{"./ExecutionEnvironment":20,"./PooledClass":23,"./ReactEventEmitter":46,"./ReactInputSelection":50,"./ReactMountReady":54,"./ReactPutListenerQueue":63,"./Transaction":82,"./mixInto":118}],65:[function(e,t){"use strict";var n={injectCreateReactRootIndex:function(e){o.createReactRootIndex=e}},o={createReactRootIndex:null,injection:n};t.exports=o},{}],66:[function(e,t){"use strict";function n(e){s(o.isValidComponent(e)),s(!(2===arguments.length&&"function"==typeof arguments[1]));var t=r.createReactRootID(),n=a.getPooled();n.reinitializeTransaction();try{return n.perform(function(){var o=e.mountComponent(t,n,0);return i.addChecksumToMarkup(o)},null)}finally{a.release(n)}}var o=e("./ReactComponent"),r=e("./ReactInstanceHandles"),i=e("./ReactMarkupChecksum"),a=e("./ReactReconcileTransaction"),s=e("./invariant");t.exports={renderComponentToString:n}},{"./ReactComponent":26,"./ReactInstanceHandles":51,"./ReactMarkupChecksum":52,"./ReactReconcileTransaction":64,"./invariant":106}],67:[function(e,t){"use strict";var n=e("./DOMPropertyOperations"),o=e("./ReactComponent"),r=e("./escapeTextForBrowser"),i=e("./mixInto"),a=function(e){this.construct({text:e})};i(a,o.Mixin),i(a,{mountComponent:function(e,t,i){return o.Mixin.mountComponent.call(this,e,t,i),"<span "+n.createMarkupForID(e)+">"+r(this.props.text)+"</span>"},receiveComponent:function(e){var t=e.props;t.text!==this.props.text&&(this.props.text=t.text,o.BackendIDOperations.updateTextContentByID(this._rootNodeID,t.text))}}),a.type=a,a.prototype.type=a,t.exports=a},{"./DOMPropertyOperations":9,"./ReactComponent":26,"./escapeTextForBrowser":94,"./mixInto":118}],68:[function(e,t){"use strict";function n(){c(p)}function o(e,t){n(),p.batchedUpdates(e,t)}function r(e,t){return e._mountDepth-t._mountDepth}function i(){l.sort(r);for(var e=0;e<l.length;e++){var t=l[e];if(t.isMounted()){var n=t._pendingCallbacks;if(t._pendingCallbacks=null,t.performUpdateIfNecessary(),n)for(var o=0;o<n.length;o++)n[o].call(t)}}}function a(){l.length=0}function s(e,t){return c(!t||"function"==typeof t),n(),p.isBatchingUpdates?(l.push(e),void(t&&(e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t]))):(e.performUpdateIfNecessary(),void(t&&t.call(e)))}var u=e("./ReactPerf"),c=e("./invariant"),l=[],p=null,d=u.measure("ReactUpdates","flushBatchedUpdates",function(){try{i()}finally{a()}}),f={injectBatchingStrategy:function(e){c(e),c("function"==typeof e.batchedUpdates),c("boolean"==typeof e.isBatchingUpdates),p=e}},h={batchedUpdates:o,enqueueUpdate:s,flushBatchedUpdates:d,injection:f};t.exports=h},{"./ReactPerf":58,"./invariant":106}],69:[function(e,t){"use strict";function n(e){if("selectionStart"in e&&a.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(document.selection){var t=document.selection.createRange();return{parentElement:t.parentElement(),text:t.text,top:t.boundingTop,left:t.boundingLeft}}var n=window.getSelection();return{anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}}function o(e){if(!g&&null!=h&&h==u()){var t=n(h);if(!v||!p(v,t)){v=t;var o=s.getPooled(f.select,m,e);return o.type="select",o.target=h,i.accumulateTwoPhaseDispatches(o),o}}}var r=e("./EventConstants"),i=e("./EventPropagators"),a=e("./ReactInputSelection"),s=e("./SyntheticEvent"),u=e("./getActiveElement"),c=e("./isTextInputElement"),l=e("./keyOf"),p=e("./shallowEqual"),d=r.topLevelTypes,f={select:{phasedRegistrationNames:{bubbled:l({onSelect:null}),captured:l({onSelectCapture:null})},dependencies:[d.topBlur,d.topContextMenu,d.topFocus,d.topKeyDown,d.topMouseDown,d.topMouseUp,d.topSelectionChange]}},h=null,m=null,v=null,g=!1,y={eventTypes:f,extractEvents:function(e,t,n,r){switch(e){case d.topFocus:(c(t)||"true"===t.contentEditable)&&(h=t,m=n,v=null);break;case d.topBlur:h=null,m=null,v=null;break;case d.topMouseDown:g=!0;break;case d.topContextMenu:case d.topMouseUp:return g=!1,o(r);case d.topSelectionChange:case d.topKeyDown:case d.topKeyUp:return o(r)}}};t.exports=y},{"./EventConstants":14,"./EventPropagators":19,"./ReactInputSelection":50,"./SyntheticEvent":75,"./getActiveElement":97,"./isTextInputElement":109,"./keyOf":113,"./shallowEqual":122}],70:[function(e,t){"use strict";var n=Math.pow(2,53),o={createReactRootIndex:function(){return Math.ceil(Math.random()*n)}};t.exports=o},{}],71:[function(e,t){"use strict";var n=e("./EventConstants"),o=e("./EventPluginUtils"),r=e("./EventPropagators"),i=e("./SyntheticClipboardEvent"),a=e("./SyntheticEvent"),s=e("./SyntheticFocusEvent"),u=e("./SyntheticKeyboardEvent"),c=e("./SyntheticMouseEvent"),l=e("./SyntheticDragEvent"),p=e("./SyntheticTouchEvent"),d=e("./SyntheticUIEvent"),f=e("./SyntheticWheelEvent"),h=e("./invariant"),m=e("./keyOf"),v=n.topLevelTypes,g={blur:{phasedRegistrationNames:{bubbled:m({onBlur:!0}),captured:m({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:m({onClick:!0}),captured:m({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:m({onContextMenu:!0}),captured:m({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:m({onCopy:!0}),captured:m({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:m({onCut:!0}),captured:m({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:m({onDoubleClick:!0}),captured:m({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:m({onDrag:!0}),captured:m({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:m({onDragEnd:!0}),captured:m({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:m({onDragEnter:!0}),captured:m({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:m({onDragExit:!0}),captured:m({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:m({onDragLeave:!0}),captured:m({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:m({onDragOver:!0}),captured:m({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:m({onDragStart:!0}),captured:m({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:m({onDrop:!0}),captured:m({onDropCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:m({onFocus:!0}),captured:m({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:m({onInput:!0}),captured:m({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:m({onKeyDown:!0}),captured:m({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:m({onKeyPress:!0}),captured:m({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:m({onKeyUp:!0}),captured:m({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:m({onLoad:!0}),captured:m({onLoadCapture:!0})}},error:{phasedRegistrationNames:{bubbled:m({onError:!0}),captured:m({onErrorCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:m({onMouseDown:!0}),captured:m({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:m({onMouseMove:!0}),captured:m({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:m({onMouseOut:!0}),captured:m({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:m({onMouseOver:!0}),captured:m({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:m({onMouseUp:!0}),captured:m({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:m({onPaste:!0}),captured:m({onPasteCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:m({onReset:!0}),captured:m({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:m({onScroll:!0}),captured:m({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:m({onSubmit:!0}),captured:m({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:m({onTouchCancel:!0}),captured:m({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:m({onTouchEnd:!0}),captured:m({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:m({onTouchMove:!0}),captured:m({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:m({onTouchStart:!0}),captured:m({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:m({onWheel:!0}),captured:m({onWheelCapture:!0})}}},y={topBlur:g.blur,topClick:g.click,topContextMenu:g.contextMenu,topCopy:g.copy,topCut:g.cut,topDoubleClick:g.doubleClick,topDrag:g.drag,topDragEnd:g.dragEnd,topDragEnter:g.dragEnter,topDragExit:g.dragExit,topDragLeave:g.dragLeave,topDragOver:g.dragOver,topDragStart:g.dragStart,topDrop:g.drop,topError:g.error,topFocus:g.focus,topInput:g.input,topKeyDown:g.keyDown,topKeyPress:g.keyPress,topKeyUp:g.keyUp,topLoad:g.load,topMouseDown:g.mouseDown,topMouseMove:g.mouseMove,topMouseOut:g.mouseOut,topMouseOver:g.mouseOver,topMouseUp:g.mouseUp,topPaste:g.paste,topReset:g.reset,topScroll:g.scroll,topSubmit:g.submit,topTouchCancel:g.touchCancel,topTouchEnd:g.touchEnd,topTouchMove:g.touchMove,topTouchStart:g.touchStart,topWheel:g.wheel};for(var C in y)y[C].dependencies=[C];var E={eventTypes:g,executeDispatch:function(e,t,n){var r=o.executeDispatch(e,t,n);r===!1&&(e.stopPropagation(),e.preventDefault())},extractEvents:function(e,t,n,o){var m=y[e];if(!m)return null;var g;switch(e){case v.topInput:case v.topLoad:case v.topError:case v.topReset:case v.topSubmit:g=a;break;case v.topKeyDown:case v.topKeyPress:case v.topKeyUp:g=u;break;case v.topBlur:case v.topFocus:g=s;break;case v.topClick:if(2===o.button)return null;case v.topContextMenu:case v.topDoubleClick:case v.topMouseDown:case v.topMouseMove:case v.topMouseOut:case v.topMouseOver:case v.topMouseUp:g=c;break;case v.topDrag:case v.topDragEnd:case v.topDragEnter:case v.topDragExit:case v.topDragLeave:case v.topDragOver:case v.topDragStart:case v.topDrop:g=l;break;case v.topTouchCancel:case v.topTouchEnd:case v.topTouchMove:case v.topTouchStart:g=p;break;case v.topScroll:g=d;break;case v.topWheel:g=f;break;case v.topCopy:case v.topCut:case v.topPaste:g=i}h(g);var C=g.getPooled(m,n,o);return r.accumulateTwoPhaseDispatches(C),C}};t.exports=E},{"./EventConstants":14,"./EventPluginUtils":18,"./EventPropagators":19,"./SyntheticClipboardEvent":72,"./SyntheticDragEvent":74,"./SyntheticEvent":75,"./SyntheticFocusEvent":76,"./SyntheticKeyboardEvent":77,"./SyntheticMouseEvent":78,"./SyntheticTouchEvent":79,"./SyntheticUIEvent":80,"./SyntheticWheelEvent":81,"./invariant":106,"./keyOf":113}],72:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticEvent"),r={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};o.augmentClass(n,r),t.exports=n},{"./SyntheticEvent":75}],73:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticEvent"),r={data:null};o.augmentClass(n,r),t.exports=n},{"./SyntheticEvent":75}],74:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticMouseEvent"),r={dataTransfer:null};o.augmentClass(n,r),t.exports=n},{"./SyntheticMouseEvent":78}],75:[function(e,t){"use strict";function n(e,t,n){this.dispatchConfig=e,this.dispatchMarker=t,this.nativeEvent=n;var o=this.constructor.Interface;for(var i in o)if(o.hasOwnProperty(i)){var a=o[i];this[i]=a?a(n):n[i]}var s=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;this.isDefaultPrevented=s?r.thatReturnsTrue:r.thatReturnsFalse,this.isPropagationStopped=r.thatReturnsFalse}var o=e("./PooledClass"),r=e("./emptyFunction"),i=e("./getEventTarget"),a=e("./merge"),s=e("./mergeInto"),u={type:null,target:i,currentTarget:r.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};s(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=r.thatReturnsTrue},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=r.thatReturnsTrue},persist:function(){this.isPersistent=r.thatReturnsTrue},isPersistent:r.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),n.Interface=u,n.augmentClass=function(e,t){var n=this,r=Object.create(n.prototype);s(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=a(n.Interface,t),e.augmentClass=n.augmentClass,o.addPoolingTo(e,o.threeArgumentPooler)},o.addPoolingTo(n,o.threeArgumentPooler),t.exports=n},{"./PooledClass":23,"./emptyFunction":93,"./getEventTarget":99,"./merge":115,"./mergeInto":117}],76:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticUIEvent"),r={relatedTarget:null};o.augmentClass(n,r),t.exports=n},{"./SyntheticUIEvent":80}],77:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticUIEvent"),r=e("./getEventKey"),i={key:r,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,"char":null,charCode:null,keyCode:null,which:null};o.augmentClass(n,i),t.exports=n},{"./SyntheticUIEvent":80,"./getEventKey":98}],78:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticUIEvent"),r=e("./ViewportMetrics"),i={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+r.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+r.currentScrollTop}};o.augmentClass(n,i),t.exports=n},{"./SyntheticUIEvent":80,"./ViewportMetrics":83}],79:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticUIEvent"),r={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null};o.augmentClass(n,r),t.exports=n},{"./SyntheticUIEvent":80}],80:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticEvent"),r={view:null,detail:null};o.augmentClass(n,r),t.exports=n},{"./SyntheticEvent":75}],81:[function(e,t){"use strict";function n(e,t,n){o.call(this,e,t,n)}var o=e("./SyntheticMouseEvent"),r={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};o.augmentClass(n,r),t.exports=n},{"./SyntheticMouseEvent":78}],82:[function(e,t){"use strict";var n=e("./invariant"),o={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this.timingMetrics||(this.timingMetrics={}),this.timingMetrics.methodInvocationTime=0,this.timingMetrics.wrapperInitTimes?this.timingMetrics.wrapperInitTimes.length=0:this.timingMetrics.wrapperInitTimes=[],this.timingMetrics.wrapperCloseTimes?this.timingMetrics.wrapperCloseTimes.length=0:this.timingMetrics.wrapperCloseTimes=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,o,r,i,a,s,u){n(!this.isInTransaction());var c,l,p=Date.now();try{this._isInTransaction=!0,c=!0,this.initializeAll(0),l=e.call(t,o,r,i,a,s,u),c=!1}finally{var d=Date.now();this.methodInvocationTime+=d-p;try{if(c)try{this.closeAll(0)}catch(f){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return l},initializeAll:function(e){for(var t=this.transactionWrappers,n=this.timingMetrics.wrapperInitTimes,o=e;o<t.length;o++){var i=Date.now(),a=t[o];try{this.wrapperInitData[o]=r.OBSERVED_ERROR,this.wrapperInitData[o]=a.initialize?a.initialize.call(this):null}finally{var s=n[o],u=Date.now();if(n[o]=(s||0)+(u-i),this.wrapperInitData[o]===r.OBSERVED_ERROR)try{this.initializeAll(o+1)}catch(c){}}}},closeAll:function(e){n(this.isInTransaction());for(var t=this.transactionWrappers,o=this.timingMetrics.wrapperCloseTimes,i=e;i<t.length;i++){var a,s=t[i],u=Date.now(),c=this.wrapperInitData[i];try{a=!0,c!==r.OBSERVED_ERROR&&s.close&&s.close.call(this,c),a=!1}finally{var l=Date.now(),p=o[i];if(o[i]=(p||0)+(l-u),a)try{this.closeAll(i+1)}catch(d){}}}this.wrapperInitData.length=0}},r={Mixin:o,OBSERVED_ERROR:{}};t.exports=r},{"./invariant":106}],83:[function(e,t){"use strict";var n=e("./getUnboundedScrollPosition"),o={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(){var e=n(window);o.currentScrollLeft=e.x,o.currentScrollTop=e.y}};t.exports=o},{"./getUnboundedScrollPosition":104}],84:[function(e,t){"use strict";function n(e,t){if(o(null!=t),null==e)return t;var n=Array.isArray(e),r=Array.isArray(t);return n?e.concat(t):r?[e].concat(t):[e,t]}var o=e("./invariant");
t.exports=n},{"./invariant":106}],85:[function(e,t){"use strict";function n(e){for(var t=1,n=0,r=0;r<e.length;r++)t=(t+e.charCodeAt(r))%o,n=(n+t)%o;return t|n<<16}var o=65521;t.exports=n},{}],86:[function(e,t){function n(e,t){return e&&t?e===t?!0:o(e)?!1:o(t)?n(e,t.parentNode):e.contains?e.contains(t):e.compareDocumentPosition?!!(16&e.compareDocumentPosition(t)):!1:!1}var o=e("./isTextNode");t.exports=n},{"./isTextNode":110}],87:[function(e,t){function n(e,t,n,o,r,i){e=e||{};for(var a,s=[t,n,o,r,i],u=0;s[u];){a=s[u++];for(var c in a)e[c]=a[c];a.hasOwnProperty&&a.hasOwnProperty("toString")&&"undefined"!=typeof a.toString&&e.toString!==a.toString&&(e.toString=a.toString)}return e}t.exports=n},{}],88:[function(e,t){function n(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function o(e){return n(e)?Array.isArray(e)?e.slice():r(e):[e]}var r=e("./toArray");t.exports=o},{"./toArray":124}],89:[function(e,t){"use strict";function n(e){var t=o.createClass({displayName:"ReactFullPageComponent"+(e.componentConstructor.displayName||""),componentWillUnmount:function(){r(!1)},render:function(){return this.transferPropsTo(e(null,this.props.children))}});return t}var o=e("./ReactCompositeComponent"),r=e("./invariant");t.exports=n},{"./ReactCompositeComponent":29,"./invariant":106}],90:[function(e,t){function n(e){var t=e.match(c);return t&&t[1].toLowerCase()}function o(e,t){var o=u;s(!!u);var r=n(e),c=r&&a(r);if(c){o.innerHTML=c[1]+e+c[2];for(var l=c[0];l--;)o=o.lastChild}else o.innerHTML=e;var p=o.getElementsByTagName("script");p.length&&(s(t),i(p).forEach(t));for(var d=i(o.childNodes);o.lastChild;)o.removeChild(o.lastChild);return d}var r=e("./ExecutionEnvironment"),i=e("./createArrayFrom"),a=e("./getMarkupWrap"),s=e("./invariant"),u=r.canUseDOM?document.createElement("div"):null,c=/^\s*<(\w+)/;t.exports=o},{"./ExecutionEnvironment":20,"./createArrayFrom":88,"./getMarkupWrap":100,"./invariant":106}],91:[function(e,t){function n(e,t){var n={},o=Array.isArray(t);"undefined"==typeof t&&(t=!0);for(var r=e.length;r--;)n[e[r]]=o?t[r]:t;return n}t.exports=n},{}],92:[function(e,t){"use strict";function n(e,t){var n=null==t||"boolean"==typeof t||""===t;if(n)return"";var r=isNaN(t);return r||0===t||o.isUnitlessNumber[e]?""+t:t+"px"}var o=e("./CSSProperty");t.exports=n},{"./CSSProperty":2}],93:[function(e,t){function n(e){return function(){return e}}function o(){}var r=e("./copyProperties");r(o,{thatReturns:n,thatReturnsFalse:n(!1),thatReturnsTrue:n(!0),thatReturnsNull:n(null),thatReturnsThis:function(){return this},thatReturnsArgument:function(e){return e}}),t.exports=o},{"./copyProperties":87}],94:[function(e,t){"use strict";function n(e){return r[e]}function o(e){return(""+e).replace(i,n)}var r={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;","/":"&#x2f;"},i=/[&><"'\/]/g;t.exports=o},{}],95:[function(e,t){"use strict";function n(e,t,n){var o=e;r(!o.hasOwnProperty(n)),null!=t&&(o[n]=t)}function o(e){if(null==e)return e;var t={};return i(e,n,t),t}var r=e("./invariant"),i=e("./traverseAllChildren");t.exports=o},{"./invariant":106,"./traverseAllChildren":125}],96:[function(e,t){"use strict";var n=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};t.exports=n},{}],97:[function(e,t){function n(){try{return document.activeElement||document.body}catch(e){return document.body}}t.exports=n},{}],98:[function(e,t){"use strict";function n(e){return"key"in e?o[e.key]||e.key:r[e.which||e.keyCode]||"Unidentified"}var o={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},r={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=n},{}],99:[function(e,t){"use strict";function n(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}t.exports=n},{}],100:[function(e,t){function n(e){return r(!!i),p.hasOwnProperty(e)||(e="*"),a.hasOwnProperty(e)||(i.innerHTML="*"===e?"<link />":"<"+e+"></"+e+">",a[e]=!i.firstChild),a[e]?p[e]:null}var o=e("./ExecutionEnvironment"),r=e("./invariant"),i=o.canUseDOM?document.createElement("div"):null,a={circle:!0,defs:!0,g:!0,line:!0,linearGradient:!0,path:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,text:!0},s=[1,'<select multiple="true">',"</select>"],u=[1,"<table>","</table>"],c=[3,"<table><tbody><tr>","</tr></tbody></table>"],l=[1,"<svg>","</svg>"],p={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:s,option:s,caption:u,colgroup:u,tbody:u,tfoot:u,thead:u,td:c,th:c,circle:l,defs:l,g:l,line:l,linearGradient:l,path:l,polygon:l,polyline:l,radialGradient:l,rect:l,stop:l,text:l};t.exports=n},{"./ExecutionEnvironment":20,"./invariant":106}],101:[function(e,t){"use strict";function n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function o(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function r(e,t){for(var r=n(e),i=0,a=0;r;){if(3==r.nodeType){if(a=i+r.textContent.length,t>=i&&a>=t)return{node:r,offset:t-i};i=a}r=n(o(r))}}t.exports=r},{}],102:[function(e,t){"use strict";function n(e){return e?e.nodeType===o?e.documentElement:e.firstChild:null}var o=9;t.exports=n},{}],103:[function(e,t){"use strict";function n(){return!r&&o.canUseDOM&&(r="textContent"in document.createElement("div")?"textContent":"innerText"),r}var o=e("./ExecutionEnvironment"),r=null;t.exports=n},{"./ExecutionEnvironment":20}],104:[function(e,t){"use strict";function n(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}t.exports=n},{}],105:[function(e,t){function n(e){return e.replace(o,"-$1").toLowerCase()}var o=/([A-Z])/g;t.exports=n},{}],106:[function(e,t){"use strict";var n=function(e){if(!e){var t=new Error("Minified exception occured; use the non-minified dev environment for the full error message and additional helpful warnings.");throw t.framesToPop=1,t}};t.exports=n},{}],107:[function(e,t){"use strict";function n(e,t){if(!r.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,i=n in document;if(!i){var a=document.createElement("div");a.setAttribute(n,"return;"),i="function"==typeof a[n]}return!i&&o&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}var o,r=e("./ExecutionEnvironment");r.canUseDOM&&(o=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=n},{"./ExecutionEnvironment":20}],108:[function(e,t){function n(e){return!(!e||!("undefined"!=typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}t.exports=n},{}],109:[function(e,t){"use strict";function n(e){return e&&("INPUT"===e.nodeName&&o[e.type]||"TEXTAREA"===e.nodeName)}var o={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=n},{}],110:[function(e,t){function n(e){return o(e)&&3==e.nodeType}var o=e("./isNode");t.exports=n},{"./isNode":108}],111:[function(e,t){"use strict";function n(e){e||(e="");var t,n=arguments.length;if(n>1)for(var o=1;n>o;o++)t=arguments[o],t&&(e+=" "+t);return e}t.exports=n},{}],112:[function(e,t){"use strict";var n=e("./invariant"),o=function(e){var t,o={};n(e instanceof Object&&!Array.isArray(e));for(t in e)e.hasOwnProperty(t)&&(o[t]=t);return o};t.exports=o},{"./invariant":106}],113:[function(e,t){var n=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};t.exports=n},{}],114:[function(e,t){"use strict";function n(e){var t={};return function(n){return t.hasOwnProperty(n)?t[n]:t[n]=e.call(this,n)}}t.exports=n},{}],115:[function(e,t){"use strict";var n=e("./mergeInto"),o=function(e,t){var o={};return n(o,e),n(o,t),o};t.exports=o},{"./mergeInto":117}],116:[function(e,t){"use strict";var n=e("./invariant"),o=e("./keyMirror"),r=36,i=function(e){return"object"!=typeof e||null===e},a={MAX_MERGE_DEPTH:r,isTerminal:i,normalizeMergeArg:function(e){return void 0===e||null===e?{}:e},checkMergeArrayArgs:function(e,t){n(Array.isArray(e)&&Array.isArray(t))},checkMergeObjectArgs:function(e,t){a.checkMergeObjectArg(e),a.checkMergeObjectArg(t)},checkMergeObjectArg:function(e){n(!i(e)&&!Array.isArray(e))},checkMergeLevel:function(e){n(r>e)},checkArrayStrategy:function(e){n(void 0===e||e in a.ArrayStrategies)},ArrayStrategies:o({Clobber:!0,IndexByIndex:!0})};t.exports=a},{"./invariant":106,"./keyMirror":112}],117:[function(e,t){"use strict";function n(e,t){if(r(e),null!=t){r(t);for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}}var o=e("./mergeHelpers"),r=o.checkMergeObjectArg;t.exports=n},{"./mergeHelpers":116}],118:[function(e,t){"use strict";var n=function(e,t){var n;for(n in t)t.hasOwnProperty(n)&&(e.prototype[n]=t[n])};t.exports=n},{}],119:[function(e,t){"use strict";function n(e,t,n){if(!e)return null;var o=0,r={};for(var i in e)e.hasOwnProperty(i)&&(r[i]=t.call(n,e[i],i,o++));return r}t.exports=n},{}],120:[function(e,t){"use strict";function n(e,t,n){if(!e)return null;var o=0,r={};for(var i in e)e.hasOwnProperty(i)&&(r[i]=t.call(n,i,e[i],o++));return r}t.exports=n},{}],121:[function(e,t){"use strict";function n(e){return r(o.isValidComponent(e)),e}var o=e("./ReactComponent"),r=e("./invariant");t.exports=n},{"./ReactComponent":26,"./invariant":106}],122:[function(e,t){"use strict";function n(e,t){if(e===t)return!0;var n;for(n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||e[n]!==t[n]))return!1;for(n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}t.exports=n},{}],123:[function(e,t){"use strict";function n(e,t){return e&&t&&e.constructor===t.constructor&&(e.props&&e.props.key)===(t.props&&t.props.key)&&e._owner===t._owner?!0:!1}t.exports=n},{}],124:[function(e,t){function n(e){var t=e.length;if(o(!Array.isArray(e)&&("object"==typeof e||"function"==typeof e)),o("number"==typeof t),o(0===t||t-1 in e),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(n){}for(var r=Array(t),i=0;t>i;i++)r[i]=e[i];return r}var o=e("./invariant");t.exports=n},{"./invariant":106}],125:[function(e,t){"use strict";function n(e){return d[e]}function o(e,t){return e&&e.props&&null!=e.props.key?i(e.props.key):t.toString(36)}function r(e){return(""+e).replace(f,n)}function i(e){return"$"+r(e)}function a(e,t,n){null!==e&&void 0!==e&&h(e,"",0,t,n)}var s=e("./ReactInstanceHandles"),u=e("./ReactTextComponent"),c=e("./invariant"),l=s.SEPARATOR,p=":",d={"=":"=0",".":"=1",":":"=2"},f=/[=.:]/g,h=function(e,t,n,r,a){var s=0;if(Array.isArray(e))for(var d=0;d<e.length;d++){var f=e[d],m=t+(t?p:l)+o(f,d),v=n+s;s+=h(f,m,v,r,a)}else{var g=typeof e,y=""===t,C=y?l+o(e,0):t;if(null==e||"boolean"===g)r(a,null,C,n),s=1;else if(e.mountComponentIntoNode)r(a,e,C,n),s=1;else if("object"===g){c(!e||1!==e.nodeType);for(var E in e)e.hasOwnProperty(E)&&(s+=h(e[E],t+(t?p:l)+i(E)+p+o(e[E],0),n+s,r,a))}else if("string"===g){var M=new u(e);r(a,M,C,n),s+=1}else if("number"===g){var R=new u(""+e);r(a,R,C,n),s+=1}}return s};t.exports=a},{"./ReactInstanceHandles":51,"./ReactTextComponent":67,"./invariant":106}],126:[function(e,t){"use strict";var n=e("./emptyFunction"),o=n;t.exports=o},{"./emptyFunction":93}]},{},[24])(24)});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2173";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__29038__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__29038 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29038__delegate.call(this, args);
    };
    G__29038.cljs$lang$maxFixedArity = 0;
    G__29038.cljs$lang$applyTo = function(arglist__29039) {
      var args = cljs.core.seq(arglist__29039);
      return G__29038__delegate(args);
    };
    G__29038.cljs$core$IFn$_invoke$arity$variadic = G__29038__delegate;
    return G__29038;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__10317__auto__ = ty;
    if (cljs.core.truth_(and__10317__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__10317__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__11177__auto___29040 = len;
  var i_29041 = 0;
  while (true) {
    if (i_29041 < n__11177__auto___29040) {
      new_arr[i_29041] = arr[i_29041];
      var G__29042 = i_29041 + 1;
      i_29041 = G__29042;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__29043__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__29043 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29043__delegate.call(this, array, i, idxs);
    };
    G__29043.cljs$lang$maxFixedArity = 2;
    G__29043.cljs$lang$applyTo = function(arglist__29044) {
      var array = cljs.core.first(arglist__29044);
      arglist__29044 = cljs.core.next(arglist__29044);
      var i = cljs.core.first(arglist__29044);
      var idxs = cljs.core.rest(arglist__29044);
      return G__29043__delegate(array, i, idxs);
    };
    G__29043.cljs$core$IFn$_invoke$arity$variadic = G__29043__delegate;
    return G__29043;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__29045__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__29045 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29045__delegate.call(this, array, idx, idx2, idxv);
    };
    G__29045.cljs$lang$maxFixedArity = 3;
    G__29045.cljs$lang$applyTo = function(arglist__29046) {
      var array = cljs.core.first(arglist__29046);
      arglist__29046 = cljs.core.next(arglist__29046);
      var idx = cljs.core.first(arglist__29046);
      arglist__29046 = cljs.core.next(arglist__29046);
      var idx2 = cljs.core.first(arglist__29046);
      var idxv = cljs.core.rest(arglist__29046);
      return G__29045__delegate(array, idx, idx2, idxv);
    };
    G__29045.cljs$core$IFn$_invoke$arity$variadic = G__29045__delegate;
    return G__29045;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj29048 = {};
  return obj29048;
}();
cljs.core.IFn = function() {
  var obj29050 = {};
  return obj29050;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj29052 = {};
  return obj29052;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__10317__auto__ = value;
    if (and__10317__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__10956__auto__ = value == null ? null : value;
    return function() {
      var or__10329__auto__ = cljs.core._clone[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._clone["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj29054 = {};
  return obj29054;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._count[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._count["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj29056 = {};
  return obj29056;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._empty[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._empty["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj29058 = {};
  return obj29058;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._conj[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._conj["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj29060 = {};
  return obj29060;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__10317__auto__ = coll;
      if (and__10317__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__10956__auto__ = coll == null ? null : coll;
      return function() {
        var or__10329__auto__ = cljs.core._nth[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._nth["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__10317__auto__ = coll;
      if (and__10317__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__10956__auto__ = coll == null ? null : coll;
      return function() {
        var or__10329__auto__ = cljs.core._nth[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._nth["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj29062 = {};
  return obj29062;
}();
cljs.core.ISeq = function() {
  var obj29064 = {};
  return obj29064;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._first[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._first["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._rest[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._rest["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj29066 = {};
  return obj29066;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._next[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._next["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj29068 = {};
  return obj29068;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._lookup[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._lookup["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._lookup[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._lookup["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj29070 = {};
  return obj29070;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._assoc[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._assoc["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj29072 = {};
  return obj29072;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._dissoc[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._dissoc["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj29074 = {};
  return obj29074;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._key[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._key["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._val[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._val["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj29076 = {};
  return obj29076;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._disjoin[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._disjoin["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj29078 = {};
  return obj29078;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._peek[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._peek["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._pop[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._pop["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj29080 = {};
  return obj29080;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._assoc_n[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._assoc_n["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj29082 = {};
  return obj29082;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._deref[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._deref["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj29084 = {};
  return obj29084;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj29086 = {};
  return obj29086;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._meta[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._meta["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj29088 = {};
  return obj29088;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._with_meta[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._with_meta["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj29090 = {};
  return obj29090;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__10317__auto__ = coll;
      if (and__10317__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__10956__auto__ = coll == null ? null : coll;
      return function() {
        var or__10329__auto__ = cljs.core._reduce[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._reduce["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__10317__auto__ = coll;
      if (and__10317__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__10956__auto__ = coll == null ? null : coll;
      return function() {
        var or__10329__auto__ = cljs.core._reduce[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._reduce["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj29092 = {};
  return obj29092;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._kv_reduce[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj29094 = {};
  return obj29094;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._equiv[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._equiv["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj29096 = {};
  return obj29096;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._hash[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._hash["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj29098 = {};
  return obj29098;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._seq[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._seq["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj29100 = {};
  return obj29100;
}();
cljs.core.IList = function() {
  var obj29102 = {};
  return obj29102;
}();
cljs.core.IRecord = function() {
  var obj29104 = {};
  return obj29104;
}();
cljs.core.IReversible = function() {
  var obj29106 = {};
  return obj29106;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._rseq[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._rseq["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj29108 = {};
  return obj29108;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._sorted_seq[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._entry_key[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._entry_key["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._comparator[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._comparator["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj29110 = {};
  return obj29110;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__10317__auto__ = writer;
    if (and__10317__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__10956__auto__ = writer == null ? null : writer;
    return function() {
      var or__10329__auto__ = cljs.core._write[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._write["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__10317__auto__ = writer;
    if (and__10317__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__10956__auto__ = writer == null ? null : writer;
    return function() {
      var or__10329__auto__ = cljs.core._flush[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._flush["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj29112 = {};
  return obj29112;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._pr_writer[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._pr_writer["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj29114 = {};
  return obj29114;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__10317__auto__ = d;
    if (and__10317__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__10956__auto__ = d == null ? null : d;
    return function() {
      var or__10329__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj29116 = {};
  return obj29116;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__10317__auto__ = this$;
    if (and__10317__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__10956__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10329__auto__ = cljs.core._notify_watches[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._notify_watches["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__10317__auto__ = this$;
    if (and__10317__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__10956__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10329__auto__ = cljs.core._add_watch[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._add_watch["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__10317__auto__ = this$;
    if (and__10317__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__10956__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10329__auto__ = cljs.core._remove_watch[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._remove_watch["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj29118 = {};
  return obj29118;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._as_transient[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._as_transient["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj29120 = {};
  return obj29120;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj29122 = {};
  return obj29122;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj29124 = {};
  return obj29124;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj29126 = {};
  return obj29126;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj29128 = {};
  return obj29128;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj29130 = {};
  return obj29130;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._compare[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._compare["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj29132 = {};
  return obj29132;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._drop_first[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._drop_first["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj29134 = {};
  return obj29134;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._chunked_first[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._chunked_first["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._chunked_rest[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj29136 = {};
  return obj29136;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._chunked_next[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._chunked_next["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj29138 = {};
  return obj29138;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._name[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._name["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._namespace[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._namespace["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__10317__auto__ = cljs.core.not.call(null, a.ns);
      if (and__10317__auto__) {
        return b.ns;
      } else {
        return and__10317__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__10740__auto__ = self__._hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__29140 = null;
  var G__29140__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__29140__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__29140 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29140__2.call(this, self__, coll);
      case 3:
        return G__29140__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29140;
}();
cljs.core.Symbol.prototype.apply = function(self__, args29139) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29139)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__29142 = value;
  if (G__29142) {
    var bit__10979__auto__ = G__29142.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__10979__auto__ || G__29142.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__29142.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__29142);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__29142);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__29144 = coll;
      if (G__29144) {
        var bit__10972__auto__ = G__29144.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__10972__auto__ || G__29144.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__29146 = coll;
      if (G__29146) {
        var bit__10972__auto__ = G__29146.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10972__auto__ || G__29146.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__29148 = coll;
      if (G__29148) {
        var bit__10972__auto__ = G__29148.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10972__auto__ || G__29148.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__29150 = coll;
      if (G__29150) {
        var bit__10972__auto__ = G__29150.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__10972__auto__ || G__29150.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__29151__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__29152 = y;
            var G__29153 = cljs.core.first.call(null, more);
            var G__29154 = cljs.core.next.call(null, more);
            x = G__29152;
            y = G__29153;
            more = G__29154;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__29151 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29151__delegate.call(this, x, y, more);
    };
    G__29151.cljs$lang$maxFixedArity = 2;
    G__29151.cljs$lang$applyTo = function(arglist__29155) {
      var x = cljs.core.first(arglist__29155);
      arglist__29155 = cljs.core.next(arglist__29155);
      var y = cljs.core.first(arglist__29155);
      var more = cljs.core.rest(arglist__29155);
      return G__29151__delegate(x, y, more);
    };
    G__29151.cljs$core$IFn$_invoke$arity$variadic = G__29151__delegate;
    return G__29151;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__29156 = nval;
            var G__29157 = n + 1;
            val = G__29156;
            n = G__29157;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__29158 = nval;
          var G__29159 = n + 1;
          val__$1 = G__29158;
          n = G__29159;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__29160 = nval;
          var G__29161 = n + 1;
          val__$1 = G__29160;
          n = G__29161;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__29162 = nval;
            var G__29163 = n + 1;
            val = G__29162;
            n = G__29163;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__29164 = nval;
          var G__29165 = n + 1;
          val__$1 = G__29164;
          n = G__29165;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__29166 = nval;
          var G__29167 = n + 1;
          val__$1 = G__29166;
          n = G__29167;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__29169 = x;
  if (G__29169) {
    var bit__10979__auto__ = G__29169.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__10979__auto__ || G__29169.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__29169.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__29169);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__29169);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__29171 = x;
  if (G__29171) {
    var bit__10979__auto__ = G__29171.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__10979__auto__ || G__29171.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__29171.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__29171);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__29171);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__29172 = sn;
      s = G__29172;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__29173__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__29174 = conj.call(null, coll, x);
          var G__29175 = cljs.core.first.call(null, xs);
          var G__29176 = cljs.core.next.call(null, xs);
          coll = G__29174;
          x = G__29175;
          xs = G__29176;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__29173 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29173__delegate.call(this, coll, x, xs);
    };
    G__29173.cljs$lang$maxFixedArity = 2;
    G__29173.cljs$lang$applyTo = function(arglist__29177) {
      var coll = cljs.core.first(arglist__29177);
      arglist__29177 = cljs.core.next(arglist__29177);
      var x = cljs.core.first(arglist__29177);
      var xs = cljs.core.rest(arglist__29177);
      return G__29173__delegate(coll, x, xs);
    };
    G__29173.cljs$core$IFn$_invoke$arity$variadic = G__29173__delegate;
    return G__29173;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__29178 = cljs.core.next.call(null, s);
      var G__29179 = acc + 1;
      s = G__29178;
      acc = G__29179;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__29181 = coll;
      if (G__29181) {
        var bit__10972__auto__ = G__29181.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__10972__auto__ || G__29181.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__29182 = cljs.core.next.call(null, coll);
              var G__29183 = n - 1;
              coll = G__29182;
              n = G__29183;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__29184 = cljs.core.next.call(null, coll);
              var G__29185 = n - 1;
              var G__29186 = not_found;
              coll = G__29184;
              n = G__29185;
              not_found = G__29186;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__29191 = coll;
        if (G__29191) {
          var bit__10972__auto__ = G__29191.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__10972__auto__ || G__29191.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__29192 = coll;
                  if (G__29192) {
                    var bit__10979__auto__ = G__29192.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__10979__auto__ || G__29192.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__29192.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__29192);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__29192);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__29193 = coll;
        if (G__29193) {
          var bit__10972__auto__ = G__29193.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__10972__auto__ || G__29193.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__29194 = coll;
                  if (G__29194) {
                    var bit__10979__auto__ = G__29194.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__10979__auto__ || G__29194.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__29194.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__29194);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__29194);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__29197 = o;
        if (G__29197) {
          var bit__10972__auto__ = G__29197.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__10972__auto__ || G__29197.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__29198 = o;
        if (G__29198) {
          var bit__10972__auto__ = G__29198.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__10972__auto__ || G__29198.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__29199__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__29200 = ret;
          var G__29201 = cljs.core.first.call(null, kvs);
          var G__29202 = cljs.core.second.call(null, kvs);
          var G__29203 = cljs.core.nnext.call(null, kvs);
          coll = G__29200;
          k = G__29201;
          v = G__29202;
          kvs = G__29203;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__29199 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29199__delegate.call(this, coll, k, v, kvs);
    };
    G__29199.cljs$lang$maxFixedArity = 3;
    G__29199.cljs$lang$applyTo = function(arglist__29204) {
      var coll = cljs.core.first(arglist__29204);
      arglist__29204 = cljs.core.next(arglist__29204);
      var k = cljs.core.first(arglist__29204);
      arglist__29204 = cljs.core.next(arglist__29204);
      var v = cljs.core.first(arglist__29204);
      var kvs = cljs.core.rest(arglist__29204);
      return G__29199__delegate(coll, k, v, kvs);
    };
    G__29199.cljs$core$IFn$_invoke$arity$variadic = G__29199__delegate;
    return G__29199;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__29205__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__29206 = ret;
            var G__29207 = cljs.core.first.call(null, ks);
            var G__29208 = cljs.core.next.call(null, ks);
            coll = G__29206;
            k = G__29207;
            ks = G__29208;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__29205 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29205__delegate.call(this, coll, k, ks);
    };
    G__29205.cljs$lang$maxFixedArity = 2;
    G__29205.cljs$lang$applyTo = function(arglist__29209) {
      var coll = cljs.core.first(arglist__29209);
      arglist__29209 = cljs.core.next(arglist__29209);
      var k = cljs.core.first(arglist__29209);
      var ks = cljs.core.rest(arglist__29209);
      return G__29205__delegate(coll, k, ks);
    };
    G__29205.cljs$core$IFn$_invoke$arity$variadic = G__29205__delegate;
    return G__29205;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__10329__auto__ = goog.isFunction(f);
  if (or__10329__auto__) {
    return or__10329__auto__;
  } else {
    var G__29213 = f;
    if (G__29213) {
      var bit__10979__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__10329__auto____$1 = bit__10979__auto__;
        if (cljs.core.truth_(or__10329__auto____$1)) {
          return or__10329__auto____$1;
        } else {
          return G__29213.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__29213.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__29213);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__29213);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__29221 = o;
    if (G__29221) {
      var bit__10979__auto__ = G__29221.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__10979__auto__ || G__29221.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__29221.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__29221);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__29221);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t29222 !== "undefined") {
      } else {
        cljs.core.t29222 = function(meta, o, with_meta, meta29223) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta29223 = meta29223;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t29222.cljs$lang$type = true;
        cljs.core.t29222.cljs$lang$ctorStr = "cljs.core/t29222";
        cljs.core.t29222.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
          return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/t29222");
        };
        cljs.core.t29222.prototype.call = function() {
          var G__29226__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__29226 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__29226__delegate.call(this, self__, args);
          };
          G__29226.cljs$lang$maxFixedArity = 1;
          G__29226.cljs$lang$applyTo = function(arglist__29227) {
            var self__ = cljs.core.first(arglist__29227);
            var args = cljs.core.rest(arglist__29227);
            return G__29226__delegate(self__, args);
          };
          G__29226.cljs$core$IFn$_invoke$arity$variadic = G__29226__delegate;
          return G__29226;
        }();
        cljs.core.t29222.prototype.apply = function(self__, args29225) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29225)));
        };
        cljs.core.t29222.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__29228__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__29228 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__29228__delegate.call(this, args);
          };
          G__29228.cljs$lang$maxFixedArity = 0;
          G__29228.cljs$lang$applyTo = function(arglist__29229) {
            var args = cljs.core.seq(arglist__29229);
            return G__29228__delegate(args);
          };
          G__29228.cljs$core$IFn$_invoke$arity$variadic = G__29228__delegate;
          return G__29228;
        }();
        cljs.core.t29222.prototype.cljs$core$Fn$ = true;
        cljs.core.t29222.prototype.cljs$core$IMeta$_meta$arity$1 = function(_29224) {
          var self__ = this;
          var _29224__$1 = this;
          return self__.meta29223;
        };
        cljs.core.t29222.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_29224, meta29223__$1) {
          var self__ = this;
          var _29224__$1 = this;
          return new cljs.core.t29222(self__.meta, self__.o, self__.with_meta, meta29223__$1);
        };
        cljs.core.__GT_t29222 = function __GT_t29222(meta__$1, o__$1, with_meta__$1, meta29223) {
          return new cljs.core.t29222(meta__$1, o__$1, with_meta__$1, meta29223);
        };
      }
      return new cljs.core.t29222(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__10317__auto__ = !(o == null);
    if (and__10317__auto__) {
      var G__29233 = o;
      if (G__29233) {
        var bit__10979__auto__ = G__29233.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__10979__auto__ || G__29233.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__29233.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__29233);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__29233);
      }
    } else {
      return and__10317__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__29234__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__29235 = ret;
            var G__29236 = cljs.core.first.call(null, ks);
            var G__29237 = cljs.core.next.call(null, ks);
            coll = G__29235;
            k = G__29236;
            ks = G__29237;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__29234 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29234__delegate.call(this, coll, k, ks);
    };
    G__29234.cljs$lang$maxFixedArity = 2;
    G__29234.cljs$lang$applyTo = function(arglist__29238) {
      var coll = cljs.core.first(arglist__29238);
      arglist__29238 = cljs.core.next(arglist__29238);
      var k = cljs.core.first(arglist__29238);
      var ks = cljs.core.rest(arglist__29238);
      return G__29234__delegate(coll, k, ks);
    };
    G__29234.cljs$core$IFn$_invoke$arity$variadic = G__29234__delegate;
    return G__29234;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj29240 = {};
  return obj29240;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj29244 = {};
      return obj29244;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__29246 = o;
    if (G__29246) {
      var bit__10972__auto__ = G__29246.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__10972__auto__ || G__29246.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__29248 = x;
    if (G__29248) {
      var bit__10979__auto__ = G__29248.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__10979__auto__ || G__29248.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__29248.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__29248);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__29248);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__29250 = x;
    if (G__29250) {
      var bit__10979__auto__ = G__29250.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__10979__auto__ || G__29250.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__29250.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__29250);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__29250);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__29252 = x;
  if (G__29252) {
    var bit__10979__auto__ = G__29252.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__10979__auto__ || G__29252.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__29252.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__29252);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__29252);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__29254 = x;
  if (G__29254) {
    var bit__10979__auto__ = G__29254.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__10979__auto__ || G__29254.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__29254.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__29254);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__29254);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__29256 = x;
  if (G__29256) {
    var bit__10979__auto__ = G__29256.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__10979__auto__ || G__29256.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__29256.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__29256);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__29256);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__29258 = x;
  if (G__29258) {
    var bit__10979__auto__ = G__29258.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__10979__auto__ || G__29258.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__29258.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__29258);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__29258);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__29260 = x;
    if (G__29260) {
      var bit__10979__auto__ = G__29260.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__10979__auto__ || G__29260.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__29260.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__29260);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__29260);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__29262 = x;
  if (G__29262) {
    var bit__10979__auto__ = G__29262.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__10979__auto__ || G__29262.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__29262.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__29262);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__29262);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__29264 = x;
  if (G__29264) {
    var bit__10972__auto__ = G__29264.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__10972__auto__ || G__29264.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj29268 = {};
    return obj29268;
  };
  var js_obj__1 = function() {
    var G__29269__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__29269 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29269__delegate.call(this, keyvals);
    };
    G__29269.cljs$lang$maxFixedArity = 0;
    G__29269.cljs$lang$applyTo = function(arglist__29270) {
      var keyvals = cljs.core.seq(arglist__29270);
      return G__29269__delegate(keyvals);
    };
    G__29269.cljs$core$IFn$_invoke$arity$variadic = G__29269__delegate;
    return G__29269;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__29271 = i__$1 + 1;
      var G__29272 = j__$1 + 1;
      var G__29273 = len__$1 - 1;
      i__$1 = G__29271;
      j__$1 = G__29272;
      len__$1 = G__29273;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__29274 = i__$1 - 1;
      var G__29275 = j__$1 - 1;
      var G__29276 = len__$1 - 1;
      i__$1 = G__29274;
      j__$1 = G__29275;
      len__$1 = G__29276;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj29278 = {};
  return obj29278;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__29280 = s;
    if (G__29280) {
      var bit__10979__auto__ = G__29280.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__10979__auto__ || G__29280.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__29280.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__29280);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__29280);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__29282 = s;
  if (G__29282) {
    var bit__10979__auto__ = G__29282.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__10979__auto__ || G__29282.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__29282.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__29282);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__29282);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__10329__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__10329__auto__) {
    return or__10329__auto__;
  } else {
    var G__29286 = f;
    if (G__29286) {
      var bit__10979__auto__ = G__29286.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__10979__auto__ || G__29286.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__29286.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__29286);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__29286);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__29287__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__29288 = cljs.core.conj.call(null, s, x__$1);
              var G__29289 = etc;
              s = G__29288;
              xs = G__29289;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__29287 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29287__delegate.call(this, x, y, more);
    };
    G__29287.cljs$lang$maxFixedArity = 2;
    G__29287.cljs$lang$applyTo = function(arglist__29290) {
      var x = cljs.core.first(arglist__29290);
      arglist__29290 = cljs.core.next(arglist__29290);
      var y = cljs.core.first(arglist__29290);
      var more = cljs.core.rest(arglist__29290);
      return G__29287__delegate(x, y, more);
    };
    G__29287.cljs$core$IFn$_invoke$arity$variadic = G__29287__delegate;
    return G__29287;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__10329__auto__ = cljs.core.seq.call(null, coll);
    if (or__10329__auto__) {
      return or__10329__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__29292 = x;
            if (G__29292) {
              var bit__10972__auto__ = G__29292.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__10972__auto__ || G__29292.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__29293 = xs;
        var G__29294 = ys;
        var G__29295 = len;
        var G__29296 = n + 1;
        xs = G__29293;
        ys = G__29294;
        len = G__29295;
        n = G__29296;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__29297 = nval;
          var G__29298 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__29297;
          coll__$1 = G__29298;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__29301 = coll;
      if (G__29301) {
        var bit__10972__auto__ = G__29301.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__10972__auto__ || G__29301.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__29302 = coll;
      if (G__29302) {
        var bit__10972__auto__ = G__29302.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__10972__auto__ || G__29302.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__29303__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__29303 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29303__delegate.call(this, x, y, more);
    };
    G__29303.cljs$lang$maxFixedArity = 2;
    G__29303.cljs$lang$applyTo = function(arglist__29304) {
      var x = cljs.core.first(arglist__29304);
      arglist__29304 = cljs.core.next(arglist__29304);
      var y = cljs.core.first(arglist__29304);
      var more = cljs.core.rest(arglist__29304);
      return G__29303__delegate(x, y, more);
    };
    G__29303.cljs$core$IFn$_invoke$arity$variadic = G__29303__delegate;
    return G__29303;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__29305__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__29305 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29305__delegate.call(this, x, y, more);
    };
    G__29305.cljs$lang$maxFixedArity = 2;
    G__29305.cljs$lang$applyTo = function(arglist__29306) {
      var x = cljs.core.first(arglist__29306);
      arglist__29306 = cljs.core.next(arglist__29306);
      var y = cljs.core.first(arglist__29306);
      var more = cljs.core.rest(arglist__29306);
      return G__29305__delegate(x, y, more);
    };
    G__29305.cljs$core$IFn$_invoke$arity$variadic = G__29305__delegate;
    return G__29305;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__29307__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__29307 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29307__delegate.call(this, x, y, more);
    };
    G__29307.cljs$lang$maxFixedArity = 2;
    G__29307.cljs$lang$applyTo = function(arglist__29308) {
      var x = cljs.core.first(arglist__29308);
      arglist__29308 = cljs.core.next(arglist__29308);
      var y = cljs.core.first(arglist__29308);
      var more = cljs.core.rest(arglist__29308);
      return G__29307__delegate(x, y, more);
    };
    G__29307.cljs$core$IFn$_invoke$arity$variadic = G__29307__delegate;
    return G__29307;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__29309__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__29309 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29309__delegate.call(this, x, y, more);
    };
    G__29309.cljs$lang$maxFixedArity = 2;
    G__29309.cljs$lang$applyTo = function(arglist__29310) {
      var x = cljs.core.first(arglist__29310);
      arglist__29310 = cljs.core.next(arglist__29310);
      var y = cljs.core.first(arglist__29310);
      var more = cljs.core.rest(arglist__29310);
      return G__29309__delegate(x, y, more);
    };
    G__29309.cljs$core$IFn$_invoke$arity$variadic = G__29309__delegate;
    return G__29309;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__29311__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__29312 = y;
            var G__29313 = cljs.core.first.call(null, more);
            var G__29314 = cljs.core.next.call(null, more);
            x = G__29312;
            y = G__29313;
            more = G__29314;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__29311 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29311__delegate.call(this, x, y, more);
    };
    G__29311.cljs$lang$maxFixedArity = 2;
    G__29311.cljs$lang$applyTo = function(arglist__29315) {
      var x = cljs.core.first(arglist__29315);
      arglist__29315 = cljs.core.next(arglist__29315);
      var y = cljs.core.first(arglist__29315);
      var more = cljs.core.rest(arglist__29315);
      return G__29311__delegate(x, y, more);
    };
    G__29311.cljs$core$IFn$_invoke$arity$variadic = G__29311__delegate;
    return G__29311;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__29316__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__29317 = y;
            var G__29318 = cljs.core.first.call(null, more);
            var G__29319 = cljs.core.next.call(null, more);
            x = G__29317;
            y = G__29318;
            more = G__29319;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__29316 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29316__delegate.call(this, x, y, more);
    };
    G__29316.cljs$lang$maxFixedArity = 2;
    G__29316.cljs$lang$applyTo = function(arglist__29320) {
      var x = cljs.core.first(arglist__29320);
      arglist__29320 = cljs.core.next(arglist__29320);
      var y = cljs.core.first(arglist__29320);
      var more = cljs.core.rest(arglist__29320);
      return G__29316__delegate(x, y, more);
    };
    G__29316.cljs$core$IFn$_invoke$arity$variadic = G__29316__delegate;
    return G__29316;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__29321__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__29322 = y;
            var G__29323 = cljs.core.first.call(null, more);
            var G__29324 = cljs.core.next.call(null, more);
            x = G__29322;
            y = G__29323;
            more = G__29324;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__29321 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29321__delegate.call(this, x, y, more);
    };
    G__29321.cljs$lang$maxFixedArity = 2;
    G__29321.cljs$lang$applyTo = function(arglist__29325) {
      var x = cljs.core.first(arglist__29325);
      arglist__29325 = cljs.core.next(arglist__29325);
      var y = cljs.core.first(arglist__29325);
      var more = cljs.core.rest(arglist__29325);
      return G__29321__delegate(x, y, more);
    };
    G__29321.cljs$core$IFn$_invoke$arity$variadic = G__29321__delegate;
    return G__29321;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__29326__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__29327 = y;
            var G__29328 = cljs.core.first.call(null, more);
            var G__29329 = cljs.core.next.call(null, more);
            x = G__29327;
            y = G__29328;
            more = G__29329;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__29326 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29326__delegate.call(this, x, y, more);
    };
    G__29326.cljs$lang$maxFixedArity = 2;
    G__29326.cljs$lang$applyTo = function(arglist__29330) {
      var x = cljs.core.first(arglist__29330);
      arglist__29330 = cljs.core.next(arglist__29330);
      var y = cljs.core.first(arglist__29330);
      var more = cljs.core.rest(arglist__29330);
      return G__29326__delegate(x, y, more);
    };
    G__29326.cljs$core$IFn$_invoke$arity$variadic = G__29326__delegate;
    return G__29326;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__10636__auto__ = x;
    var y__10637__auto__ = y;
    return x__10636__auto__ > y__10637__auto__ ? x__10636__auto__ : y__10637__auto__;
  };
  var max__3 = function() {
    var G__29331__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__10636__auto__ = x;
        var y__10637__auto__ = y;
        return x__10636__auto__ > y__10637__auto__ ? x__10636__auto__ : y__10637__auto__;
      }(), more);
    };
    var G__29331 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29331__delegate.call(this, x, y, more);
    };
    G__29331.cljs$lang$maxFixedArity = 2;
    G__29331.cljs$lang$applyTo = function(arglist__29332) {
      var x = cljs.core.first(arglist__29332);
      arglist__29332 = cljs.core.next(arglist__29332);
      var y = cljs.core.first(arglist__29332);
      var more = cljs.core.rest(arglist__29332);
      return G__29331__delegate(x, y, more);
    };
    G__29331.cljs$core$IFn$_invoke$arity$variadic = G__29331__delegate;
    return G__29331;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__10643__auto__ = x;
    var y__10644__auto__ = y;
    return x__10643__auto__ < y__10644__auto__ ? x__10643__auto__ : y__10644__auto__;
  };
  var min__3 = function() {
    var G__29333__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__10643__auto__ = x;
        var y__10644__auto__ = y;
        return x__10643__auto__ < y__10644__auto__ ? x__10643__auto__ : y__10644__auto__;
      }(), more);
    };
    var G__29333 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29333__delegate.call(this, x, y, more);
    };
    G__29333.cljs$lang$maxFixedArity = 2;
    G__29333.cljs$lang$applyTo = function(arglist__29334) {
      var x = cljs.core.first(arglist__29334);
      arglist__29334 = cljs.core.next(arglist__29334);
      var y = cljs.core.first(arglist__29334);
      var more = cljs.core.rest(arglist__29334);
      return G__29333__delegate(x, y, more);
    };
    G__29333.cljs$core$IFn$_invoke$arity$variadic = G__29333__delegate;
    return G__29333;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__29335__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__29335 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29335__delegate.call(this, x, y, more);
    };
    G__29335.cljs$lang$maxFixedArity = 2;
    G__29335.cljs$lang$applyTo = function(arglist__29336) {
      var x = cljs.core.first(arglist__29336);
      arglist__29336 = cljs.core.next(arglist__29336);
      var y = cljs.core.first(arglist__29336);
      var more = cljs.core.rest(arglist__29336);
      return G__29335__delegate(x, y, more);
    };
    G__29335.cljs$core$IFn$_invoke$arity$variadic = G__29335__delegate;
    return G__29335;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__29337__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__29337 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29337__delegate.call(this, x, y, more);
    };
    G__29337.cljs$lang$maxFixedArity = 2;
    G__29337.cljs$lang$applyTo = function(arglist__29338) {
      var x = cljs.core.first(arglist__29338);
      arglist__29338 = cljs.core.next(arglist__29338);
      var y = cljs.core.first(arglist__29338);
      var more = cljs.core.rest(arglist__29338);
      return G__29337__delegate(x, y, more);
    };
    G__29337.cljs$core$IFn$_invoke$arity$variadic = G__29337__delegate;
    return G__29337;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__29339__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__29339 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29339__delegate.call(this, x, y, more);
    };
    G__29339.cljs$lang$maxFixedArity = 2;
    G__29339.cljs$lang$applyTo = function(arglist__29340) {
      var x = cljs.core.first(arglist__29340);
      arglist__29340 = cljs.core.next(arglist__29340);
      var y = cljs.core.first(arglist__29340);
      var more = cljs.core.rest(arglist__29340);
      return G__29339__delegate(x, y, more);
    };
    G__29339.cljs$core$IFn$_invoke$arity$variadic = G__29339__delegate;
    return G__29339;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__29341__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__29341 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29341__delegate.call(this, x, y, more);
    };
    G__29341.cljs$lang$maxFixedArity = 2;
    G__29341.cljs$lang$applyTo = function(arglist__29342) {
      var x = cljs.core.first(arglist__29342);
      arglist__29342 = cljs.core.next(arglist__29342);
      var y = cljs.core.first(arglist__29342);
      var more = cljs.core.rest(arglist__29342);
      return G__29341__delegate(x, y, more);
    };
    G__29341.cljs$core$IFn$_invoke$arity$variadic = G__29341__delegate;
    return G__29341;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__29343__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__29343 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29343__delegate.call(this, x, y, more);
    };
    G__29343.cljs$lang$maxFixedArity = 2;
    G__29343.cljs$lang$applyTo = function(arglist__29344) {
      var x = cljs.core.first(arglist__29344);
      arglist__29344 = cljs.core.next(arglist__29344);
      var y = cljs.core.first(arglist__29344);
      var more = cljs.core.rest(arglist__29344);
      return G__29343__delegate(x, y, more);
    };
    G__29343.cljs$core$IFn$_invoke$arity$variadic = G__29343__delegate;
    return G__29343;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__29345__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__29345 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29345__delegate.call(this, x, y, more);
    };
    G__29345.cljs$lang$maxFixedArity = 2;
    G__29345.cljs$lang$applyTo = function(arglist__29346) {
      var x = cljs.core.first(arglist__29346);
      arglist__29346 = cljs.core.next(arglist__29346);
      var y = cljs.core.first(arglist__29346);
      var more = cljs.core.rest(arglist__29346);
      return G__29345__delegate(x, y, more);
    };
    G__29345.cljs$core$IFn$_invoke$arity$variadic = G__29345__delegate;
    return G__29345;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__29347__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__29347 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29347__delegate.call(this, x, y, more);
    };
    G__29347.cljs$lang$maxFixedArity = 2;
    G__29347.cljs$lang$applyTo = function(arglist__29348) {
      var x = cljs.core.first(arglist__29348);
      arglist__29348 = cljs.core.next(arglist__29348);
      var y = cljs.core.first(arglist__29348);
      var more = cljs.core.rest(arglist__29348);
      return G__29347__delegate(x, y, more);
    };
    G__29347.cljs$core$IFn$_invoke$arity$variadic = G__29347__delegate;
    return G__29347;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__29349__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__29350 = y;
            var G__29351 = cljs.core.first.call(null, more);
            var G__29352 = cljs.core.next.call(null, more);
            x = G__29350;
            y = G__29351;
            more = G__29352;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__29349 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29349__delegate.call(this, x, y, more);
    };
    G__29349.cljs$lang$maxFixedArity = 2;
    G__29349.cljs$lang$applyTo = function(arglist__29353) {
      var x = cljs.core.first(arglist__29353);
      arglist__29353 = cljs.core.next(arglist__29353);
      var y = cljs.core.first(arglist__29353);
      var more = cljs.core.rest(arglist__29353);
      return G__29349__delegate(x, y, more);
    };
    G__29349.cljs$core$IFn$_invoke$arity$variadic = G__29349__delegate;
    return G__29349;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__29354 = n__$1 - 1;
      var G__29355 = cljs.core.next.call(null, xs);
      n__$1 = G__29354;
      xs = G__29355;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__29356__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__29357 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__29358 = cljs.core.next.call(null, more);
          sb = G__29357;
          more = G__29358;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__29356 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__29356__delegate.call(this, x, ys);
    };
    G__29356.cljs$lang$maxFixedArity = 1;
    G__29356.cljs$lang$applyTo = function(arglist__29359) {
      var x = cljs.core.first(arglist__29359);
      var ys = cljs.core.rest(arglist__29359);
      return G__29356__delegate(x, ys);
    };
    G__29356.cljs$core$IFn$_invoke$arity$variadic = G__29356__delegate;
    return G__29356;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__29360 = cljs.core.next.call(null, xs);
            var G__29361 = cljs.core.next.call(null, ys);
            xs = G__29360;
            ys = G__29361;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__29362 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__29363 = cljs.core.next.call(null, s);
        res = G__29362;
        s = G__29363;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__29364 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__29365 = cljs.core.next.call(null, s);
      h = G__29364;
      s = G__29365;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__29366 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__29367 = cljs.core.next.call(null, s__$1);
      h = G__29366;
      s__$1 = G__29367;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__29374_29380 = cljs.core.seq.call(null, fn_map);
  var chunk__29375_29381 = null;
  var count__29376_29382 = 0;
  var i__29377_29383 = 0;
  while (true) {
    if (i__29377_29383 < count__29376_29382) {
      var vec__29378_29384 = cljs.core._nth.call(null, chunk__29375_29381, i__29377_29383);
      var key_name_29385 = cljs.core.nth.call(null, vec__29378_29384, 0, null);
      var f_29386 = cljs.core.nth.call(null, vec__29378_29384, 1, null);
      var str_name_29387 = cljs.core.name.call(null, key_name_29385);
      obj[str_name_29387] = f_29386;
      var G__29388 = seq__29374_29380;
      var G__29389 = chunk__29375_29381;
      var G__29390 = count__29376_29382;
      var G__29391 = i__29377_29383 + 1;
      seq__29374_29380 = G__29388;
      chunk__29375_29381 = G__29389;
      count__29376_29382 = G__29390;
      i__29377_29383 = G__29391;
      continue;
    } else {
      var temp__4092__auto___29392 = cljs.core.seq.call(null, seq__29374_29380);
      if (temp__4092__auto___29392) {
        var seq__29374_29393__$1 = temp__4092__auto___29392;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29374_29393__$1)) {
          var c__11077__auto___29394 = cljs.core.chunk_first.call(null, seq__29374_29393__$1);
          var G__29395 = cljs.core.chunk_rest.call(null, seq__29374_29393__$1);
          var G__29396 = c__11077__auto___29394;
          var G__29397 = cljs.core.count.call(null, c__11077__auto___29394);
          var G__29398 = 0;
          seq__29374_29380 = G__29395;
          chunk__29375_29381 = G__29396;
          count__29376_29382 = G__29397;
          i__29377_29383 = G__29398;
          continue;
        } else {
          var vec__29379_29399 = cljs.core.first.call(null, seq__29374_29393__$1);
          var key_name_29400 = cljs.core.nth.call(null, vec__29379_29399, 0, null);
          var f_29401 = cljs.core.nth.call(null, vec__29379_29399, 1, null);
          var str_name_29402 = cljs.core.name.call(null, key_name_29400);
          obj[str_name_29402] = f_29401;
          var G__29403 = cljs.core.next.call(null, seq__29374_29393__$1);
          var G__29404 = null;
          var G__29405 = 0;
          var G__29406 = 0;
          seq__29374_29380 = G__29403;
          chunk__29375_29381 = G__29404;
          count__29376_29382 = G__29405;
          i__29377_29383 = G__29406;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__29408 = coll;
  if (G__29408) {
    var bit__10979__auto__ = G__29408.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__10979__auto__ || G__29408.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__29408.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__29408);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__29408);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__29409 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__29409;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__29410 = i - 1;
        var G__29411 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__29410;
        r = G__29411;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__29412) {
    var xs = cljs.core.seq(arglist__29412);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__10329__auto__ = coll == null;
    if (or__10329__auto__) {
      return or__10329__auto__;
    } else {
      var G__29416 = coll;
      if (G__29416) {
        var bit__10972__auto__ = G__29416.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10972__auto__ || G__29416.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__29418 = x;
  if (G__29418) {
    var bit__10979__auto__ = G__29418.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__10979__auto__ || G__29418.cljs$core$IList$) {
      return true;
    } else {
      if (!G__29418.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__29418);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__29418);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__29420 = null;
  var G__29420__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__29420__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__29420 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29420__2.call(this, self__, coll);
      case 3:
        return G__29420__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29420;
}();
cljs.core.Keyword.prototype.apply = function(self__, args29419) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29419)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__29422 = x;
    if (G__29422) {
      var bit__10972__auto__ = G__29422.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__10972__auto__ || G__29422.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__29423 = ls.sval();
        ls = G__29423;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__29425 = s;
    if (G__29425) {
      var bit__10972__auto__ = G__29425.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__10972__auto__ || G__29425.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__29426 = cljs.core.next.call(null, s__$1);
      s__$1 = G__29426;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_29427 = 0;
  var xs_29428 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_29428) {
      ret[i_29427] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_29428));
      var G__29429 = i_29427 + 1;
      var G__29430 = cljs.core.next.call(null, xs_29428);
      i_29427 = G__29429;
      xs_29428 = G__29430;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__29431 = i + 1;
          var G__29432 = cljs.core.next.call(null, s__$1);
          i = G__29431;
          s__$1 = G__29432;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11177__auto___29433 = size;
      var i_29434 = 0;
      while (true) {
        if (i_29434 < n__11177__auto___29433) {
          a[i_29434] = init_val_or_seq;
          var G__29435 = i_29434 + 1;
          i_29434 = G__29435;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__29436 = i + 1;
          var G__29437 = cljs.core.next.call(null, s__$1);
          i = G__29436;
          s__$1 = G__29437;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11177__auto___29438 = size;
      var i_29439 = 0;
      while (true) {
        if (i_29439 < n__11177__auto___29438) {
          a[i_29439] = init_val_or_seq;
          var G__29440 = i_29439 + 1;
          i_29439 = G__29440;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__29441 = i + 1;
          var G__29442 = cljs.core.next.call(null, s__$1);
          i = G__29441;
          s__$1 = G__29442;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11177__auto___29443 = size;
      var i_29444 = 0;
      while (true) {
        if (i_29444 < n__11177__auto___29443) {
          a[i_29444] = init_val_or_seq;
          var G__29445 = i_29444 + 1;
          i_29444 = G__29445;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__29446 = i + 1;
          var G__29447 = cljs.core.next.call(null, s__$1);
          i = G__29446;
          s__$1 = G__29447;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11177__auto___29448 = size;
      var i_29449 = 0;
      while (true) {
        if (i_29449 < n__11177__auto___29448) {
          a[i_29449] = init_val_or_seq;
          var G__29450 = i_29449 + 1;
          i_29449 = G__29450;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__29451 = cljs.core.next.call(null, s__$1);
        var G__29452 = i - 1;
        var G__29453 = sum + 1;
        s__$1 = G__29451;
        i = G__29452;
        sum = G__29453;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__29454__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__29454 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29454__delegate.call(this, x, y, zs);
    };
    G__29454.cljs$lang$maxFixedArity = 2;
    G__29454.cljs$lang$applyTo = function(arglist__29455) {
      var x = cljs.core.first(arglist__29455);
      arglist__29455 = cljs.core.next(arglist__29455);
      var y = cljs.core.first(arglist__29455);
      var zs = cljs.core.rest(arglist__29455);
      return G__29454__delegate(x, y, zs);
    };
    G__29454.cljs$core$IFn$_invoke$arity$variadic = G__29454__delegate;
    return G__29454;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__29456__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__29456 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__29456__delegate.call(this, a, b, c, d, more);
    };
    G__29456.cljs$lang$maxFixedArity = 4;
    G__29456.cljs$lang$applyTo = function(arglist__29457) {
      var a = cljs.core.first(arglist__29457);
      arglist__29457 = cljs.core.next(arglist__29457);
      var b = cljs.core.first(arglist__29457);
      arglist__29457 = cljs.core.next(arglist__29457);
      var c = cljs.core.first(arglist__29457);
      arglist__29457 = cljs.core.next(arglist__29457);
      var d = cljs.core.first(arglist__29457);
      var more = cljs.core.rest(arglist__29457);
      return G__29456__delegate(a, b, c, d, more);
    };
    G__29456.cljs$core$IFn$_invoke$arity$variadic = G__29456__delegate;
    return G__29456;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__29458__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__29459 = ntcoll;
          var G__29460 = cljs.core.first.call(null, vals);
          var G__29461 = cljs.core.next.call(null, vals);
          tcoll = G__29459;
          val = G__29460;
          vals = G__29461;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__29458 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29458__delegate.call(this, tcoll, val, vals);
    };
    G__29458.cljs$lang$maxFixedArity = 2;
    G__29458.cljs$lang$applyTo = function(arglist__29462) {
      var tcoll = cljs.core.first(arglist__29462);
      arglist__29462 = cljs.core.next(arglist__29462);
      var val = cljs.core.first(arglist__29462);
      var vals = cljs.core.rest(arglist__29462);
      return G__29458__delegate(tcoll, val, vals);
    };
    G__29458.cljs$core$IFn$_invoke$arity$variadic = G__29458__delegate;
    return G__29458;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__29463__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__29464 = ntcoll;
          var G__29465 = cljs.core.first.call(null, kvs);
          var G__29466 = cljs.core.second.call(null, kvs);
          var G__29467 = cljs.core.nnext.call(null, kvs);
          tcoll = G__29464;
          key = G__29465;
          val = G__29466;
          kvs = G__29467;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__29463 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29463__delegate.call(this, tcoll, key, val, kvs);
    };
    G__29463.cljs$lang$maxFixedArity = 3;
    G__29463.cljs$lang$applyTo = function(arglist__29468) {
      var tcoll = cljs.core.first(arglist__29468);
      arglist__29468 = cljs.core.next(arglist__29468);
      var key = cljs.core.first(arglist__29468);
      arglist__29468 = cljs.core.next(arglist__29468);
      var val = cljs.core.first(arglist__29468);
      var kvs = cljs.core.rest(arglist__29468);
      return G__29463__delegate(tcoll, key, val, kvs);
    };
    G__29463.cljs$core$IFn$_invoke$arity$variadic = G__29463__delegate;
    return G__29463;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__29469__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__29470 = ntcoll;
          var G__29471 = cljs.core.first.call(null, ks);
          var G__29472 = cljs.core.next.call(null, ks);
          tcoll = G__29470;
          key = G__29471;
          ks = G__29472;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__29469 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29469__delegate.call(this, tcoll, key, ks);
    };
    G__29469.cljs$lang$maxFixedArity = 2;
    G__29469.cljs$lang$applyTo = function(arglist__29473) {
      var tcoll = cljs.core.first(arglist__29473);
      arglist__29473 = cljs.core.next(arglist__29473);
      var key = cljs.core.first(arglist__29473);
      var ks = cljs.core.rest(arglist__29473);
      return G__29469__delegate(tcoll, key, ks);
    };
    G__29469.cljs$core$IFn$_invoke$arity$variadic = G__29469__delegate;
    return G__29469;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__29474__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__29475 = ntcoll;
          var G__29476 = cljs.core.first.call(null, vals);
          var G__29477 = cljs.core.next.call(null, vals);
          tcoll = G__29475;
          val = G__29476;
          vals = G__29477;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__29474 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29474__delegate.call(this, tcoll, val, vals);
    };
    G__29474.cljs$lang$maxFixedArity = 2;
    G__29474.cljs$lang$applyTo = function(arglist__29478) {
      var tcoll = cljs.core.first(arglist__29478);
      arglist__29478 = cljs.core.next(arglist__29478);
      var val = cljs.core.first(arglist__29478);
      var vals = cljs.core.rest(arglist__29478);
      return G__29474__delegate(tcoll, val, vals);
    };
    G__29474.cljs$core$IFn$_invoke$arity$variadic = G__29474__delegate;
    return G__29474;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__29479__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__29479 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__29479__delegate.call(this, f, a, b, c, d, args);
    };
    G__29479.cljs$lang$maxFixedArity = 5;
    G__29479.cljs$lang$applyTo = function(arglist__29480) {
      var f = cljs.core.first(arglist__29480);
      arglist__29480 = cljs.core.next(arglist__29480);
      var a = cljs.core.first(arglist__29480);
      arglist__29480 = cljs.core.next(arglist__29480);
      var b = cljs.core.first(arglist__29480);
      arglist__29480 = cljs.core.next(arglist__29480);
      var c = cljs.core.first(arglist__29480);
      arglist__29480 = cljs.core.next(arglist__29480);
      var d = cljs.core.first(arglist__29480);
      var args = cljs.core.rest(arglist__29480);
      return G__29479__delegate(f, a, b, c, d, args);
    };
    G__29479.cljs$core$IFn$_invoke$arity$variadic = G__29479__delegate;
    return G__29479;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__29481__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__29481 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__29481__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__29481.cljs$lang$maxFixedArity = 6;
    G__29481.cljs$lang$applyTo = function(arglist__29482) {
      var obj = cljs.core.first(arglist__29482);
      arglist__29482 = cljs.core.next(arglist__29482);
      var f = cljs.core.first(arglist__29482);
      arglist__29482 = cljs.core.next(arglist__29482);
      var a = cljs.core.first(arglist__29482);
      arglist__29482 = cljs.core.next(arglist__29482);
      var b = cljs.core.first(arglist__29482);
      arglist__29482 = cljs.core.next(arglist__29482);
      var c = cljs.core.first(arglist__29482);
      arglist__29482 = cljs.core.next(arglist__29482);
      var d = cljs.core.first(arglist__29482);
      var args = cljs.core.rest(arglist__29482);
      return G__29481__delegate(obj, f, a, b, c, d, args);
    };
    G__29481.cljs$core$IFn$_invoke$arity$variadic = G__29481__delegate;
    return G__29481;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__29483__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__29483 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29483__delegate.call(this, x, y, more);
    };
    G__29483.cljs$lang$maxFixedArity = 2;
    G__29483.cljs$lang$applyTo = function(arglist__29484) {
      var x = cljs.core.first(arglist__29484);
      arglist__29484 = cljs.core.next(arglist__29484);
      var y = cljs.core.first(arglist__29484);
      var more = cljs.core.rest(arglist__29484);
      return G__29483__delegate(x, y, more);
    };
    G__29483.cljs$core$IFn$_invoke$arity$variadic = G__29483__delegate;
    return G__29483;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__29485 = pred;
        var G__29486 = cljs.core.next.call(null, coll);
        pred = G__29485;
        coll = G__29486;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__10329__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        var G__29487 = pred;
        var G__29488 = cljs.core.next.call(null, coll);
        pred = G__29487;
        coll = G__29488;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__29489 = null;
    var G__29489__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__29489__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__29489__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__29489__3 = function() {
      var G__29490__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__29490 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__29490__delegate.call(this, x, y, zs);
      };
      G__29490.cljs$lang$maxFixedArity = 2;
      G__29490.cljs$lang$applyTo = function(arglist__29491) {
        var x = cljs.core.first(arglist__29491);
        arglist__29491 = cljs.core.next(arglist__29491);
        var y = cljs.core.first(arglist__29491);
        var zs = cljs.core.rest(arglist__29491);
        return G__29490__delegate(x, y, zs);
      };
      G__29490.cljs$core$IFn$_invoke$arity$variadic = G__29490__delegate;
      return G__29490;
    }();
    G__29489 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__29489__0.call(this);
        case 1:
          return G__29489__1.call(this, x);
        case 2:
          return G__29489__2.call(this, x, y);
        default:
          return G__29489__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__29489.cljs$lang$maxFixedArity = 2;
    G__29489.cljs$lang$applyTo = G__29489__3.cljs$lang$applyTo;
    return G__29489;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__29492__delegate = function(args) {
      return x;
    };
    var G__29492 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29492__delegate.call(this, args);
    };
    G__29492.cljs$lang$maxFixedArity = 0;
    G__29492.cljs$lang$applyTo = function(arglist__29493) {
      var args = cljs.core.seq(arglist__29493);
      return G__29492__delegate(args);
    };
    G__29492.cljs$core$IFn$_invoke$arity$variadic = G__29492__delegate;
    return G__29492;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__29494 = null;
      var G__29494__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__29494__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__29494__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__29494__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__29494__4 = function() {
        var G__29495__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__29495 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29495__delegate.call(this, x, y, z, args);
        };
        G__29495.cljs$lang$maxFixedArity = 3;
        G__29495.cljs$lang$applyTo = function(arglist__29496) {
          var x = cljs.core.first(arglist__29496);
          arglist__29496 = cljs.core.next(arglist__29496);
          var y = cljs.core.first(arglist__29496);
          arglist__29496 = cljs.core.next(arglist__29496);
          var z = cljs.core.first(arglist__29496);
          var args = cljs.core.rest(arglist__29496);
          return G__29495__delegate(x, y, z, args);
        };
        G__29495.cljs$core$IFn$_invoke$arity$variadic = G__29495__delegate;
        return G__29495;
      }();
      G__29494 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__29494__0.call(this);
          case 1:
            return G__29494__1.call(this, x);
          case 2:
            return G__29494__2.call(this, x, y);
          case 3:
            return G__29494__3.call(this, x, y, z);
          default:
            return G__29494__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29494.cljs$lang$maxFixedArity = 3;
      G__29494.cljs$lang$applyTo = G__29494__4.cljs$lang$applyTo;
      return G__29494;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__29497 = null;
      var G__29497__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__29497__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__29497__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__29497__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__29497__4 = function() {
        var G__29498__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__29498 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29498__delegate.call(this, x, y, z, args);
        };
        G__29498.cljs$lang$maxFixedArity = 3;
        G__29498.cljs$lang$applyTo = function(arglist__29499) {
          var x = cljs.core.first(arglist__29499);
          arglist__29499 = cljs.core.next(arglist__29499);
          var y = cljs.core.first(arglist__29499);
          arglist__29499 = cljs.core.next(arglist__29499);
          var z = cljs.core.first(arglist__29499);
          var args = cljs.core.rest(arglist__29499);
          return G__29498__delegate(x, y, z, args);
        };
        G__29498.cljs$core$IFn$_invoke$arity$variadic = G__29498__delegate;
        return G__29498;
      }();
      G__29497 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__29497__0.call(this);
          case 1:
            return G__29497__1.call(this, x);
          case 2:
            return G__29497__2.call(this, x, y);
          case 3:
            return G__29497__3.call(this, x, y, z);
          default:
            return G__29497__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29497.cljs$lang$maxFixedArity = 3;
      G__29497.cljs$lang$applyTo = G__29497__4.cljs$lang$applyTo;
      return G__29497;
    }();
  };
  var comp__4 = function() {
    var G__29500__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__29501__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__29502 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__29503 = cljs.core.next.call(null, fs__$2);
              ret = G__29502;
              fs__$2 = G__29503;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__29501 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__29501__delegate.call(this, args);
        };
        G__29501.cljs$lang$maxFixedArity = 0;
        G__29501.cljs$lang$applyTo = function(arglist__29504) {
          var args = cljs.core.seq(arglist__29504);
          return G__29501__delegate(args);
        };
        G__29501.cljs$core$IFn$_invoke$arity$variadic = G__29501__delegate;
        return G__29501;
      }();
    };
    var G__29500 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29500__delegate.call(this, f1, f2, f3, fs);
    };
    G__29500.cljs$lang$maxFixedArity = 3;
    G__29500.cljs$lang$applyTo = function(arglist__29505) {
      var f1 = cljs.core.first(arglist__29505);
      arglist__29505 = cljs.core.next(arglist__29505);
      var f2 = cljs.core.first(arglist__29505);
      arglist__29505 = cljs.core.next(arglist__29505);
      var f3 = cljs.core.first(arglist__29505);
      var fs = cljs.core.rest(arglist__29505);
      return G__29500__delegate(f1, f2, f3, fs);
    };
    G__29500.cljs$core$IFn$_invoke$arity$variadic = G__29500__delegate;
    return G__29500;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__29506__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__29506 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__29506__delegate.call(this, args);
      };
      G__29506.cljs$lang$maxFixedArity = 0;
      G__29506.cljs$lang$applyTo = function(arglist__29507) {
        var args = cljs.core.seq(arglist__29507);
        return G__29506__delegate(args);
      };
      G__29506.cljs$core$IFn$_invoke$arity$variadic = G__29506__delegate;
      return G__29506;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__29508__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__29508 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__29508__delegate.call(this, args);
      };
      G__29508.cljs$lang$maxFixedArity = 0;
      G__29508.cljs$lang$applyTo = function(arglist__29509) {
        var args = cljs.core.seq(arglist__29509);
        return G__29508__delegate(args);
      };
      G__29508.cljs$core$IFn$_invoke$arity$variadic = G__29508__delegate;
      return G__29508;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__29510__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__29510 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__29510__delegate.call(this, args);
      };
      G__29510.cljs$lang$maxFixedArity = 0;
      G__29510.cljs$lang$applyTo = function(arglist__29511) {
        var args = cljs.core.seq(arglist__29511);
        return G__29510__delegate(args);
      };
      G__29510.cljs$core$IFn$_invoke$arity$variadic = G__29510__delegate;
      return G__29510;
    }();
  };
  var partial__5 = function() {
    var G__29512__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__29513__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__29513 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__29513__delegate.call(this, args);
        };
        G__29513.cljs$lang$maxFixedArity = 0;
        G__29513.cljs$lang$applyTo = function(arglist__29514) {
          var args = cljs.core.seq(arglist__29514);
          return G__29513__delegate(args);
        };
        G__29513.cljs$core$IFn$_invoke$arity$variadic = G__29513__delegate;
        return G__29513;
      }();
    };
    var G__29512 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__29512__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__29512.cljs$lang$maxFixedArity = 4;
    G__29512.cljs$lang$applyTo = function(arglist__29515) {
      var f = cljs.core.first(arglist__29515);
      arglist__29515 = cljs.core.next(arglist__29515);
      var arg1 = cljs.core.first(arglist__29515);
      arglist__29515 = cljs.core.next(arglist__29515);
      var arg2 = cljs.core.first(arglist__29515);
      arglist__29515 = cljs.core.next(arglist__29515);
      var arg3 = cljs.core.first(arglist__29515);
      var more = cljs.core.rest(arglist__29515);
      return G__29512__delegate(f, arg1, arg2, arg3, more);
    };
    G__29512.cljs$core$IFn$_invoke$arity$variadic = G__29512__delegate;
    return G__29512;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__29516 = null;
      var G__29516__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__29516__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__29516__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__29516__4 = function() {
        var G__29517__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__29517 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29517__delegate.call(this, a, b, c, ds);
        };
        G__29517.cljs$lang$maxFixedArity = 3;
        G__29517.cljs$lang$applyTo = function(arglist__29518) {
          var a = cljs.core.first(arglist__29518);
          arglist__29518 = cljs.core.next(arglist__29518);
          var b = cljs.core.first(arglist__29518);
          arglist__29518 = cljs.core.next(arglist__29518);
          var c = cljs.core.first(arglist__29518);
          var ds = cljs.core.rest(arglist__29518);
          return G__29517__delegate(a, b, c, ds);
        };
        G__29517.cljs$core$IFn$_invoke$arity$variadic = G__29517__delegate;
        return G__29517;
      }();
      G__29516 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__29516__1.call(this, a);
          case 2:
            return G__29516__2.call(this, a, b);
          case 3:
            return G__29516__3.call(this, a, b, c);
          default:
            return G__29516__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29516.cljs$lang$maxFixedArity = 3;
      G__29516.cljs$lang$applyTo = G__29516__4.cljs$lang$applyTo;
      return G__29516;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__29519 = null;
      var G__29519__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__29519__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__29519__4 = function() {
        var G__29520__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__29520 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29520__delegate.call(this, a, b, c, ds);
        };
        G__29520.cljs$lang$maxFixedArity = 3;
        G__29520.cljs$lang$applyTo = function(arglist__29521) {
          var a = cljs.core.first(arglist__29521);
          arglist__29521 = cljs.core.next(arglist__29521);
          var b = cljs.core.first(arglist__29521);
          arglist__29521 = cljs.core.next(arglist__29521);
          var c = cljs.core.first(arglist__29521);
          var ds = cljs.core.rest(arglist__29521);
          return G__29520__delegate(a, b, c, ds);
        };
        G__29520.cljs$core$IFn$_invoke$arity$variadic = G__29520__delegate;
        return G__29520;
      }();
      G__29519 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__29519__2.call(this, a, b);
          case 3:
            return G__29519__3.call(this, a, b, c);
          default:
            return G__29519__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29519.cljs$lang$maxFixedArity = 3;
      G__29519.cljs$lang$applyTo = G__29519__4.cljs$lang$applyTo;
      return G__29519;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__29522 = null;
      var G__29522__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__29522__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__29522__4 = function() {
        var G__29523__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__29523 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29523__delegate.call(this, a, b, c, ds);
        };
        G__29523.cljs$lang$maxFixedArity = 3;
        G__29523.cljs$lang$applyTo = function(arglist__29524) {
          var a = cljs.core.first(arglist__29524);
          arglist__29524 = cljs.core.next(arglist__29524);
          var b = cljs.core.first(arglist__29524);
          arglist__29524 = cljs.core.next(arglist__29524);
          var c = cljs.core.first(arglist__29524);
          var ds = cljs.core.rest(arglist__29524);
          return G__29523__delegate(a, b, c, ds);
        };
        G__29523.cljs$core$IFn$_invoke$arity$variadic = G__29523__delegate;
        return G__29523;
      }();
      G__29522 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__29522__2.call(this, a, b);
          case 3:
            return G__29522__3.call(this, a, b, c);
          default:
            return G__29522__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29522.cljs$lang$maxFixedArity = 3;
      G__29522.cljs$lang$applyTo = G__29522__4.cljs$lang$applyTo;
      return G__29522;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11177__auto___29525 = size;
          var i_29526 = 0;
          while (true) {
            if (i_29526 < n__11177__auto___29525) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_29526, cljs.core._nth.call(null, c, i_29526)));
              var G__29527 = i_29526 + 1;
              i_29526 = G__29527;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__11177__auto___29528 = size;
        var i_29529 = 0;
        while (true) {
          if (i_29529 < n__11177__auto___29528) {
            var x_29530 = f.call(null, cljs.core._nth.call(null, c, i_29529));
            if (x_29530 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_29530);
            }
            var G__29531 = i_29529 + 1;
            i_29529 = G__29531;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11177__auto___29532 = size;
          var i_29533 = 0;
          while (true) {
            if (i_29533 < n__11177__auto___29532) {
              var x_29534 = f.call(null, idx + i_29533, cljs.core._nth.call(null, c, i_29533));
              if (x_29534 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_29534);
              }
              var G__29535 = i_29533 + 1;
              i_29533 = G__29535;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            return p.call(null, y);
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__29542__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__29542 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29542__delegate.call(this, x, y, z, args);
        };
        G__29542.cljs$lang$maxFixedArity = 3;
        G__29542.cljs$lang$applyTo = function(arglist__29543) {
          var x = cljs.core.first(arglist__29543);
          arglist__29543 = cljs.core.next(arglist__29543);
          var y = cljs.core.first(arglist__29543);
          arglist__29543 = cljs.core.next(arglist__29543);
          var z = cljs.core.first(arglist__29543);
          var args = cljs.core.rest(arglist__29543);
          return G__29542__delegate(x, y, z, args);
        };
        G__29542.cljs$core$IFn$_invoke$arity$variadic = G__29542__delegate;
        return G__29542;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            return p2.call(null, x);
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              var and__10317__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__10317__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__10317__auto____$2;
              }
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              var and__10317__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__10317__auto____$2)) {
                var and__10317__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__10317__auto____$3)) {
                  var and__10317__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10317__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__10317__auto____$4;
                  }
                } else {
                  return and__10317__auto____$3;
                }
              } else {
                return and__10317__auto____$2;
              }
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__29544__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__29536_SHARP_) {
            var and__10317__auto__ = p1.call(null, p1__29536_SHARP_);
            if (cljs.core.truth_(and__10317__auto__)) {
              return p2.call(null, p1__29536_SHARP_);
            } else {
              return and__10317__auto__;
            }
          }, args));
        };
        var G__29544 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29544__delegate.call(this, x, y, z, args);
        };
        G__29544.cljs$lang$maxFixedArity = 3;
        G__29544.cljs$lang$applyTo = function(arglist__29545) {
          var x = cljs.core.first(arglist__29545);
          arglist__29545 = cljs.core.next(arglist__29545);
          var y = cljs.core.first(arglist__29545);
          arglist__29545 = cljs.core.next(arglist__29545);
          var z = cljs.core.first(arglist__29545);
          var args = cljs.core.rest(arglist__29545);
          return G__29544__delegate(x, y, z, args);
        };
        G__29544.cljs$core$IFn$_invoke$arity$variadic = G__29544__delegate;
        return G__29544;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              var and__10317__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__10317__auto____$2)) {
                var and__10317__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__10317__auto____$3)) {
                  var and__10317__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10317__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__10317__auto____$4;
                  }
                } else {
                  return and__10317__auto____$3;
                }
              } else {
                return and__10317__auto____$2;
              }
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              var and__10317__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__10317__auto____$2)) {
                var and__10317__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__10317__auto____$3)) {
                  var and__10317__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10317__auto____$4)) {
                    var and__10317__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__10317__auto____$5)) {
                      var and__10317__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__10317__auto____$6)) {
                        var and__10317__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__10317__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__10317__auto____$7;
                        }
                      } else {
                        return and__10317__auto____$6;
                      }
                    } else {
                      return and__10317__auto____$5;
                    }
                  } else {
                    return and__10317__auto____$4;
                  }
                } else {
                  return and__10317__auto____$3;
                }
              } else {
                return and__10317__auto____$2;
              }
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__29546__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__29537_SHARP_) {
            var and__10317__auto__ = p1.call(null, p1__29537_SHARP_);
            if (cljs.core.truth_(and__10317__auto__)) {
              var and__10317__auto____$1 = p2.call(null, p1__29537_SHARP_);
              if (cljs.core.truth_(and__10317__auto____$1)) {
                return p3.call(null, p1__29537_SHARP_);
              } else {
                return and__10317__auto____$1;
              }
            } else {
              return and__10317__auto__;
            }
          }, args));
        };
        var G__29546 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29546__delegate.call(this, x, y, z, args);
        };
        G__29546.cljs$lang$maxFixedArity = 3;
        G__29546.cljs$lang$applyTo = function(arglist__29547) {
          var x = cljs.core.first(arglist__29547);
          arglist__29547 = cljs.core.next(arglist__29547);
          var y = cljs.core.first(arglist__29547);
          arglist__29547 = cljs.core.next(arglist__29547);
          var z = cljs.core.first(arglist__29547);
          var args = cljs.core.rest(arglist__29547);
          return G__29546__delegate(x, y, z, args);
        };
        G__29546.cljs$core$IFn$_invoke$arity$variadic = G__29546__delegate;
        return G__29546;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__29548__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__29538_SHARP_) {
            return p1__29538_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__29539_SHARP_) {
            var and__10317__auto__ = p1__29539_SHARP_.call(null, x);
            if (cljs.core.truth_(and__10317__auto__)) {
              return p1__29539_SHARP_.call(null, y);
            } else {
              return and__10317__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__29540_SHARP_) {
            var and__10317__auto__ = p1__29540_SHARP_.call(null, x);
            if (cljs.core.truth_(and__10317__auto__)) {
              var and__10317__auto____$1 = p1__29540_SHARP_.call(null, y);
              if (cljs.core.truth_(and__10317__auto____$1)) {
                return p1__29540_SHARP_.call(null, z);
              } else {
                return and__10317__auto____$1;
              }
            } else {
              return and__10317__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__29549__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__29541_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__29541_SHARP_, args);
            }, ps__$1));
          };
          var G__29549 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__29549__delegate.call(this, x, y, z, args);
          };
          G__29549.cljs$lang$maxFixedArity = 3;
          G__29549.cljs$lang$applyTo = function(arglist__29550) {
            var x = cljs.core.first(arglist__29550);
            arglist__29550 = cljs.core.next(arglist__29550);
            var y = cljs.core.first(arglist__29550);
            arglist__29550 = cljs.core.next(arglist__29550);
            var z = cljs.core.first(arglist__29550);
            var args = cljs.core.rest(arglist__29550);
            return G__29549__delegate(x, y, z, args);
          };
          G__29549.cljs$core$IFn$_invoke$arity$variadic = G__29549__delegate;
          return G__29549;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__29548 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29548__delegate.call(this, p1, p2, p3, ps);
    };
    G__29548.cljs$lang$maxFixedArity = 3;
    G__29548.cljs$lang$applyTo = function(arglist__29551) {
      var p1 = cljs.core.first(arglist__29551);
      arglist__29551 = cljs.core.next(arglist__29551);
      var p2 = cljs.core.first(arglist__29551);
      arglist__29551 = cljs.core.next(arglist__29551);
      var p3 = cljs.core.first(arglist__29551);
      var ps = cljs.core.rest(arglist__29551);
      return G__29548__delegate(p1, p2, p3, ps);
    };
    G__29548.cljs$core$IFn$_invoke$arity$variadic = G__29548__delegate;
    return G__29548;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__10329__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__10329__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__29558__delegate = function(x, y, z, args) {
          var or__10329__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__29558 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29558__delegate.call(this, x, y, z, args);
        };
        G__29558.cljs$lang$maxFixedArity = 3;
        G__29558.cljs$lang$applyTo = function(arglist__29559) {
          var x = cljs.core.first(arglist__29559);
          arglist__29559 = cljs.core.next(arglist__29559);
          var y = cljs.core.first(arglist__29559);
          arglist__29559 = cljs.core.next(arglist__29559);
          var z = cljs.core.first(arglist__29559);
          var args = cljs.core.rest(arglist__29559);
          return G__29558__delegate(x, y, z, args);
        };
        G__29558.cljs$core$IFn$_invoke$arity$variadic = G__29558__delegate;
        return G__29558;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            var or__10329__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__10329__auto____$2)) {
              return or__10329__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            var or__10329__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__10329__auto____$2)) {
              return or__10329__auto____$2;
            } else {
              var or__10329__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__10329__auto____$3)) {
                return or__10329__auto____$3;
              } else {
                var or__10329__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10329__auto____$4)) {
                  return or__10329__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__29560__delegate = function(x, y, z, args) {
          var or__10329__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__29552_SHARP_) {
              var or__10329__auto____$1 = p1.call(null, p1__29552_SHARP_);
              if (cljs.core.truth_(or__10329__auto____$1)) {
                return or__10329__auto____$1;
              } else {
                return p2.call(null, p1__29552_SHARP_);
              }
            }, args);
          }
        };
        var G__29560 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29560__delegate.call(this, x, y, z, args);
        };
        G__29560.cljs$lang$maxFixedArity = 3;
        G__29560.cljs$lang$applyTo = function(arglist__29561) {
          var x = cljs.core.first(arglist__29561);
          arglist__29561 = cljs.core.next(arglist__29561);
          var y = cljs.core.first(arglist__29561);
          arglist__29561 = cljs.core.next(arglist__29561);
          var z = cljs.core.first(arglist__29561);
          var args = cljs.core.rest(arglist__29561);
          return G__29560__delegate(x, y, z, args);
        };
        G__29560.cljs$core$IFn$_invoke$arity$variadic = G__29560__delegate;
        return G__29560;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            var or__10329__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__10329__auto____$2)) {
              return or__10329__auto____$2;
            } else {
              var or__10329__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__10329__auto____$3)) {
                return or__10329__auto____$3;
              } else {
                var or__10329__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10329__auto____$4)) {
                  return or__10329__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            var or__10329__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__10329__auto____$2)) {
              return or__10329__auto____$2;
            } else {
              var or__10329__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__10329__auto____$3)) {
                return or__10329__auto____$3;
              } else {
                var or__10329__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10329__auto____$4)) {
                  return or__10329__auto____$4;
                } else {
                  var or__10329__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__10329__auto____$5)) {
                    return or__10329__auto____$5;
                  } else {
                    var or__10329__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__10329__auto____$6)) {
                      return or__10329__auto____$6;
                    } else {
                      var or__10329__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__10329__auto____$7)) {
                        return or__10329__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__29562__delegate = function(x, y, z, args) {
          var or__10329__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__29553_SHARP_) {
              var or__10329__auto____$1 = p1.call(null, p1__29553_SHARP_);
              if (cljs.core.truth_(or__10329__auto____$1)) {
                return or__10329__auto____$1;
              } else {
                var or__10329__auto____$2 = p2.call(null, p1__29553_SHARP_);
                if (cljs.core.truth_(or__10329__auto____$2)) {
                  return or__10329__auto____$2;
                } else {
                  return p3.call(null, p1__29553_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__29562 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29562__delegate.call(this, x, y, z, args);
        };
        G__29562.cljs$lang$maxFixedArity = 3;
        G__29562.cljs$lang$applyTo = function(arglist__29563) {
          var x = cljs.core.first(arglist__29563);
          arglist__29563 = cljs.core.next(arglist__29563);
          var y = cljs.core.first(arglist__29563);
          arglist__29563 = cljs.core.next(arglist__29563);
          var z = cljs.core.first(arglist__29563);
          var args = cljs.core.rest(arglist__29563);
          return G__29562__delegate(x, y, z, args);
        };
        G__29562.cljs$core$IFn$_invoke$arity$variadic = G__29562__delegate;
        return G__29562;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__29564__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__29554_SHARP_) {
            return p1__29554_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__29555_SHARP_) {
            var or__10329__auto__ = p1__29555_SHARP_.call(null, x);
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return p1__29555_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__29556_SHARP_) {
            var or__10329__auto__ = p1__29556_SHARP_.call(null, x);
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              var or__10329__auto____$1 = p1__29556_SHARP_.call(null, y);
              if (cljs.core.truth_(or__10329__auto____$1)) {
                return or__10329__auto____$1;
              } else {
                return p1__29556_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__29565__delegate = function(x, y, z, args) {
            var or__10329__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__29557_SHARP_) {
                return cljs.core.some.call(null, p1__29557_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__29565 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__29565__delegate.call(this, x, y, z, args);
          };
          G__29565.cljs$lang$maxFixedArity = 3;
          G__29565.cljs$lang$applyTo = function(arglist__29566) {
            var x = cljs.core.first(arglist__29566);
            arglist__29566 = cljs.core.next(arglist__29566);
            var y = cljs.core.first(arglist__29566);
            arglist__29566 = cljs.core.next(arglist__29566);
            var z = cljs.core.first(arglist__29566);
            var args = cljs.core.rest(arglist__29566);
            return G__29565__delegate(x, y, z, args);
          };
          G__29565.cljs$core$IFn$_invoke$arity$variadic = G__29565__delegate;
          return G__29565;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__29564 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29564__delegate.call(this, p1, p2, p3, ps);
    };
    G__29564.cljs$lang$maxFixedArity = 3;
    G__29564.cljs$lang$applyTo = function(arglist__29567) {
      var p1 = cljs.core.first(arglist__29567);
      arglist__29567 = cljs.core.next(arglist__29567);
      var p2 = cljs.core.first(arglist__29567);
      arglist__29567 = cljs.core.next(arglist__29567);
      var p3 = cljs.core.first(arglist__29567);
      var ps = cljs.core.rest(arglist__29567);
      return G__29564__delegate(p1, p2, p3, ps);
    };
    G__29564.cljs$core$IFn$_invoke$arity$variadic = G__29564__delegate;
    return G__29564;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11177__auto___29569 = size;
          var i_29570 = 0;
          while (true) {
            if (i_29570 < n__11177__auto___29569) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_29570)));
              var G__29571 = i_29570 + 1;
              i_29570 = G__29571;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__29572__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__29568_SHARP_) {
        return cljs.core.apply.call(null, f, p1__29568_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__29572 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__29572__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__29572.cljs$lang$maxFixedArity = 4;
    G__29572.cljs$lang$applyTo = function(arglist__29573) {
      var f = cljs.core.first(arglist__29573);
      arglist__29573 = cljs.core.next(arglist__29573);
      var c1 = cljs.core.first(arglist__29573);
      arglist__29573 = cljs.core.next(arglist__29573);
      var c2 = cljs.core.first(arglist__29573);
      arglist__29573 = cljs.core.next(arglist__29573);
      var c3 = cljs.core.first(arglist__29573);
      var colls = cljs.core.rest(arglist__29573);
      return G__29572__delegate(f, c1, c2, c3, colls);
    };
    G__29572.cljs$core$IFn$_invoke$arity$variadic = G__29572__delegate;
    return G__29572;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__29574 = n__$1 - 1;
        var G__29575 = cljs.core.rest.call(null, s);
        n__$1 = G__29574;
        coll__$1 = G__29575;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__29576 = cljs.core.next.call(null, s);
      var G__29577 = cljs.core.next.call(null, lead);
      s = G__29576;
      lead = G__29577;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__10317__auto__ = s;
        if (and__10317__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__10317__auto__;
        }
      }())) {
        var G__29578 = pred__$1;
        var G__29579 = cljs.core.rest.call(null, s);
        pred__$1 = G__29578;
        coll__$1 = G__29579;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__29580__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__29580 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29580__delegate.call(this, c1, c2, colls);
    };
    G__29580.cljs$lang$maxFixedArity = 2;
    G__29580.cljs$lang$applyTo = function(arglist__29581) {
      var c1 = cljs.core.first(arglist__29581);
      arglist__29581 = cljs.core.next(arglist__29581);
      var c2 = cljs.core.first(arglist__29581);
      var colls = cljs.core.rest(arglist__29581);
      return G__29580__delegate(c1, c2, colls);
    };
    G__29580.cljs$core$IFn$_invoke$arity$variadic = G__29580__delegate;
    return G__29580;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__29582__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__29582 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__29582__delegate.call(this, f, coll, colls);
    };
    G__29582.cljs$lang$maxFixedArity = 2;
    G__29582.cljs$lang$applyTo = function(arglist__29583) {
      var f = cljs.core.first(arglist__29583);
      arglist__29583 = cljs.core.next(arglist__29583);
      var coll = cljs.core.first(arglist__29583);
      var colls = cljs.core.rest(arglist__29583);
      return G__29582__delegate(f, coll, colls);
    };
    G__29582.cljs$core$IFn$_invoke$arity$variadic = G__29582__delegate;
    return G__29582;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__11177__auto___29584 = size;
        var i_29585 = 0;
        while (true) {
          if (i_29585 < n__11177__auto___29584) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_29585)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_29585));
            } else {
            }
            var G__29586 = i_29585 + 1;
            i_29585 = G__29586;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__29587_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__29587_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__29589 = to;
      if (G__29589) {
        var bit__10972__auto__ = G__29589.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__10972__auto__ || G__29589.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__29590__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__29590 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__29590__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__29590.cljs$lang$maxFixedArity = 4;
    G__29590.cljs$lang$applyTo = function(arglist__29591) {
      var f = cljs.core.first(arglist__29591);
      arglist__29591 = cljs.core.next(arglist__29591);
      var c1 = cljs.core.first(arglist__29591);
      arglist__29591 = cljs.core.next(arglist__29591);
      var c2 = cljs.core.first(arglist__29591);
      arglist__29591 = cljs.core.next(arglist__29591);
      var c3 = cljs.core.first(arglist__29591);
      var colls = cljs.core.rest(arglist__29591);
      return G__29590__delegate(f, c1, c2, c3, colls);
    };
    G__29590.cljs$core$IFn$_invoke$arity$variadic = G__29590__delegate;
    return G__29590;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__29593 = m__$1;
          if (G__29593) {
            var bit__10979__auto__ = G__29593.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__10979__auto__ || G__29593.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__29593.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__29593);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__29593);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__29594 = sentinel;
            var G__29595 = m__$2;
            var G__29596 = cljs.core.next.call(null, ks__$1);
            sentinel = G__29594;
            m__$1 = G__29595;
            ks__$1 = G__29596;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__29597, v) {
  var vec__29599 = p__29597;
  var k = cljs.core.nth.call(null, vec__29599, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__29599, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__29600, f) {
    var vec__29610 = p__29600;
    var k = cljs.core.nth.call(null, vec__29610, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__29610, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__29601, f, a) {
    var vec__29611 = p__29601;
    var k = cljs.core.nth.call(null, vec__29611, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__29611, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__29602, f, a, b) {
    var vec__29612 = p__29602;
    var k = cljs.core.nth.call(null, vec__29612, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__29612, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__29603, f, a, b, c) {
    var vec__29613 = p__29603;
    var k = cljs.core.nth.call(null, vec__29613, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__29613, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__29615__delegate = function(m, p__29604, f, a, b, c, args) {
      var vec__29614 = p__29604;
      var k = cljs.core.nth.call(null, vec__29614, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__29614, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__29615 = function(m, p__29604, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__29615__delegate.call(this, m, p__29604, f, a, b, c, args);
    };
    G__29615.cljs$lang$maxFixedArity = 6;
    G__29615.cljs$lang$applyTo = function(arglist__29616) {
      var m = cljs.core.first(arglist__29616);
      arglist__29616 = cljs.core.next(arglist__29616);
      var p__29604 = cljs.core.first(arglist__29616);
      arglist__29616 = cljs.core.next(arglist__29616);
      var f = cljs.core.first(arglist__29616);
      arglist__29616 = cljs.core.next(arglist__29616);
      var a = cljs.core.first(arglist__29616);
      arglist__29616 = cljs.core.next(arglist__29616);
      var b = cljs.core.first(arglist__29616);
      arglist__29616 = cljs.core.next(arglist__29616);
      var c = cljs.core.first(arglist__29616);
      var args = cljs.core.rest(arglist__29616);
      return G__29615__delegate(m, p__29604, f, a, b, c, args);
    };
    G__29615.cljs$core$IFn$_invoke$arity$variadic = G__29615__delegate;
    return G__29615;
  }();
  update_in = function(m, p__29604, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__29604, f);
      case 4:
        return update_in__4.call(this, m, p__29604, f, a);
      case 5:
        return update_in__5.call(this, m, p__29604, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__29604, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__29604, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__10899__auto__, writer__10900__auto__, opts__10901__auto__) {
  return cljs.core._write.call(null, writer__10900__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__29617 = ll - 5;
      var G__29618 = r;
      ll = G__29617;
      ret = G__29618;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__29619 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__29620 = level - 5;
          node = G__29619;
          level = G__29620;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__29622 = null;
  var G__29622__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__29622__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__29622 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29622__2.call(this, self__, k);
      case 3:
        return G__29622__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29622;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args29621) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29621)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__29623 = j + 1;
              var G__29624 = init__$2;
              j = G__29623;
              init__$1 = G__29624;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__29625 = i + step_init[0];
        i = G__29625;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__11177__auto___29626 = len;
    var i_29627 = 0;
    while (true) {
      if (i_29627 < n__11177__auto___29626) {
        new_tail[i_29627] = self__.tail[i_29627];
        var G__29628 = i_29627 + 1;
        i_29627 = G__29628;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__29629 = i + 1;
        var G__29630 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__29629;
        out = G__29630;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__29631) {
    var args = cljs.core.seq(arglist__29631);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.call = function() {
  var G__29633 = null;
  var G__29633__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__29633__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__29633 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29633__2.call(this, self__, k);
      case 3:
        return G__29633__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29633;
}();
cljs.core.Subvec.prototype.apply = function(self__, args29632) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29632)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__10636__auto__ = self__.end;
    var y__10637__auto__ = v_pos + 1;
    return x__10636__auto__ > y__10637__auto__ ? x__10636__auto__ : y__10637__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__29634 = meta;
      var G__29635 = v.v;
      var G__29636 = v.start + start;
      var G__29637 = v.start + end;
      var G__29638 = __hash;
      meta = G__29634;
      v = G__29635;
      start = G__29636;
      end = G__29637;
      __hash = G__29638;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj29642 = {};
    return obj29642;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__29643 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__29644 = level - 5;
          node = G__29643;
          level = G__29644;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__29646 = null;
  var G__29646__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29646__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29646 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29646__2.call(this, self__, k);
      case 3:
        return G__29646__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29646;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args29645) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29645)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__10329__auto__ = self__.rear;
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__10329__auto__ = self__.front;
    if (cljs.core.truth_(or__10329__auto__)) {
      return or__10329__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__29647 = i + incr;
        i = G__29647;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__29648 = i + 1;
      var G__29649 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__29648;
      out = G__29649;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj29653 = {};
    return obj29653;
  }();
  var l = ks.length;
  var i_29654 = 0;
  while (true) {
    if (i_29654 < l) {
      var k_29655 = ks[i_29654];
      new_obj[k_29655] = obj[k_29655];
      var G__29656 = i_29654 + 1;
      i_29654 = G__29656;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__29659 = null;
  var G__29659__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29659__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29659 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29659__2.call(this, self__, k);
      case 3:
        return G__29659__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29659;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args29658) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29658)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__29660 = cljs.core.rest.call(null, keys__$1);
        var G__29661 = init__$2;
        keys__$1 = G__29660;
        init__$1 = G__29661;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__29657_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__29657_SHARP_, self__.strobj[p1__29657_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj29663 = {};
  return obj29663;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__29664 = i + 2;
          i = G__29664;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__29665 = i + 2;
          i = G__29665;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__29666 = i + 2;
          i = G__29666;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__29667 = i + 2;
          i = G__29667;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__29668 = i + 2;
          i = G__29668;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_29669 = 0;
  while (true) {
    if (i_29669 < l) {
      narr[i_29669] = arr[i_29669];
      var G__29670 = i_29669 + 1;
      i_29669 = G__29670;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj29673 = {};
    return obj29673;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__29674 = cljs.core.aclone.call(null, self__.arr);
          G__29674[idx + 1] = v;
          return G__29674;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__29675 = null;
  var G__29675__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29675__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29675 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29675__2.call(this, self__, k);
      case 3:
        return G__29675__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29675;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args29671) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29671)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__29676 = i + 2;
        var G__29677 = init__$2;
        i = G__29676;
        init__$1 = G__29677;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__29678 = s + 2;
            var G__29679 = d;
            s = G__29678;
            d = G__29679;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__29680 = s + 2;
              var G__29681 = d + 2;
              s = G__29680;
              d = G__29681;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__29682 = i + 2;
        var G__29683 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__29682;
        ret = G__29683;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__29684_29686 = self__.arr;
      G__29684_29686.pop();
      G__29684_29686.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__29685 = o;
      if (G__29685) {
        var bit__10979__auto__ = G__29685.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__10979__auto__ || G__29685.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__29685.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__29685);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__29685);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__29687 = cljs.core.next.call(null, es);
          var G__29688 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__29687;
          tcoll__$2 = G__29688;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__29689 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__29690 = i + 2;
      out = G__29689;
      i = G__29690;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__10899__auto__, writer__10900__auto__, opts__10901__auto__) {
  return cljs.core._write.call(null, writer__10900__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__29693 = cljs.core.aclone.call(null, arr);
    G__29693[i] = a;
    return G__29693;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__29694 = cljs.core.aclone.call(null, arr);
    G__29694[i] = a;
    G__29694[j] = b;
    return G__29694;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__29695 = i + 2;
        var G__29696 = init__$2;
        i = G__29695;
        init__$1 = G__29696;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_29697 = 0;
        var j_29698 = 0;
        while (true) {
          if (i_29697 < 32) {
            if ((self__.bitmap >>> i_29697 & 1) === 0) {
              var G__29699 = i_29697 + 1;
              var G__29700 = j_29698;
              i_29697 = G__29699;
              j_29698 = G__29700;
              continue;
            } else {
              nodes[i_29697] = !(self__.arr[j_29698] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_29698]), self__.arr[j_29698], self__.arr[j_29698 + 1], added_leaf_QMARK_) : self__.arr[j_29698 + 1];
              var G__29701 = i_29697 + 1;
              var G__29702 = j_29698 + 2;
              i_29697 = G__29701;
              j_29698 = G__29702;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_29703 = 0;
      var j_29704 = 0;
      while (true) {
        if (i_29703 < 32) {
          if ((self__.bitmap >>> i_29703 & 1) === 0) {
            var G__29705 = i_29703 + 1;
            var G__29706 = j_29704;
            i_29703 = G__29705;
            j_29704 = G__29706;
            continue;
          } else {
            nodes[i_29703] = !(self__.arr[j_29704] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_29704]), self__.arr[j_29704], self__.arr[j_29704 + 1], added_leaf_QMARK_) : self__.arr[j_29704 + 1];
            var G__29707 = i_29703 + 1;
            var G__29708 = j_29704 + 2;
            i_29703 = G__29707;
            j_29704 = G__29708;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__29709 = i + 1;
        var G__29710 = j + 2;
        var G__29711 = bitmap | 1 << i;
        i = G__29709;
        j = G__29710;
        bitmap = G__29711;
        continue;
      } else {
        var G__29712 = i + 1;
        var G__29713 = j;
        var G__29714 = bitmap;
        i = G__29712;
        j = G__29713;
        bitmap = G__29714;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__29715 = i + 1;
          var G__29716 = init__$2;
          i = G__29715;
          init__$1 = G__29716;
          continue;
        }
      } else {
        var G__29717 = i + 1;
        var G__29718 = init__$1;
        i = G__29717;
        init__$1 = G__29718;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__29719 = i + 2;
        i = G__29719;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__29720 = j + 2;
                j = G__29720;
                continue;
              }
            } else {
              var G__29721 = j + 2;
              j = G__29721;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__29722 = j + 1;
              j = G__29722;
              continue;
            }
          } else {
            var G__29723 = j + 1;
            j = G__29723;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj29726 = {};
    return obj29726;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__29727 = null;
  var G__29727__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29727__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29727 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29727__2.call(this, self__, k);
      case 3:
        return G__29727__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29727;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args29724) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29724)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__29728 = i + 1;
      var G__29729 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__29728;
      out = G__29729;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__29730 = o;
      if (G__29730) {
        var bit__10979__auto__ = G__29730.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__10979__auto__ || G__29730.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__29730.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__29730);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__29730);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__29731 = cljs.core.next.call(null, es);
          var G__29732 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__29731;
          tcoll__$1 = G__29732;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__29733 = ascending_QMARK_ ? t.left : t.right;
      var G__29734 = cljs.core.conj.call(null, stack__$1, t);
      t = G__29733;
      stack__$1 = G__29734;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__29736 = null;
  var G__29736__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29736__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29736 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29736__2.call(this, self__, k);
      case 3:
        return G__29736__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29736;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args29735) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29735)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__29738 = null;
  var G__29738__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29738__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29738 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29738__2.call(this, self__, k);
      case 3:
        return G__29738__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29738;
}();
cljs.core.RedNode.prototype.apply = function(self__, args29737) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29737)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__29740 = null;
  var G__29740__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29740__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29740 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29740__2.call(this, self__, k);
      case 3:
        return G__29740__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29740;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args29739) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29739)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__29741 = t.left;
          t = G__29741;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__29742 = t.right;
            t = G__29742;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__29743 = cljs.core.conj.call(null, stack, t);
              var G__29744 = t.left;
              stack = G__29743;
              t = G__29744;
              continue;
            } else {
              var G__29745 = stack;
              var G__29746 = t.right;
              stack = G__29745;
              t = G__29746;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__29747 = cljs.core.conj.call(null, stack, t);
                var G__29748 = t.right;
                stack = G__29747;
                t = G__29748;
                continue;
              } else {
                var G__29749 = stack;
                var G__29750 = t.left;
                stack = G__29749;
                t = G__29750;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__29751 = cljs.core.nnext.call(null, in$);
        var G__29752 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__29751;
        out = G__29752;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__29753) {
    var keyvals = cljs.core.seq(arglist__29753);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__29754) {
    var keyvals = cljs.core.seq(arglist__29754);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj29758 = {};
      return obj29758;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__29759 = cljs.core.nnext.call(null, kvs);
        kvs = G__29759;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__29760) {
    var keyvals = cljs.core.seq(arglist__29760);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__29761 = cljs.core.nnext.call(null, in$);
        var G__29762 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__29761;
        out = G__29762;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__29763) {
    var keyvals = cljs.core.seq(arglist__29763);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__29764 = cljs.core.nnext.call(null, in$);
        var G__29765 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__29764;
        out = G__29765;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__29766) {
    var comparator = cljs.core.first(arglist__29766);
    var keyvals = cljs.core.rest(arglist__29766);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__29767 = self__.mseq;
    if (G__29767) {
      var bit__10979__auto__ = G__29767.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10979__auto__ || G__29767.cljs$core$INext$) {
        return true;
      } else {
        if (!G__29767.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__29767);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__29767);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__29768 = self__.mseq;
    if (G__29768) {
      var bit__10979__auto__ = G__29768.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10979__auto__ || G__29768.cljs$core$INext$) {
        return true;
      } else {
        if (!G__29768.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__29768);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__29768);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__29769 = self__.mseq;
    if (G__29769) {
      var bit__10979__auto__ = G__29769.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10979__auto__ || G__29769.cljs$core$INext$) {
        return true;
      } else {
        if (!G__29769.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__29769);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__29769);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__29770 = self__.mseq;
    if (G__29770) {
      var bit__10979__auto__ = G__29770.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10979__auto__ || G__29770.cljs$core$INext$) {
        return true;
      } else {
        if (!G__29770.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__29770);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__29770);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__29771_SHARP_, p2__29772_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__10329__auto__ = p1__29771_SHARP_;
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__29772_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__29773) {
    var maps = cljs.core.seq(arglist__29773);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__10329__auto__ = m1;
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__29774) {
    var f = cljs.core.first(arglist__29774);
    var maps = cljs.core.rest(arglist__29774);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__29775 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__29776 = cljs.core.next.call(null, keys);
      ret = G__29775;
      keys = G__29776;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__29779 = null;
  var G__29779__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29779__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29779 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29779__2.call(this, self__, k);
      case 3:
        return G__29779__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29779;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args29778) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29778)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__29777_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__29777_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__29780 = i + 1;
        var G__29781 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__29780;
        out = G__29781;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__29782 = i + 1;
        var G__29783 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__29782;
        out = G__29783;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__29785 = null;
  var G__29785__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__29785__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__29785 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29785__2.call(this, self__, k);
      case 3:
        return G__29785__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29785;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args29784) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29784)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__29788 = null;
  var G__29788__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__29788__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__29788 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__29788__2.call(this, self__, k);
      case 3:
        return G__29788__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__29788;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args29787) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args29787)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__29786_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__29786_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__11171__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__11171__auto__.length) {
        var G__29789 = i + 1;
        var G__29790 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__29789;
        res = G__29790;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__29791 = cljs.core._next.call(null, in$__$1);
            var G__29792 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__29791;
            out = G__29792;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__29793__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__29793 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__29793__delegate.call(this, keys);
    };
    G__29793.cljs$lang$maxFixedArity = 0;
    G__29793.cljs$lang$applyTo = function(arglist__29794) {
      var keys = cljs.core.seq(arglist__29794);
      return G__29793__delegate(keys);
    };
    G__29793.cljs$core$IFn$_invoke$arity$variadic = G__29793__delegate;
    return G__29793;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__29795) {
    var keys = cljs.core.seq(arglist__29795);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__29796) {
    var comparator = cljs.core.first(arglist__29796);
    var keys = cljs.core.rest(arglist__29796);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__29797_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__29797_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__29797_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__29804, seen__$1) {
        while (true) {
          var vec__29805 = p__29804;
          var f = cljs.core.nth.call(null, vec__29805, 0, null);
          var xs__$1 = vec__29805;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__29806 = cljs.core.rest.call(null, s);
              var G__29807 = seen__$1;
              p__29804 = G__29806;
              seen__$1 = G__29807;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__29808 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__29809 = cljs.core.next.call(null, s__$1);
      ret = G__29808;
      s__$1 = G__29809;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__29811 = x;
    if (G__29811) {
      var bit__10972__auto__ = G__29811.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__10972__auto__ || G__29811.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__29812 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__29813 = cljs.core.next.call(null, ks);
      var G__29814 = cljs.core.next.call(null, vs);
      map = G__29812;
      ks = G__29813;
      vs = G__29814;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__29817__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__29815_SHARP_, p2__29816_SHARP_) {
        return max_key.call(null, k, p1__29815_SHARP_, p2__29816_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__29817 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29817__delegate.call(this, k, x, y, more);
    };
    G__29817.cljs$lang$maxFixedArity = 3;
    G__29817.cljs$lang$applyTo = function(arglist__29818) {
      var k = cljs.core.first(arglist__29818);
      arglist__29818 = cljs.core.next(arglist__29818);
      var x = cljs.core.first(arglist__29818);
      arglist__29818 = cljs.core.next(arglist__29818);
      var y = cljs.core.first(arglist__29818);
      var more = cljs.core.rest(arglist__29818);
      return G__29817__delegate(k, x, y, more);
    };
    G__29817.cljs$core$IFn$_invoke$arity$variadic = G__29817__delegate;
    return G__29817;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__29821__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__29819_SHARP_, p2__29820_SHARP_) {
        return min_key.call(null, k, p1__29819_SHARP_, p2__29820_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__29821 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29821__delegate.call(this, k, x, y, more);
    };
    G__29821.cljs$lang$maxFixedArity = 3;
    G__29821.cljs$lang$applyTo = function(arglist__29822) {
      var k = cljs.core.first(arglist__29822);
      arglist__29822 = cljs.core.next(arglist__29822);
      var x = cljs.core.first(arglist__29822);
      arglist__29822 = cljs.core.next(arglist__29822);
      var y = cljs.core.first(arglist__29822);
      var more = cljs.core.rest(arglist__29822);
      return G__29821__delegate(k, x, y, more);
    };
    G__29821.cljs$core$IFn$_invoke$arity$variadic = G__29821__delegate;
    return G__29821;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__29825 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__29825, 0, null);
        var s = vec__29825;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__29826 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__29826, 0, null);
      var s = vec__29826;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__29829 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__29829, 0, null);
        var s = vec__29829;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__29830 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__29830, 0, null);
      var s = vec__29830;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__29831_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__29831_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__29842 = null;
      var G__29842__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__29842__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__29842__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__29842__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__29842__4 = function() {
        var G__29843__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__29843 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29843__delegate.call(this, x, y, z, args);
        };
        G__29843.cljs$lang$maxFixedArity = 3;
        G__29843.cljs$lang$applyTo = function(arglist__29844) {
          var x = cljs.core.first(arglist__29844);
          arglist__29844 = cljs.core.next(arglist__29844);
          var y = cljs.core.first(arglist__29844);
          arglist__29844 = cljs.core.next(arglist__29844);
          var z = cljs.core.first(arglist__29844);
          var args = cljs.core.rest(arglist__29844);
          return G__29843__delegate(x, y, z, args);
        };
        G__29843.cljs$core$IFn$_invoke$arity$variadic = G__29843__delegate;
        return G__29843;
      }();
      G__29842 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__29842__0.call(this);
          case 1:
            return G__29842__1.call(this, x);
          case 2:
            return G__29842__2.call(this, x, y);
          case 3:
            return G__29842__3.call(this, x, y, z);
          default:
            return G__29842__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29842.cljs$lang$maxFixedArity = 3;
      G__29842.cljs$lang$applyTo = G__29842__4.cljs$lang$applyTo;
      return G__29842;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__29845 = null;
      var G__29845__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__29845__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__29845__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__29845__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__29845__4 = function() {
        var G__29846__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__29846 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29846__delegate.call(this, x, y, z, args);
        };
        G__29846.cljs$lang$maxFixedArity = 3;
        G__29846.cljs$lang$applyTo = function(arglist__29847) {
          var x = cljs.core.first(arglist__29847);
          arglist__29847 = cljs.core.next(arglist__29847);
          var y = cljs.core.first(arglist__29847);
          arglist__29847 = cljs.core.next(arglist__29847);
          var z = cljs.core.first(arglist__29847);
          var args = cljs.core.rest(arglist__29847);
          return G__29846__delegate(x, y, z, args);
        };
        G__29846.cljs$core$IFn$_invoke$arity$variadic = G__29846__delegate;
        return G__29846;
      }();
      G__29845 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__29845__0.call(this);
          case 1:
            return G__29845__1.call(this, x);
          case 2:
            return G__29845__2.call(this, x, y);
          case 3:
            return G__29845__3.call(this, x, y, z);
          default:
            return G__29845__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29845.cljs$lang$maxFixedArity = 3;
      G__29845.cljs$lang$applyTo = G__29845__4.cljs$lang$applyTo;
      return G__29845;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__29848 = null;
      var G__29848__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__29848__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__29848__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__29848__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__29848__4 = function() {
        var G__29849__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__29849 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__29849__delegate.call(this, x, y, z, args);
        };
        G__29849.cljs$lang$maxFixedArity = 3;
        G__29849.cljs$lang$applyTo = function(arglist__29850) {
          var x = cljs.core.first(arglist__29850);
          arglist__29850 = cljs.core.next(arglist__29850);
          var y = cljs.core.first(arglist__29850);
          arglist__29850 = cljs.core.next(arglist__29850);
          var z = cljs.core.first(arglist__29850);
          var args = cljs.core.rest(arglist__29850);
          return G__29849__delegate(x, y, z, args);
        };
        G__29849.cljs$core$IFn$_invoke$arity$variadic = G__29849__delegate;
        return G__29849;
      }();
      G__29848 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__29848__0.call(this);
          case 1:
            return G__29848__1.call(this, x);
          case 2:
            return G__29848__2.call(this, x, y);
          case 3:
            return G__29848__3.call(this, x, y, z);
          default:
            return G__29848__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__29848.cljs$lang$maxFixedArity = 3;
      G__29848.cljs$lang$applyTo = G__29848__4.cljs$lang$applyTo;
      return G__29848;
    }();
  };
  var juxt__4 = function() {
    var G__29851__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__29852 = null;
        var G__29852__0 = function() {
          return cljs.core.reduce.call(null, function(p1__29832_SHARP_, p2__29833_SHARP_) {
            return cljs.core.conj.call(null, p1__29832_SHARP_, p2__29833_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__29852__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__29834_SHARP_, p2__29835_SHARP_) {
            return cljs.core.conj.call(null, p1__29834_SHARP_, p2__29835_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__29852__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__29836_SHARP_, p2__29837_SHARP_) {
            return cljs.core.conj.call(null, p1__29836_SHARP_, p2__29837_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__29852__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__29838_SHARP_, p2__29839_SHARP_) {
            return cljs.core.conj.call(null, p1__29838_SHARP_, p2__29839_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__29852__4 = function() {
          var G__29853__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__29840_SHARP_, p2__29841_SHARP_) {
              return cljs.core.conj.call(null, p1__29840_SHARP_, cljs.core.apply.call(null, p2__29841_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__29853 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__29853__delegate.call(this, x, y, z, args);
          };
          G__29853.cljs$lang$maxFixedArity = 3;
          G__29853.cljs$lang$applyTo = function(arglist__29854) {
            var x = cljs.core.first(arglist__29854);
            arglist__29854 = cljs.core.next(arglist__29854);
            var y = cljs.core.first(arglist__29854);
            arglist__29854 = cljs.core.next(arglist__29854);
            var z = cljs.core.first(arglist__29854);
            var args = cljs.core.rest(arglist__29854);
            return G__29853__delegate(x, y, z, args);
          };
          G__29853.cljs$core$IFn$_invoke$arity$variadic = G__29853__delegate;
          return G__29853;
        }();
        G__29852 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__29852__0.call(this);
            case 1:
              return G__29852__1.call(this, x);
            case 2:
              return G__29852__2.call(this, x, y);
            case 3:
              return G__29852__3.call(this, x, y, z);
            default:
              return G__29852__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__29852.cljs$lang$maxFixedArity = 3;
        G__29852.cljs$lang$applyTo = G__29852__4.cljs$lang$applyTo;
        return G__29852;
      }();
    };
    var G__29851 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__29851__delegate.call(this, f, g, h, fs);
    };
    G__29851.cljs$lang$maxFixedArity = 3;
    G__29851.cljs$lang$applyTo = function(arglist__29855) {
      var f = cljs.core.first(arglist__29855);
      arglist__29855 = cljs.core.next(arglist__29855);
      var g = cljs.core.first(arglist__29855);
      arglist__29855 = cljs.core.next(arglist__29855);
      var h = cljs.core.first(arglist__29855);
      var fs = cljs.core.rest(arglist__29855);
      return G__29851__delegate(f, g, h, fs);
    };
    G__29851.cljs$core$IFn$_invoke$arity$variadic = G__29851__delegate;
    return G__29851;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__29856 = cljs.core.next.call(null, coll);
        coll = G__29856;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__29857 = n - 1;
        var G__29858 = cljs.core.next.call(null, coll);
        n = G__29857;
        coll = G__29858;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__29860 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__29860, 0, null);
  var flags = cljs.core.nth.call(null, vec__29860, 1, null);
  var pattern = cljs.core.nth.call(null, vec__29860, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_29862 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_29863__$1 = cljs.core.next.call(null, coll);
      var n_29864 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_29863__$1 && (n_29864 == null || !(n_29864 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_29863__$1), writer, opts);
          var G__29865 = cljs.core.next.call(null, coll_29863__$1);
          var G__29866 = n_29864 - 1;
          coll_29863__$1 = G__29865;
          n_29864 = G__29866;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_29862;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__29871 = cljs.core.seq.call(null, ss);
    var chunk__29872 = null;
    var count__29873 = 0;
    var i__29874 = 0;
    while (true) {
      if (i__29874 < count__29873) {
        var s = cljs.core._nth.call(null, chunk__29872, i__29874);
        cljs.core._write.call(null, writer, s);
        var G__29875 = seq__29871;
        var G__29876 = chunk__29872;
        var G__29877 = count__29873;
        var G__29878 = i__29874 + 1;
        seq__29871 = G__29875;
        chunk__29872 = G__29876;
        count__29873 = G__29877;
        i__29874 = G__29878;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__29871);
        if (temp__4092__auto__) {
          var seq__29871__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__29871__$1)) {
            var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__29871__$1);
            var G__29879 = cljs.core.chunk_rest.call(null, seq__29871__$1);
            var G__29880 = c__11077__auto__;
            var G__29881 = cljs.core.count.call(null, c__11077__auto__);
            var G__29882 = 0;
            seq__29871 = G__29879;
            chunk__29872 = G__29880;
            count__29873 = G__29881;
            i__29874 = G__29882;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__29871__$1);
            cljs.core._write.call(null, writer, s);
            var G__29883 = cljs.core.next.call(null, seq__29871__$1);
            var G__29884 = null;
            var G__29885 = 0;
            var G__29886 = 0;
            seq__29871 = G__29883;
            chunk__29872 = G__29884;
            count__29873 = G__29885;
            i__29874 = G__29886;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__29887) {
    var writer = cljs.core.first(arglist__29887);
    var ss = cljs.core.rest(arglist__29887);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj29889 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj29889;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__10317__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = function() {
              var G__29895 = obj;
              if (G__29895) {
                var bit__10979__auto__ = G__29895.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__10979__auto__ || G__29895.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__29895.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__29895);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__29895);
              }
            }();
            if (and__10317__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__29896 = obj;
              if (G__29896) {
                var bit__10972__auto__ = G__29896.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__10972__auto__ || G__29896.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__29898 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__29898;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__29897 = obj;
                              if (G__29897) {
                                var bit__10979__auto__ = G__29897.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__10979__auto__ || G__29897.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__29897.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__29897);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__29897);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__29903 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__29904 = null;
  var count__29905 = 0;
  var i__29906 = 0;
  while (true) {
    if (i__29906 < count__29905) {
      var obj = cljs.core._nth.call(null, chunk__29904, i__29906);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__29907 = seq__29903;
      var G__29908 = chunk__29904;
      var G__29909 = count__29905;
      var G__29910 = i__29906 + 1;
      seq__29903 = G__29907;
      chunk__29904 = G__29908;
      count__29905 = G__29909;
      i__29906 = G__29910;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__29903);
      if (temp__4092__auto__) {
        var seq__29903__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29903__$1)) {
          var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__29903__$1);
          var G__29911 = cljs.core.chunk_rest.call(null, seq__29903__$1);
          var G__29912 = c__11077__auto__;
          var G__29913 = cljs.core.count.call(null, c__11077__auto__);
          var G__29914 = 0;
          seq__29903 = G__29911;
          chunk__29904 = G__29912;
          count__29905 = G__29913;
          i__29906 = G__29914;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__29903__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__29915 = cljs.core.next.call(null, seq__29903__$1);
          var G__29916 = null;
          var G__29917 = 0;
          var G__29918 = 0;
          seq__29903 = G__29915;
          chunk__29904 = G__29916;
          count__29905 = G__29917;
          i__29906 = G__29918;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__29919) {
    var objs = cljs.core.seq(arglist__29919);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__29920) {
    var objs = cljs.core.seq(arglist__29920);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__29921) {
    var objs = cljs.core.seq(arglist__29921);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__29922) {
    var objs = cljs.core.seq(arglist__29922);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__29923) {
    var objs = cljs.core.seq(arglist__29923);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__29924) {
    var objs = cljs.core.seq(arglist__29924);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__29925) {
    var objs = cljs.core.seq(arglist__29925);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__29926) {
    var objs = cljs.core.seq(arglist__29926);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj29928 = {};
  return obj29928;
}();
cljs.core.IReset = function() {
  var obj29930 = {};
  return obj29930;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj29932 = {};
  return obj29932;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__29933 = cljs.core.seq.call(null, self__.watches);
  var chunk__29934 = null;
  var count__29935 = 0;
  var i__29936 = 0;
  while (true) {
    if (i__29936 < count__29935) {
      var vec__29937 = cljs.core._nth.call(null, chunk__29934, i__29936);
      var key = cljs.core.nth.call(null, vec__29937, 0, null);
      var f = cljs.core.nth.call(null, vec__29937, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__29939 = seq__29933;
      var G__29940 = chunk__29934;
      var G__29941 = count__29935;
      var G__29942 = i__29936 + 1;
      seq__29933 = G__29939;
      chunk__29934 = G__29940;
      count__29935 = G__29941;
      i__29936 = G__29942;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__29933);
      if (temp__4092__auto__) {
        var seq__29933__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__29933__$1)) {
          var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__29933__$1);
          var G__29943 = cljs.core.chunk_rest.call(null, seq__29933__$1);
          var G__29944 = c__11077__auto__;
          var G__29945 = cljs.core.count.call(null, c__11077__auto__);
          var G__29946 = 0;
          seq__29933 = G__29943;
          chunk__29934 = G__29944;
          count__29935 = G__29945;
          i__29936 = G__29946;
          continue;
        } else {
          var vec__29938 = cljs.core.first.call(null, seq__29933__$1);
          var key = cljs.core.nth.call(null, vec__29938, 0, null);
          var f = cljs.core.nth.call(null, vec__29938, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__29947 = cljs.core.next.call(null, seq__29933__$1);
          var G__29948 = null;
          var G__29949 = 0;
          var G__29950 = 0;
          seq__29933 = G__29947;
          chunk__29934 = G__29948;
          count__29935 = G__29949;
          i__29936 = G__29950;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__29954__delegate = function(x, p__29951) {
      var map__29953 = p__29951;
      var map__29953__$1 = cljs.core.seq_QMARK_.call(null, map__29953) ? cljs.core.apply.call(null, cljs.core.hash_map, map__29953) : map__29953;
      var validator = cljs.core.get.call(null, map__29953__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__29953__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__29954 = function(x, var_args) {
      var p__29951 = null;
      if (arguments.length > 1) {
        p__29951 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__29954__delegate.call(this, x, p__29951);
    };
    G__29954.cljs$lang$maxFixedArity = 1;
    G__29954.cljs$lang$applyTo = function(arglist__29955) {
      var x = cljs.core.first(arglist__29955);
      var p__29951 = cljs.core.rest(arglist__29955);
      return G__29954__delegate(x, p__29951);
    };
    G__29954.cljs$core$IFn$_invoke$arity$variadic = G__29954__delegate;
    return G__29954;
  }();
  atom = function(x, var_args) {
    var p__29951 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__29956__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__29956 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__29956__delegate.call(this, a, f, x, y, more);
    };
    G__29956.cljs$lang$maxFixedArity = 4;
    G__29956.cljs$lang$applyTo = function(arglist__29957) {
      var a = cljs.core.first(arglist__29957);
      arglist__29957 = cljs.core.next(arglist__29957);
      var f = cljs.core.first(arglist__29957);
      arglist__29957 = cljs.core.next(arglist__29957);
      var x = cljs.core.first(arglist__29957);
      arglist__29957 = cljs.core.next(arglist__29957);
      var y = cljs.core.first(arglist__29957);
      var more = cljs.core.rest(arglist__29957);
      return G__29956__delegate(a, f, x, y, more);
    };
    G__29956.cljs$core$IFn$_invoke$arity$variadic = G__29956__delegate;
    return G__29956;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__29958) {
    var iref = cljs.core.first(arglist__29958);
    arglist__29958 = cljs.core.next(arglist__29958);
    var f = cljs.core.first(arglist__29958);
    var args = cljs.core.rest(arglist__29958);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__29959) {
    var map__29960 = p__29959;
    var map__29960__$1 = cljs.core.seq_QMARK_.call(null, map__29960) ? cljs.core.apply.call(null, cljs.core.hash_map, map__29960) : map__29960;
    var curr_state = map__29960__$1;
    var done = cljs.core.get.call(null, map__29960__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj29962 = {};
  return obj29962;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._key__GT_js[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__29964 = k;
    if (G__29964) {
      var bit__10979__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__10329__auto__ = bit__10979__auto__;
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return G__29964.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__29964.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__29964);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__29964);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__29978 = x;
      if (G__29978) {
        var bit__10979__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__10329__auto__ = bit__10979__auto__;
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return G__29978.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__29978.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__29978);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__29978);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj29980 = {};
              return obj29980;
            }();
            var seq__29981_29991 = cljs.core.seq.call(null, x);
            var chunk__29982_29992 = null;
            var count__29983_29993 = 0;
            var i__29984_29994 = 0;
            while (true) {
              if (i__29984_29994 < count__29983_29993) {
                var vec__29985_29995 = cljs.core._nth.call(null, chunk__29982_29992, i__29984_29994);
                var k_29996 = cljs.core.nth.call(null, vec__29985_29995, 0, null);
                var v_29997 = cljs.core.nth.call(null, vec__29985_29995, 1, null);
                m[cljs.core.key__GT_js.call(null, k_29996)] = clj__GT_js.call(null, v_29997);
                var G__29998 = seq__29981_29991;
                var G__29999 = chunk__29982_29992;
                var G__30000 = count__29983_29993;
                var G__30001 = i__29984_29994 + 1;
                seq__29981_29991 = G__29998;
                chunk__29982_29992 = G__29999;
                count__29983_29993 = G__30000;
                i__29984_29994 = G__30001;
                continue;
              } else {
                var temp__4092__auto___30002 = cljs.core.seq.call(null, seq__29981_29991);
                if (temp__4092__auto___30002) {
                  var seq__29981_30003__$1 = temp__4092__auto___30002;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__29981_30003__$1)) {
                    var c__11077__auto___30004 = cljs.core.chunk_first.call(null, seq__29981_30003__$1);
                    var G__30005 = cljs.core.chunk_rest.call(null, seq__29981_30003__$1);
                    var G__30006 = c__11077__auto___30004;
                    var G__30007 = cljs.core.count.call(null, c__11077__auto___30004);
                    var G__30008 = 0;
                    seq__29981_29991 = G__30005;
                    chunk__29982_29992 = G__30006;
                    count__29983_29993 = G__30007;
                    i__29984_29994 = G__30008;
                    continue;
                  } else {
                    var vec__29986_30009 = cljs.core.first.call(null, seq__29981_30003__$1);
                    var k_30010 = cljs.core.nth.call(null, vec__29986_30009, 0, null);
                    var v_30011 = cljs.core.nth.call(null, vec__29986_30009, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_30010)] = clj__GT_js.call(null, v_30011);
                    var G__30012 = cljs.core.next.call(null, seq__29981_30003__$1);
                    var G__30013 = null;
                    var G__30014 = 0;
                    var G__30015 = 0;
                    seq__29981_29991 = G__30012;
                    chunk__29982_29992 = G__30013;
                    count__29983_29993 = G__30014;
                    i__29984_29994 = G__30015;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__29987_30016 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__29988_30017 = null;
              var count__29989_30018 = 0;
              var i__29990_30019 = 0;
              while (true) {
                if (i__29990_30019 < count__29989_30018) {
                  var x_30020__$1 = cljs.core._nth.call(null, chunk__29988_30017, i__29990_30019);
                  arr.push(x_30020__$1);
                  var G__30021 = seq__29987_30016;
                  var G__30022 = chunk__29988_30017;
                  var G__30023 = count__29989_30018;
                  var G__30024 = i__29990_30019 + 1;
                  seq__29987_30016 = G__30021;
                  chunk__29988_30017 = G__30022;
                  count__29989_30018 = G__30023;
                  i__29990_30019 = G__30024;
                  continue;
                } else {
                  var temp__4092__auto___30025 = cljs.core.seq.call(null, seq__29987_30016);
                  if (temp__4092__auto___30025) {
                    var seq__29987_30026__$1 = temp__4092__auto___30025;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__29987_30026__$1)) {
                      var c__11077__auto___30027 = cljs.core.chunk_first.call(null, seq__29987_30026__$1);
                      var G__30028 = cljs.core.chunk_rest.call(null, seq__29987_30026__$1);
                      var G__30029 = c__11077__auto___30027;
                      var G__30030 = cljs.core.count.call(null, c__11077__auto___30027);
                      var G__30031 = 0;
                      seq__29987_30016 = G__30028;
                      chunk__29988_30017 = G__30029;
                      count__29989_30018 = G__30030;
                      i__29990_30019 = G__30031;
                      continue;
                    } else {
                      var x_30032__$1 = cljs.core.first.call(null, seq__29987_30026__$1);
                      arr.push(x_30032__$1);
                      var G__30033 = cljs.core.next.call(null, seq__29987_30026__$1);
                      var G__30034 = null;
                      var G__30035 = 0;
                      var G__30036 = 0;
                      seq__29987_30016 = G__30033;
                      chunk__29988_30017 = G__30034;
                      count__29989_30018 = G__30035;
                      i__29990_30019 = G__30036;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj30038 = {};
  return obj30038;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__30059__delegate = function(x, opts) {
      if (function() {
        var G__30049 = x;
        if (G__30049) {
          var bit__10979__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__10329__auto__ = bit__10979__auto__;
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return G__30049.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__30049.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__30049);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__30049);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__30050 = opts;
          var map__30050__$1 = cljs.core.seq_QMARK_.call(null, map__30050) ? cljs.core.apply.call(null, cljs.core.hash_map, map__30050) : map__30050;
          var keywordize_keys = cljs.core.get.call(null, map__30050__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__30050, map__30050__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__11046__auto__ = function(map__30050, map__30050__$1, keywordize_keys, keyfn) {
                          return function iter__30055(s__30056) {
                            return new cljs.core.LazySeq(null, function(map__30050, map__30050__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__30056__$1 = s__30056;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__30056__$1);
                                  if (temp__4092__auto__) {
                                    var s__30056__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__30056__$2)) {
                                      var c__11044__auto__ = cljs.core.chunk_first.call(null, s__30056__$2);
                                      var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
                                      var b__30058 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
                                      if (function() {
                                        var i__30057 = 0;
                                        while (true) {
                                          if (i__30057 < size__11045__auto__) {
                                            var k = cljs.core._nth.call(null, c__11044__auto__, i__30057);
                                            cljs.core.chunk_append.call(null, b__30058, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__30060 = i__30057 + 1;
                                            i__30057 = G__30060;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__30058), iter__30055.call(null, cljs.core.chunk_rest.call(null, s__30056__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__30058), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__30056__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__30055.call(null, cljs.core.rest.call(null, s__30056__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__30050, map__30050__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__30050, map__30050__$1, keywordize_keys, keyfn);
                        return iter__11046__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__30050, map__30050__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__30059 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__30059__delegate.call(this, x, opts);
    };
    G__30059.cljs$lang$maxFixedArity = 1;
    G__30059.cljs$lang$applyTo = function(arglist__30061) {
      var x = cljs.core.first(arglist__30061);
      var opts = cljs.core.rest(arglist__30061);
      return G__30059__delegate(x, opts);
    };
    G__30059.cljs$core$IFn$_invoke$arity$variadic = G__30059__delegate;
    return G__30059;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__30062__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__30062 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__30062__delegate.call(this, args);
    };
    G__30062.cljs$lang$maxFixedArity = 0;
    G__30062.cljs$lang$applyTo = function(arglist__30063) {
      var args = cljs.core.seq(arglist__30063);
      return G__30062__delegate(args);
    };
    G__30062.cljs$core$IFn$_invoke$arity$variadic = G__30062__delegate;
    return G__30062;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__30064 = ret;
        f = G__30064;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__30065__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__30065 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__30065__delegate.call(this, f, args);
    };
    G__30065.cljs$lang$maxFixedArity = 1;
    G__30065.cljs$lang$applyTo = function(arglist__30066) {
      var f = cljs.core.first(arglist__30066);
      var args = cljs.core.rest(arglist__30066);
      return G__30065__delegate(f, args);
    };
    G__30065.cljs$core$IFn$_invoke$arity$variadic = G__30065__delegate;
    return G__30065;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__30067) {
    var f = cljs.core.first(arglist__30067);
    var args = cljs.core.rest(arglist__30067);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__10329__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__10329__auto__) {
      return or__10329__auto__;
    } else {
      var or__10329__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__10329__auto____$1) {
        return or__10329__auto____$1;
      } else {
        var and__10317__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__10317__auto__) {
          var and__10317__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__10317__auto____$1) {
            var and__10317__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__10317__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__30068 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__30069 = i + 1;
                  ret = G__30068;
                  i = G__30069;
                  continue;
                }
                break;
              }
            } else {
              return and__10317__auto____$2;
            }
          } else {
            return and__10317__auto____$1;
          }
        } else {
          return and__10317__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__10329__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__10329__auto__)) {
      return or__10329__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__30070_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__30070_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__30070_SHARP_), cljs.core.second.call(null, p1__30070_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__30071_SHARP_, p2__30072_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__30071_SHARP_, p2__30072_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__10329__auto__ = cljs.core.truth_(function() {
    var and__10317__auto__ = xprefs;
    if (cljs.core.truth_(and__10317__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__10317__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    var or__10329__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__30073 = cljs.core.rest.call(null, ps);
          ps = G__30073;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__10329__auto____$1)) {
      return or__10329__auto____$1;
    } else {
      var or__10329__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__30074 = cljs.core.rest.call(null, ps);
            ps = G__30074;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__10329__auto____$2)) {
        return or__10329__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__10329__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__30077) {
    var vec__30078 = p__30077;
    var k = cljs.core.nth.call(null, vec__30078, 0, null);
    var _ = cljs.core.nth.call(null, vec__30078, 1, null);
    var e = vec__30078;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__10329__auto__ = be == null;
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj30080 = {};
  return obj30080;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._reset[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._reset["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._add_method[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._add_method["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._remove_method[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._remove_method["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._prefer_method[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._prefer_method["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._get_method[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._get_method["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._methods[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._methods["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._prefers[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._prefers["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._dispatch[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._dispatch["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__30081__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__30081 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__30081__delegate.call(this, _, args);
  };
  G__30081.cljs$lang$maxFixedArity = 1;
  G__30081.cljs$lang$applyTo = function(arglist__30082) {
    var _ = cljs.core.first(arglist__30082);
    var args = cljs.core.rest(arglist__30082);
    return G__30081__delegate(_, args);
  };
  G__30081.cljs$core$IFn$_invoke$arity$variadic = G__30081__delegate;
  return G__30081;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__10899__auto__, writer__10900__auto__, opts__10901__auto__) {
  return cljs.core._write.call(null, writer__10900__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__36795) {
    var vec__36796 = p__36795;
    var k = cljs.core.nth.call(null, vec__36796, 0, null);
    var v = cljs.core.nth.call(null, vec__36796, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__36799) {
    var vec__36800 = p__36799;
    var k = cljs.core.nth.call(null, vec__36800, 0, null);
    var v = cljs.core.nth.call(null, vec__36800, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(p1__36763_SHARP_) {
    return max === p1__36763_SHARP_;
  }, coll));
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var union__1 = function(s1) {
    return s1;
  };
  var union__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
    }
  };
  var union__3 = function() {
    var G__36764__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__36764 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__36764__delegate.call(this, s1, s2, sets);
    };
    G__36764.cljs$lang$maxFixedArity = 2;
    G__36764.cljs$lang$applyTo = function(arglist__36765) {
      var s1 = cljs.core.first(arglist__36765);
      arglist__36765 = cljs.core.next(arglist__36765);
      var s2 = cljs.core.first(arglist__36765);
      var sets = cljs.core.rest(arglist__36765);
      return G__36764__delegate(s1, s2, sets);
    };
    G__36764.cljs$core$IFn$_invoke$arity$variadic = G__36764__delegate;
    return G__36764;
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$core$IFn$_invoke$arity$0 = union__0;
  union.cljs$core$IFn$_invoke$arity$1 = union__1;
  union.cljs$core$IFn$_invoke$arity$2 = union__2;
  union.cljs$core$IFn$_invoke$arity$variadic = union__3.cljs$core$IFn$_invoke$arity$variadic;
  return union;
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1;
  };
  var intersection__2 = function(s1, s2) {
    while (true) {
      if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__36767 = s2;
        var G__36768 = s1;
        s1 = G__36767;
        s2 = G__36768;
        continue;
      } else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if (cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result;
            } else {
              return cljs.core.disj.call(null, result, item);
            }
          };
        }(s1, s2), s1, s1);
      }
      break;
    }
  };
  var intersection__3 = function() {
    var G__36769__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__36766_SHARP_) {
        return-cljs.core.count.call(null, p1__36766_SHARP_);
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__36769 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__36769__delegate.call(this, s1, s2, sets);
    };
    G__36769.cljs$lang$maxFixedArity = 2;
    G__36769.cljs$lang$applyTo = function(arglist__36770) {
      var s1 = cljs.core.first(arglist__36770);
      arglist__36770 = cljs.core.next(arglist__36770);
      var s2 = cljs.core.first(arglist__36770);
      var sets = cljs.core.rest(arglist__36770);
      return G__36769__delegate(s1, s2, sets);
    };
    G__36769.cljs$core$IFn$_invoke$arity$variadic = G__36769__delegate;
    return G__36769;
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$core$IFn$_invoke$arity$1 = intersection__1;
  intersection.cljs$core$IFn$_invoke$arity$2 = intersection__2;
  intersection.cljs$core$IFn$_invoke$arity$variadic = intersection__3.cljs$core$IFn$_invoke$arity$variadic;
  return intersection;
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1;
  };
  var difference__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if (cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item);
        } else {
          return result;
        }
      }, s1, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
    }
  };
  var difference__3 = function() {
    var G__36771__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2));
    };
    var G__36771 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__36771__delegate.call(this, s1, s2, sets);
    };
    G__36771.cljs$lang$maxFixedArity = 2;
    G__36771.cljs$lang$applyTo = function(arglist__36772) {
      var s1 = cljs.core.first(arglist__36772);
      arglist__36772 = cljs.core.next(arglist__36772);
      var s2 = cljs.core.first(arglist__36772);
      var sets = cljs.core.rest(arglist__36772);
      return G__36771__delegate(s1, s2, sets);
    };
    G__36771.cljs$core$IFn$_invoke$arity$variadic = G__36771__delegate;
    return G__36771;
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$core$IFn$_invoke$arity$1 = difference__1;
  difference.cljs$core$IFn$_invoke$arity$2 = difference__2;
  difference.cljs$core$IFn$_invoke$arity$variadic = difference__3.cljs$core$IFn$_invoke$arity$variadic;
  return difference;
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__36773_SHARP_) {
    return cljs.core.select_keys.call(null, p1__36773_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__36776) {
    var vec__36777 = p__36776;
    var old = cljs.core.nth.call(null, vec__36777, 0, null);
    var new$ = cljs.core.nth.call(null, vec__36777, 1, null);
    if (cljs.core.not_EQ_.call(null, old, new$) && cljs.core.contains_QMARK_.call(null, m, old)) {
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, m, old)), old);
    } else {
      return m;
    }
  }, map, kmap);
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__36778_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__36778_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__36781) {
    var vec__36782 = p__36781;
    var k = cljs.core.nth.call(null, vec__36782, 0, null);
    var v = cljs.core.nth.call(null, vec__36782, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__36789 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
      var r = cljs.core.nth.call(null, vec__36789, 0, null);
      var s = cljs.core.nth.call(null, vec__36789, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(p1__36783_SHARP_, p2__36784_SHARP_) {
            return cljs.core.conj.call(null, p1__36783_SHARP_, cljs.core.merge.call(null, p2__36784_SHARP_, x));
          }, ret, found);
        } else {
          return ret;
        }
      }, cljs.core.PersistentHashSet.EMPTY, s);
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__36790 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
    var r = cljs.core.nth.call(null, vec__36790, 0, null);
    var s = cljs.core.nth.call(null, vec__36790, 1, null);
    var k = cljs.core.nth.call(null, vec__36790, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(p1__36785_SHARP_, p2__36786_SHARP_) {
          return cljs.core.conj.call(null, p1__36785_SHARP_, cljs.core.merge.call(null, p2__36786_SHARP_, x));
        }, ret, found);
      } else {
        return ret;
      }
    }, cljs.core.PersistentHashSet.EMPTY, s);
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  join.cljs$core$IFn$_invoke$arity$3 = join__3;
  return join;
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__36791_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__36791_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__36792_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__36792_SHARP_);
  }, set2);
};
goog.provide("datascript");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("clojure.set");
goog.require("clojure.set");
datascript.Datom = function(e, a, v, tx, added, __meta, __extmap) {
  this.e = e;
  this.a = a;
  this.v = v;
  this.tx = tx;
  this.added = added;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.Datom.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10910__auto__) {
  var self__ = this;
  var this__10910__auto____$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, this__10910__auto____$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
datascript.Datom.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10915__auto__, k__10916__auto__) {
  var self__ = this;
  var this__10915__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10915__auto____$1, k__10916__auto__, null);
};
datascript.Datom.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10917__auto__, k36541, else__10918__auto__) {
  var self__ = this;
  var this__10917__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k36541, new cljs.core.Keyword(null, "e", "e", 1013904343))) {
    return self__.e;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k36541, new cljs.core.Keyword(null, "a", "a", 1013904339))) {
      return self__.a;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k36541, new cljs.core.Keyword(null, "v", "v", 1013904360))) {
        return self__.v;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k36541, new cljs.core.Keyword(null, "tx", "tx", 1013907958))) {
          return self__.tx;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k36541, new cljs.core.Keyword(null, "added", "added", 1106564210))) {
            return self__.added;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k36541, else__10918__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
datascript.Datom.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10922__auto__, k__10923__auto__, G__36540) {
  var self__ = this;
  var this__10922__auto____$1 = this;
  var pred__36543 = cljs.core.keyword_identical_QMARK_;
  var expr__36544 = k__10923__auto__;
  if (cljs.core.truth_(pred__36543.call(null, new cljs.core.Keyword(null, "e", "e", 1013904343), expr__36544))) {
    return new datascript.Datom(G__36540, self__.a, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__36543.call(null, new cljs.core.Keyword(null, "a", "a", 1013904339), expr__36544))) {
      return new datascript.Datom(self__.e, G__36540, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__36543.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), expr__36544))) {
        return new datascript.Datom(self__.e, self__.a, G__36540, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__36543.call(null, new cljs.core.Keyword(null, "tx", "tx", 1013907958), expr__36544))) {
          return new datascript.Datom(self__.e, self__.a, self__.v, G__36540, self__.added, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__36543.call(null, new cljs.core.Keyword(null, "added", "added", 1106564210), expr__36544))) {
            return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, G__36540, self__.__meta, self__.__extmap, null);
          } else {
            return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10923__auto__, G__36540), null);
          }
        }
      }
    }
  }
};
datascript.Datom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10929__auto__, writer__10930__auto__, opts__10931__auto__) {
  var self__ = this;
  var this__10929__auto____$1 = this;
  var pr_pair__10932__auto__ = function(keyval__10933__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, cljs.core.pr_writer, "", " ", "", opts__10931__auto__, keyval__10933__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, pr_pair__10932__auto__, "#datascript.Datom{", ", ", "}", opts__10931__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343), self__.e], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "a", "a", 1013904339), self__.a], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx", "tx", 1013907958), self__.tx], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "added", "added", 1106564210), self__.added], 
  null)], null), self__.__extmap));
};
datascript.Datom.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10920__auto__, entry__10921__auto__) {
  var self__ = this;
  var this__10920__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10921__auto__)) {
    return cljs.core._assoc.call(null, this__10920__auto____$1, cljs.core._nth.call(null, entry__10921__auto__, 0), cljs.core._nth.call(null, entry__10921__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10920__auto____$1, entry__10921__auto__);
  }
};
datascript.Datom.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$);
};
datascript.Datom.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10927__auto__) {
  var self__ = this;
  var this__10927__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343), self__.e], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", 1013904339), self__.a], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx", "tx", 1013907958), self__.tx], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "added", "added", 1106564210), self__.added], null)], null), self__.__extmap));
};
datascript.Datom.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10919__auto__) {
  var self__ = this;
  var this__10919__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
datascript.Datom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10911__auto__, other__10912__auto__) {
  var self__ = this;
  var this__10911__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = other__10912__auto__;
    if (cljs.core.truth_(and__10317__auto__)) {
      return this__10911__auto____$1.constructor === other__10912__auto__.constructor && cljs.core.equiv_map.call(null, this__10911__auto____$1, other__10912__auto__);
    } else {
      return and__10317__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.Datom.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10914__auto__, G__36540) {
  var self__ = this;
  var this__10914__auto____$1 = this;
  return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, G__36540, self__.__extmap, self__.__hash);
};
datascript.Datom.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10909__auto__) {
  var self__ = this;
  var this__10909__auto____$1 = this;
  return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.Datom.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10913__auto__) {
  var self__ = this;
  var this__10913__auto____$1 = this;
  return self__.__meta;
};
datascript.Datom.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10924__auto__, k__10925__auto__) {
  var self__ = this;
  var this__10924__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "a", "a", 1013904339), null, new cljs.core.Keyword(null, "e", "e", 1013904343), null, new cljs.core.Keyword(null, "added", "added", 1106564210), null, new cljs.core.Keyword(null, "tx", "tx", 1013907958), null, new cljs.core.Keyword(null, "v", "v", 1013904360), null], null), null), k__10925__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10924__auto____$1), self__.__meta), k__10925__auto__);
  } else {
    return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10925__auto__)), null);
  }
};
datascript.Datom.cljs$lang$type = true;
datascript.Datom.cljs$lang$ctorPrSeq = function(this__10949__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/Datom");
};
datascript.Datom.cljs$lang$ctorPrWriter = function(this__10949__auto__, writer__10950__auto__) {
  return cljs.core._write.call(null, writer__10950__auto__, "datascript/Datom");
};
datascript.__GT_Datom = function __GT_Datom(e, a, v, tx, added) {
  return new datascript.Datom(e, a, v, tx, added);
};
datascript.map__GT_Datom = function map__GT_Datom(G__36542) {
  return new datascript.Datom((new cljs.core.Keyword(null, "e", "e", 1013904343)).cljs$core$IFn$_invoke$arity$1(G__36542), (new cljs.core.Keyword(null, "a", "a", 1013904339)).cljs$core$IFn$_invoke$arity$1(G__36542), (new cljs.core.Keyword(null, "v", "v", 1013904360)).cljs$core$IFn$_invoke$arity$1(G__36542), (new cljs.core.Keyword(null, "tx", "tx", 1013907958)).cljs$core$IFn$_invoke$arity$1(G__36542), (new cljs.core.Keyword(null, "added", "added", 1106564210)).cljs$core$IFn$_invoke$arity$1(G__36542), 
  null, cljs.core.dissoc.call(null, G__36542, new cljs.core.Keyword(null, "e", "e", 1013904343), new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.Keyword(null, "v", "v", 1013904360), new cljs.core.Keyword(null, "tx", "tx", 1013907958), new cljs.core.Keyword(null, "added", "added", 1106564210)));
};
datascript.Datom.prototype.cljs$core$ISeqable$ = true;
datascript.Datom.prototype.cljs$core$ISeqable$_seq$arity$1 = function(d) {
  var d__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, d__$1.added), d__$1.tx), d__$1.v), d__$1.a), d__$1.e);
};
datascript.Datom.prototype.cljs$core$IEquiv$ = true;
datascript.Datom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(d, o) {
  var d__$1 = this;
  return cljs.core._EQ_.call(null, d__$1.e, o.e) && (cljs.core._EQ_.call(null, d__$1.a, o.a) && cljs.core._EQ_.call(null, d__$1.v, o.v));
};
datascript.Datom.prototype.cljs$core$IHash$ = true;
datascript.Datom.prototype.cljs$core$IHash$_hash$arity$1 = function(d) {
  var d__$1 = this;
  var or__10329__auto__ = d__$1.__hash;
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    return d__$1.__hash = cljs.core.hash_coll.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [d__$1.e, d__$1.a, d__$1.v], null));
  }
};
datascript.ISearch = function() {
  var obj36547 = {};
  return obj36547;
}();
datascript._search = function _search(data, pattern) {
  if (function() {
    var and__10317__auto__ = data;
    if (and__10317__auto__) {
      return data.datascript$ISearch$_search$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return data.datascript$ISearch$_search$arity$2(data, pattern);
  } else {
    var x__10956__auto__ = data == null ? null : data;
    return function() {
      var or__10329__auto__ = datascript._search[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = datascript._search["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISearch.-search", data);
        }
      }
    }().call(null, data, pattern);
  }
};
datascript.DB = function(schema, ea, av, max_eid, max_tx, __meta, __extmap) {
  this.schema = schema;
  this.ea = ea;
  this.av = av;
  this.max_eid = max_eid;
  this.max_tx = max_tx;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.DB.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10910__auto__) {
  var self__ = this;
  var this__10910__auto____$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, this__10910__auto____$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
datascript.DB.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10915__auto__, k__10916__auto__) {
  var self__ = this;
  var this__10915__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10915__auto____$1, k__10916__auto__, null);
};
datascript.DB.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10917__auto__, k36552, else__10918__auto__) {
  var self__ = this;
  var this__10917__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k36552, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k36552, new cljs.core.Keyword(null, "ea", "ea", 1013907470))) {
      return self__.ea;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k36552, new cljs.core.Keyword(null, "av", "av", 1013907367))) {
        return self__.av;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k36552, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841))) {
          return self__.max_eid;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k36552, new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119))) {
            return self__.max_tx;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k36552, else__10918__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
datascript.DB.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10922__auto__, k__10923__auto__, G__36551) {
  var self__ = this;
  var this__10922__auto____$1 = this;
  var pred__36554 = cljs.core.keyword_identical_QMARK_;
  var expr__36555 = k__10923__auto__;
  if (cljs.core.truth_(pred__36554.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__36555))) {
    return new datascript.DB(G__36551, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__36554.call(null, new cljs.core.Keyword(null, "ea", "ea", 1013907470), expr__36555))) {
      return new datascript.DB(self__.schema, G__36551, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__36554.call(null, new cljs.core.Keyword(null, "av", "av", 1013907367), expr__36555))) {
        return new datascript.DB(self__.schema, self__.ea, G__36551, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__36554.call(null, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), expr__36555))) {
          return new datascript.DB(self__.schema, self__.ea, self__.av, G__36551, self__.max_tx, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__36554.call(null, new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), expr__36555))) {
            return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, G__36551, self__.__meta, self__.__extmap, null);
          } else {
            return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10923__auto__, G__36551), null);
          }
        }
      }
    }
  }
};
datascript.DB.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10929__auto__, writer__10930__auto__, opts__10931__auto__) {
  var self__ = this;
  var this__10929__auto____$1 = this;
  var pr_pair__10932__auto__ = function(keyval__10933__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, cljs.core.pr_writer, "", " ", "", opts__10931__auto__, keyval__10933__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, pr_pair__10932__auto__, "#datascript.DB{", ", ", "}", opts__10931__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "ea", "ea", 1013907470), self__.ea], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), self__.av], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), self__.max_eid], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "max-tx", "max-tx", 4227685119), self__.max_tx], null)], null), self__.__extmap));
};
datascript.DB.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10920__auto__, entry__10921__auto__) {
  var self__ = this;
  var this__10920__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10921__auto__)) {
    return cljs.core._assoc.call(null, this__10920__auto____$1, cljs.core._nth.call(null, entry__10921__auto__, 0), cljs.core._nth.call(null, entry__10921__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10920__auto____$1, entry__10921__auto__);
  }
};
datascript.DB.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10927__auto__) {
  var self__ = this;
  var this__10927__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), self__.ea], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), self__.av], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), self__.max_eid], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), self__.max_tx], null)], null), self__.__extmap));
};
datascript.DB.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10919__auto__) {
  var self__ = this;
  var this__10919__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
datascript.DB.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10911__auto__, other__10912__auto__) {
  var self__ = this;
  var this__10911__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = other__10912__auto__;
    if (cljs.core.truth_(and__10317__auto__)) {
      return this__10911__auto____$1.constructor === other__10912__auto__.constructor && cljs.core.equiv_map.call(null, this__10911__auto____$1, other__10912__auto__);
    } else {
      return and__10317__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.DB.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10914__auto__, G__36551) {
  var self__ = this;
  var this__10914__auto____$1 = this;
  return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, G__36551, self__.__extmap, self__.__hash);
};
datascript.DB.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10909__auto__) {
  var self__ = this;
  var this__10909__auto____$1 = this;
  return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.DB.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10913__auto__) {
  var self__ = this;
  var this__10913__auto____$1 = this;
  return self__.__meta;
};
datascript.DB.prototype.datascript$ISearch$ = true;
datascript.DB.prototype.datascript$ISearch$_search$arity$2 = function(db, p__36557) {
  var self__ = this;
  var vec__36558 = p__36557;
  var e = cljs.core.nth.call(null, vec__36558, 0, null);
  var a = cljs.core.nth.call(null, vec__36558, 1, null);
  var v = cljs.core.nth.call(null, vec__36558, 2, null);
  var tx = cljs.core.nth.call(null, vec__36558, 3, null);
  var added = cljs.core.nth.call(null, vec__36558, 4, null);
  var pattern = vec__36558;
  var db__$1 = this;
  var G__36559 = function() {
    var G__36560 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(e) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(a) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(v) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null], null);
    if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285)], null), G__36560)) {
      return cljs.core.filter.call(null, function(G__36560) {
        return function(p1__36548_SHARP_) {
          return cljs.core._EQ_.call(null, v, p1__36548_SHARP_.v);
        };
      }(G__36560), cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e, a], null)));
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285)], null), G__36560)) {
        return cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), a, v], null));
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285), null], null), G__36560)) {
          return cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e, a], null));
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.Keyword(null, "+", "+", 1013904285), null], null), G__36560)) {
            return cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), a], null))));
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), null, null], null), G__36560)) {
              return cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e], null))));
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(e) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(a) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(v) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null], null))].join(""));
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }();
  var G__36559__$1 = cljs.core.truth_(tx) ? cljs.core.filter.call(null, function(G__36559) {
    return function(p1__36549_SHARP_) {
      return cljs.core._EQ_.call(null, tx, p1__36549_SHARP_.tx);
    };
  }(G__36559), G__36559) : G__36559;
  var G__36559__$2 = cljs.core.truth_(added) ? cljs.core.filter.call(null, function(G__36559, G__36559__$1) {
    return function(p1__36550_SHARP_) {
      return cljs.core._EQ_.call(null, added, p1__36550_SHARP_.added);
    };
  }(G__36559, G__36559__$1), G__36559__$1) : G__36559__$1;
  return G__36559__$2;
};
datascript.DB.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10924__auto__, k__10925__auto__) {
  var self__ = this;
  var this__10924__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), null, new cljs.core.Keyword(null, "av", "av", 1013907367), null, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), null, new cljs.core.Keyword(null, "ea", "ea", 1013907470), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__10925__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10924__auto____$1), self__.__meta), k__10925__auto__);
  } else {
    return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10925__auto__)), null);
  }
};
datascript.DB.cljs$lang$type = true;
datascript.DB.cljs$lang$ctorPrSeq = function(this__10949__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/DB");
};
datascript.DB.cljs$lang$ctorPrWriter = function(this__10949__auto__, writer__10950__auto__) {
  return cljs.core._write.call(null, writer__10950__auto__, "datascript/DB");
};
datascript.__GT_DB = function __GT_DB(schema, ea, av, max_eid, max_tx) {
  return new datascript.DB(schema, ea, av, max_eid, max_tx);
};
datascript.map__GT_DB = function map__GT_DB(G__36553) {
  return new datascript.DB((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__36553), (new cljs.core.Keyword(null, "ea", "ea", 1013907470)).cljs$core$IFn$_invoke$arity$1(G__36553), (new cljs.core.Keyword(null, "av", "av", 1013907367)).cljs$core$IFn$_invoke$arity$1(G__36553), (new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841)).cljs$core$IFn$_invoke$arity$1(G__36553), (new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)).cljs$core$IFn$_invoke$arity$1(G__36553), 
  null, cljs.core.dissoc.call(null, G__36553, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "ea", "ea", 1013907470), new cljs.core.Keyword(null, "av", "av", 1013907367), new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)));
};
datascript.TxReport = function(db_before, db_after, tx_data, __meta, __extmap) {
  this.db_before = db_before;
  this.db_after = db_after;
  this.tx_data = tx_data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.TxReport.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10910__auto__) {
  var self__ = this;
  var this__10910__auto____$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, this__10910__auto____$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
datascript.TxReport.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10915__auto__, k__10916__auto__) {
  var self__ = this;
  var this__10915__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10915__auto____$1, k__10916__auto__, null);
};
datascript.TxReport.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10917__auto__, k36562, else__10918__auto__) {
  var self__ = this;
  var this__10917__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k36562, new cljs.core.Keyword(null, "db-before", "db-before", 3838846752))) {
    return self__.db_before;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k36562, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159))) {
      return self__.db_after;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k36562, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709))) {
        return self__.tx_data;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get.call(null, self__.__extmap, k36562, else__10918__auto__);
        } else {
          return null;
        }
      }
    }
  }
};
datascript.TxReport.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10922__auto__, k__10923__auto__, G__36561) {
  var self__ = this;
  var this__10922__auto____$1 = this;
  var pred__36564 = cljs.core.keyword_identical_QMARK_;
  var expr__36565 = k__10923__auto__;
  if (cljs.core.truth_(pred__36564.call(null, new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), expr__36565))) {
    return new datascript.TxReport(G__36561, self__.db_after, self__.tx_data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__36564.call(null, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), expr__36565))) {
      return new datascript.TxReport(self__.db_before, G__36561, self__.tx_data, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__36564.call(null, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), expr__36565))) {
        return new datascript.TxReport(self__.db_before, self__.db_after, G__36561, self__.__meta, self__.__extmap, null);
      } else {
        return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10923__auto__, G__36561), null);
      }
    }
  }
};
datascript.TxReport.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10929__auto__, writer__10930__auto__, opts__10931__auto__) {
  var self__ = this;
  var this__10929__auto____$1 = this;
  var pr_pair__10932__auto__ = function(keyval__10933__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, cljs.core.pr_writer, "", " ", "", opts__10931__auto__, keyval__10933__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, pr_pair__10932__auto__, "#datascript.TxReport{", ", ", "}", opts__10931__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), self__.db_before], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), self__.db_after], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), self__.tx_data], null)], null), self__.__extmap));
};
datascript.TxReport.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10920__auto__, entry__10921__auto__) {
  var self__ = this;
  var this__10920__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10921__auto__)) {
    return cljs.core._assoc.call(null, this__10920__auto____$1, cljs.core._nth.call(null, entry__10921__auto__, 0), cljs.core._nth.call(null, entry__10921__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10920__auto____$1, entry__10921__auto__);
  }
};
datascript.TxReport.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10927__auto__) {
  var self__ = this;
  var this__10927__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), self__.db_before], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), self__.db_after], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), self__.tx_data], null)], null), self__.__extmap));
};
datascript.TxReport.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10919__auto__) {
  var self__ = this;
  var this__10919__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
datascript.TxReport.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10911__auto__, other__10912__auto__) {
  var self__ = this;
  var this__10911__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = other__10912__auto__;
    if (cljs.core.truth_(and__10317__auto__)) {
      return this__10911__auto____$1.constructor === other__10912__auto__.constructor && cljs.core.equiv_map.call(null, this__10911__auto____$1, other__10912__auto__);
    } else {
      return and__10317__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.TxReport.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10914__auto__, G__36561) {
  var self__ = this;
  var this__10914__auto____$1 = this;
  return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, G__36561, self__.__extmap, self__.__hash);
};
datascript.TxReport.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10909__auto__) {
  var self__ = this;
  var this__10909__auto____$1 = this;
  return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.TxReport.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10913__auto__) {
  var self__ = this;
  var this__10913__auto____$1 = this;
  return self__.__meta;
};
datascript.TxReport.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10924__auto__, k__10925__auto__) {
  var self__ = this;
  var this__10924__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), null, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), null, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), null], null), null), k__10925__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10924__auto____$1), self__.__meta), k__10925__auto__);
  } else {
    return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10925__auto__)), null);
  }
};
datascript.TxReport.cljs$lang$type = true;
datascript.TxReport.cljs$lang$ctorPrSeq = function(this__10949__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/TxReport");
};
datascript.TxReport.cljs$lang$ctorPrWriter = function(this__10949__auto__, writer__10950__auto__) {
  return cljs.core._write.call(null, writer__10950__auto__, "datascript/TxReport");
};
datascript.__GT_TxReport = function __GT_TxReport(db_before, db_after, tx_data) {
  return new datascript.TxReport(db_before, db_after, tx_data);
};
datascript.map__GT_TxReport = function map__GT_TxReport(G__36563) {
  return new datascript.TxReport((new cljs.core.Keyword(null, "db-before", "db-before", 3838846752)).cljs$core$IFn$_invoke$arity$1(G__36563), (new cljs.core.Keyword(null, "db-after", "db-after", 1658340159)).cljs$core$IFn$_invoke$arity$1(G__36563), (new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709)).cljs$core$IFn$_invoke$arity$1(G__36563), null, cljs.core.dissoc.call(null, G__36563, new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), new cljs.core.Keyword(null, "db-after", 
  "db-after", 1658340159), new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709)));
};
datascript.multival_QMARK_ = function multival_QMARK_(db, attr) {
  return cljs.core._EQ_.call(null, cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), attr, new cljs.core.Keyword(null, "cardinality", "cardinality", 1859117312)], null)), new cljs.core.Keyword(null, "many", "many", 1017248209));
};
datascript.match_tuple = function match_tuple(tuple, pattern) {
  return cljs.core.every_QMARK_.call(null, cljs.core.true_QMARK_, cljs.core.map.call(null, function(p1__36568_SHARP_, p2__36567_SHARP_) {
    return p2__36567_SHARP_ == null || cljs.core._EQ_.call(null, p1__36568_SHARP_, p2__36567_SHARP_);
  }, tuple, pattern));
};
datascript.search = function search(data, pattern) {
  if (function() {
    var G__36572 = data;
    if (G__36572) {
      var bit__10979__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__10329__auto__ = bit__10979__auto__;
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return G__36572.datascript$ISearch$;
        }
      }())) {
        return true;
      } else {
        if (!G__36572.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, datascript.ISearch, G__36572);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, datascript.ISearch, G__36572);
    }
  }()) {
    return datascript._search.call(null, data, pattern);
  } else {
    if (function() {
      var G__36573 = data;
      if (G__36573) {
        var bit__10979__auto__ = G__36573.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__10979__auto__ || G__36573.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__36573.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__36573);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__36573);
      }
    }()) {
      return cljs.core.filter.call(null, function(p1__36569_SHARP_) {
        return datascript.match_tuple.call(null, p1__36569_SHARP_, pattern);
      }, data);
    } else {
      return null;
    }
  }
};
datascript.transact_datom = function transact_datom(db, datom) {
  if (cljs.core.truth_(datom.added)) {
    return cljs.core.update_in.call(null, cljs.core.update_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), datom.e, datom.a], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), datom), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), datom.a, datom.v], null), cljs.core.fnil.call(null, 
    cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), datom);
  } else {
    return cljs.core.update_in.call(null, cljs.core.update_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), datom.e, datom.a], null), cljs.core.disj, datom), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), datom.a, datom.v], null), cljs.core.disj, datom);
  }
};
datascript._resolve_eid = function _resolve_eid(eid, db) {
  return db.max_eid - eid;
};
datascript.resolve_eid = function resolve_eid(db, d) {
  if (d.e < 0) {
    return cljs.core.update_in.call(null, d, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343)], null), datascript._resolve_eid, db);
  } else {
    return d;
  }
};
datascript.entity__GT_ops = function entity__GT_ops(db, entity) {
  if (cljs.core.map_QMARK_.call(null, entity)) {
    var eid = (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(entity);
    var iter__11046__auto__ = function iter__36583(s__36584) {
      return new cljs.core.LazySeq(null, function() {
        var s__36584__$1 = s__36584;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__36584__$1);
          if (temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var vec__36590 = cljs.core.first.call(null, xs__4579__auto__);
            var a = cljs.core.nth.call(null, vec__36590, 0, null);
            var vs = cljs.core.nth.call(null, vec__36590, 1, null);
            var iterys__11042__auto__ = function(s__36584__$1, vec__36590, a, vs, xs__4579__auto__, temp__4092__auto__) {
              return function iter__36585(s__36586) {
                return new cljs.core.LazySeq(null, function(s__36584__$1, vec__36590, a, vs, xs__4579__auto__, temp__4092__auto__) {
                  return function() {
                    var s__36586__$1 = s__36586;
                    while (true) {
                      var temp__4092__auto____$1 = cljs.core.seq.call(null, s__36586__$1);
                      if (temp__4092__auto____$1) {
                        var s__36586__$2 = temp__4092__auto____$1;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__36586__$2)) {
                          var c__11044__auto__ = cljs.core.chunk_first.call(null, s__36586__$2);
                          var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
                          var b__36588 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
                          if (function() {
                            var i__36587 = 0;
                            while (true) {
                              if (i__36587 < size__11045__auto__) {
                                var v = cljs.core._nth.call(null, c__11044__auto__, i__36587);
                                cljs.core.chunk_append.call(null, b__36588, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), eid, a, v], null));
                                var G__36592 = i__36587 + 1;
                                i__36587 = G__36592;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36588), iter__36585.call(null, cljs.core.chunk_rest.call(null, s__36586__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36588), null);
                          }
                        } else {
                          var v = cljs.core.first.call(null, s__36586__$2);
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), eid, a, v], null), iter__36585.call(null, cljs.core.rest.call(null, s__36586__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(s__36584__$1, vec__36590, a, vs, xs__4579__auto__, temp__4092__auto__), null, null);
              };
            }(s__36584__$1, vec__36590, a, vs, xs__4579__auto__, temp__4092__auto__);
            var fs__11043__auto__ = cljs.core.seq.call(null, iterys__11042__auto__.call(null, cljs.core.sequential_QMARK_.call(null, vs) && datascript.multival_QMARK_.call(null, db, a) ? vs : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [vs], null)));
            if (fs__11043__auto__) {
              return cljs.core.concat.call(null, fs__11043__auto__, iter__36583.call(null, cljs.core.rest.call(null, s__36584__$1)));
            } else {
              var G__36593 = cljs.core.rest.call(null, s__36584__$1);
              s__36584__$1 = G__36593;
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__11046__auto__.call(null, cljs.core.dissoc.call(null, entity, new cljs.core.Keyword("db", "id", "db/id", 1014111942)));
  } else {
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, entity), new cljs.core.Keyword("dn.fn", "call", "dn.fn/call", 2813750183))) {
      var vec__36591 = entity;
      var _ = cljs.core.nth.call(null, vec__36591, 0, null);
      var f = cljs.core.nth.call(null, vec__36591, 1, null);
      var args = cljs.core.nthnext.call(null, vec__36591, 2);
      return cljs.core.vec.call(null, cljs.core.apply.call(null, f, db, args));
    } else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [entity], null);
    }
  }
};
datascript.op__GT_tx_data = function op__GT_tx_data(db, p__36596) {
  var vec__36599 = p__36596;
  var op = cljs.core.nth.call(null, vec__36599, 0, null);
  var e = cljs.core.nth.call(null, vec__36599, 1, null);
  var a = cljs.core.nth.call(null, vec__36599, 2, null);
  var v = cljs.core.nth.call(null, vec__36599, 3, null);
  var tx = db.max_tx + 1;
  var G__36600 = op;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db.fn", "retractEntity", "db.fn/retractEntity", 4213852396), G__36600)) {
    var datoms = datascript._search.call(null, db, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [e], null));
    return cljs.core.map.call(null, function(p1__36595_SHARP_) {
      return cljs.core.assoc.call(null, p1__36595_SHARP_, new cljs.core.Keyword(null, "tx", "tx", 1013907958), tx, new cljs.core.Keyword(null, "added", "added", 1106564210), false);
    }, datoms);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db.fn", "retractAttribute", "db.fn/retractAttribute", 3416849171), G__36600)) {
      var datoms = datascript._search.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a], null));
      return cljs.core.map.call(null, function(p1__36594_SHARP_) {
        return cljs.core.assoc.call(null, p1__36594_SHARP_, new cljs.core.Keyword(null, "tx", "tx", 1013907958), tx, new cljs.core.Keyword(null, "added", "added", 1106564210), false);
      }, datoms);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db", "retract", "db/retract", 2112480480), G__36600)) {
        var temp__4092__auto__ = cljs.core.first.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a, v], null)));
        if (cljs.core.truth_(temp__4092__auto__)) {
          var old_datom = temp__4092__auto__;
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, false)], null);
        } else {
          return null;
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db", "add", "db/add", 1014207040), G__36600)) {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "many", "many", 1017248209), cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), a, new cljs.core.Keyword(null, "cardinality", "cardinality", 1859117312)], null)))) {
            if (cljs.core.empty_QMARK_.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a, v], null)))) {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
            } else {
              return null;
            }
          } else {
            var temp__4090__auto__ = cljs.core.first.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a], null)));
            if (cljs.core.truth_(temp__4090__auto__)) {
              var old_datom = temp__4090__auto__;
              if (cljs.core.not_EQ_.call(null, old_datom.v, v)) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, old_datom.v, tx, false), datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
              } else {
                return null;
              }
            } else {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
            }
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(op)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }
};
datascript.entity__GT_tx_data = function entity__GT_tx_data(db, entity) {
  return cljs.core.mapcat.call(null, function(p1__36601_SHARP_) {
    return datascript.op__GT_tx_data.call(null, db, p1__36601_SHARP_);
  }, datascript.entity__GT_ops.call(null, db, entity));
};
datascript._with = function _with(db, tx_data) {
  return cljs.core.assoc.call(null, cljs.core.update_in.call(null, cljs.core.reduce.call(null, datascript.transact_datom, db, tx_data), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)], null), cljs.core.inc), new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), cljs.core.reduce.call(null, cljs.core.max, db.max_eid, cljs.core.map.call(null, new cljs.core.Keyword(null, "e", "e", 1013904343), tx_data)));
};
datascript.parse_where = function parse_where(where) {
  var source = cljs.core.first.call(null, where);
  if (source instanceof cljs.core.Symbol && cljs.core._EQ_.call(null, "$", cljs.core.first.call(null, cljs.core.name.call(null, source)))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, where), cljs.core.next.call(null, where)], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null), where], null);
  }
};
datascript.bind_symbol = function bind_symbol(sym, scope) {
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), sym)) {
    return null;
  } else {
    if (sym instanceof cljs.core.Symbol) {
      return cljs.core.get.call(null, scope, sym, null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return sym;
      } else {
        return null;
      }
    }
  }
};
datascript.bind_symbols = function bind_symbols(form, scope) {
  return cljs.core.map.call(null, function(p1__36602_SHARP_) {
    return datascript.bind_symbol.call(null, p1__36602_SHARP_, scope);
  }, form);
};
datascript.search_datoms = function search_datoms(source, where, scope) {
  return datascript.search.call(null, datascript.bind_symbol.call(null, source, scope), datascript.bind_symbols.call(null, where, scope));
};
datascript.populate_scope = function populate_scope(scope, where, datom) {
  return cljs.core.into.call(null, scope, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p1__36603_SHARP_, p2__36604_SHARP_) {
    if (p1__36603_SHARP_ instanceof cljs.core.Symbol && !cljs.core.contains_QMARK_.call(null, scope, p1__36603_SHARP_)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__36603_SHARP_, p2__36604_SHARP_], null);
    } else {
      return null;
    }
  }, where, datom)));
};
datascript._differ_QMARK_ = function() {
  var _differ_QMARK___delegate = function(xs) {
    var l = cljs.core.count.call(null, xs);
    return cljs.core.not_EQ_.call(null, cljs.core.take.call(null, l / 2, xs), cljs.core.drop.call(null, l / 2, xs));
  };
  var _differ_QMARK_ = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return _differ_QMARK___delegate.call(this, xs);
  };
  _differ_QMARK_.cljs$lang$maxFixedArity = 0;
  _differ_QMARK_.cljs$lang$applyTo = function(arglist__36605) {
    var xs = cljs.core.seq(arglist__36605);
    return _differ_QMARK___delegate(xs);
  };
  _differ_QMARK_.cljs$core$IFn$_invoke$arity$variadic = _differ_QMARK___delegate;
  return _differ_QMARK_;
}();
datascript.built_ins = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null, "false?", "false?", 1372554549, null), new cljs.core.Symbol(null, "true?", "true?", -1529891286, null), new cljs.core.Symbol(null, "rem", "rem", -1640418733, null), new cljs.core.Symbol(null, "odd?", "odd?", -1637125463, null), new cljs.core.Symbol(null, "+", "+", -1640531484, null), new cljs.core.Symbol(null, "zero?", "zero?", -1524740016, null), new cljs.core.Symbol(null, "*", "*", -1640531485, null), new cljs.core.Symbol(null, 
"-differ?", "-differ?", 1135976441, null), new cljs.core.Symbol(null, "-", "-", -1640531482, null), new cljs.core.Symbol(null, "neg?", "neg?", -1637154200, null), new cljs.core.Symbol(null, "/", "/", -1640531480, null), new cljs.core.Symbol(null, "inc", "inc", -1640427113, null), new cljs.core.Symbol(null, "quot", "quot", -1637049150, null), new cljs.core.Symbol(null, "!\x3d", "!\x3d", -1640530443, null), new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), new cljs.core.Symbol(null, "\x3d", 
"\x3d", -1640531466, null), new cljs.core.Symbol(null, "max", "max", -1640423651, null), new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), new cljs.core.Symbol(null, "\x3e\x3d", "\x3e\x3d", -1640529544, null), new cljs.core.Symbol(null, "pos?", "pos?", -1637084636, null), new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", -1640529606, null), new cljs.core.Symbol(null, "dec", "dec", -1640432197, null), new cljs.core.Symbol(null, 
"mod", "mod", -1640423237, null), new cljs.core.Symbol(null, "min", "min", -1640423413, null), new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "\x3d\x3d", "\x3d\x3d", -1640529575, null), new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null)], [cljs.core.false_QMARK_, cljs.core.true_QMARK_, cljs.core.rem, cljs.core.odd_QMARK_, cljs.core._PLUS_, cljs.core.zero_QMARK_, cljs.core._STAR_, datascript._differ_QMARK_, cljs.core._, cljs.core.neg_QMARK_, 
cljs.core._SLASH_, cljs.core.inc, cljs.core.quot, cljs.core.not_EQ_, cljs.core._LT_, cljs.core._EQ_, cljs.core.max, cljs.core._GT_, cljs.core.even_QMARK_, cljs.core._GT__EQ_, cljs.core.pos_QMARK_, cljs.core._LT__EQ_, cljs.core.dec, cljs.core.mod, cljs.core.min, cljs.core.not_EQ_, cljs.core._EQ__EQ_, cljs.core.nil_QMARK_]);
datascript.call = function call(p__36606, scope) {
  var vec__36608 = p__36606;
  var f = cljs.core.nth.call(null, vec__36608, 0, null);
  var args = cljs.core.nthnext.call(null, vec__36608, 1);
  var bound_args = datascript.bind_symbols.call(null, args, scope);
  var f__$1 = function() {
    var or__10329__auto__ = datascript.built_ins.call(null, f);
    if (cljs.core.truth_(or__10329__auto__)) {
      return or__10329__auto__;
    } else {
      return scope.call(null, f);
    }
  }();
  return cljs.core.apply.call(null, f__$1, bound_args);
};
datascript.looks_like_QMARK_ = function looks_like_QMARK_(pattern, form) {
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), pattern)) {
    return true;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), pattern)) {
      return cljs.core.sequential_QMARK_.call(null, form);
    } else {
      if (cljs.core.sequential_QMARK_.call(null, pattern)) {
        return cljs.core.sequential_QMARK_.call(null, form) && (cljs.core._EQ_.call(null, cljs.core.count.call(null, form), cljs.core.count.call(null, pattern)) && cljs.core.every_QMARK_.call(null, function(p__36615) {
          var vec__36616 = p__36615;
          var pattern_el = cljs.core.nth.call(null, vec__36616, 0, null);
          var form_el = cljs.core.nth.call(null, vec__36616, 1, null);
          return looks_like_QMARK_.call(null, pattern_el, form_el);
        }, cljs.core.map.call(null, cljs.core.vector, pattern, form)));
      } else {
        if (pattern instanceof cljs.core.Symbol) {
          return cljs.core._EQ_.call(null, form, pattern);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return pattern.call(null, form);
          } else {
            return null;
          }
        }
      }
    }
  }
};
datascript.collect = function collect(f, coll) {
  return cljs.core.reduce.call(null, function(p1__36617_SHARP_, p2__36618_SHARP_) {
    return clojure.set.union.call(null, p1__36617_SHARP_, f.call(null, p2__36618_SHARP_));
  }, cljs.core.PersistentHashSet.EMPTY, coll);
};
datascript.bind_rule_branch = function bind_rule_branch(branch, call_args, context) {
  var vec__36626 = branch;
  var vec__36627 = cljs.core.nth.call(null, vec__36626, 0, null);
  var rule = cljs.core.nth.call(null, vec__36627, 0, null);
  var local_args = cljs.core.nthnext.call(null, vec__36627, 1);
  var body = cljs.core.nthnext.call(null, vec__36626, 1);
  var replacements = cljs.core.zipmap.call(null, local_args, call_args);
  var seqid = (new cljs.core.Keyword(null, "__depth", "__depth", 2242649685)).cljs$core$IFn$_invoke$arity$2(context, 0);
  var bound_body = clojure.walk.postwalk.call(null, function(vec__36626, vec__36627, rule, local_args, body, replacements, seqid) {
    return function(p1__36619_SHARP_) {
      if (p1__36619_SHARP_ instanceof cljs.core.Symbol && cljs.core._EQ_.call(null, "?", cljs.core.first.call(null, cljs.core.name.call(null, p1__36619_SHARP_)))) {
        var or__10329__auto__ = replacements.call(null, p1__36619_SHARP_);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return cljs.core.symbol.call(null, [cljs.core.str(cljs.core.name.call(null, p1__36619_SHARP_)), cljs.core.str("__auto__"), cljs.core.str(seqid)].join(""));
        }
      } else {
        return p1__36619_SHARP_;
      }
    };
  }(vec__36626, vec__36627, rule, local_args, body, replacements, seqid), body);
  return cljs.core.concat.call(null, function() {
    var iter__11046__auto__ = function iter__36628(s__36629) {
      return new cljs.core.LazySeq(null, function() {
        var s__36629__$1 = s__36629;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__36629__$1);
          if (temp__4092__auto__) {
            var s__36629__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__36629__$2)) {
              var c__11044__auto__ = cljs.core.chunk_first.call(null, s__36629__$2);
              var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
              var b__36631 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
              if (function() {
                var i__36630 = 0;
                while (true) {
                  if (i__36630 < size__11045__auto__) {
                    var prev_call_args = cljs.core._nth.call(null, c__11044__auto__, i__36630);
                    cljs.core.chunk_append.call(null, b__36631, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "-differ?", "-differ?", 1135976441, null)], null), call_args, prev_call_args)], null));
                    var G__36632 = i__36630 + 1;
                    i__36630 = G__36632;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36631), iter__36628.call(null, cljs.core.chunk_rest.call(null, s__36629__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36631), null);
              }
            } else {
              var prev_call_args = cljs.core.first.call(null, s__36629__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "-differ?", "-differ?", 1135976441, null)], null), call_args, prev_call_args)], null), iter__36628.call(null, cljs.core.rest.call(null, s__36629__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__11046__auto__.call(null, cljs.core.get.call(null, context, rule));
  }(), bound_body);
};
datascript._q = function _q(in_PLUS_sources, wheres, scope) {
  while (true) {
    if (cljs.core.truth_(cljs.core.not_empty.call(null, in_PLUS_sources))) {
      var vec__36646 = cljs.core.first.call(null, in_PLUS_sources);
      var in$ = cljs.core.nth.call(null, vec__36646, 0, null);
      var source = cljs.core.nth.call(null, vec__36646, 1, null);
      var pred__36647 = datascript.looks_like_QMARK_;
      var expr__36648 = in$;
      if (cljs.core.truth_(pred__36647.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_", "_", -1640531432, null), new cljs.core.Symbol(null, "...", "...", -1640485849, null)], null), expr__36648))) {
        return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
          return function(p1__36633_SHARP_) {
            return _q.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, in$), p1__36633_SHARP_], null)], null), cljs.core.next.call(null, in_PLUS_sources)), wheres, scope);
          };
        }(in_PLUS_sources, wheres, scope), source);
      } else {
        if (cljs.core.truth_(pred__36647.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null)], null), expr__36648))) {
          return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
            return function(p1__36634_SHARP_) {
              return _q.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, in$), p1__36634_SHARP_], null)], null), cljs.core.next.call(null, in_PLUS_sources)), wheres, scope);
            };
          }(in_PLUS_sources, wheres, scope), source);
        } else {
          if (cljs.core.truth_(pred__36647.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), expr__36648))) {
            var G__36655 = cljs.core.concat.call(null, cljs.core.zipmap.call(null, in$, source), cljs.core.next.call(null, in_PLUS_sources));
            var G__36656 = wheres;
            var G__36657 = scope;
            in_PLUS_sources = G__36655;
            wheres = G__36656;
            scope = G__36657;
            continue;
          } else {
            if (cljs.core.truth_(pred__36647.call(null, new cljs.core.Symbol(null, "%", "%", -1640531490, null), expr__36648))) {
              var G__36658 = cljs.core.next.call(null, in_PLUS_sources);
              var G__36659 = wheres;
              var G__36660 = cljs.core.assoc.call(null, scope, new cljs.core.Keyword(null, "__rules", "__rules", 2256051337), cljs.core.group_by.call(null, cljs.core.ffirst, source));
              in_PLUS_sources = G__36658;
              wheres = G__36659;
              scope = G__36660;
              continue;
            } else {
              if (cljs.core.truth_(pred__36647.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), expr__36648))) {
                var G__36661 = cljs.core.next.call(null, in_PLUS_sources);
                var G__36662 = wheres;
                var G__36663 = cljs.core.assoc.call(null, scope, in$, source);
                in_PLUS_sources = G__36661;
                wheres = G__36662;
                scope = G__36663;
                continue;
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__36648)].join(""));
              }
            }
          }
        }
      }
    } else {
      if (cljs.core.truth_(cljs.core.not_empty.call(null, wheres))) {
        var where = cljs.core.first.call(null, wheres);
        var temp__4090__auto__ = cljs.core.get.call(null, (new cljs.core.Keyword(null, "__rules", "__rules", 2256051337)).cljs$core$IFn$_invoke$arity$1(scope), cljs.core.first.call(null, where));
        if (cljs.core.truth_(temp__4090__auto__)) {
          var rule_branches = temp__4090__auto__;
          var vec__36650 = where;
          var rule = cljs.core.nth.call(null, vec__36650, 0, null);
          var call_args = cljs.core.nthnext.call(null, vec__36650, 1);
          var next_scope = cljs.core.update_in.call(null, cljs.core.update_in.call(null, scope, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801), rule], null), cljs.core.conj, call_args), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801), new cljs.core.Keyword(null, "__depth", "__depth", 2242649685)], 
          null), cljs.core.inc);
          var next_wheres = cljs.core.next.call(null, wheres);
          return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
            return function(p1__36635_SHARP_) {
              return _q.call(null, null, cljs.core.concat.call(null, datascript.bind_rule_branch.call(null, p1__36635_SHARP_, call_args, (new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801)).cljs$core$IFn$_invoke$arity$1(scope)), next_wheres), next_scope);
            };
          }(in_PLUS_sources, wheres, scope), rule_branches);
        } else {
          var pred__36651 = datascript.looks_like_QMARK_;
          var expr__36652 = where;
          if (cljs.core.truth_(pred__36651.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null)], null), expr__36652))) {
            if (cljs.core.truth_(datascript.call.call(null, cljs.core.first.call(null, where), scope))) {
              var G__36664 = null;
              var G__36665 = cljs.core.next.call(null, wheres);
              var G__36666 = scope;
              in_PLUS_sources = G__36664;
              wheres = G__36665;
              scope = G__36666;
              continue;
            } else {
              return null;
            }
          } else {
            if (cljs.core.truth_(pred__36651.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), new cljs.core.Symbol(null, "_", "_", -1640531432, null)], null), expr__36652))) {
              var res = datascript.call.call(null, cljs.core.first.call(null, where), scope);
              var G__36667 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, where), res], null)], null);
              var G__36668 = cljs.core.next.call(null, wheres);
              var G__36669 = scope;
              in_PLUS_sources = G__36667;
              wheres = G__36668;
              scope = G__36669;
              continue;
            } else {
              if (cljs.core.truth_(pred__36651.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), expr__36652))) {
                var vec__36654 = datascript.parse_where.call(null, where);
                var source = cljs.core.nth.call(null, vec__36654, 0, null);
                var where__$1 = cljs.core.nth.call(null, vec__36654, 1, null);
                var found = datascript.search_datoms.call(null, source, where__$1, scope);
                return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
                  return function(p1__36636_SHARP_) {
                    return _q.call(null, null, cljs.core.next.call(null, wheres), datascript.populate_scope.call(null, scope, where__$1, p1__36636_SHARP_));
                  };
                }(in_PLUS_sources, wheres, scope), found);
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__36652)].join(""));
              }
            }
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.PersistentHashSet.fromArray([cljs.core.mapv.call(null, scope, (new cljs.core.Keyword(null, "__find", "__find", 3824551179)).cljs$core$IFn$_invoke$arity$1(scope))], true);
        } else {
          return null;
        }
      }
    }
    break;
  }
};
datascript.built_in_aggregates = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Symbol(null, "distinct", "distinct", -1351833419, null), cljs.core.comp.call(null, cljs.core.vec, cljs.core.distinct), new cljs.core.Symbol(null, "min", "min", -1640423413, null), function() {
  var G__36671 = null;
  var G__36671__1 = function(coll) {
    return cljs.core.reduce.call(null, cljs.core.min, coll);
  };
  var G__36671__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.reduce.call(null, function(acc, x) {
      if (cljs.core.count.call(null, acc) < n) {
        return cljs.core.sort.call(null, cljs.core.conj.call(null, acc, x));
      } else {
        if (x < cljs.core.last.call(null, acc)) {
          return cljs.core.sort.call(null, cljs.core.conj.call(null, cljs.core.butlast.call(null, acc), x));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return acc;
          } else {
            return null;
          }
        }
      }
    }, cljs.core.PersistentVector.EMPTY, coll));
  };
  G__36671 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__36671__1.call(this, n);
      case 2:
        return G__36671__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__36671;
}(), new cljs.core.Symbol(null, "max", "max", -1640423651, null), function() {
  var G__36672 = null;
  var G__36672__1 = function(coll) {
    return cljs.core.reduce.call(null, cljs.core.max, coll);
  };
  var G__36672__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.reduce.call(null, function(acc, x) {
      if (cljs.core.count.call(null, acc) < n) {
        return cljs.core.sort.call(null, cljs.core.conj.call(null, acc, x));
      } else {
        if (x > cljs.core.first.call(null, acc)) {
          return cljs.core.sort.call(null, cljs.core.conj.call(null, cljs.core.next.call(null, acc), x));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return acc;
          } else {
            return null;
          }
        }
      }
    }, cljs.core.PersistentVector.EMPTY, coll));
  };
  G__36672 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__36672__1.call(this, n);
      case 2:
        return G__36672__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__36672;
}(), new cljs.core.Symbol(null, "sum", "sum", -1640417276, null), function(p1__36670_SHARP_) {
  return cljs.core.reduce.call(null, cljs.core._PLUS_, 0, p1__36670_SHARP_);
}, new cljs.core.Symbol(null, "rand", "rand", -1637038626, null), function() {
  var G__36673 = null;
  var G__36673__1 = function(coll) {
    return cljs.core.rand_nth.call(null, coll);
  };
  var G__36673__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.repeatedly.call(null, n, function() {
      return cljs.core.rand_nth.call(null, coll);
    }));
  };
  G__36673 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__36673__1.call(this, n);
      case 2:
        return G__36673__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__36673;
}(), new cljs.core.Symbol(null, "sample", "sample", 1744760675, null), function(n, coll) {
  return cljs.core.vec.call(null, cljs.core.take.call(null, n, cljs.core.shuffle.call(null, coll)));
}, new cljs.core.Symbol(null, "count", "count", -1545680184, null), cljs.core.count], null);
datascript.aggr_group_key = function aggr_group_key(find, result) {
  return cljs.core.mapv.call(null, function(val, sym) {
    if (cljs.core.sequential_QMARK_.call(null, sym)) {
      return null;
    } else {
      return val;
    }
  }, result, find);
};
datascript._aggregate = function _aggregate(find, scope, results) {
  return cljs.core.mapv.call(null, function(sym, val, i) {
    if (cljs.core.sequential_QMARK_.call(null, sym)) {
      var vec__36676 = sym;
      var f = cljs.core.nth.call(null, vec__36676, 0, null);
      var args = cljs.core.nthnext.call(null, vec__36676, 1);
      var vals = cljs.core.map.call(null, function(vec__36676, f, args) {
        return function(p1__36674_SHARP_) {
          return cljs.core.get.call(null, p1__36674_SHARP_, i);
        };
      }(vec__36676, f, args), results);
      var args__$1 = cljs.core.concat.call(null, datascript.bind_symbols.call(null, cljs.core.butlast.call(null, args), scope), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [vals], null));
      var f__$1 = function() {
        var or__10329__auto__ = datascript.built_in_aggregates.call(null, f);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return scope.call(null, f);
        }
      }();
      return cljs.core.apply.call(null, f__$1, args__$1);
    } else {
      return val;
    }
  }, find, cljs.core.first.call(null, results), cljs.core.range.call(null));
};
datascript.aggregate = function aggregate(query, scope, results) {
  var find = cljs.core.concat.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query), (new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query));
  return cljs.core.mapv.call(null, function(p__36680) {
    var vec__36681 = p__36680;
    var _ = cljs.core.nth.call(null, vec__36681, 0, null);
    var results__$1 = cljs.core.nth.call(null, vec__36681, 1, null);
    return datascript._aggregate.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query), scope, results__$1);
  }, cljs.core.group_by.call(null, function(p1__36677_SHARP_) {
    return datascript.aggr_group_key.call(null, find, p1__36677_SHARP_);
  }, results));
};
datascript.parse_query = function parse_query(query) {
  var parsed = cljs.core.PersistentArrayMap.EMPTY;
  var key = null;
  var qs = query;
  while (true) {
    var temp__4090__auto__ = cljs.core.first.call(null, qs);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var q = temp__4090__auto__;
      if (q instanceof cljs.core.Keyword) {
        var G__36682 = parsed;
        var G__36683 = q;
        var G__36684 = cljs.core.next.call(null, qs);
        parsed = G__36682;
        key = G__36683;
        qs = G__36684;
        continue;
      } else {
        var G__36685 = cljs.core.update_in.call(null, parsed, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentVector.EMPTY), q);
        var G__36686 = key;
        var G__36687 = cljs.core.next.call(null, qs);
        parsed = G__36685;
        key = G__36686;
        qs = G__36687;
        continue;
      }
    } else {
      return parsed;
    }
    break;
  }
};
datascript.q = function() {
  var q__delegate = function(query, sources) {
    var query__$1 = function() {
      var G__36692 = query;
      var G__36692__$1 = cljs.core.sequential_QMARK_.call(null, query) ? datascript.parse_query.call(null, G__36692) : G__36692;
      return G__36692__$1;
    }();
    var ins__GT_sources = cljs.core.zipmap.call(null, (new cljs.core.Keyword(null, "in", "in", 1013907607)).cljs$core$IFn$_invoke$arity$2(query__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null)], null)), sources);
    var find = cljs.core.concat.call(null, cljs.core.map.call(null, function(query__$1, ins__GT_sources) {
      return function(p1__36688_SHARP_) {
        if (cljs.core.sequential_QMARK_.call(null, p1__36688_SHARP_)) {
          return cljs.core.last.call(null, p1__36688_SHARP_);
        } else {
          return p1__36688_SHARP_;
        }
      };
    }(query__$1, ins__GT_sources), (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)), (new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query__$1));
    var results = datascript._q.call(null, ins__GT_sources, (new cljs.core.Keyword(null, "where", "where", 1127002201)).cljs$core$IFn$_invoke$arity$1(query__$1), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "__find", "__find", 3824551179), find], null));
    var G__36693 = results;
    var G__36693__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query__$1)) ? cljs.core.mapv.call(null, function(G__36693) {
      return function(p1__36689_SHARP_) {
        return cljs.core.subvec.call(null, p1__36689_SHARP_, 0, cljs.core.count.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)));
      };
    }(G__36693), G__36693) : G__36693;
    var G__36693__$2 = cljs.core.truth_(cljs.core.not_empty.call(null, cljs.core.filter.call(null, cljs.core.sequential_QMARK_, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)))) ? datascript.aggregate.call(null, query__$1, ins__GT_sources, G__36693__$1) : G__36693__$1;
    return G__36693__$2;
  };
  var q = function(query, var_args) {
    var sources = null;
    if (arguments.length > 1) {
      sources = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return q__delegate.call(this, query, sources);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__36694) {
    var query = cljs.core.first(arglist__36694);
    var sources = cljs.core.rest(arglist__36694);
    return q__delegate(query, sources);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
datascript.entity = function entity(db, eid) {
  var temp__4092__auto__ = cljs.core.not_empty.call(null, cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), eid], null)));
  if (cljs.core.truth_(temp__4092__auto__)) {
    var attrs = temp__4092__auto__;
    return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), eid], null), function() {
      var iter__11046__auto__ = function iter__36703(s__36704) {
        return new cljs.core.LazySeq(null, function() {
          var s__36704__$1 = s__36704;
          while (true) {
            var temp__4092__auto____$1 = cljs.core.seq.call(null, s__36704__$1);
            if (temp__4092__auto____$1) {
              var s__36704__$2 = temp__4092__auto____$1;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__36704__$2)) {
                var c__11044__auto__ = cljs.core.chunk_first.call(null, s__36704__$2);
                var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
                var b__36706 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
                if (function() {
                  var i__36705 = 0;
                  while (true) {
                    if (i__36705 < size__11045__auto__) {
                      var vec__36709 = cljs.core._nth.call(null, c__11044__auto__, i__36705);
                      var attr = cljs.core.nth.call(null, vec__36709, 0, null);
                      var datoms = cljs.core.nth.call(null, vec__36709, 1, null);
                      cljs.core.chunk_append.call(null, b__36706, datascript.multival_QMARK_.call(null, db, attr) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.map.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), datoms)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.first.call(null, datoms).v], null));
                      var G__36711 = i__36705 + 1;
                      i__36705 = G__36711;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36706), iter__36703.call(null, cljs.core.chunk_rest.call(null, s__36704__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__36706), null);
                }
              } else {
                var vec__36710 = cljs.core.first.call(null, s__36704__$2);
                var attr = cljs.core.nth.call(null, vec__36710, 0, null);
                var datoms = cljs.core.nth.call(null, vec__36710, 1, null);
                return cljs.core.cons.call(null, datascript.multival_QMARK_.call(null, db, attr) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.map.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), datoms)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.first.call(null, datoms).v], null), iter__36703.call(null, cljs.core.rest.call(null, s__36704__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__11046__auto__.call(null, attrs);
    }());
  } else {
    return null;
  }
};
datascript.with$ = function with$(db, entities) {
  return datascript._with.call(null, db, cljs.core.map.call(null, function(p1__36713_SHARP_) {
    return datascript.resolve_eid.call(null, db, p1__36713_SHARP_);
  }, cljs.core.mapcat.call(null, function(p1__36712_SHARP_) {
    return datascript.entity__GT_tx_data.call(null, db, p1__36712_SHARP_);
  }, entities)));
};
datascript.tx0 = 536870912;
datascript.empty_db = function() {
  var empty_db__delegate = function(p__36714) {
    var vec__36716 = p__36714;
    var schema = cljs.core.nth.call(null, vec__36716, 0, null);
    return new datascript.DB(schema, cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, 0, datascript.tx0);
  };
  var empty_db = function(var_args) {
    var p__36714 = null;
    if (arguments.length > 0) {
      p__36714 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return empty_db__delegate.call(this, p__36714);
  };
  empty_db.cljs$lang$maxFixedArity = 0;
  empty_db.cljs$lang$applyTo = function(arglist__36717) {
    var p__36714 = cljs.core.seq(arglist__36717);
    return empty_db__delegate(p__36714);
  };
  empty_db.cljs$core$IFn$_invoke$arity$variadic = empty_db__delegate;
  return empty_db;
}();
datascript.create_conn = function() {
  var create_conn__delegate = function(p__36718) {
    var vec__36720 = p__36718;
    var schema = cljs.core.nth.call(null, vec__36720, 0, null);
    return cljs.core.atom.call(null, datascript.empty_db.call(null, schema), new cljs.core.Keyword(null, "meta", "meta", 1017252215), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "listeners", "listeners", 4090152369), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY)], null));
  };
  var create_conn = function(var_args) {
    var p__36718 = null;
    if (arguments.length > 0) {
      p__36718 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return create_conn__delegate.call(this, p__36718);
  };
  create_conn.cljs$lang$maxFixedArity = 0;
  create_conn.cljs$lang$applyTo = function(arglist__36721) {
    var p__36718 = cljs.core.seq(arglist__36721);
    return create_conn__delegate(p__36718);
  };
  create_conn.cljs$core$IFn$_invoke$arity$variadic = create_conn__delegate;
  return create_conn;
}();
datascript.transact_BANG_ = function transact_BANG_(conn, entities) {
  var meta = cljs.core.meta.call(null, conn);
  var db_before = cljs.core.atom.call(null, null);
  var tx_data = cljs.core.atom.call(null, null);
  var tempids = cljs.core.atom.call(null, null);
  var db_after = cljs.core.swap_BANG_.call(null, conn, function(meta, db_before, tx_data, tempids) {
    return function(db) {
      var raw_datoms = cljs.core.mapcat.call(null, function(meta, db_before, tx_data, tempids) {
        return function(p1__36722_SHARP_) {
          return datascript.entity__GT_tx_data.call(null, db, p1__36722_SHARP_);
        };
      }(meta, db_before, tx_data, tempids), entities);
      var datoms = cljs.core.map.call(null, function(raw_datoms, meta, db_before, tx_data, tempids) {
        return function(p1__36723_SHARP_) {
          return datascript.resolve_eid.call(null, db, p1__36723_SHARP_);
        };
      }(raw_datoms, meta, db_before, tx_data, tempids), raw_datoms);
      cljs.core.reset_BANG_.call(null, db_before, db);
      cljs.core.reset_BANG_.call(null, tx_data, datoms);
      cljs.core.reset_BANG_.call(null, tempids, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(raw_datoms, datoms, meta, db_before, tx_data, tempids) {
        return function(p1__36725_SHARP_) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__36725_SHARP_.e, datascript._resolve_eid.call(null, p1__36725_SHARP_.e, db)], null);
        };
      }(raw_datoms, datoms, meta, db_before, tx_data, tempids), cljs.core.filter.call(null, function(raw_datoms, datoms, meta, db_before, tx_data, tempids) {
        return function(p1__36724_SHARP_) {
          return p1__36724_SHARP_.e < 0;
        };
      }(raw_datoms, datoms, meta, db_before, tx_data, tempids), raw_datoms))));
      return datascript._with.call(null, db, datoms);
    };
  }(meta, db_before, tx_data, tempids));
  var report = new datascript.TxReport(cljs.core.deref.call(null, db_before), db_after, cljs.core.deref.call(null, tx_data));
  var seq__36732_36738 = cljs.core.seq.call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(meta)));
  var chunk__36733_36739 = null;
  var count__36734_36740 = 0;
  var i__36735_36741 = 0;
  while (true) {
    if (i__36735_36741 < count__36734_36740) {
      var vec__36736_36742 = cljs.core._nth.call(null, chunk__36733_36739, i__36735_36741);
      var __36743 = cljs.core.nth.call(null, vec__36736_36742, 0, null);
      var l_36744 = cljs.core.nth.call(null, vec__36736_36742, 1, null);
      l_36744.call(null, report);
      var G__36745 = seq__36732_36738;
      var G__36746 = chunk__36733_36739;
      var G__36747 = count__36734_36740;
      var G__36748 = i__36735_36741 + 1;
      seq__36732_36738 = G__36745;
      chunk__36733_36739 = G__36746;
      count__36734_36740 = G__36747;
      i__36735_36741 = G__36748;
      continue;
    } else {
      var temp__4092__auto___36749 = cljs.core.seq.call(null, seq__36732_36738);
      if (temp__4092__auto___36749) {
        var seq__36732_36750__$1 = temp__4092__auto___36749;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__36732_36750__$1)) {
          var c__11077__auto___36751 = cljs.core.chunk_first.call(null, seq__36732_36750__$1);
          var G__36752 = cljs.core.chunk_rest.call(null, seq__36732_36750__$1);
          var G__36753 = c__11077__auto___36751;
          var G__36754 = cljs.core.count.call(null, c__11077__auto___36751);
          var G__36755 = 0;
          seq__36732_36738 = G__36752;
          chunk__36733_36739 = G__36753;
          count__36734_36740 = G__36754;
          i__36735_36741 = G__36755;
          continue;
        } else {
          var vec__36737_36756 = cljs.core.first.call(null, seq__36732_36750__$1);
          var __36757 = cljs.core.nth.call(null, vec__36737_36756, 0, null);
          var l_36758 = cljs.core.nth.call(null, vec__36737_36756, 1, null);
          l_36758.call(null, report);
          var G__36759 = cljs.core.next.call(null, seq__36732_36750__$1);
          var G__36760 = null;
          var G__36761 = 0;
          var G__36762 = 0;
          seq__36732_36738 = G__36759;
          chunk__36733_36739 = G__36760;
          count__36734_36740 = G__36761;
          i__36735_36741 = G__36762;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.assoc.call(null, report, new cljs.core.Keyword(null, "tempids", "tempids", 3880764886), cljs.core.deref.call(null, tempids));
};
datascript.listen_BANG_ = function() {
  var listen_BANG_ = null;
  var listen_BANG___2 = function(conn, callback) {
    return listen_BANG_.call(null, conn, cljs.core.rand.call(null), callback);
  };
  var listen_BANG___3 = function(conn, key, callback) {
    cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, conn)), cljs.core.assoc, key, callback);
    return key;
  };
  listen_BANG_ = function(conn, key, callback) {
    switch(arguments.length) {
      case 2:
        return listen_BANG___2.call(this, conn, key);
      case 3:
        return listen_BANG___3.call(this, conn, key, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_BANG___2;
  listen_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_BANG___3;
  return listen_BANG_;
}();
datascript.unlisten_BANG_ = function unlisten_BANG_(conn, key) {
  return cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, conn)), cljs.core.dissoc, key);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__36526 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__36526;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__36530 = cljs.core._EQ_;
    var expr__36531 = limit;
    if (cljs.core.truth_(pred__36530.call(null, 1, expr__36531))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__36530.call(null, 2, expr__36531))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__36533 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__36534 = limit__$1 - 1;
            var G__36535 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__36533;
            limit__$1 = G__36534;
            parts = G__36535;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__36536 = index - 1;
        index = G__36536;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___36537 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___36537)) {
        var replacement_36538 = temp__4090__auto___36537;
        buffer.append([cljs.core.str(replacement_36538)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__36539 = index + 1;
      index = G__36539;
      continue;
    }
    break;
  }
};
goog.provide("cemerick.cljs.test");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
cemerick.cljs.test._STAR_test_print_fn_STAR_ = null;
cemerick.cljs.test._STAR_entry_point_STAR_ = true;
cemerick.cljs.test._STAR_test_ctx_STAR_ = null;
cemerick.cljs.test.init_test_environment_STAR_ = function init_test_environment_STAR_(aux_data) {
  return cljs.core.atom.call(null, cljs.core.merge.call(null, cljs.core.assoc.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "test", "test", 1017460740), 0, new cljs.core.Keyword(null, "pass", "pass", 1017337731), 0, new cljs.core.Keyword(null, "fail", "fail", 1017039504), 0, new cljs.core.Keyword(null, "error", "error", 1110689146), 0], null), cljs.core.truth_(cemerick.cljs.test._STAR_test_print_fn_STAR_) ? new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", 740963180), cemerick.cljs.test._STAR_test_print_fn_STAR_], null) : null), new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1853176376), cljs.core.List.EMPTY), aux_data));
};
cemerick.cljs.test.init_test_environment = function init_test_environment() {
  var G__36802 = cemerick.cljs.test.init_test_environment_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", 1471979159), cljs.core.List.EMPTY], null));
  cljs.core.swap_BANG_.call(null, G__36802, cljs.core.assoc, new cljs.core.Keyword(null, "async", "async", 1107031534), cemerick.cljs.test.init_test_environment_STAR_.call(null, cljs.core.PersistentArrayMap.EMPTY));
  return G__36802;
};
cemerick.cljs.test.registered_tests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_test_hooks = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.registered_fixtures = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cemerick.cljs.test.register_test_BANG_ = function register_test_BANG_(ns, name, fn) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_tests, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns], null), cljs.core.assoc, name, fn);
};
cemerick.cljs.test.register_test_ns_hook_BANG_ = function register_test_ns_hook_BANG_(ns, name) {
  return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_test_hooks, cljs.core.assoc, ns, name);
};
cemerick.cljs.test.TestContext = function(test_env, test_name, __meta, __extmap) {
  this.test_env = test_env;
  this.test_name = test_name;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10910__auto__) {
  var self__ = this;
  var this__10910__auto____$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, this__10910__auto____$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10915__auto__, k__10916__auto__) {
  var self__ = this;
  var this__10915__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10915__auto____$1, k__10916__auto__, null);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10917__auto__, k36804, else__10918__auto__) {
  var self__ = this;
  var this__10917__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k36804, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740))) {
    return self__.test_env;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k36804, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616))) {
      return self__.test_name;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k36804, else__10918__auto__);
      } else {
        return null;
      }
    }
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10922__auto__, k__10923__auto__, G__36803) {
  var self__ = this;
  var this__10922__auto____$1 = this;
  var pred__36806 = cljs.core.keyword_identical_QMARK_;
  var expr__36807 = k__10923__auto__;
  if (cljs.core.truth_(pred__36806.call(null, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), expr__36807))) {
    return new cemerick.cljs.test.TestContext(G__36803, self__.test_name, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__36806.call(null, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616), expr__36807))) {
      return new cemerick.cljs.test.TestContext(self__.test_env, G__36803, self__.__meta, self__.__extmap, null);
    } else {
      return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10923__auto__, G__36803), null);
    }
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10929__auto__, writer__10930__auto__, opts__10931__auto__) {
  var self__ = this;
  var this__10929__auto____$1 = this;
  var pr_pair__10932__auto__ = function(keyval__10933__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, cljs.core.pr_writer, "", " ", "", opts__10931__auto__, keyval__10933__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, pr_pair__10932__auto__, "#cemerick.cljs.test.TestContext{", ", ", "}", opts__10931__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "test-name", "test-name", 4082390616), self__.test_name], null)], null), self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10920__auto__, entry__10921__auto__) {
  var self__ = this;
  var this__10920__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10921__auto__)) {
    return cljs.core._assoc.call(null, this__10920__auto____$1, cljs.core._nth.call(null, entry__10921__auto__, 0), cljs.core._nth.call(null, entry__10921__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10920__auto____$1, entry__10921__auto__);
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10927__auto__) {
  var self__ = this;
  var this__10927__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), self__.test_env], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test-name", "test-name", 4082390616), self__.test_name], null)], null), 
  self__.__extmap));
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10919__auto__) {
  var self__ = this;
  var this__10919__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10911__auto__, other__10912__auto__) {
  var self__ = this;
  var this__10911__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = other__10912__auto__;
    if (cljs.core.truth_(and__10317__auto__)) {
      return this__10911__auto____$1.constructor === other__10912__auto__.constructor && cljs.core.equiv_map.call(null, this__10911__auto____$1, other__10912__auto__);
    } else {
      return and__10317__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10914__auto__, G__36803) {
  var self__ = this;
  var this__10914__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, G__36803, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10909__auto__) {
  var self__ = this;
  var this__10909__auto____$1 = this;
  return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, self__.__extmap, self__.__hash);
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10913__auto__) {
  var self__ = this;
  var this__10913__auto____$1 = this;
  return self__.__meta;
};
cemerick.cljs.test.TestContext.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10924__auto__, k__10925__auto__) {
  var self__ = this;
  var this__10924__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "test-name", "test-name", 4082390616), null, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), null], null), null), k__10925__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10924__auto____$1), self__.__meta), k__10925__auto__);
  } else {
    return new cemerick.cljs.test.TestContext(self__.test_env, self__.test_name, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10925__auto__)), null);
  }
};
cemerick.cljs.test.TestContext.cljs$lang$type = true;
cemerick.cljs.test.TestContext.cljs$lang$ctorPrSeq = function(this__10949__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.TestContext.cljs$lang$ctorPrWriter = function(this__10949__auto__, writer__10950__auto__) {
  return cljs.core._write.call(null, writer__10950__auto__, "cemerick.cljs.test/TestContext");
};
cemerick.cljs.test.__GT_TestContext = function __GT_TestContext(test_env, test_name) {
  return new cemerick.cljs.test.TestContext(test_env, test_name);
};
cemerick.cljs.test.map__GT_TestContext = function map__GT_TestContext(G__36805) {
  return new cemerick.cljs.test.TestContext((new cljs.core.Keyword(null, "test-env", "test-env", 4160920740)).cljs$core$IFn$_invoke$arity$1(G__36805), (new cljs.core.Keyword(null, "test-name", "test-name", 4082390616)).cljs$core$IFn$_invoke$arity$1(G__36805), null, cljs.core.dissoc.call(null, G__36805, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), new cljs.core.Keyword(null, "test-name", "test-name", 4082390616)));
};
cemerick.cljs.test.maybe_deref = function maybe_deref(x) {
  if (function() {
    var G__36810 = x;
    if (G__36810) {
      var bit__10979__auto__ = G__36810.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__10979__auto__ || G__36810.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__36810.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__36810);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__36810);
    }
  }()) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cemerick.cljs.test.testing_complete_QMARK_ = function testing_complete_QMARK_(test_env) {
  var map__36812 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__36812__$1 = cljs.core.seq_QMARK_.call(null, map__36812) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36812) : map__36812;
  var remaining = cljs.core.get.call(null, map__36812__$1, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", 3842781245));
  var running = cljs.core.get.call(null, map__36812__$1, new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", 1286908024));
  var async = cljs.core.get.call(null, map__36812__$1, new cljs.core.Keyword(null, "async", "async", 1107031534));
  var and__10317__auto__ = cljs.core.empty_QMARK_.call(null, remaining);
  if (and__10317__auto__) {
    var and__10317__auto____$1 = cljs.core.empty_QMARK_.call(null, running);
    if (and__10317__auto____$1) {
      var or__10329__auto__ = async == null;
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        return testing_complete_QMARK_.call(null, async);
      }
    } else {
      return and__10317__auto____$1;
    }
  } else {
    return and__10317__auto__;
  }
};
cemerick.cljs.test.on_async_progress = function on_async_progress(test_env, callback) {
  if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env))) {
    setTimeout(function() {
      return callback.call(null, test_env);
    }, 1);
  } else {
    cljs.core.add_watch.call(null, (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(cemerick.cljs.test.maybe_deref.call(null, test_env)), cljs.core.gensym.call(null, "on-progress"), function(key, ref, old, new$) {
      var vec__36815 = cljs.core.map.call(null, function(p1__36813_SHARP_) {
        return cljs.core.select_keys.call(null, p1__36813_SHARP_, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "test", "test", 1017460740), new cljs.core.Keyword(null, "pass", "pass", 1017337731), new cljs.core.Keyword(null, "fail", "fail", 1017039504), new cljs.core.Keyword(null, "error", "error", 1110689146)], null));
      }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [old, new$], null));
      var oldv = cljs.core.nth.call(null, vec__36815, 0, null);
      var newv = cljs.core.nth.call(null, vec__36815, 1, null);
      var complete_QMARK_ = cemerick.cljs.test.testing_complete_QMARK_.call(null, new$);
      if (cljs.core.truth_(function() {
        var or__10329__auto__ = complete_QMARK_;
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, oldv, newv);
        }
      }())) {
        callback.call(null, cemerick.cljs.test.maybe_deref.call(null, test_env));
      } else {
      }
      if (cljs.core.truth_(complete_QMARK_)) {
        return cljs.core.remove_watch.call(null, ref, key);
      } else {
        return null;
      }
    });
  }
  return test_env;
};
goog.exportSymbol("cemerick.cljs.test.on_async_progress", cemerick.cljs.test.on_async_progress);
cemerick.cljs.test.on_testing_complete = function on_testing_complete(test_env, callback) {
  return cemerick.cljs.test.on_async_progress.call(null, test_env, function(test_env__$1) {
    if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env__$1))) {
      return callback.call(null, test_env__$1);
    } else {
      return null;
    }
  });
};
goog.exportSymbol("cemerick.cljs.test.on_testing_complete", cemerick.cljs.test.on_testing_complete);
cemerick.cljs.test.testing_vars_str = function testing_vars_str(p__36816) {
  var map__36818 = p__36816;
  var map__36818__$1 = cljs.core.seq_QMARK_.call(null, map__36818) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36818) : map__36818;
  var m = map__36818__$1;
  var test_name = cljs.core.get.call(null, map__36818__$1, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616));
  var test_env = cljs.core.get.call(null, map__36818__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  var line = cljs.core.get.call(null, map__36818__$1, new cljs.core.Keyword(null, "line", "line", 1017226086));
  var file = cljs.core.get.call(null, map__36818__$1, new cljs.core.Keyword(null, "file", "file", 1017047278));
  return[cljs.core.str(cljs.core.pr_str.call(null, function() {
    var or__10329__auto__ = cljs.core.seq.call(null, cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", 1471979159)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env))));
    if (or__10329__auto__) {
      return or__10329__auto__;
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, test_name);
    }
  }())), cljs.core.str(" ("), cljs.core.str(file), cljs.core.str(":"), cljs.core.str(line), cljs.core.str(")")].join("");
};
cemerick.cljs.test.testing_contexts_str = function testing_contexts_str(test_env) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.reverse.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1853176376)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))));
};
cemerick.cljs.test.inc_report_counter = function inc_report_counter(test_env, name) {
  return cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name], null), cljs.core.fnil.call(null, cljs.core.inc, 0));
};
cemerick.cljs.test.report = function() {
  var method_table__11187__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__11188__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__11189__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__11190__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__11191__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("report", new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__11191__auto__, method_table__11187__auto__, prefer_table__11188__auto__, method_cache__11189__auto__, cached_hierarchy__11190__auto__);
}();
cemerick.cljs.test.file_and_line = function file_and_line(error) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "file", "file", 1017047278), error.fileName, new cljs.core.Keyword(null, "line", "line", 1017226086), error.lineNumber], null);
};
cemerick.cljs.test.do_report = function() {
  var do_report = null;
  var do_report__1 = function(m) {
    return cemerick.cljs.test.report.call(null, function() {
      var G__36823 = (new cljs.core.Keyword(null, "type", "type", 1017479852)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "error", "error", 1110689146), G__36823)) {
        return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, (new cljs.core.Keyword(null, "actual", "actual", 3885931776)).cljs$core$IFn$_invoke$arity$1(m)), m);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "fail", "fail", 1017039504), G__36823)) {
          return cljs.core.merge.call(null, cemerick.cljs.test.file_and_line.call(null, Error()), m);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return m;
          } else {
            return null;
          }
        }
      }
    }());
  };
  var do_report__2 = function(p__36819, m) {
    var map__36822 = p__36819;
    var map__36822__$1 = cljs.core.seq_QMARK_.call(null, map__36822) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36822) : map__36822;
    var test_ctx = map__36822__$1;
    var test_name = cljs.core.get.call(null, map__36822__$1, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616));
    var test_env = cljs.core.get.call(null, map__36822__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null), new cljs.core.Symbol(null, "TestContext", "TestContext", 586269270, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", 1506483237, null))))].join(""));
    }
    return do_report.call(null, cljs.core.merge.call(null, m, test_ctx));
  };
  do_report = function(p__36819, m) {
    switch(arguments.length) {
      case 1:
        return do_report__1.call(this, p__36819);
      case 2:
        return do_report__2.call(this, p__36819, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  do_report.cljs$core$IFn$_invoke$arity$1 = do_report__1;
  do_report.cljs$core$IFn$_invoke$arity$2 = do_report__2;
  return do_report;
}();
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "default", "default", 2558708147), function(p__36824) {
  var map__36825 = p__36824;
  var map__36825__$1 = cljs.core.seq_QMARK_.call(null, map__36825) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36825) : map__36825;
  var m = map__36825__$1;
  var test_env = cljs.core.get.call(null, map__36825__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  var _STAR_print_fn_STAR_36826 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__10329__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", 740963180)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.prn.call(null, m);
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_36826;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "pass", "pass", 1017337731), function(p__36827) {
  var map__36828 = p__36827;
  var map__36828__$1 = cljs.core.seq_QMARK_.call(null, map__36828) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36828) : map__36828;
  var m = map__36828__$1;
  var test_env = cljs.core.get.call(null, map__36828__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  var _STAR_print_fn_STAR_36829 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__10329__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", 740963180)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "pass", "pass", 1017337731));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_36829;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "fail", "fail", 1017039504), function(p__36830) {
  var map__36831 = p__36830;
  var map__36831__$1 = cljs.core.seq_QMARK_.call(null, map__36831) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36831) : map__36831;
  var m = map__36831__$1;
  var test_env = cljs.core.get.call(null, map__36831__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  var _STAR_print_fn_STAR_36832 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__10329__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", 740963180)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "fail", "fail", 1017039504));
    cljs.core.println.call(null, "\nFAIL in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1853176376)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4092__auto___36833 = (new cljs.core.Keyword(null, "message", "message", 1968829305)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4092__auto___36833)) {
      var message_36834 = temp__4092__auto___36833;
      cljs.core.println.call(null, message_36834);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 3373152810)).cljs$core$IFn$_invoke$arity$1(m)));
    return cljs.core.println.call(null, "  actual:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "actual", "actual", 3885931776)).cljs$core$IFn$_invoke$arity$1(m)));
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_36832;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "error", "error", 1110689146), function(p__36835) {
  var map__36836 = p__36835;
  var map__36836__$1 = cljs.core.seq_QMARK_.call(null, map__36836) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36836) : map__36836;
  var m = map__36836__$1;
  var test_env = cljs.core.get.call(null, map__36836__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  var _STAR_print_fn_STAR_36837 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__10329__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", 740963180)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "error", "error", 1110689146));
    cljs.core.println.call(null, "\nERROR in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1853176376)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4092__auto___36838 = (new cljs.core.Keyword(null, "message", "message", 1968829305)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4092__auto___36838)) {
      var message_36839 = temp__4092__auto___36838;
      cljs.core.println.call(null, message_36839);
    } else {
    }
    cljs.core.println.call(null, "expected:", cljs.core.pr_str.call(null, (new cljs.core.Keyword(null, "expected", "expected", 3373152810)).cljs$core$IFn$_invoke$arity$1(m)));
    cljs.core.print.call(null, "  actual: ");
    var actual = (new cljs.core.Keyword(null, "actual", "actual", 3885931776)).cljs$core$IFn$_invoke$arity$1(m);
    if (actual instanceof Error) {
      return cljs.core.println.call(null, actual.stack);
    } else {
      return cljs.core.prn.call(null, actual);
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_36837;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 4521901954), function(p__36840) {
  var map__36841 = p__36840;
  var map__36841__$1 = cljs.core.seq_QMARK_.call(null, map__36841) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36841) : map__36841;
  var m = map__36841__$1;
  var test_env = cljs.core.get.call(null, map__36841__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  var _STAR_print_fn_STAR_36842 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__10329__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", 740963180)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 4521901954));
    cljs.core.println.call(null, "\nWARNING in", cemerick.cljs.test.testing_vars_str.call(null, m));
    if (cljs.core.seq.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "test-contexts", "cemerick.cljs.test/test-contexts", 1853176376)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))) {
      cljs.core.println.call(null, cemerick.cljs.test.testing_contexts_str.call(null, test_env));
    } else {
    }
    var temp__4092__auto__ = (new cljs.core.Keyword(null, "message", "message", 1968829305)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var message = temp__4092__auto__;
      return cljs.core.println.call(null, message);
    } else {
      return null;
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_36842;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "summary", "summary", 3451231E3), function(p__36843) {
  var map__36844 = p__36843;
  var map__36844__$1 = cljs.core.seq_QMARK_.call(null, map__36844) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36844) : map__36844;
  var test_env = map__36844__$1;
  var error = cljs.core.get.call(null, map__36844__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
  var fail = cljs.core.get.call(null, map__36844__$1, new cljs.core.Keyword(null, "fail", "fail", 1017039504));
  var pass = cljs.core.get.call(null, map__36844__$1, new cljs.core.Keyword(null, "pass", "pass", 1017337731));
  var test = cljs.core.get.call(null, map__36844__$1, new cljs.core.Keyword(null, "test", "test", 1017460740));
  var _STAR_print_fn_STAR_36845 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__10329__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", 740963180)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    cljs.core.println.call(null, "\nRan", test, "tests containing", pass + fail + error, "assertions.");
    var temp__4090__auto__ = function() {
      var and__10317__auto__ = cljs.core.not.call(null, cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env));
      if (and__10317__auto__) {
        return cljs.core.apply.call(null, cljs.core._PLUS_, cljs.core.map.call(null, cljs.core.count, cljs.core.juxt.call(null, new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", 3842781245), new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", 1286908024)).call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(test_env)))));
      } else {
        return and__10317__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4090__auto__)) {
      var pending_count = temp__4090__auto__;
      return cljs.core.println.call(null, "Waiting on", pending_count, [cljs.core.str("asynchronous test"), cljs.core.str(pending_count > 1 ? "s" : null), cljs.core.str(" to complete.")].join(""));
    } else {
      return cljs.core.println.call(null, "Testing complete:", fail, "failures,", error, "errors.");
    }
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_36845;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", 1359210286), function(p__36846) {
  var map__36847 = p__36846;
  var map__36847__$1 = cljs.core.seq_QMARK_.call(null, map__36847) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36847) : map__36847;
  var m = map__36847__$1;
  var async = cljs.core.get.call(null, map__36847__$1, new cljs.core.Keyword(null, "async", "async", 1107031534));
  var test_env = cljs.core.get.call(null, map__36847__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  var ns = cljs.core.get.call(null, map__36847__$1, new cljs.core.Keyword(null, "ns", "ns", 1013907767));
  var _STAR_print_fn_STAR_36848 = cljs.core._STAR_print_fn_STAR_;
  try {
    cljs.core._STAR_print_fn_STAR_ = function() {
      var or__10329__auto__ = (new cljs.core.Keyword("cemerick.cljs.test", "test-print-fn", "cemerick.cljs.test/test-print-fn", 740963180)).cljs$core$IFn$_invoke$arity$1(test_env);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core._STAR_print_fn_STAR_;
      }
    }();
    return cljs.core.println.call(null, "\nTesting", ns, cljs.core.truth_(async) ? "(async)" : "");
  } finally {
    cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_36848;
  }
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 3401491808), function(p__36849) {
  var map__36850 = p__36849;
  var map__36850__$1 = cljs.core.seq_QMARK_.call(null, map__36850) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36850) : map__36850;
  var m = map__36850__$1;
  var test_env = cljs.core.get.call(null, map__36850__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", 3128464258), function(p__36851) {
  var map__36852 = p__36851;
  var map__36852__$1 = cljs.core.seq_QMARK_.call(null, map__36852) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36852) : map__36852;
  var m = map__36852__$1;
  var test_env = cljs.core.get.call(null, map__36852__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  return null;
});
cljs.core._add_method.call(null, cemerick.cljs.test.report, new cljs.core.Keyword(null, "end-test-var", "end-test-var", 2014682E3), function(p__36853) {
  var map__36854 = p__36853;
  var map__36854__$1 = cljs.core.seq_QMARK_.call(null, map__36854) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36854) : map__36854;
  var m = map__36854__$1;
  var test_env = cljs.core.get.call(null, map__36854__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
  return null;
});
cemerick.cljs.test.register_fixtures_BANG_ = function() {
  var register_fixtures_BANG___delegate = function(ns_sym, fixture_type, fixture_fns) {
    return cljs.core.swap_BANG_.call(null, cemerick.cljs.test.registered_fixtures, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns_sym, fixture_type], null), cljs.core.constantly.call(null, fixture_fns));
  };
  var register_fixtures_BANG_ = function(ns_sym, fixture_type, var_args) {
    var fixture_fns = null;
    if (arguments.length > 2) {
      fixture_fns = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return register_fixtures_BANG___delegate.call(this, ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$lang$maxFixedArity = 2;
  register_fixtures_BANG_.cljs$lang$applyTo = function(arglist__36855) {
    var ns_sym = cljs.core.first(arglist__36855);
    arglist__36855 = cljs.core.next(arglist__36855);
    var fixture_type = cljs.core.first(arglist__36855);
    var fixture_fns = cljs.core.rest(arglist__36855);
    return register_fixtures_BANG___delegate(ns_sym, fixture_type, fixture_fns);
  };
  register_fixtures_BANG_.cljs$core$IFn$_invoke$arity$variadic = register_fixtures_BANG___delegate;
  return register_fixtures_BANG_;
}();
cemerick.cljs.test.default_fixture = function default_fixture(f) {
  return f.call(null);
};
cemerick.cljs.test.compose_fixtures = function compose_fixtures(f1, f2) {
  return function(g) {
    return f1.call(null, function() {
      return f2.call(null, g);
    });
  };
};
cemerick.cljs.test.join_fixtures = function join_fixtures(fixtures) {
  return cljs.core.reduce.call(null, cemerick.cljs.test.compose_fixtures, cemerick.cljs.test.default_fixture, fixtures);
};
cemerick.cljs.test.async_test_QMARK_ = function async_test_QMARK_(test_fn) {
  return cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, test_fn)));
};
cemerick.cljs.test.test_async_fn = function test_async_fn(async_test_env, test_name, test_fn) {
  cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", 3128464258), new cljs.core.Keyword(null, "var", "var", 1014020761), test_fn, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), async_test_env, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616), test_name], null));
  cemerick.cljs.test.inc_report_counter.call(null, async_test_env, new cljs.core.Keyword(null, "test", "test", 1017460740));
  return test_fn.call(null, new cemerick.cljs.test.TestContext(async_test_env, test_name));
};
cemerick.cljs.test.start_next_async_test = function start_next_async_test(async_test_env) {
  var next_test = cljs.core.atom.call(null, function() {
    return null;
  });
  cljs.core.swap_BANG_.call(null, async_test_env, function(env) {
    var temp__4090__auto__ = function() {
      var and__10317__auto__ = cljs.core.not.call(null, (new cljs.core.Keyword(null, "stop", "stop", 1017445236)).cljs$core$IFn$_invoke$arity$1(env));
      if (and__10317__auto__) {
        return cljs.core.first.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", 3842781245)).cljs$core$IFn$_invoke$arity$1(env));
      } else {
        return and__10317__auto__;
      }
    }();
    if (cljs.core.truth_(temp__4090__auto__)) {
      var vec__36857 = temp__4090__auto__;
      var name = cljs.core.nth.call(null, vec__36857, 0, null);
      var testfn = cljs.core.nth.call(null, vec__36857, 1, null);
      cljs.core.reset_BANG_.call(null, next_test, testfn);
      var ns_36858 = cljs.core.namespace.call(null, name);
      if (cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "namespaces", "namespaces", 1177962986)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, async_test_env)), ns_36858)) {
      } else {
        cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", 1359210286), new cljs.core.Keyword(null, "ns", "ns", 1013907767), ns_36858, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), async_test_env, new cljs.core.Keyword(null, "async", "async", 1107031534), true], null));
        cljs.core.alter_meta_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "namespaces", "namespaces", 1177962986)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), ns_36858);
      }
      return cljs.core.update_in.call(null, cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", 3842781245)], null), cljs.core.dissoc, name), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", 1286908024)], null), cljs.core.assoc, 
      name, new Date);
    } else {
      return env;
    }
  });
  setTimeout(function() {
    return cljs.core.deref.call(null, next_test).call(null);
  }, 1);
  return async_test_env;
};
cemerick.cljs.test.squelch_internals = function squelch_internals(test_env) {
  var G__36863 = test_env;
  cljs.core.swap_BANG_.call(null, G__36863, function(p1__36859_SHARP_) {
    return cljs.core.reduce.call(null, function(env, p__36864) {
      var vec__36865 = p__36864;
      var k = cljs.core.nth.call(null, vec__36865, 0, null);
      var v = cljs.core.nth.call(null, vec__36865, 1, null);
      if (cljs.core._EQ_.call(null, cljs.core.namespace.call(null, k), cljs.core.namespace.call(null, new cljs.core.Keyword("cemerick.cljs.test", "foo", "cemerick.cljs.test/foo", 4582478189)))) {
        return env;
      } else {
        return cljs.core.assoc.call(null, env, k, v);
      }
    }, cljs.core.PersistentArrayMap.EMPTY, p1__36859_SHARP_);
  });
  return G__36863;
};
cemerick.cljs.test.finish_test_entry_point = function finish_test_entry_point(entry_point_QMARK_, test_env) {
  if (cljs.core.truth_(entry_point_QMARK_)) {
    if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", 3842781245)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)))))) {
      cljs.core.swap_BANG_.call(null, test_env, cljs.core.dissoc, new cljs.core.Keyword(null, "async", "async", 1107031534));
    } else {
      cemerick.cljs.test.start_next_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)));
    }
    return cljs.core.deref.call(null, cemerick.cljs.test.squelch_internals.call(null, test_env));
  } else {
    return test_env;
  }
};
cemerick.cljs.test.schedule_async_test = function schedule_async_test(async_test_env, test_name, test_fn) {
  cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "remaining", "cemerick.cljs.test/remaining", 3842781245)], null), cljs.core.fnil.call(null, cljs.core.assoc, cljs.core.sorted_map.call(null)), test_name, cljs.core.with_meta.call(null, function() {
    return cemerick.cljs.test.test_async_fn.call(null, async_test_env, test_name, test_fn);
  }, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1017277949), test_name], null)));
  return async_test_env;
};
cemerick.cljs.test.done_STAR_ = function() {
  var done_STAR_ = null;
  var done_STAR___1 = function(p__36867) {
    var map__36871 = p__36867;
    var map__36871__$1 = cljs.core.seq_QMARK_.call(null, map__36871) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36871) : map__36871;
    var test_ctx = map__36871__$1;
    var test_name = cljs.core.get.call(null, map__36871__$1, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616));
    var async_test_env = cljs.core.get.call(null, map__36871__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null), new cljs.core.Symbol(null, "TestContext", "TestContext", 586269270, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", 1506483237, null))))].join(""));
    }
    var first_call_QMARK_ = cljs.core.atom.call(null, false);
    cljs.core.swap_BANG_.call(null, async_test_env, function(env) {
      cljs.core.reset_BANG_.call(null, first_call_QMARK_, cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", 1286908024)).cljs$core$IFn$_invoke$arity$1(env), test_name));
      return cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "running", "cemerick.cljs.test/running", 1286908024)], null), cljs.core.dissoc, test_name);
    });
    if (cljs.core.truth_(cljs.core.deref.call(null, first_call_QMARK_))) {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 2014682E3), new cljs.core.Keyword(null, "var", "var", 1014020761), test_name], null), test_ctx));
      if (cljs.core.truth_(cemerick.cljs.test.testing_complete_QMARK_.call(null, async_test_env))) {
        cemerick.cljs.test.squelch_internals.call(null, async_test_env);
      } else {
        cemerick.cljs.test.start_next_async_test.call(null, async_test_env);
      }
    } else {
      cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "multiple-async-done", "multiple-async-done", 4521901954), new cljs.core.Keyword(null, "message", "message", 1968829305), "`(done)` called multiple times to signal end-of-test"], null), test_ctx));
    }
    return async_test_env;
  };
  var done_STAR___2 = function(p__36866, error) {
    var map__36870 = p__36866;
    var map__36870__$1 = cljs.core.seq_QMARK_.call(null, map__36870) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36870) : map__36870;
    var test_ctx = map__36870__$1;
    var test_name = cljs.core.get.call(null, map__36870__$1, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616));
    var test_env = cljs.core.get.call(null, map__36870__$1, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740));
    if (test_ctx instanceof cemerick.cljs.test.TestContext) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "instance?", "instance?", -1611433981, null), new cljs.core.Symbol(null, "TestContext", "TestContext", 586269270, null), new cljs.core.Symbol(null, "test-ctx", "test-ctx", 1506483237, null))))].join(""));
    }
    cemerick.cljs.test.do_report.call(null, cemerick.cljs.test.do_report.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "message", "message", 1968829305), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "expected", "expected", 3373152810), null, new cljs.core.Keyword(null, "actual", "actual", 3885931776), 
    error], null), test_ctx)));
    return done_STAR_.call(null, test_ctx);
  };
  done_STAR_ = function(p__36866, error) {
    switch(arguments.length) {
      case 1:
        return done_STAR___1.call(this, p__36866);
      case 2:
        return done_STAR___2.call(this, p__36866, error);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  done_STAR_.cljs$core$IFn$_invoke$arity$1 = done_STAR___1;
  done_STAR_.cljs$core$IFn$_invoke$arity$2 = done_STAR___2;
  return done_STAR_;
}();
cemerick.cljs.test.stop = function stop(async_test_env) {
  return cljs.core.swap_BANG_.call(null, async_test_env, cljs.core.assoc, new cljs.core.Keyword(null, "stop", "stop", 1017445236), true);
};
cemerick.cljs.test.test_function = function() {
  var test_function = null;
  var test_function__1 = function(v) {
    return test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), v);
  };
  var test_function__2 = function(test_env, v) {
    var entry_point_QMARK___28707__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_36875 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      if (cljs.core.fn_QMARK_.call(null, v)) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("test-var must be passed the function to be tested (not a symbol naming it)"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "fn?", "fn?", -1640430032, null), new cljs.core.Symbol(null, "v", "v", -1640531409, null))))].join(""));
      }
      var map__36876_36878 = cljs.core.meta.call(null, v);
      var map__36876_36879__$1 = cljs.core.seq_QMARK_.call(null, map__36876_36878) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36876_36878) : map__36876_36878;
      var t_36880 = cljs.core.get.call(null, map__36876_36879__$1, new cljs.core.Keyword(null, "test", "test", 1017460740));
      var test_name_36881 = cljs.core.get.call(null, map__36876_36879__$1, new cljs.core.Keyword(null, "name", "name", 1017277949));
      var async_QMARK__36882 = cljs.core.get.call(null, map__36876_36879__$1, new cljs.core.Keyword(null, "async", "async", 1107031534));
      if (cljs.core.truth_(t_36880)) {
        if (cljs.core.truth_(async_QMARK__36882)) {
          cemerick.cljs.test.schedule_async_test.call(null, (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), test_name_36881, t_36880);
        } else {
          try {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", 1471979159)], null), cljs.core.conj, function() {
              var or__10329__auto__ = test_name_36881;
              if (cljs.core.truth_(or__10329__auto__)) {
                return or__10329__auto__;
              } else {
                return v;
              }
            }());
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "begin-test-var", "begin-test-var", 3128464258), new cljs.core.Keyword(null, "var", "var", 1014020761), v, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), test_env, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616), test_name_36881], null));
            cemerick.cljs.test.inc_report_counter.call(null, test_env, new cljs.core.Keyword(null, "test", "test", 1017460740));
            try {
              t_36880.call(null, new cemerick.cljs.test.TestContext(test_env, test_name_36881));
            } catch (e36877) {
              if (e36877 instanceof Error) {
                var e_36883 = e36877;
                cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "message", "message", 1968829305), "Uncaught exception, not in assertion.", new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), test_env, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616), test_name_36881, new cljs.core.Keyword(null, 
                "expected", "expected", 3373152810), null, new cljs.core.Keyword(null, "actual", "actual", 3885931776), e_36883], null));
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  throw e36877;
                } else {
                }
              }
            }
            cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "end-test-var", "end-test-var", 2014682E3), new cljs.core.Keyword(null, "var", "var", 1014020761), v, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), test_env, new cljs.core.Keyword(null, "test-name", "test-name", 4082390616), test_name_36881], null));
          } finally {
            cljs.core.swap_BANG_.call(null, test_env, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cemerick.cljs.test", "test-functions", "cemerick.cljs.test/test-functions", 1471979159)], null), cljs.core.pop);
          }
        }
      } else {
      }
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___28707__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_36875;
    }
  };
  test_function = function(test_env, v) {
    switch(arguments.length) {
      case 1:
        return test_function__1.call(this, test_env);
      case 2:
        return test_function__2.call(this, test_env, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_function.cljs$core$IFn$_invoke$arity$1 = test_function__1;
  test_function.cljs$core$IFn$_invoke$arity$2 = test_function__2;
  return test_function;
}();
cemerick.cljs.test.test_all_vars = function() {
  var test_all_vars = null;
  var test_all_vars__1 = function(ns_sym) {
    return test_all_vars.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_all_vars__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___28707__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_36892 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var tests_36897 = cljs.core.filter.call(null, function(p1__36884_SHARP_) {
        return(new cljs.core.Keyword(null, "test", "test", 1017460740)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__36884_SHARP_));
      }, cljs.core.vals.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests), ns_sym)));
      var once_fixture_fn_36898 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "once", "once", 1017319923)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      var each_fixture_fn_36899 = cemerick.cljs.test.join_fixtures.call(null, (new cljs.core.Keyword(null, "each", "each", 1017009523)).cljs$core$IFn$_invoke$arity$1(ns_sym.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_fixtures))));
      once_fixture_fn_36898.call(null, function() {
        var seq__36893 = cljs.core.seq.call(null, cljs.core.remove.call(null, cemerick.cljs.test.async_test_QMARK_, tests_36897));
        var chunk__36894 = null;
        var count__36895 = 0;
        var i__36896 = 0;
        while (true) {
          if (i__36896 < count__36895) {
            var v = cljs.core._nth.call(null, chunk__36894, i__36896);
            each_fixture_fn_36899.call(null, function(seq__36893, chunk__36894, count__36895, i__36896, v) {
              return function() {
                return cemerick.cljs.test.test_function.call(null, test_env, v);
              };
            }(seq__36893, chunk__36894, count__36895, i__36896, v));
            var G__36900 = seq__36893;
            var G__36901 = chunk__36894;
            var G__36902 = count__36895;
            var G__36903 = i__36896 + 1;
            seq__36893 = G__36900;
            chunk__36894 = G__36901;
            count__36895 = G__36902;
            i__36896 = G__36903;
            continue;
          } else {
            var temp__4092__auto__ = cljs.core.seq.call(null, seq__36893);
            if (temp__4092__auto__) {
              var seq__36893__$1 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__36893__$1)) {
                var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__36893__$1);
                var G__36904 = cljs.core.chunk_rest.call(null, seq__36893__$1);
                var G__36905 = c__11077__auto__;
                var G__36906 = cljs.core.count.call(null, c__11077__auto__);
                var G__36907 = 0;
                seq__36893 = G__36904;
                chunk__36894 = G__36905;
                count__36895 = G__36906;
                i__36896 = G__36907;
                continue;
              } else {
                var v = cljs.core.first.call(null, seq__36893__$1);
                each_fixture_fn_36899.call(null, function(seq__36893, chunk__36894, count__36895, i__36896, v, seq__36893__$1, temp__4092__auto__) {
                  return function() {
                    return cemerick.cljs.test.test_function.call(null, test_env, v);
                  };
                }(seq__36893, chunk__36894, count__36895, i__36896, v, seq__36893__$1, temp__4092__auto__));
                var G__36908 = cljs.core.next.call(null, seq__36893__$1);
                var G__36909 = null;
                var G__36910 = 0;
                var G__36911 = 0;
                seq__36893 = G__36908;
                chunk__36894 = G__36909;
                count__36895 = G__36910;
                i__36896 = G__36911;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      });
      cljs.core.reduce.call(null, function(p1__36885_SHARP_, p2__36886_SHARP_) {
        return cljs.core.apply.call(null, cemerick.cljs.test.schedule_async_test, p1__36885_SHARP_, p2__36886_SHARP_);
      }, (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, test_env)), cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.juxt.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Keyword(null, "test", "test", 1017460740)), cljs.core.meta), cljs.core.filter.call(null, cemerick.cljs.test.async_test_QMARK_, tests_36897)));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___28707__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_36892;
    }
  };
  test_all_vars = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_all_vars__1.call(this, test_env);
      case 2:
        return test_all_vars__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_all_vars.cljs$core$IFn$_invoke$arity$1 = test_all_vars__1;
  test_all_vars.cljs$core$IFn$_invoke$arity$2 = test_all_vars__2;
  return test_all_vars;
}();
cemerick.cljs.test.test_ns = function() {
  var test_ns = null;
  var test_ns__1 = function(ns_sym) {
    return test_ns.call(null, cemerick.cljs.test.init_test_environment.call(null), ns_sym);
  };
  var test_ns__2 = function(test_env, ns_sym) {
    var entry_point_QMARK___28707__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_36913 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "begin-test-ns", "begin-test-ns", 1359210286), new cljs.core.Keyword(null, "ns", "ns", 1013907767), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), test_env], null));
      var temp__4090__auto___36914 = cljs.core.get.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_test_hooks), ns_sym);
      if (cljs.core.truth_(temp__4090__auto___36914)) {
        var test_hook_36915 = temp__4090__auto___36914;
        test_hook_36915.call(null, test_env);
      } else {
        cemerick.cljs.test.test_all_vars.call(null, test_env, ns_sym);
      }
      cemerick.cljs.test.do_report.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "end-test-ns", "end-test-ns", 3401491808), new cljs.core.Keyword(null, "ns", "ns", 1013907767), ns_sym, new cljs.core.Keyword(null, "test-env", "test-env", 4160920740), test_env], null));
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___28707__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_36913;
    }
  };
  test_ns = function(test_env, ns_sym) {
    switch(arguments.length) {
      case 1:
        return test_ns__1.call(this, test_env);
      case 2:
        return test_ns__2.call(this, test_env, ns_sym);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  test_ns.cljs$core$IFn$_invoke$arity$1 = test_ns__1;
  test_ns.cljs$core$IFn$_invoke$arity$2 = test_ns__2;
  return test_ns;
}();
cemerick.cljs.test.test_summary = function test_summary(test_env) {
  var test_env__$1 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  return cemerick.cljs.test.do_report.call(null, cljs.core.assoc.call(null, cljs.core.merge_with.call(null, cljs.core._PLUS_, test_env__$1, cemerick.cljs.test.maybe_deref.call(null, (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(test_env__$1))), new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "summary", "summary", 3451231E3)));
};
cemerick.cljs.test.run_tests_STAR_ = function() {
  var run_tests_STAR___delegate = function(namespaces) {
    var vec__36922 = cljs.core.first.call(null, namespaces) instanceof cljs.core.Atom ? namespaces : cljs.core.cons.call(null, cemerick.cljs.test.init_test_environment.call(null), namespaces);
    var test_env = cljs.core.nth.call(null, vec__36922, 0, null);
    var namespaces__$1 = cljs.core.nthnext.call(null, vec__36922, 1);
    var entry_point_QMARK___28707__auto__ = cemerick.cljs.test._STAR_entry_point_STAR_;
    var _STAR_entry_point_STAR_36923 = cemerick.cljs.test._STAR_entry_point_STAR_;
    try {
      cemerick.cljs.test._STAR_entry_point_STAR_ = false;
      var seq__36924_36928 = cljs.core.seq.call(null, cljs.core.distinct.call(null, namespaces__$1));
      var chunk__36925_36929 = null;
      var count__36926_36930 = 0;
      var i__36927_36931 = 0;
      while (true) {
        if (i__36927_36931 < count__36926_36930) {
          var ns_36932 = cljs.core._nth.call(null, chunk__36925_36929, i__36927_36931);
          cemerick.cljs.test.test_ns.call(null, test_env, ns_36932);
          var G__36933 = seq__36924_36928;
          var G__36934 = chunk__36925_36929;
          var G__36935 = count__36926_36930;
          var G__36936 = i__36927_36931 + 1;
          seq__36924_36928 = G__36933;
          chunk__36925_36929 = G__36934;
          count__36926_36930 = G__36935;
          i__36927_36931 = G__36936;
          continue;
        } else {
          var temp__4092__auto___36937 = cljs.core.seq.call(null, seq__36924_36928);
          if (temp__4092__auto___36937) {
            var seq__36924_36938__$1 = temp__4092__auto___36937;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__36924_36938__$1)) {
              var c__11077__auto___36939 = cljs.core.chunk_first.call(null, seq__36924_36938__$1);
              var G__36940 = cljs.core.chunk_rest.call(null, seq__36924_36938__$1);
              var G__36941 = c__11077__auto___36939;
              var G__36942 = cljs.core.count.call(null, c__11077__auto___36939);
              var G__36943 = 0;
              seq__36924_36928 = G__36940;
              chunk__36925_36929 = G__36941;
              count__36926_36930 = G__36942;
              i__36927_36931 = G__36943;
              continue;
            } else {
              var ns_36944 = cljs.core.first.call(null, seq__36924_36938__$1);
              cemerick.cljs.test.test_ns.call(null, test_env, ns_36944);
              var G__36945 = cljs.core.next.call(null, seq__36924_36938__$1);
              var G__36946 = null;
              var G__36947 = 0;
              var G__36948 = 0;
              seq__36924_36928 = G__36945;
              chunk__36925_36929 = G__36946;
              count__36926_36930 = G__36947;
              i__36927_36931 = G__36948;
              continue;
            }
          } else {
          }
        }
        break;
      }
      cemerick.cljs.test.on_testing_complete.call(null, test_env, cemerick.cljs.test.test_summary);
      cemerick.cljs.test.test_summary.call(null, test_env);
      return cemerick.cljs.test.finish_test_entry_point.call(null, entry_point_QMARK___28707__auto__, test_env);
    } finally {
      cemerick.cljs.test._STAR_entry_point_STAR_ = _STAR_entry_point_STAR_36923;
    }
  };
  var run_tests_STAR_ = function(var_args) {
    var namespaces = null;
    if (arguments.length > 0) {
      namespaces = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return run_tests_STAR___delegate.call(this, namespaces);
  };
  run_tests_STAR_.cljs$lang$maxFixedArity = 0;
  run_tests_STAR_.cljs$lang$applyTo = function(arglist__36949) {
    var namespaces = cljs.core.seq(arglist__36949);
    return run_tests_STAR___delegate(namespaces);
  };
  run_tests_STAR_.cljs$core$IFn$_invoke$arity$variadic = run_tests_STAR___delegate;
  return run_tests_STAR_;
}();
goog.exportSymbol("cemerick.cljs.test.run_tests_STAR_", cemerick.cljs.test.run_tests_STAR_);
cemerick.cljs.test.run_all_tests = function() {
  var run_all_tests = null;
  var run_all_tests__0 = function() {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests)));
  };
  var run_all_tests__1 = function(re) {
    return cljs.core.apply.call(null, cemerick.cljs.test.run_tests_STAR_, cljs.core.filter.call(null, function(p1__36950_SHARP_) {
      return cljs.core.re_matches.call(null, re, cljs.core.name.call(null, p1__36950_SHARP_));
    }, cljs.core.keys.call(null, cljs.core.deref.call(null, cemerick.cljs.test.registered_tests))));
  };
  run_all_tests = function(re) {
    switch(arguments.length) {
      case 0:
        return run_all_tests__0.call(this);
      case 1:
        return run_all_tests__1.call(this, re);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  run_all_tests.cljs$core$IFn$_invoke$arity$0 = run_all_tests__0;
  run_all_tests.cljs$core$IFn$_invoke$arity$1 = run_all_tests__1;
  return run_all_tests;
}();
goog.exportSymbol("cemerick.cljs.test.run_all_tests", cemerick.cljs.test.run_all_tests);
cemerick.cljs.test.successful_QMARK_ = function successful_QMARK_(test_env) {
  var map__36952 = cemerick.cljs.test.maybe_deref.call(null, test_env);
  var map__36952__$1 = cljs.core.seq_QMARK_.call(null, map__36952) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36952) : map__36952;
  var async = cljs.core.get.call(null, map__36952__$1, new cljs.core.Keyword(null, "async", "async", 1107031534));
  var error = cljs.core.get.call(null, map__36952__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
  var fail = cljs.core.get.call(null, map__36952__$1, new cljs.core.Keyword(null, "fail", "fail", 1017039504));
  var and__10317__auto__ = cemerick.cljs.test.testing_complete_QMARK_.call(null, test_env);
  if (cljs.core.truth_(and__10317__auto__)) {
    var and__10317__auto____$1 = function() {
      var or__10329__auto__ = fail;
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }() === 0;
    if (and__10317__auto____$1) {
      var and__10317__auto____$2 = function() {
        var or__10329__auto__ = error;
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return 0;
        }
      }() === 0;
      if (and__10317__auto____$2) {
        var or__10329__auto__ = async == null;
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          return successful_QMARK_.call(null, async);
        }
      } else {
        return and__10317__auto____$2;
      }
    } else {
      return and__10317__auto____$1;
    }
  } else {
    return and__10317__auto__;
  }
};
goog.exportSymbol("cemerick.cljs.test.successful_QMARK_", cemerick.cljs.test.successful_QMARK_);
cemerick.cljs.test.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
goog.exportSymbol("cemerick.cljs.test.set_print_fn_BANG_", cemerick.cljs.test.set_print_fn_BANG_);
goog.provide("clj_crud.datascript_test");
goog.require("cljs.core");
goog.require("datascript");
goog.require("datascript");
goog.require("cemerick.cljs.test");
goog.require("cemerick.cljs.test");
cljs.core.enable_console_print_BANG_.call(null);
clj_crud.datascript_test.inc_age = function inc_age(db, name) {
  var vec__17047 = cljs.core.first.call(null, datascript.q.call(null, new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.Symbol(null, "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?n", "?n", -1640529464, null), new cljs.core.Keyword(null, 
  "where", "where", 1127002201), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Symbol(null, "?n", "?n", -1640529464, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "age", "age", 1014000753), new cljs.core.Symbol(null, 
  "?a", "?a", -1640529477, null)], null)], null), db, name));
  var e = cljs.core.nth.call(null, vec__17047, 0, null);
  var a = cljs.core.nth.call(null, vec__17047, 1, null);
  cljs.core.println.call(null, "[e a]", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a], null));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "age", "age", 1014000753), a + 1], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "aka", "aka", 1014000873), 
  "By dn.fn!"], null)], null);
};
clj_crud.datascript_test.hello_world = function hello_world() {
  return cemerick.cljs.test.test_function.call(null, cemerick.cljs.test.init_test_environment.call(null), clj_crud.datascript_test.hello_world);
};
clj_crud.datascript_test.hello_world = cljs.core.with_meta.call(null, clj_crud.datascript_test.hello_world, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 1017226086), 19, new cljs.core.Keyword(null, "column", "column", 3954034376), 10, new cljs.core.Keyword(null, "end-line", "end-line", 2693041432), 19, new cljs.core.Keyword(null, "end-column", "end-column", 3799845882), 21], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"test", "test", 1017460740), function hello_world_test(test_ctx__16690__auto__) {
  var _test_ctx = test_ctx__16690__auto__;
  var async_QMARK___16605__auto__ = (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", 4082390616)).cljs$core$IFn$_invoke$arity$1(_test_ctx)));
  var _STAR_test_ctx_STAR_17053 = cemerick.cljs.test._STAR_test_ctx_STAR_;
  try {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___16605__auto__) ? null : _test_ctx;
    try {
      var _test_ctx__$1 = _test_ctx;
      var async_QMARK___16605__auto____$1 = (new cljs.core.Keyword(null, "async", "async", 1107031534)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "test-name", "test-name", 4082390616)).cljs$core$IFn$_invoke$arity$1(_test_ctx__$1)));
      var _STAR_test_ctx_STAR_17055 = cemerick.cljs.test._STAR_test_ctx_STAR_;
      try {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = cljs.core.truth_(async_QMARK___16605__auto____$1) ? null : _test_ctx__$1;
        try {
          try {
            var values__16625__auto__ = cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.PersistentHashSet.fromArray([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Maksim", 46], null)], true)), function() {
              var schema = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cardinality", "cardinality", 1859117312), new cljs.core.Keyword(null, "many", "many", 1017248209)], null)], null);
              var conn = datascript.create_conn.call(null, schema);
              cljs.core.println.call(null, "RES:", datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, "name", "name", 1017277949), "Maksim", new cljs.core.Keyword(null, "age", "age", 1014000753), 45, new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentVector(null, 2, 
              5, cljs.core.PersistentVector.EMPTY_NODE, ["Maks Otto von Stirlitz", "Jack Ryan"], null)], null)], null)));
              cljs.core.println.call(null, "inc RES:", datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -2, new cljs.core.Keyword(null, "name", "name", 1017277949), "Bruce Wayne", new cljs.core.Keyword(null, "age", "age", 1014000753), 35, new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentVector(null, 
              1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Batman"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dn.fn", "call", "dn.fn/call", 2813750183), clj_crud.datascript_test.inc_age, "Maksim"], null)], null)));
              return datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?n", "?n", -1640529464, null), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 
              3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "aka", "aka", 1014000873), "Maks Otto von Stirlitz"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Symbol(null, "?n", "?n", -1640529464, null)], null), new cljs.core.PersistentVector(null, 
              3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "age", "age", 1014000753), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null)], null)], null)], null), cljs.core.deref.call(null, conn));
            }());
            var result__16626__auto__ = cljs.core.apply.call(null, cljs.core._EQ_, values__16625__auto__);
            if (result__16626__auto__ instanceof cemerick.cljs.test.TestContext) {
              throw new Error("TestContext provided as [form] in `is` assertion. If using `is` with an explicit test context, use the 3-arg arity.");
            } else {
            }
            if (cljs.core.truth_(result__16626__auto__)) {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "actual", "actual", 3885931776), cljs.core.cons.call(null, cljs.core._EQ_, values__16625__auto__), new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "pass", "pass", 1017337731), new cljs.core.Keyword(null, "message", "message", 1968829305), null, new cljs.core.Keyword(null, "expected", "expected", 3373152810), cljs.core.list(new cljs.core.Symbol(null, 
              "\x3d", "\x3d", -1640531466, null), cljs.core.list(new cljs.core.Symbol(null, "let", "let", -1640424492, null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "schema", "schema", 1746448218, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cardinality", "cardinality", 1859117312), new cljs.core.Keyword(null, 
              "many", "many", 1017248209)], null)], null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null), cljs.core.list(new cljs.core.Symbol("d", "create-conn", "d/create-conn", 2114191435, null), new cljs.core.Symbol(null, "schema", "schema", 1746448218, null))], null), cljs.core.list(new cljs.core.Symbol(null, "println", "println", -1955249496, null), "RES:", cljs.core.list(new cljs.core.Symbol("d", "transact!", "d/transact!", -588018899, null), new cljs.core.Symbol(null, "conn", 
              "conn", -1637472027, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, "name", "name", 1017277949), "Maksim", new cljs.core.Keyword(null, "age", "age", 1014000753), 45, new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Maks Otto von Stirlitz", 
              "Jack Ryan"], null)], null)], null))), cljs.core.list(new cljs.core.Symbol(null, "println", "println", -1955249496, null), "inc RES:", cljs.core.list(new cljs.core.Symbol("d", "transact!", "d/transact!", -588018899, null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -2, new cljs.core.Keyword(null, 
              "name", "name", 1017277949), "Bruce Wayne", new cljs.core.Keyword(null, "age", "age", 1014000753), 35, new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Batman"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dn.fn", "call", "dn.fn/call", 2813750183), new cljs.core.Symbol(null, "inc-age", "inc-age", 300146761, null), "Maksim"], 
              null)], null))), cljs.core.list(new cljs.core.Symbol("d", "q", "d/q", -1640525017, null), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?n", "?n", -1640529464, null), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null)], null), new cljs.core.Keyword(null, 
              "where", "where", 1127002201), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "aka", "aka", 1014000873), "Maks Otto von Stirlitz"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), 
              new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Symbol(null, "?n", "?n", -1640529464, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "age", "age", 1014000753), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null)], null)], null)], null)), cljs.core.list(new cljs.core.Symbol("clojure.core", "deref", "clojure.core/deref", 
              -564909588, null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null)))), cljs.core.PersistentHashSet.fromArray([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Maksim", 46], null)], true))], null));
            } else {
              cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "actual", "actual", 3885931776), cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.cons.call(null, new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), values__16625__auto__)), new cljs.core.Symbol(null, "not", "not", -1640422260, null)), new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, 
              "fail", "fail", 1017039504), new cljs.core.Keyword(null, "message", "message", 1968829305), null, new cljs.core.Keyword(null, "expected", "expected", 3373152810), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", -1640531466, null), cljs.core.list(new cljs.core.Symbol(null, "let", "let", -1640424492, null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "schema", "schema", 1746448218, null), new cljs.core.PersistentArrayMap(null, 
              1, [new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cardinality", "cardinality", 1859117312), new cljs.core.Keyword(null, "many", "many", 1017248209)], null)], null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null), cljs.core.list(new cljs.core.Symbol("d", "create-conn", "d/create-conn", 2114191435, null), new cljs.core.Symbol(null, "schema", "schema", 1746448218, null))], null), cljs.core.list(new cljs.core.Symbol(null, 
              "println", "println", -1955249496, null), "RES:", cljs.core.list(new cljs.core.Symbol("d", "transact!", "d/transact!", -588018899, null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, "name", "name", 1017277949), "Maksim", new cljs.core.Keyword(null, "age", 
              "age", 1014000753), 45, new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Maks Otto von Stirlitz", "Jack Ryan"], null)], null)], null))), cljs.core.list(new cljs.core.Symbol(null, "println", "println", -1955249496, null), "inc RES:", cljs.core.list(new cljs.core.Symbol("d", "transact!", "d/transact!", -588018899, null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null), new cljs.core.PersistentVector(null, 
              2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -2, new cljs.core.Keyword(null, "name", "name", 1017277949), "Bruce Wayne", new cljs.core.Keyword(null, "age", "age", 1014000753), 35, new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Batman"], null)], null), new cljs.core.PersistentVector(null, 3, 5, 
              cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dn.fn", "call", "dn.fn/call", 2813750183), new cljs.core.Symbol(null, "inc-age", "inc-age", 300146761, null), "Maksim"], null)], null))), cljs.core.list(new cljs.core.Symbol("d", "q", "d/q", -1640525017, null), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 
              2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?n", "?n", -1640529464, null), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "aka", 
              "aka", 1014000873), "Maks Otto von Stirlitz"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Symbol(null, "?n", "?n", -1640529464, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, 
              "age", "age", 1014000753), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null)], null)], null)], null)), cljs.core.list(new cljs.core.Symbol("clojure.core", "deref", "clojure.core/deref", -564909588, null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null)))), cljs.core.PersistentHashSet.fromArray([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Maksim", 46], null)], true))], null));
            }
            return result__16626__auto__;
          } catch (e17057) {
            if (e17057 instanceof Error) {
              var t__16662__auto__ = e17057;
              return cemerick.cljs.test.do_report.call(null, _test_ctx__$1, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "actual", "actual", 3885931776), t__16662__auto__, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "error", "error", 1110689146), new cljs.core.Keyword(null, "message", "message", 1968829305), null, new cljs.core.Keyword(null, "expected", "expected", 3373152810), cljs.core.list(new cljs.core.Symbol(null, "\x3d", "\x3d", 
              -1640531466, null), cljs.core.list(new cljs.core.Symbol(null, "let", "let", -1640424492, null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "schema", "schema", 1746448218, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cardinality", "cardinality", 1859117312), new cljs.core.Keyword(null, "many", 
              "many", 1017248209)], null)], null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null), cljs.core.list(new cljs.core.Symbol("d", "create-conn", "d/create-conn", 2114191435, null), new cljs.core.Symbol(null, "schema", "schema", 1746448218, null))], null), cljs.core.list(new cljs.core.Symbol(null, "println", "println", -1955249496, null), "RES:", cljs.core.list(new cljs.core.Symbol("d", "transact!", "d/transact!", -588018899, null), new cljs.core.Symbol(null, "conn", "conn", 
              -1637472027, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, "name", "name", 1017277949), "Maksim", new cljs.core.Keyword(null, "age", "age", 1014000753), 45, new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Maks Otto von Stirlitz", 
              "Jack Ryan"], null)], null)], null))), cljs.core.list(new cljs.core.Symbol(null, "println", "println", -1955249496, null), "inc RES:", cljs.core.list(new cljs.core.Symbol("d", "transact!", "d/transact!", -588018899, null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -2, new cljs.core.Keyword(null, 
              "name", "name", 1017277949), "Bruce Wayne", new cljs.core.Keyword(null, "age", "age", 1014000753), 35, new cljs.core.Keyword(null, "aka", "aka", 1014000873), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Batman"], null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("dn.fn", "call", "dn.fn/call", 2813750183), new cljs.core.Symbol(null, "inc-age", "inc-age", 300146761, null), "Maksim"], 
              null)], null))), cljs.core.list(new cljs.core.Symbol("d", "q", "d/q", -1640525017, null), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?n", "?n", -1640529464, null), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null)], null), new cljs.core.Keyword(null, 
              "where", "where", 1127002201), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "aka", "aka", 1014000873), "Maks Otto von Stirlitz"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), 
              new cljs.core.Keyword(null, "name", "name", 1017277949), new cljs.core.Symbol(null, "?n", "?n", -1640529464, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "age", "age", 1014000753), new cljs.core.Symbol(null, "?a", "?a", -1640529477, null)], null)], null)], null)), cljs.core.list(new cljs.core.Symbol("clojure.core", "deref", "clojure.core/deref", 
              -564909588, null), new cljs.core.Symbol(null, "conn", "conn", -1637472027, null)))), cljs.core.PersistentHashSet.fromArray([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["Maksim", 46], null)], true))], null));
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw e17057;
              } else {
                return null;
              }
            }
          }
        } catch (e17056) {
          if (e17056 instanceof Error) {
            var e__16606__auto__ = e17056;
            if (cljs.core.truth_(async_QMARK___16605__auto____$1)) {
              return cemerick.cljs.test.done_STAR_.call(null, _test_ctx__$1, e__16606__auto__);
            } else {
              throw e__16606__auto__;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw e17056;
            } else {
              return null;
            }
          }
        }
      } finally {
        cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_17055;
      }
    } catch (e17054) {
      if (e17054 instanceof Error) {
        var e__16606__auto__ = e17054;
        if (cljs.core.truth_(async_QMARK___16605__auto__)) {
          return cemerick.cljs.test.done_STAR_.call(null, _test_ctx, e__16606__auto__);
        } else {
          throw e__16606__auto__;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e17054;
        } else {
          return null;
        }
      }
    }
  } finally {
    cemerick.cljs.test._STAR_test_ctx_STAR_ = _STAR_test_ctx_STAR_17053;
  }
}, new cljs.core.Keyword(null, "name", "name", 1017277949), cljs.core.with_meta.call(null, new cljs.core.Symbol("clj-crud.datascript-test", "hello-world", "clj-crud.datascript-test/hello-world", -818648401, null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 1017226086), 19, new cljs.core.Keyword(null, "column", "column", 3954034376), 10, new cljs.core.Keyword(null, "end-line", "end-line", 2693041432), 19, new cljs.core.Keyword(null, "end-column", "end-column", 
3799845882), 21], null))], null)));
cemerick.cljs.test.register_test_BANG_.call(null, new cljs.core.Symbol(null, "clj-crud.datascript-test", "clj-crud.datascript-test", -344651105, null), new cljs.core.Symbol("clj-crud.datascript-test", "hello-world", "clj-crud.datascript-test/hello-world", -818648401, null), clj_crud.datascript_test.hello_world);
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj36278 = {};
  return obj36278;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__10317__auto__ = port;
    if (and__10317__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__10956__auto__ = port == null ? null : port;
    return function() {
      var or__10329__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj36280 = {};
  return obj36280;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__10317__auto__ = port;
    if (and__10317__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__10956__auto__ = port == null ? null : port;
    return function() {
      var or__10329__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj36282 = {};
  return obj36282;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__10317__auto__ = chan;
    if (and__10317__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__10956__auto__ = chan == null ? null : chan;
    return function() {
      var or__10329__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj36284 = {};
  return obj36284;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__10317__auto__ = h;
    if (and__10317__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__10956__auto__ = h == null ? null : h;
    return function() {
      var or__10329__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__10317__auto__ = h;
    if (and__10317__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__10956__auto__ = h == null ? null : h;
    return function() {
      var or__10329__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj36286 = {};
  return obj36286;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__10317__auto__ = b;
    if (and__10317__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__10956__auto__ = b == null ? null : b;
    return function() {
      var or__10329__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__10317__auto__ = b;
    if (and__10317__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__10956__auto__ = b == null ? null : b;
    return function() {
      var or__10329__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__10317__auto__ = b;
    if (and__10317__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__10956__auto__ = b == null ? null : b;
    return function() {
      var or__10329__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj36288 = {};
  return obj36288;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__36300 = cnt + 1;
      cnt = G__36300;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__11177__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__11177__auto__) {
      var v_36301 = this$.pop();
      if (keep_QMARK_.call(null, v_36301)) {
        this$.unshift(v_36301);
      } else {
      }
      var G__36302 = x + 1;
      x = G__36302;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_36289 = 0;
  while (true) {
    var m_36290 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_36290 == null) {
    } else {
      m_36290.call(null);
      if (count_36289 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__36291 = count_36289 + 1;
        count_36289 = G__36291;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__10317__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__10317__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("todomvc.transact");
goog.require("cljs.core");
todomvc.transact.update_item = function update_item(state, id, f) {
  return cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), function(items) {
    return cljs.core.map.call(null, function(p1__28541_SHARP_) {
      if (cljs.core._EQ_.call(null, id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(p1__28541_SHARP_))) {
        return f.call(null, p1__28541_SHARP_);
      } else {
        return p1__28541_SHARP_;
      }
    }, items);
  });
};
todomvc.transact.handle = function() {
  var method_table__11187__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__11188__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__11189__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__11190__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__11191__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("handle", function(state, trans) {
    return cljs.core.first.call(null, trans);
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__11191__auto__, method_table__11187__auto__, prefer_table__11188__auto__, method_cache__11189__auto__, cached_hierarchy__11190__auto__);
}();
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "set-filter", "set-filter", 2331384501), function(state, p__28542) {
  var vec__28543 = p__28542;
  var _ = cljs.core.nth.call(null, vec__28543, 0, null);
  var this_filter = cljs.core.nth.call(null, vec__28543, 1, null);
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582), this_filter);
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "seed-item", "seed-item", 1596530785), function(state, p__28544) {
  var vec__28545 = p__28544;
  var _ = cljs.core.nth.call(null, vec__28545, 0, null);
  var id = cljs.core.nth.call(null, vec__28545, 1, null);
  var text = cljs.core.nth.call(null, vec__28545, 2, null);
  var completed = cljs.core.nth.call(null, vec__28545, 3, null);
  return cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), cljs.core.conj, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "text", "text", 1017460895), text, new cljs.core.Keyword(null, "completed", "completed", 3905939901), completed, new cljs.core.Keyword(null, "commited", "commited", 
  4706580360), true], null));
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "add-item", "add-item", 4026553393), function(p__28546, p__28547) {
  var map__28548 = p__28546;
  var map__28548__$1 = cljs.core.seq_QMARK_.call(null, map__28548) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28548) : map__28548;
  var state = map__28548__$1;
  var next_id = cljs.core.get.call(null, map__28548__$1, new cljs.core.Keyword(null, "next-id", "next-id", 2860930471));
  var vec__28549 = p__28547;
  var _ = cljs.core.nth.call(null, vec__28549, 0, null);
  var id = cljs.core.nth.call(null, vec__28549, 1, null);
  var text = cljs.core.nth.call(null, vec__28549, 2, null);
  return cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), cljs.core.conj, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "text", "text", 1017460895), text, new cljs.core.Keyword(null, "commited", "commited", 4706580360), false], null));
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "commit-item", "commit-item", 2479329627), function(state, p__28550) {
  var vec__28551 = p__28550;
  var _ = cljs.core.nth.call(null, vec__28551, 0, null);
  var temp_id = cljs.core.nth.call(null, vec__28551, 1, null);
  var id = cljs.core.nth.call(null, vec__28551, 2, null);
  return todomvc.transact.update_item.call(null, state, temp_id, function(item) {
    return cljs.core.assoc.call(null, item, new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "commited", "commited", 4706580360), true);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), function(state, p__28553) {
  var vec__28554 = p__28553;
  var _ = cljs.core.nth.call(null, vec__28554, 0, null);
  var id = cljs.core.nth.call(null, vec__28554, 1, null);
  return cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), function(items) {
    return cljs.core.remove.call(null, function(p1__28552_SHARP_) {
      return cljs.core._EQ_.call(null, id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(p1__28552_SHARP_));
    }, items);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), function(state, p__28556) {
  var vec__28557 = p__28556;
  var _ = cljs.core.nth.call(null, vec__28557, 0, null);
  var id = cljs.core.nth.call(null, vec__28557, 1, null);
  var completed = cljs.core.nth.call(null, vec__28557, 2, null);
  return todomvc.transact.update_item.call(null, state, id, function(p1__28555_SHARP_) {
    return cljs.core.assoc.call(null, p1__28555_SHARP_, new cljs.core.Keyword(null, "completed", "completed", 3905939901), completed);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "start-edit", "start-edit", 3689098247), function(state, p__28558) {
  var vec__28559 = p__28558;
  var _ = cljs.core.nth.call(null, vec__28559, 0, null);
  var id = cljs.core.nth.call(null, vec__28559, 1, null);
  return todomvc.transact.update_item.call(null, state, id, function(item) {
    var G__28560 = item;
    var G__28560__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "commited", "commited", 4706580360)).cljs$core$IFn$_invoke$arity$1(item)) ? cljs.core.assoc.call(null, G__28560, new cljs.core.Keyword(null, "editing", "editing", 3420907786), true) : G__28560;
    return G__28560__$1;
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "complete-edit", "complete-edit", 1152265616), function(state, p__28562) {
  var vec__28563 = p__28562;
  var _ = cljs.core.nth.call(null, vec__28563, 0, null);
  var id = cljs.core.nth.call(null, vec__28563, 1, null);
  var text = cljs.core.nth.call(null, vec__28563, 2, null);
  return todomvc.transact.update_item.call(null, state, id, function(p1__28561_SHARP_) {
    return cljs.core.assoc.call(null, p1__28561_SHARP_, new cljs.core.Keyword(null, "editing", "editing", 3420907786), false, new cljs.core.Keyword(null, "text", "text", 1017460895), text);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "error", "error", 1110689146), function(state, _) {
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "error", "error", 1110689146), true);
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "default", "default", 2558708147), function(state, _) {
  return state;
});
todomvc.transact.all_done_QMARK_ = function all_done_QMARK_(p__28564) {
  var map__28566 = p__28564;
  var map__28566__$1 = cljs.core.seq_QMARK_.call(null, map__28566) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28566) : map__28566;
  var state = map__28566__$1;
  var items = cljs.core.get.call(null, map__28566__$1, new cljs.core.Keyword(null, "items", "items", 1114430258));
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259), cljs.core.every_QMARK_.call(null, new cljs.core.Keyword(null, "completed", "completed", 3905939901), items));
};
todomvc.transact.initial_state = function initial_state() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259), true, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582), new cljs.core.Keyword(null, "all", "all", 1014000915), new cljs.core.Keyword(null, "items", "items", 1114430258), cljs.core.PersistentVector.EMPTY], null);
};
todomvc.transact.main = function main(state, transaction) {
  return todomvc.transact.all_done_QMARK_.call(null, cljs.core.update_in.call(null, todomvc.transact.handle.call(null, state, transaction), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), cljs.core.vec));
};
todomvc.transact.try_transactions = function try_transactions(transactions) {
  return cljs.core.reduce.call(null, todomvc.transact.main, todomvc.transact.initial_state.call(null), transactions);
};
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.elements_ = [];
};
goog.structs.Queue.prototype.head_ = 0;
goog.structs.Queue.prototype.tail_ = 0;
goog.structs.Queue.prototype.enqueue = function(element) {
  this.elements_[this.tail_++] = element;
};
goog.structs.Queue.prototype.dequeue = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  var result = this.elements_[this.head_];
  delete this.elements_[this.head_];
  this.head_++;
  return result;
};
goog.structs.Queue.prototype.peek = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  return this.elements_[this.head_];
};
goog.structs.Queue.prototype.getCount = function() {
  return this.tail_ - this.head_;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return this.tail_ - this.head_ == 0;
};
goog.structs.Queue.prototype.clear = function() {
  this.elements_.length = 0;
  this.head_ = 0;
  this.tail_ = 0;
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.elements_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.indexOf(this.elements_, obj);
  if (index < 0) {
    return false;
  }
  if (index == this.head_) {
    this.dequeue();
  } else {
    goog.array.removeAt(this.elements_, index);
    this.tail_--;
  }
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  return this.elements_.slice(this.head_, this.tail_);
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = (this.freeQueue_.dequeue());
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject((freeQueue.dequeue()));
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject((freeQueue.dequeue()));
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.prototype.delayTimeout_;
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    goog.structs.forEach(headers, function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || (goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1")), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || (goog.userAgent.OPERA || goog.userAgent.WEBKIT), INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t36306 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t36306 = function(f, fn_handler, meta36307) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta36307 = meta36307;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t36306.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t36306.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t36306";
    cljs.core.async.impl.ioc_helpers.t36306.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
      return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.ioc-helpers/t36306");
    };
    cljs.core.async.impl.ioc_helpers.t36306.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t36306.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t36306.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t36306.prototype.cljs$core$IMeta$_meta$arity$1 = function(_36308) {
      var self__ = this;
      var _36308__$1 = this;
      return self__.meta36307;
    };
    cljs.core.async.impl.ioc_helpers.t36306.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_36308, meta36307__$1) {
      var self__ = this;
      var _36308__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t36306(self__.f, self__.fn_handler, meta36307__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t36306 = function __GT_t36306(f__$1, fn_handler__$1, meta36307) {
      return new cljs.core.async.impl.ioc_helpers.t36306(f__$1, fn_handler__$1, meta36307);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t36306(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e36310) {
    if (e36310 instanceof Object) {
      var ex = e36310;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e36310;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_36313_36315 = state;
    statearr_36313_36315[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_36313_36315[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_36314_36316 = state;
    statearr_36314_36316[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_36314_36316[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_36319_36321 = state;
    statearr_36319_36321[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_36319_36321[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_36320_36322 = state;
    statearr_36320_36322[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_36320_36322[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__36323) {
    var map__36328 = p__36323;
    var map__36328__$1 = cljs.core.seq_QMARK_.call(null, map__36328) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36328) : map__36328;
    var opts = map__36328__$1;
    var statearr_36329_36332 = state;
    statearr_36329_36332[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_36330_36333 = state;
      statearr_36330_36333[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_36331_36334 = state;
      statearr_36331_36334[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__36323 = null;
    if (arguments.length > 3) {
      p__36323 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__36323);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__36335) {
    var state = cljs.core.first(arglist__36335);
    arglist__36335 = cljs.core.next(arglist__36335);
    var cont_block = cljs.core.first(arglist__36335);
    arglist__36335 = cljs.core.next(arglist__36335);
    var ports = cljs.core.first(arglist__36335);
    var p__36323 = cljs.core.rest(arglist__36335);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__36323);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10910__auto__) {
  var self__ = this;
  var this__10910__auto____$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, this__10910__auto____$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10915__auto__, k__10916__auto__) {
  var self__ = this;
  var this__10915__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10915__auto____$1, k__10916__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10917__auto__, k36337, else__10918__auto__) {
  var self__ = this;
  var this__10917__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k36337, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893))) {
    return self__.catch_block;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k36337, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687))) {
      return self__.catch_exception;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k36337, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429))) {
        return self__.finally_block;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k36337, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097))) {
          return self__.continue_block;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k36337, new cljs.core.Keyword(null, "prev", "prev", 1017353637))) {
            return self__.prev;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k36337, else__10918__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10922__auto__, k__10923__auto__, G__36336) {
  var self__ = this;
  var this__10922__auto____$1 = this;
  var pred__36339 = cljs.core.keyword_identical_QMARK_;
  var expr__36340 = k__10923__auto__;
  if (cljs.core.truth_(pred__36339.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__36340))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__36336, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__36339.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__36340))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__36336, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__36339.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__36340))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__36336, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__36339.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__36340))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__36336, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__36339.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__36340))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__36336, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10923__auto__, G__36336), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10929__auto__, writer__10930__auto__, opts__10931__auto__) {
  var self__ = this;
  var this__10929__auto____$1 = this;
  var pr_pair__10932__auto__ = function(keyval__10933__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, cljs.core.pr_writer, "", " ", "", opts__10931__auto__, keyval__10933__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, pr_pair__10932__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__10931__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10920__auto__, entry__10921__auto__) {
  var self__ = this;
  var this__10920__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10921__auto__)) {
    return cljs.core._assoc.call(null, this__10920__auto____$1, cljs.core._nth.call(null, entry__10921__auto__, 0), cljs.core._nth.call(null, entry__10921__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10920__auto____$1, entry__10921__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10927__auto__) {
  var self__ = this;
  var this__10927__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10919__auto__) {
  var self__ = this;
  var this__10919__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10911__auto__, other__10912__auto__) {
  var self__ = this;
  var this__10911__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = other__10912__auto__;
    if (cljs.core.truth_(and__10317__auto__)) {
      return this__10911__auto____$1.constructor === other__10912__auto__.constructor && cljs.core.equiv_map.call(null, this__10911__auto____$1, other__10912__auto__);
    } else {
      return and__10317__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10914__auto__, G__36336) {
  var self__ = this;
  var this__10914__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__36336, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10909__auto__) {
  var self__ = this;
  var this__10909__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10913__auto__) {
  var self__ = this;
  var this__10913__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10924__auto__, k__10925__auto__) {
  var self__ = this;
  var this__10924__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), 
  null], null), null), k__10925__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10924__auto____$1), self__.__meta), k__10925__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10925__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__10949__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__10949__auto__, writer__10950__auto__) {
  return cljs.core._write.call(null, writer__10950__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__36338) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__36338), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__36338), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__36338), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__36338), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__36338), null, cljs.core.dissoc.call(null, G__36338, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_36343 = state;
  statearr_36343[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_36343;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__10317__auto__ = exception;
      if (cljs.core.truth_(and__10317__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__10317__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__10317__auto__ = exception;
        if (cljs.core.truth_(and__10317__auto__)) {
          var and__10317__auto____$1 = catch_block;
          if (cljs.core.truth_(and__10317__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__10317__auto____$1;
          }
        } else {
          return and__10317__auto__;
        }
      }())) {
        var statearr_36349 = state;
        statearr_36349[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_36349[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_36349[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_36349[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_36349;
      } else {
        if (cljs.core.truth_(function() {
          var and__10317__auto__ = exception;
          if (cljs.core.truth_(and__10317__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__10317__auto__;
          }
        }())) {
          var statearr_36350_36354 = state;
          statearr_36350_36354[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__36355 = state;
          state = G__36355;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__10317__auto__ = exception;
            if (cljs.core.truth_(and__10317__auto__)) {
              var and__10317__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__10317__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__10317__auto____$1;
              }
            } else {
              return and__10317__auto__;
            }
          }())) {
            var statearr_36351 = state;
            statearr_36351[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_36351[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_36351;
          } else {
            if (cljs.core.truth_(function() {
              var and__10317__auto__ = cljs.core.not.call(null, exception);
              if (and__10317__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__10317__auto__;
              }
            }())) {
              var statearr_36352 = state;
              statearr_36352[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_36352[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_36352;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_36353 = state;
                statearr_36353[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_36353[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_36353;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No matching clause"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t36295 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t36295 = function(val, box, meta36296) {
      this.val = val;
      this.box = box;
      this.meta36296 = meta36296;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t36295.cljs$lang$type = true;
    cljs.core.async.impl.channels.t36295.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t36295";
    cljs.core.async.impl.channels.t36295.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
      return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.channels/t36295");
    };
    cljs.core.async.impl.channels.t36295.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t36295.prototype.cljs$core$IMeta$_meta$arity$1 = function(_36297) {
      var self__ = this;
      var _36297__$1 = this;
      return self__.meta36296;
    };
    cljs.core.async.impl.channels.t36295.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_36297, meta36296__$1) {
      var self__ = this;
      var _36297__$1 = this;
      return new cljs.core.async.impl.channels.t36295(self__.val, self__.box, meta36296__$1);
    };
    cljs.core.async.impl.channels.__GT_t36295 = function __GT_t36295(val__$1, box__$1, meta36296) {
      return new cljs.core.async.impl.channels.t36295(val__$1, box__$1, meta36296);
    };
  }
  return new cljs.core.async.impl.channels.t36295(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__10899__auto__, writer__10900__auto__, opts__10901__auto__) {
  return cljs.core._write.call(null, writer__10900__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_36298 = self__.takes.pop();
      if (taker_36298 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_36298)) {
          var take_cb_36299 = cljs.core.async.impl.protocols.commit.call(null, taker_36298);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_36299, taker_36298) {
            return function() {
              return take_cb_36299.call(null, null);
            };
          }(take_cb_36299, taker_36298));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__36253 = level + 1;
        level = G__36253;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_36254 = 0;
    while (true) {
      if (i_36254 < arr.length) {
        arr[i_36254] = null;
        var G__36255 = i_36254 + 1;
        i_36254 = G__36255;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__36256 = x_SINGLEQUOTE_;
                x__$1 = G__36256;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__36257 = x__$1;
        var G__36258 = k;
        var G__36259 = level - 1;
        var G__36260 = update;
        x = G__36257;
        k = G__36258;
        level = G__36259;
        update = G__36260;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_36261 = self__.level + 1;
      while (true) {
        if (i_36261 <= new_level + 1) {
          update[i_36261] = self__.header;
          var G__36262 = i_36261 + 1;
          i_36261 = G__36262;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_36263 = 0;
    while (true) {
      if (i_36263 <= self__.level) {
        var links_36264 = update[i_36263].forward;
        if (links_36264[i_36263] === x__$1) {
          links_36264[i_36263] = x__$1.forward[i_36263];
          var G__36265 = i_36263 + 1;
          i_36263 = G__36265;
          continue;
        } else {
          var G__36266 = i_36263 + 1;
          i_36263 = G__36266;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__36267 = x_SINGLEQUOTE_;
              x__$1 = G__36267;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__36268 = nx;
        var G__36269 = level__$1 - 1;
        x = G__36268;
        level__$1 = G__36269;
        continue;
      } else {
        var G__36270 = x;
        var G__36271 = level__$1 - 1;
        x = G__36270;
        level__$1 = G__36271;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__36272 = x_SINGLEQUOTE_;
              x__$1 = G__36272;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__36273 = nx;
        var G__36274 = level__$1 - 1;
        x = G__36273;
        level__$1 = G__36274;
        continue;
      } else {
        var G__36275 = x;
        var G__36276 = level__$1 - 1;
        x = G__36275;
        level__$1 = G__36276;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__10329__auto__ = cljs.core.truth_(function() {
    var and__10317__auto__ = me;
    if (cljs.core.truth_(and__10317__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__10317__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t33702 !== "undefined") {
  } else {
    cljs.core.async.t33702 = function(f, fn_handler, meta33703) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta33703 = meta33703;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t33702.cljs$lang$type = true;
    cljs.core.async.t33702.cljs$lang$ctorStr = "cljs.core.async/t33702";
    cljs.core.async.t33702.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
      return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t33702");
    };
    cljs.core.async.t33702.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t33702.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t33702.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t33702.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33704) {
      var self__ = this;
      var _33704__$1 = this;
      return self__.meta33703;
    };
    cljs.core.async.t33702.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33704, meta33703__$1) {
      var self__ = this;
      var _33704__$1 = this;
      return new cljs.core.async.t33702(self__.f, self__.fn_handler, meta33703__$1);
    };
    cljs.core.async.__GT_t33702 = function __GT_t33702(f__$1, fn_handler__$1, meta33703) {
      return new cljs.core.async.t33702(f__$1, fn_handler__$1, meta33703);
    };
  }
  return new cljs.core.async.t33702(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__33706 = buff;
  if (G__33706) {
    var bit__10979__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__10329__auto__ = bit__10979__auto__;
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return G__33706.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__33706.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__33706);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__33706);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_33707 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_33707);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_33707);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__10317__auto__ = ret;
      if (cljs.core.truth_(and__10317__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__10317__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__11177__auto___33708 = n;
  var x_33709 = 0;
  while (true) {
    if (x_33709 < n__11177__auto___33708) {
      a[x_33709] = 0;
      var G__33710 = x_33709 + 1;
      x_33709 = G__33710;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__33711 = i + 1;
      i = G__33711;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t33715 !== "undefined") {
  } else {
    cljs.core.async.t33715 = function(flag, alt_flag, meta33716) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta33716 = meta33716;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t33715.cljs$lang$type = true;
    cljs.core.async.t33715.cljs$lang$ctorStr = "cljs.core.async/t33715";
    cljs.core.async.t33715.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
      return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t33715");
    };
    cljs.core.async.t33715.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t33715.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t33715.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t33715.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33717) {
      var self__ = this;
      var _33717__$1 = this;
      return self__.meta33716;
    };
    cljs.core.async.t33715.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33717, meta33716__$1) {
      var self__ = this;
      var _33717__$1 = this;
      return new cljs.core.async.t33715(self__.flag, self__.alt_flag, meta33716__$1);
    };
    cljs.core.async.__GT_t33715 = function __GT_t33715(flag__$1, alt_flag__$1, meta33716) {
      return new cljs.core.async.t33715(flag__$1, alt_flag__$1, meta33716);
    };
  }
  return new cljs.core.async.t33715(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t33721 !== "undefined") {
  } else {
    cljs.core.async.t33721 = function(cb, flag, alt_handler, meta33722) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta33722 = meta33722;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t33721.cljs$lang$type = true;
    cljs.core.async.t33721.cljs$lang$ctorStr = "cljs.core.async/t33721";
    cljs.core.async.t33721.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
      return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t33721");
    };
    cljs.core.async.t33721.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t33721.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t33721.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t33721.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33723) {
      var self__ = this;
      var _33723__$1 = this;
      return self__.meta33722;
    };
    cljs.core.async.t33721.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33723, meta33722__$1) {
      var self__ = this;
      var _33723__$1 = this;
      return new cljs.core.async.t33721(self__.cb, self__.flag, self__.alt_handler, meta33722__$1);
    };
    cljs.core.async.__GT_t33721 = function __GT_t33721(cb__$1, flag__$1, alt_handler__$1, meta33722) {
      return new cljs.core.async.t33721(cb__$1, flag__$1, alt_handler__$1, meta33722);
    };
  }
  return new cljs.core.async.t33721(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__33724_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__33724_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__10329__auto__ = wport;
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__33725 = i + 1;
          i = G__33725;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__10329__auto__ = ret;
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__10317__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__10317__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__10317__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__33726) {
    var map__33728 = p__33726;
    var map__33728__$1 = cljs.core.seq_QMARK_.call(null, map__33728) ? cljs.core.apply.call(null, cljs.core.hash_map, map__33728) : map__33728;
    var opts = map__33728__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__33726 = null;
    if (arguments.length > 1) {
      p__33726 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__33726);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__33729) {
    var ports = cljs.core.first(arglist__33729);
    var p__33726 = cljs.core.rest(arglist__33729);
    return alts_BANG___delegate(ports, p__33726);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t33737 !== "undefined") {
  } else {
    cljs.core.async.t33737 = function(ch, f, map_LT_, meta33738) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta33738 = meta33738;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t33737.cljs$lang$type = true;
    cljs.core.async.t33737.cljs$lang$ctorStr = "cljs.core.async/t33737";
    cljs.core.async.t33737.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
      return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t33737");
    };
    cljs.core.async.t33737.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t33737.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t33737.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t33737.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t33740 !== "undefined") {
        } else {
          cljs.core.async.t33740 = function(fn1, _, meta33738, ch, f, map_LT_, meta33741) {
            this.fn1 = fn1;
            this._ = _;
            this.meta33738 = meta33738;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta33741 = meta33741;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t33740.cljs$lang$type = true;
          cljs.core.async.t33740.cljs$lang$ctorStr = "cljs.core.async/t33740";
          cljs.core.async.t33740.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
            return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t33740");
          };
          cljs.core.async.t33740.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t33740.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t33740.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t33740.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__33730_SHARP_) {
                return f1.call(null, p1__33730_SHARP_ == null ? null : self__.f.call(null, p1__33730_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t33740.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33742) {
            var self__ = this;
            var _33742__$1 = this;
            return self__.meta33741;
          };
          cljs.core.async.t33740.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33742, meta33741__$1) {
            var self__ = this;
            var _33742__$1 = this;
            return new cljs.core.async.t33740(self__.fn1, self__._, self__.meta33738, self__.ch, self__.f, self__.map_LT_, meta33741__$1);
          };
          cljs.core.async.__GT_t33740 = function __GT_t33740(fn1__$1, ___$2, meta33738__$1, ch__$2, f__$2, map_LT___$2, meta33741) {
            return new cljs.core.async.t33740(fn1__$1, ___$2, meta33738__$1, ch__$2, f__$2, map_LT___$2, meta33741);
          };
        }
        return new cljs.core.async.t33740(fn1, ___$1, self__.meta33738, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__10317__auto__ = ret;
        if (cljs.core.truth_(and__10317__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__10317__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t33737.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t33737.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t33737.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33739) {
      var self__ = this;
      var _33739__$1 = this;
      return self__.meta33738;
    };
    cljs.core.async.t33737.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33739, meta33738__$1) {
      var self__ = this;
      var _33739__$1 = this;
      return new cljs.core.async.t33737(self__.ch, self__.f, self__.map_LT_, meta33738__$1);
    };
    cljs.core.async.__GT_t33737 = function __GT_t33737(ch__$1, f__$1, map_LT___$1, meta33738) {
      return new cljs.core.async.t33737(ch__$1, f__$1, map_LT___$1, meta33738);
    };
  }
  return new cljs.core.async.t33737(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t33746 !== "undefined") {
  } else {
    cljs.core.async.t33746 = function(ch, f, map_GT_, meta33747) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta33747 = meta33747;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t33746.cljs$lang$type = true;
    cljs.core.async.t33746.cljs$lang$ctorStr = "cljs.core.async/t33746";
    cljs.core.async.t33746.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
      return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t33746");
    };
    cljs.core.async.t33746.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t33746.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t33746.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t33746.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t33746.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t33746.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t33746.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33748) {
      var self__ = this;
      var _33748__$1 = this;
      return self__.meta33747;
    };
    cljs.core.async.t33746.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33748, meta33747__$1) {
      var self__ = this;
      var _33748__$1 = this;
      return new cljs.core.async.t33746(self__.ch, self__.f, self__.map_GT_, meta33747__$1);
    };
    cljs.core.async.__GT_t33746 = function __GT_t33746(ch__$1, f__$1, map_GT___$1, meta33747) {
      return new cljs.core.async.t33746(ch__$1, f__$1, map_GT___$1, meta33747);
    };
  }
  return new cljs.core.async.t33746(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t33752 !== "undefined") {
  } else {
    cljs.core.async.t33752 = function(ch, p, filter_GT_, meta33753) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta33753 = meta33753;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t33752.cljs$lang$type = true;
    cljs.core.async.t33752.cljs$lang$ctorStr = "cljs.core.async/t33752";
    cljs.core.async.t33752.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
      return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t33752");
    };
    cljs.core.async.t33752.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t33752.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t33752.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t33752.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t33752.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t33752.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t33752.prototype.cljs$core$IMeta$_meta$arity$1 = function(_33754) {
      var self__ = this;
      var _33754__$1 = this;
      return self__.meta33753;
    };
    cljs.core.async.t33752.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_33754, meta33753__$1) {
      var self__ = this;
      var _33754__$1 = this;
      return new cljs.core.async.t33752(self__.ch, self__.p, self__.filter_GT_, meta33753__$1);
    };
    cljs.core.async.__GT_t33752 = function __GT_t33752(ch__$1, p__$1, filter_GT___$1, meta33753) {
      return new cljs.core.async.t33752(ch__$1, p__$1, filter_GT___$1, meta33753);
    };
  }
  return new cljs.core.async.t33752(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13953__auto___33837 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_33816) {
          var state_val_33817 = state_33816[1];
          if (state_val_33817 === 1) {
            var state_33816__$1 = state_33816;
            var statearr_33818_33838 = state_33816__$1;
            statearr_33818_33838[2] = null;
            statearr_33818_33838[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_33817 === 2) {
              var state_33816__$1 = state_33816;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_33816__$1, 4, ch);
            } else {
              if (state_val_33817 === 3) {
                var inst_33814 = state_33816[2];
                var state_33816__$1 = state_33816;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_33816__$1, inst_33814);
              } else {
                if (state_val_33817 === 4) {
                  var inst_33798 = state_33816[7];
                  var inst_33798__$1 = state_33816[2];
                  var inst_33799 = inst_33798__$1 == null;
                  var state_33816__$1 = function() {
                    var statearr_33819 = state_33816;
                    statearr_33819[7] = inst_33798__$1;
                    return statearr_33819;
                  }();
                  if (cljs.core.truth_(inst_33799)) {
                    var statearr_33820_33839 = state_33816__$1;
                    statearr_33820_33839[1] = 5;
                  } else {
                    var statearr_33821_33840 = state_33816__$1;
                    statearr_33821_33840[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_33817 === 5) {
                    var inst_33801 = cljs.core.async.close_BANG_.call(null, out);
                    var state_33816__$1 = state_33816;
                    var statearr_33822_33841 = state_33816__$1;
                    statearr_33822_33841[2] = inst_33801;
                    statearr_33822_33841[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_33817 === 6) {
                      var inst_33798 = state_33816[7];
                      var inst_33803 = p.call(null, inst_33798);
                      var state_33816__$1 = state_33816;
                      if (cljs.core.truth_(inst_33803)) {
                        var statearr_33823_33842 = state_33816__$1;
                        statearr_33823_33842[1] = 8;
                      } else {
                        var statearr_33824_33843 = state_33816__$1;
                        statearr_33824_33843[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_33817 === 7) {
                        var inst_33812 = state_33816[2];
                        var state_33816__$1 = state_33816;
                        var statearr_33825_33844 = state_33816__$1;
                        statearr_33825_33844[2] = inst_33812;
                        statearr_33825_33844[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_33817 === 8) {
                          var inst_33798 = state_33816[7];
                          var state_33816__$1 = state_33816;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_33816__$1, 11, out, inst_33798);
                        } else {
                          if (state_val_33817 === 9) {
                            var state_33816__$1 = state_33816;
                            var statearr_33826_33845 = state_33816__$1;
                            statearr_33826_33845[2] = null;
                            statearr_33826_33845[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_33817 === 10) {
                              var inst_33809 = state_33816[2];
                              var state_33816__$1 = function() {
                                var statearr_33827 = state_33816;
                                statearr_33827[8] = inst_33809;
                                return statearr_33827;
                              }();
                              var statearr_33828_33846 = state_33816__$1;
                              statearr_33828_33846[2] = null;
                              statearr_33828_33846[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_33817 === 11) {
                                var inst_33806 = state_33816[2];
                                var state_33816__$1 = state_33816;
                                var statearr_33829_33847 = state_33816__$1;
                                statearr_33829_33847[2] = inst_33806;
                                statearr_33829_33847[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_33833 = [null, null, null, null, null, null, null, null, null];
              statearr_33833[0] = state_machine__13884__auto__;
              statearr_33833[1] = 1;
              return statearr_33833;
            };
            var state_machine__13884__auto____1 = function(state_33816) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_33816);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e33834) {
                    if (e33834 instanceof Object) {
                      var ex__13887__auto__ = e33834;
                      var statearr_33835_33848 = state_33816;
                      statearr_33835_33848[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_33816);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e33834;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__33849 = state_33816;
                  state_33816 = G__33849;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_33816) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_33816);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_33836 = f__13954__auto__.call(null);
        statearr_33836[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___33837;
        return statearr_33836;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__13953__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13954__auto__ = function() {
      var switch__13883__auto__ = function(state_34001) {
        var state_val_34002 = state_34001[1];
        if (state_val_34002 === 1) {
          var state_34001__$1 = state_34001;
          var statearr_34003_34040 = state_34001__$1;
          statearr_34003_34040[2] = null;
          statearr_34003_34040[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_34002 === 2) {
            var state_34001__$1 = state_34001;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_34001__$1, 4, in$);
          } else {
            if (state_val_34002 === 3) {
              var inst_33999 = state_34001[2];
              var state_34001__$1 = state_34001;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_34001__$1, inst_33999);
            } else {
              if (state_val_34002 === 4) {
                var inst_33947 = state_34001[7];
                var inst_33947__$1 = state_34001[2];
                var inst_33948 = inst_33947__$1 == null;
                var state_34001__$1 = function() {
                  var statearr_34004 = state_34001;
                  statearr_34004[7] = inst_33947__$1;
                  return statearr_34004;
                }();
                if (cljs.core.truth_(inst_33948)) {
                  var statearr_34005_34041 = state_34001__$1;
                  statearr_34005_34041[1] = 5;
                } else {
                  var statearr_34006_34042 = state_34001__$1;
                  statearr_34006_34042[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_34002 === 5) {
                  var inst_33950 = cljs.core.async.close_BANG_.call(null, out);
                  var state_34001__$1 = state_34001;
                  var statearr_34007_34043 = state_34001__$1;
                  statearr_34007_34043[2] = inst_33950;
                  statearr_34007_34043[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_34002 === 6) {
                    var inst_33947 = state_34001[7];
                    var inst_33952 = f.call(null, inst_33947);
                    var inst_33957 = cljs.core.seq.call(null, inst_33952);
                    var inst_33958 = inst_33957;
                    var inst_33959 = null;
                    var inst_33960 = 0;
                    var inst_33961 = 0;
                    var state_34001__$1 = function() {
                      var statearr_34008 = state_34001;
                      statearr_34008[8] = inst_33961;
                      statearr_34008[9] = inst_33960;
                      statearr_34008[10] = inst_33958;
                      statearr_34008[11] = inst_33959;
                      return statearr_34008;
                    }();
                    var statearr_34009_34044 = state_34001__$1;
                    statearr_34009_34044[2] = null;
                    statearr_34009_34044[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_34002 === 7) {
                      var inst_33997 = state_34001[2];
                      var state_34001__$1 = state_34001;
                      var statearr_34010_34045 = state_34001__$1;
                      statearr_34010_34045[2] = inst_33997;
                      statearr_34010_34045[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_34002 === 8) {
                        var inst_33961 = state_34001[8];
                        var inst_33960 = state_34001[9];
                        var inst_33963 = inst_33961 < inst_33960;
                        var inst_33964 = inst_33963;
                        var state_34001__$1 = state_34001;
                        if (cljs.core.truth_(inst_33964)) {
                          var statearr_34011_34046 = state_34001__$1;
                          statearr_34011_34046[1] = 10;
                        } else {
                          var statearr_34012_34047 = state_34001__$1;
                          statearr_34012_34047[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_34002 === 9) {
                          var inst_33994 = state_34001[2];
                          var state_34001__$1 = function() {
                            var statearr_34013 = state_34001;
                            statearr_34013[12] = inst_33994;
                            return statearr_34013;
                          }();
                          var statearr_34014_34048 = state_34001__$1;
                          statearr_34014_34048[2] = null;
                          statearr_34014_34048[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_34002 === 10) {
                            var inst_33961 = state_34001[8];
                            var inst_33959 = state_34001[11];
                            var inst_33966 = cljs.core._nth.call(null, inst_33959, inst_33961);
                            var state_34001__$1 = state_34001;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_34001__$1, 13, out, inst_33966);
                          } else {
                            if (state_val_34002 === 11) {
                              var inst_33958 = state_34001[10];
                              var inst_33972 = state_34001[13];
                              var inst_33972__$1 = cljs.core.seq.call(null, inst_33958);
                              var state_34001__$1 = function() {
                                var statearr_34018 = state_34001;
                                statearr_34018[13] = inst_33972__$1;
                                return statearr_34018;
                              }();
                              if (inst_33972__$1) {
                                var statearr_34019_34049 = state_34001__$1;
                                statearr_34019_34049[1] = 14;
                              } else {
                                var statearr_34020_34050 = state_34001__$1;
                                statearr_34020_34050[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_34002 === 12) {
                                var inst_33992 = state_34001[2];
                                var state_34001__$1 = state_34001;
                                var statearr_34021_34051 = state_34001__$1;
                                statearr_34021_34051[2] = inst_33992;
                                statearr_34021_34051[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_34002 === 13) {
                                  var inst_33961 = state_34001[8];
                                  var inst_33960 = state_34001[9];
                                  var inst_33958 = state_34001[10];
                                  var inst_33959 = state_34001[11];
                                  var inst_33968 = state_34001[2];
                                  var inst_33969 = inst_33961 + 1;
                                  var tmp34015 = inst_33960;
                                  var tmp34016 = inst_33958;
                                  var tmp34017 = inst_33959;
                                  var inst_33958__$1 = tmp34016;
                                  var inst_33959__$1 = tmp34017;
                                  var inst_33960__$1 = tmp34015;
                                  var inst_33961__$1 = inst_33969;
                                  var state_34001__$1 = function() {
                                    var statearr_34022 = state_34001;
                                    statearr_34022[14] = inst_33968;
                                    statearr_34022[8] = inst_33961__$1;
                                    statearr_34022[9] = inst_33960__$1;
                                    statearr_34022[10] = inst_33958__$1;
                                    statearr_34022[11] = inst_33959__$1;
                                    return statearr_34022;
                                  }();
                                  var statearr_34023_34052 = state_34001__$1;
                                  statearr_34023_34052[2] = null;
                                  statearr_34023_34052[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_34002 === 14) {
                                    var inst_33972 = state_34001[13];
                                    var inst_33974 = cljs.core.chunked_seq_QMARK_.call(null, inst_33972);
                                    var state_34001__$1 = state_34001;
                                    if (inst_33974) {
                                      var statearr_34024_34053 = state_34001__$1;
                                      statearr_34024_34053[1] = 17;
                                    } else {
                                      var statearr_34025_34054 = state_34001__$1;
                                      statearr_34025_34054[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_34002 === 15) {
                                      var state_34001__$1 = state_34001;
                                      var statearr_34026_34055 = state_34001__$1;
                                      statearr_34026_34055[2] = null;
                                      statearr_34026_34055[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_34002 === 16) {
                                        var inst_33990 = state_34001[2];
                                        var state_34001__$1 = state_34001;
                                        var statearr_34027_34056 = state_34001__$1;
                                        statearr_34027_34056[2] = inst_33990;
                                        statearr_34027_34056[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_34002 === 17) {
                                          var inst_33972 = state_34001[13];
                                          var inst_33976 = cljs.core.chunk_first.call(null, inst_33972);
                                          var inst_33977 = cljs.core.chunk_rest.call(null, inst_33972);
                                          var inst_33978 = cljs.core.count.call(null, inst_33976);
                                          var inst_33958 = inst_33977;
                                          var inst_33959 = inst_33976;
                                          var inst_33960 = inst_33978;
                                          var inst_33961 = 0;
                                          var state_34001__$1 = function() {
                                            var statearr_34028 = state_34001;
                                            statearr_34028[8] = inst_33961;
                                            statearr_34028[9] = inst_33960;
                                            statearr_34028[10] = inst_33958;
                                            statearr_34028[11] = inst_33959;
                                            return statearr_34028;
                                          }();
                                          var statearr_34029_34057 = state_34001__$1;
                                          statearr_34029_34057[2] = null;
                                          statearr_34029_34057[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_34002 === 18) {
                                            var inst_33972 = state_34001[13];
                                            var inst_33981 = cljs.core.first.call(null, inst_33972);
                                            var state_34001__$1 = state_34001;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_34001__$1, 20, out, inst_33981);
                                          } else {
                                            if (state_val_34002 === 19) {
                                              var inst_33987 = state_34001[2];
                                              var state_34001__$1 = state_34001;
                                              var statearr_34030_34058 = state_34001__$1;
                                              statearr_34030_34058[2] = inst_33987;
                                              statearr_34030_34058[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_34002 === 20) {
                                                var inst_33972 = state_34001[13];
                                                var inst_33983 = state_34001[2];
                                                var inst_33984 = cljs.core.next.call(null, inst_33972);
                                                var inst_33958 = inst_33984;
                                                var inst_33959 = null;
                                                var inst_33960 = 0;
                                                var inst_33961 = 0;
                                                var state_34001__$1 = function() {
                                                  var statearr_34031 = state_34001;
                                                  statearr_34031[8] = inst_33961;
                                                  statearr_34031[9] = inst_33960;
                                                  statearr_34031[15] = inst_33983;
                                                  statearr_34031[10] = inst_33958;
                                                  statearr_34031[11] = inst_33959;
                                                  return statearr_34031;
                                                }();
                                                var statearr_34032_34059 = state_34001__$1;
                                                statearr_34032_34059[2] = null;
                                                statearr_34032_34059[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13883__auto__) {
        return function() {
          var state_machine__13884__auto__ = null;
          var state_machine__13884__auto____0 = function() {
            var statearr_34036 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_34036[0] = state_machine__13884__auto__;
            statearr_34036[1] = 1;
            return statearr_34036;
          };
          var state_machine__13884__auto____1 = function(state_34001) {
            while (true) {
              var ret_value__13885__auto__ = function() {
                try {
                  while (true) {
                    var result__13886__auto__ = switch__13883__auto__.call(null, state_34001);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13886__auto__;
                    }
                    break;
                  }
                } catch (e34037) {
                  if (e34037 instanceof Object) {
                    var ex__13887__auto__ = e34037;
                    var statearr_34038_34060 = state_34001;
                    statearr_34038_34060[5] = ex__13887__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34001);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e34037;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__34061 = state_34001;
                state_34001 = G__34061;
                continue;
              } else {
                return ret_value__13885__auto__;
              }
              break;
            }
          };
          state_machine__13884__auto__ = function(state_34001) {
            switch(arguments.length) {
              case 0:
                return state_machine__13884__auto____0.call(this);
              case 1:
                return state_machine__13884__auto____1.call(this, state_34001);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
          return state_machine__13884__auto__;
        }();
      }(switch__13883__auto__);
    }();
    var state__13955__auto__ = function() {
      var statearr_34039 = f__13954__auto__.call(null);
      statearr_34039[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto__;
      return statearr_34039;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
  });
  return c__13953__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__13953__auto___34142 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_34121) {
          var state_val_34122 = state_34121[1];
          if (state_val_34122 === 1) {
            var state_34121__$1 = state_34121;
            var statearr_34123_34143 = state_34121__$1;
            statearr_34123_34143[2] = null;
            statearr_34123_34143[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_34122 === 2) {
              var state_34121__$1 = state_34121;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_34121__$1, 4, from);
            } else {
              if (state_val_34122 === 3) {
                var inst_34119 = state_34121[2];
                var state_34121__$1 = state_34121;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_34121__$1, inst_34119);
              } else {
                if (state_val_34122 === 4) {
                  var inst_34104 = state_34121[7];
                  var inst_34104__$1 = state_34121[2];
                  var inst_34105 = inst_34104__$1 == null;
                  var state_34121__$1 = function() {
                    var statearr_34124 = state_34121;
                    statearr_34124[7] = inst_34104__$1;
                    return statearr_34124;
                  }();
                  if (cljs.core.truth_(inst_34105)) {
                    var statearr_34125_34144 = state_34121__$1;
                    statearr_34125_34144[1] = 5;
                  } else {
                    var statearr_34126_34145 = state_34121__$1;
                    statearr_34126_34145[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_34122 === 5) {
                    var state_34121__$1 = state_34121;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_34127_34146 = state_34121__$1;
                      statearr_34127_34146[1] = 8;
                    } else {
                      var statearr_34128_34147 = state_34121__$1;
                      statearr_34128_34147[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_34122 === 6) {
                      var inst_34104 = state_34121[7];
                      var state_34121__$1 = state_34121;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_34121__$1, 11, to, inst_34104);
                    } else {
                      if (state_val_34122 === 7) {
                        var inst_34117 = state_34121[2];
                        var state_34121__$1 = state_34121;
                        var statearr_34129_34148 = state_34121__$1;
                        statearr_34129_34148[2] = inst_34117;
                        statearr_34129_34148[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_34122 === 8) {
                          var inst_34108 = cljs.core.async.close_BANG_.call(null, to);
                          var state_34121__$1 = state_34121;
                          var statearr_34130_34149 = state_34121__$1;
                          statearr_34130_34149[2] = inst_34108;
                          statearr_34130_34149[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_34122 === 9) {
                            var state_34121__$1 = state_34121;
                            var statearr_34131_34150 = state_34121__$1;
                            statearr_34131_34150[2] = null;
                            statearr_34131_34150[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_34122 === 10) {
                              var inst_34111 = state_34121[2];
                              var state_34121__$1 = state_34121;
                              var statearr_34132_34151 = state_34121__$1;
                              statearr_34132_34151[2] = inst_34111;
                              statearr_34132_34151[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_34122 === 11) {
                                var inst_34114 = state_34121[2];
                                var state_34121__$1 = function() {
                                  var statearr_34133 = state_34121;
                                  statearr_34133[8] = inst_34114;
                                  return statearr_34133;
                                }();
                                var statearr_34134_34152 = state_34121__$1;
                                statearr_34134_34152[2] = null;
                                statearr_34134_34152[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_34138 = [null, null, null, null, null, null, null, null, null];
              statearr_34138[0] = state_machine__13884__auto__;
              statearr_34138[1] = 1;
              return statearr_34138;
            };
            var state_machine__13884__auto____1 = function(state_34121) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_34121);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e34139) {
                    if (e34139 instanceof Object) {
                      var ex__13887__auto__ = e34139;
                      var statearr_34140_34153 = state_34121;
                      statearr_34140_34153[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34121);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e34139;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__34154 = state_34121;
                  state_34121 = G__34154;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_34121) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_34121);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_34141 = f__13954__auto__.call(null);
        statearr_34141[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___34142;
        return statearr_34141;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__13953__auto___34241 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_34219) {
          var state_val_34220 = state_34219[1];
          if (state_val_34220 === 1) {
            var state_34219__$1 = state_34219;
            var statearr_34221_34242 = state_34219__$1;
            statearr_34221_34242[2] = null;
            statearr_34221_34242[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_34220 === 2) {
              var state_34219__$1 = state_34219;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_34219__$1, 4, ch);
            } else {
              if (state_val_34220 === 3) {
                var inst_34217 = state_34219[2];
                var state_34219__$1 = state_34219;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_34219__$1, inst_34217);
              } else {
                if (state_val_34220 === 4) {
                  var inst_34200 = state_34219[7];
                  var inst_34200__$1 = state_34219[2];
                  var inst_34201 = inst_34200__$1 == null;
                  var state_34219__$1 = function() {
                    var statearr_34222 = state_34219;
                    statearr_34222[7] = inst_34200__$1;
                    return statearr_34222;
                  }();
                  if (cljs.core.truth_(inst_34201)) {
                    var statearr_34223_34243 = state_34219__$1;
                    statearr_34223_34243[1] = 5;
                  } else {
                    var statearr_34224_34244 = state_34219__$1;
                    statearr_34224_34244[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_34220 === 5) {
                    var inst_34203 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_34204 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_34219__$1 = function() {
                      var statearr_34225 = state_34219;
                      statearr_34225[8] = inst_34203;
                      return statearr_34225;
                    }();
                    var statearr_34226_34245 = state_34219__$1;
                    statearr_34226_34245[2] = inst_34204;
                    statearr_34226_34245[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_34220 === 6) {
                      var inst_34200 = state_34219[7];
                      var inst_34206 = p.call(null, inst_34200);
                      var state_34219__$1 = state_34219;
                      if (cljs.core.truth_(inst_34206)) {
                        var statearr_34227_34246 = state_34219__$1;
                        statearr_34227_34246[1] = 9;
                      } else {
                        var statearr_34228_34247 = state_34219__$1;
                        statearr_34228_34247[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_34220 === 7) {
                        var inst_34215 = state_34219[2];
                        var state_34219__$1 = state_34219;
                        var statearr_34229_34248 = state_34219__$1;
                        statearr_34229_34248[2] = inst_34215;
                        statearr_34229_34248[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_34220 === 8) {
                          var inst_34212 = state_34219[2];
                          var state_34219__$1 = function() {
                            var statearr_34230 = state_34219;
                            statearr_34230[9] = inst_34212;
                            return statearr_34230;
                          }();
                          var statearr_34231_34249 = state_34219__$1;
                          statearr_34231_34249[2] = null;
                          statearr_34231_34249[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_34220 === 9) {
                            var state_34219__$1 = state_34219;
                            var statearr_34232_34250 = state_34219__$1;
                            statearr_34232_34250[2] = tc;
                            statearr_34232_34250[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_34220 === 10) {
                              var state_34219__$1 = state_34219;
                              var statearr_34233_34251 = state_34219__$1;
                              statearr_34233_34251[2] = fc;
                              statearr_34233_34251[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_34220 === 11) {
                                var inst_34200 = state_34219[7];
                                var inst_34210 = state_34219[2];
                                var state_34219__$1 = state_34219;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_34219__$1, 8, inst_34210, inst_34200);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_34237 = [null, null, null, null, null, null, null, null, null, null];
              statearr_34237[0] = state_machine__13884__auto__;
              statearr_34237[1] = 1;
              return statearr_34237;
            };
            var state_machine__13884__auto____1 = function(state_34219) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_34219);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e34238) {
                    if (e34238 instanceof Object) {
                      var ex__13887__auto__ = e34238;
                      var statearr_34239_34252 = state_34219;
                      statearr_34239_34252[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34219);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e34238;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__34253 = state_34219;
                  state_34219 = G__34253;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_34219) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_34219);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_34240 = f__13954__auto__.call(null);
        statearr_34240[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___34241;
        return statearr_34240;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__13953__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13954__auto__ = function() {
      var switch__13883__auto__ = function(state_34300) {
        var state_val_34301 = state_34300[1];
        if (state_val_34301 === 7) {
          var inst_34296 = state_34300[2];
          var state_34300__$1 = state_34300;
          var statearr_34302_34318 = state_34300__$1;
          statearr_34302_34318[2] = inst_34296;
          statearr_34302_34318[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_34301 === 6) {
            var inst_34286 = state_34300[7];
            var inst_34289 = state_34300[8];
            var inst_34293 = f.call(null, inst_34286, inst_34289);
            var inst_34286__$1 = inst_34293;
            var state_34300__$1 = function() {
              var statearr_34303 = state_34300;
              statearr_34303[7] = inst_34286__$1;
              return statearr_34303;
            }();
            var statearr_34304_34319 = state_34300__$1;
            statearr_34304_34319[2] = null;
            statearr_34304_34319[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_34301 === 5) {
              var inst_34286 = state_34300[7];
              var state_34300__$1 = state_34300;
              var statearr_34305_34320 = state_34300__$1;
              statearr_34305_34320[2] = inst_34286;
              statearr_34305_34320[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_34301 === 4) {
                var inst_34289 = state_34300[8];
                var inst_34289__$1 = state_34300[2];
                var inst_34290 = inst_34289__$1 == null;
                var state_34300__$1 = function() {
                  var statearr_34306 = state_34300;
                  statearr_34306[8] = inst_34289__$1;
                  return statearr_34306;
                }();
                if (cljs.core.truth_(inst_34290)) {
                  var statearr_34307_34321 = state_34300__$1;
                  statearr_34307_34321[1] = 5;
                } else {
                  var statearr_34308_34322 = state_34300__$1;
                  statearr_34308_34322[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_34301 === 3) {
                  var inst_34298 = state_34300[2];
                  var state_34300__$1 = state_34300;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_34300__$1, inst_34298);
                } else {
                  if (state_val_34301 === 2) {
                    var state_34300__$1 = state_34300;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_34300__$1, 4, ch);
                  } else {
                    if (state_val_34301 === 1) {
                      var inst_34286 = init;
                      var state_34300__$1 = function() {
                        var statearr_34309 = state_34300;
                        statearr_34309[7] = inst_34286;
                        return statearr_34309;
                      }();
                      var statearr_34310_34323 = state_34300__$1;
                      statearr_34310_34323[2] = null;
                      statearr_34310_34323[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13883__auto__) {
        return function() {
          var state_machine__13884__auto__ = null;
          var state_machine__13884__auto____0 = function() {
            var statearr_34314 = [null, null, null, null, null, null, null, null, null];
            statearr_34314[0] = state_machine__13884__auto__;
            statearr_34314[1] = 1;
            return statearr_34314;
          };
          var state_machine__13884__auto____1 = function(state_34300) {
            while (true) {
              var ret_value__13885__auto__ = function() {
                try {
                  while (true) {
                    var result__13886__auto__ = switch__13883__auto__.call(null, state_34300);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13886__auto__;
                    }
                    break;
                  }
                } catch (e34315) {
                  if (e34315 instanceof Object) {
                    var ex__13887__auto__ = e34315;
                    var statearr_34316_34324 = state_34300;
                    statearr_34316_34324[5] = ex__13887__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34300);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e34315;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__34325 = state_34300;
                state_34300 = G__34325;
                continue;
              } else {
                return ret_value__13885__auto__;
              }
              break;
            }
          };
          state_machine__13884__auto__ = function(state_34300) {
            switch(arguments.length) {
              case 0:
                return state_machine__13884__auto____0.call(this);
              case 1:
                return state_machine__13884__auto____1.call(this, state_34300);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
          return state_machine__13884__auto__;
        }();
      }(switch__13883__auto__);
    }();
    var state__13955__auto__ = function() {
      var statearr_34317 = f__13954__auto__.call(null);
      statearr_34317[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto__;
      return statearr_34317;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
  });
  return c__13953__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__13953__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_34387) {
          var state_val_34388 = state_34387[1];
          if (state_val_34388 === 1) {
            var inst_34367 = cljs.core.seq.call(null, coll);
            var inst_34368 = inst_34367;
            var state_34387__$1 = function() {
              var statearr_34389 = state_34387;
              statearr_34389[7] = inst_34368;
              return statearr_34389;
            }();
            var statearr_34390_34408 = state_34387__$1;
            statearr_34390_34408[2] = null;
            statearr_34390_34408[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_34388 === 2) {
              var inst_34368 = state_34387[7];
              var state_34387__$1 = state_34387;
              if (cljs.core.truth_(inst_34368)) {
                var statearr_34391_34409 = state_34387__$1;
                statearr_34391_34409[1] = 4;
              } else {
                var statearr_34392_34410 = state_34387__$1;
                statearr_34392_34410[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_34388 === 3) {
                var inst_34385 = state_34387[2];
                var state_34387__$1 = state_34387;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_34387__$1, inst_34385);
              } else {
                if (state_val_34388 === 4) {
                  var inst_34368 = state_34387[7];
                  var inst_34371 = cljs.core.first.call(null, inst_34368);
                  var state_34387__$1 = state_34387;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_34387__$1, 7, ch, inst_34371);
                } else {
                  if (state_val_34388 === 5) {
                    var state_34387__$1 = state_34387;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_34393_34411 = state_34387__$1;
                      statearr_34393_34411[1] = 8;
                    } else {
                      var statearr_34394_34412 = state_34387__$1;
                      statearr_34394_34412[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_34388 === 6) {
                      var inst_34383 = state_34387[2];
                      var state_34387__$1 = state_34387;
                      var statearr_34395_34413 = state_34387__$1;
                      statearr_34395_34413[2] = inst_34383;
                      statearr_34395_34413[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_34388 === 7) {
                        var inst_34368 = state_34387[7];
                        var inst_34373 = state_34387[2];
                        var inst_34374 = cljs.core.next.call(null, inst_34368);
                        var inst_34368__$1 = inst_34374;
                        var state_34387__$1 = function() {
                          var statearr_34396 = state_34387;
                          statearr_34396[8] = inst_34373;
                          statearr_34396[7] = inst_34368__$1;
                          return statearr_34396;
                        }();
                        var statearr_34397_34414 = state_34387__$1;
                        statearr_34397_34414[2] = null;
                        statearr_34397_34414[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_34388 === 8) {
                          var inst_34378 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_34387__$1 = state_34387;
                          var statearr_34398_34415 = state_34387__$1;
                          statearr_34398_34415[2] = inst_34378;
                          statearr_34398_34415[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_34388 === 9) {
                            var state_34387__$1 = state_34387;
                            var statearr_34399_34416 = state_34387__$1;
                            statearr_34399_34416[2] = null;
                            statearr_34399_34416[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_34388 === 10) {
                              var inst_34381 = state_34387[2];
                              var state_34387__$1 = state_34387;
                              var statearr_34400_34417 = state_34387__$1;
                              statearr_34400_34417[2] = inst_34381;
                              statearr_34400_34417[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_34404 = [null, null, null, null, null, null, null, null, null];
              statearr_34404[0] = state_machine__13884__auto__;
              statearr_34404[1] = 1;
              return statearr_34404;
            };
            var state_machine__13884__auto____1 = function(state_34387) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_34387);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e34405) {
                    if (e34405 instanceof Object) {
                      var ex__13887__auto__ = e34405;
                      var statearr_34406_34418 = state_34387;
                      statearr_34406_34418[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34387);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e34405;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__34419 = state_34387;
                  state_34387 = G__34419;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_34387) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_34387);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_34407 = f__13954__auto__.call(null);
        statearr_34407[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto__;
        return statearr_34407;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return c__13953__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj34421 = {};
  return obj34421;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__10317__auto__ = _;
    if (and__10317__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__10956__auto__ = _ == null ? null : _;
    return function() {
      var or__10329__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj34423 = {};
  return obj34423;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__10317__auto__ = m;
    if (and__10317__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__10956__auto__ = m == null ? null : m;
    return function() {
      var or__10329__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__10317__auto__ = m;
    if (and__10317__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__10956__auto__ = m == null ? null : m;
    return function() {
      var or__10329__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__10317__auto__ = m;
    if (and__10317__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__10956__auto__ = m == null ? null : m;
    return function() {
      var or__10329__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t34647 !== "undefined") {
    } else {
      cljs.core.async.t34647 = function(cs, ch, mult, meta34648) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta34648 = meta34648;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t34647.cljs$lang$type = true;
      cljs.core.async.t34647.cljs$lang$ctorStr = "cljs.core.async/t34647";
      cljs.core.async.t34647.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
          return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t34647");
        };
      }(cs);
      cljs.core.async.t34647.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t34647.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t34647.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t34647.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t34647.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t34647.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t34647.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_34649) {
          var self__ = this;
          var _34649__$1 = this;
          return self__.meta34648;
        };
      }(cs);
      cljs.core.async.t34647.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_34649, meta34648__$1) {
          var self__ = this;
          var _34649__$1 = this;
          return new cljs.core.async.t34647(self__.cs, self__.ch, self__.mult, meta34648__$1);
        };
      }(cs);
      cljs.core.async.__GT_t34647 = function(cs) {
        return function __GT_t34647(cs__$1, ch__$1, mult__$1, meta34648) {
          return new cljs.core.async.t34647(cs__$1, ch__$1, mult__$1, meta34648);
        };
      }(cs);
    }
    return new cljs.core.async.t34647(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__13953__auto___34870 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13954__auto__ = function() {
      var switch__13883__auto__ = function(state_34784) {
        var state_val_34785 = state_34784[1];
        if (state_val_34785 === 32) {
          var inst_34652 = state_34784[7];
          var inst_34728 = state_34784[8];
          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_34784, 31, Object, null, 30);
          var inst_34735 = cljs.core.async.put_BANG_.call(null, inst_34728, inst_34652, done);
          var state_34784__$1 = state_34784;
          var statearr_34786_34871 = state_34784__$1;
          statearr_34786_34871[2] = inst_34735;
          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34784__$1);
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_34785 === 1) {
            var state_34784__$1 = state_34784;
            var statearr_34787_34872 = state_34784__$1;
            statearr_34787_34872[2] = null;
            statearr_34787_34872[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_34785 === 33) {
              var inst_34741 = state_34784[9];
              var inst_34743 = cljs.core.chunked_seq_QMARK_.call(null, inst_34741);
              var state_34784__$1 = state_34784;
              if (inst_34743) {
                var statearr_34788_34873 = state_34784__$1;
                statearr_34788_34873[1] = 36;
              } else {
                var statearr_34789_34874 = state_34784__$1;
                statearr_34789_34874[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_34785 === 2) {
                var state_34784__$1 = state_34784;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_34784__$1, 4, ch);
              } else {
                if (state_val_34785 === 34) {
                  var state_34784__$1 = state_34784;
                  var statearr_34790_34875 = state_34784__$1;
                  statearr_34790_34875[2] = null;
                  statearr_34790_34875[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_34785 === 3) {
                    var inst_34782 = state_34784[2];
                    var state_34784__$1 = state_34784;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_34784__$1, inst_34782);
                  } else {
                    if (state_val_34785 === 35) {
                      var inst_34766 = state_34784[2];
                      var state_34784__$1 = state_34784;
                      var statearr_34791_34876 = state_34784__$1;
                      statearr_34791_34876[2] = inst_34766;
                      statearr_34791_34876[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_34785 === 4) {
                        var inst_34652 = state_34784[7];
                        var inst_34652__$1 = state_34784[2];
                        var inst_34653 = inst_34652__$1 == null;
                        var state_34784__$1 = function() {
                          var statearr_34792 = state_34784;
                          statearr_34792[7] = inst_34652__$1;
                          return statearr_34792;
                        }();
                        if (cljs.core.truth_(inst_34653)) {
                          var statearr_34793_34877 = state_34784__$1;
                          statearr_34793_34877[1] = 5;
                        } else {
                          var statearr_34794_34878 = state_34784__$1;
                          statearr_34794_34878[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_34785 === 36) {
                          var inst_34741 = state_34784[9];
                          var inst_34745 = cljs.core.chunk_first.call(null, inst_34741);
                          var inst_34746 = cljs.core.chunk_rest.call(null, inst_34741);
                          var inst_34747 = cljs.core.count.call(null, inst_34745);
                          var inst_34720 = inst_34746;
                          var inst_34721 = inst_34745;
                          var inst_34722 = inst_34747;
                          var inst_34723 = 0;
                          var state_34784__$1 = function() {
                            var statearr_34795 = state_34784;
                            statearr_34795[10] = inst_34721;
                            statearr_34795[11] = inst_34722;
                            statearr_34795[12] = inst_34723;
                            statearr_34795[13] = inst_34720;
                            return statearr_34795;
                          }();
                          var statearr_34796_34879 = state_34784__$1;
                          statearr_34796_34879[2] = null;
                          statearr_34796_34879[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_34785 === 5) {
                            var inst_34659 = cljs.core.deref.call(null, cs);
                            var inst_34660 = cljs.core.seq.call(null, inst_34659);
                            var inst_34661 = inst_34660;
                            var inst_34662 = null;
                            var inst_34663 = 0;
                            var inst_34664 = 0;
                            var state_34784__$1 = function() {
                              var statearr_34797 = state_34784;
                              statearr_34797[14] = inst_34661;
                              statearr_34797[15] = inst_34664;
                              statearr_34797[16] = inst_34663;
                              statearr_34797[17] = inst_34662;
                              return statearr_34797;
                            }();
                            var statearr_34798_34880 = state_34784__$1;
                            statearr_34798_34880[2] = null;
                            statearr_34798_34880[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_34785 === 37) {
                              var inst_34741 = state_34784[9];
                              var inst_34750 = cljs.core.first.call(null, inst_34741);
                              var state_34784__$1 = function() {
                                var statearr_34799 = state_34784;
                                statearr_34799[18] = inst_34750;
                                return statearr_34799;
                              }();
                              var statearr_34800_34881 = state_34784__$1;
                              statearr_34800_34881[2] = null;
                              statearr_34800_34881[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_34785 === 6) {
                                var inst_34712 = state_34784[19];
                                var inst_34711 = cljs.core.deref.call(null, cs);
                                var inst_34712__$1 = cljs.core.keys.call(null, inst_34711);
                                var inst_34713 = cljs.core.count.call(null, inst_34712__$1);
                                var inst_34714 = cljs.core.reset_BANG_.call(null, dctr, inst_34713);
                                var inst_34719 = cljs.core.seq.call(null, inst_34712__$1);
                                var inst_34720 = inst_34719;
                                var inst_34721 = null;
                                var inst_34722 = 0;
                                var inst_34723 = 0;
                                var state_34784__$1 = function() {
                                  var statearr_34801 = state_34784;
                                  statearr_34801[10] = inst_34721;
                                  statearr_34801[11] = inst_34722;
                                  statearr_34801[12] = inst_34723;
                                  statearr_34801[13] = inst_34720;
                                  statearr_34801[19] = inst_34712__$1;
                                  statearr_34801[20] = inst_34714;
                                  return statearr_34801;
                                }();
                                var statearr_34802_34882 = state_34784__$1;
                                statearr_34802_34882[2] = null;
                                statearr_34802_34882[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_34785 === 38) {
                                  var inst_34763 = state_34784[2];
                                  var state_34784__$1 = state_34784;
                                  var statearr_34803_34883 = state_34784__$1;
                                  statearr_34803_34883[2] = inst_34763;
                                  statearr_34803_34883[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_34785 === 7) {
                                    var inst_34780 = state_34784[2];
                                    var state_34784__$1 = state_34784;
                                    var statearr_34804_34884 = state_34784__$1;
                                    statearr_34804_34884[2] = inst_34780;
                                    statearr_34804_34884[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_34785 === 39) {
                                      var inst_34741 = state_34784[9];
                                      var inst_34759 = state_34784[2];
                                      var inst_34760 = cljs.core.next.call(null, inst_34741);
                                      var inst_34720 = inst_34760;
                                      var inst_34721 = null;
                                      var inst_34722 = 0;
                                      var inst_34723 = 0;
                                      var state_34784__$1 = function() {
                                        var statearr_34805 = state_34784;
                                        statearr_34805[10] = inst_34721;
                                        statearr_34805[11] = inst_34722;
                                        statearr_34805[12] = inst_34723;
                                        statearr_34805[13] = inst_34720;
                                        statearr_34805[21] = inst_34759;
                                        return statearr_34805;
                                      }();
                                      var statearr_34806_34885 = state_34784__$1;
                                      statearr_34806_34885[2] = null;
                                      statearr_34806_34885[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_34785 === 8) {
                                        var inst_34664 = state_34784[15];
                                        var inst_34663 = state_34784[16];
                                        var inst_34666 = inst_34664 < inst_34663;
                                        var inst_34667 = inst_34666;
                                        var state_34784__$1 = state_34784;
                                        if (cljs.core.truth_(inst_34667)) {
                                          var statearr_34807_34886 = state_34784__$1;
                                          statearr_34807_34886[1] = 10;
                                        } else {
                                          var statearr_34808_34887 = state_34784__$1;
                                          statearr_34808_34887[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_34785 === 40) {
                                          var inst_34750 = state_34784[18];
                                          var inst_34751 = state_34784[2];
                                          var inst_34752 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_34753 = cljs.core.async.untap_STAR_.call(null, m, inst_34750);
                                          var state_34784__$1 = function() {
                                            var statearr_34809 = state_34784;
                                            statearr_34809[22] = inst_34752;
                                            statearr_34809[23] = inst_34751;
                                            return statearr_34809;
                                          }();
                                          var statearr_34810_34888 = state_34784__$1;
                                          statearr_34810_34888[2] = inst_34753;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34784__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_34785 === 9) {
                                            var inst_34709 = state_34784[2];
                                            var state_34784__$1 = state_34784;
                                            var statearr_34811_34889 = state_34784__$1;
                                            statearr_34811_34889[2] = inst_34709;
                                            statearr_34811_34889[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_34785 === 41) {
                                              var inst_34652 = state_34784[7];
                                              var inst_34750 = state_34784[18];
                                              var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_34784, 40, Object, null, 39);
                                              var inst_34757 = cljs.core.async.put_BANG_.call(null, inst_34750, inst_34652, done);
                                              var state_34784__$1 = state_34784;
                                              var statearr_34812_34890 = state_34784__$1;
                                              statearr_34812_34890[2] = inst_34757;
                                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34784__$1);
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_34785 === 10) {
                                                var inst_34664 = state_34784[15];
                                                var inst_34662 = state_34784[17];
                                                var inst_34670 = cljs.core._nth.call(null, inst_34662, inst_34664);
                                                var inst_34671 = cljs.core.nth.call(null, inst_34670, 0, null);
                                                var inst_34672 = cljs.core.nth.call(null, inst_34670, 1, null);
                                                var state_34784__$1 = function() {
                                                  var statearr_34813 = state_34784;
                                                  statearr_34813[24] = inst_34671;
                                                  return statearr_34813;
                                                }();
                                                if (cljs.core.truth_(inst_34672)) {
                                                  var statearr_34814_34891 = state_34784__$1;
                                                  statearr_34814_34891[1] = 13;
                                                } else {
                                                  var statearr_34815_34892 = state_34784__$1;
                                                  statearr_34815_34892[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_34785 === 42) {
                                                  var state_34784__$1 = state_34784;
                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_34784__$1, 45, dchan);
                                                } else {
                                                  if (state_val_34785 === 11) {
                                                    var inst_34681 = state_34784[25];
                                                    var inst_34661 = state_34784[14];
                                                    var inst_34681__$1 = cljs.core.seq.call(null, inst_34661);
                                                    var state_34784__$1 = function() {
                                                      var statearr_34816 = state_34784;
                                                      statearr_34816[25] = inst_34681__$1;
                                                      return statearr_34816;
                                                    }();
                                                    if (inst_34681__$1) {
                                                      var statearr_34817_34893 = state_34784__$1;
                                                      statearr_34817_34893[1] = 16;
                                                    } else {
                                                      var statearr_34818_34894 = state_34784__$1;
                                                      statearr_34818_34894[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_34785 === 43) {
                                                      var state_34784__$1 = state_34784;
                                                      var statearr_34819_34895 = state_34784__$1;
                                                      statearr_34819_34895[2] = null;
                                                      statearr_34819_34895[1] = 44;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_34785 === 12) {
                                                        var inst_34707 = state_34784[2];
                                                        var state_34784__$1 = state_34784;
                                                        var statearr_34820_34896 = state_34784__$1;
                                                        statearr_34820_34896[2] = inst_34707;
                                                        statearr_34820_34896[1] = 9;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_34785 === 44) {
                                                          var inst_34777 = state_34784[2];
                                                          var state_34784__$1 = function() {
                                                            var statearr_34821 = state_34784;
                                                            statearr_34821[26] = inst_34777;
                                                            return statearr_34821;
                                                          }();
                                                          var statearr_34822_34897 = state_34784__$1;
                                                          statearr_34822_34897[2] = null;
                                                          statearr_34822_34897[1] = 2;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_34785 === 13) {
                                                            var inst_34671 = state_34784[24];
                                                            var inst_34674 = cljs.core.async.close_BANG_.call(null, inst_34671);
                                                            var state_34784__$1 = state_34784;
                                                            var statearr_34823_34898 = state_34784__$1;
                                                            statearr_34823_34898[2] = inst_34674;
                                                            statearr_34823_34898[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_34785 === 45) {
                                                              var inst_34774 = state_34784[2];
                                                              var state_34784__$1 = state_34784;
                                                              var statearr_34827_34899 = state_34784__$1;
                                                              statearr_34827_34899[2] = inst_34774;
                                                              statearr_34827_34899[1] = 44;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_34785 === 14) {
                                                                var state_34784__$1 = state_34784;
                                                                var statearr_34828_34900 = state_34784__$1;
                                                                statearr_34828_34900[2] = null;
                                                                statearr_34828_34900[1] = 15;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_34785 === 15) {
                                                                  var inst_34661 = state_34784[14];
                                                                  var inst_34664 = state_34784[15];
                                                                  var inst_34663 = state_34784[16];
                                                                  var inst_34662 = state_34784[17];
                                                                  var inst_34677 = state_34784[2];
                                                                  var inst_34678 = inst_34664 + 1;
                                                                  var tmp34824 = inst_34661;
                                                                  var tmp34825 = inst_34663;
                                                                  var tmp34826 = inst_34662;
                                                                  var inst_34661__$1 = tmp34824;
                                                                  var inst_34662__$1 = tmp34826;
                                                                  var inst_34663__$1 = tmp34825;
                                                                  var inst_34664__$1 = inst_34678;
                                                                  var state_34784__$1 = function() {
                                                                    var statearr_34829 = state_34784;
                                                                    statearr_34829[27] = inst_34677;
                                                                    statearr_34829[14] = inst_34661__$1;
                                                                    statearr_34829[15] = inst_34664__$1;
                                                                    statearr_34829[16] = inst_34663__$1;
                                                                    statearr_34829[17] = inst_34662__$1;
                                                                    return statearr_34829;
                                                                  }();
                                                                  var statearr_34830_34901 = state_34784__$1;
                                                                  statearr_34830_34901[2] = null;
                                                                  statearr_34830_34901[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_34785 === 16) {
                                                                    var inst_34681 = state_34784[25];
                                                                    var inst_34683 = cljs.core.chunked_seq_QMARK_.call(null, inst_34681);
                                                                    var state_34784__$1 = state_34784;
                                                                    if (inst_34683) {
                                                                      var statearr_34831_34902 = state_34784__$1;
                                                                      statearr_34831_34902[1] = 19;
                                                                    } else {
                                                                      var statearr_34832_34903 = state_34784__$1;
                                                                      statearr_34832_34903[1] = 20;
                                                                    }
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_34785 === 17) {
                                                                      var state_34784__$1 = state_34784;
                                                                      var statearr_34833_34904 = state_34784__$1;
                                                                      statearr_34833_34904[2] = null;
                                                                      statearr_34833_34904[1] = 18;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_34785 === 18) {
                                                                        var inst_34705 = state_34784[2];
                                                                        var state_34784__$1 = state_34784;
                                                                        var statearr_34834_34905 = state_34784__$1;
                                                                        statearr_34834_34905[2] = inst_34705;
                                                                        statearr_34834_34905[1] = 12;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_34785 === 19) {
                                                                          var inst_34681 = state_34784[25];
                                                                          var inst_34685 = cljs.core.chunk_first.call(null, inst_34681);
                                                                          var inst_34686 = cljs.core.chunk_rest.call(null, inst_34681);
                                                                          var inst_34687 = cljs.core.count.call(null, inst_34685);
                                                                          var inst_34661 = inst_34686;
                                                                          var inst_34662 = inst_34685;
                                                                          var inst_34663 = inst_34687;
                                                                          var inst_34664 = 0;
                                                                          var state_34784__$1 = function() {
                                                                            var statearr_34835 = state_34784;
                                                                            statearr_34835[14] = inst_34661;
                                                                            statearr_34835[15] = inst_34664;
                                                                            statearr_34835[16] = inst_34663;
                                                                            statearr_34835[17] = inst_34662;
                                                                            return statearr_34835;
                                                                          }();
                                                                          var statearr_34836_34906 = state_34784__$1;
                                                                          statearr_34836_34906[2] = null;
                                                                          statearr_34836_34906[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_34785 === 20) {
                                                                            var inst_34681 = state_34784[25];
                                                                            var inst_34691 = cljs.core.first.call(null, inst_34681);
                                                                            var inst_34692 = cljs.core.nth.call(null, inst_34691, 0, null);
                                                                            var inst_34693 = cljs.core.nth.call(null, inst_34691, 1, null);
                                                                            var state_34784__$1 = function() {
                                                                              var statearr_34837 = state_34784;
                                                                              statearr_34837[28] = inst_34692;
                                                                              return statearr_34837;
                                                                            }();
                                                                            if (cljs.core.truth_(inst_34693)) {
                                                                              var statearr_34838_34907 = state_34784__$1;
                                                                              statearr_34838_34907[1] = 22;
                                                                            } else {
                                                                              var statearr_34839_34908 = state_34784__$1;
                                                                              statearr_34839_34908[1] = 23;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_34785 === 21) {
                                                                              var inst_34702 = state_34784[2];
                                                                              var state_34784__$1 = state_34784;
                                                                              var statearr_34840_34909 = state_34784__$1;
                                                                              statearr_34840_34909[2] = inst_34702;
                                                                              statearr_34840_34909[1] = 18;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_34785 === 22) {
                                                                                var inst_34692 = state_34784[28];
                                                                                var inst_34695 = cljs.core.async.close_BANG_.call(null, inst_34692);
                                                                                var state_34784__$1 = state_34784;
                                                                                var statearr_34841_34910 = state_34784__$1;
                                                                                statearr_34841_34910[2] = inst_34695;
                                                                                statearr_34841_34910[1] = 24;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_34785 === 23) {
                                                                                  var state_34784__$1 = state_34784;
                                                                                  var statearr_34842_34911 = state_34784__$1;
                                                                                  statearr_34842_34911[2] = null;
                                                                                  statearr_34842_34911[1] = 24;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_34785 === 24) {
                                                                                    var inst_34681 = state_34784[25];
                                                                                    var inst_34698 = state_34784[2];
                                                                                    var inst_34699 = cljs.core.next.call(null, inst_34681);
                                                                                    var inst_34661 = inst_34699;
                                                                                    var inst_34662 = null;
                                                                                    var inst_34663 = 0;
                                                                                    var inst_34664 = 0;
                                                                                    var state_34784__$1 = function() {
                                                                                      var statearr_34843 = state_34784;
                                                                                      statearr_34843[29] = inst_34698;
                                                                                      statearr_34843[14] = inst_34661;
                                                                                      statearr_34843[15] = inst_34664;
                                                                                      statearr_34843[16] = inst_34663;
                                                                                      statearr_34843[17] = inst_34662;
                                                                                      return statearr_34843;
                                                                                    }();
                                                                                    var statearr_34844_34912 = state_34784__$1;
                                                                                    statearr_34844_34912[2] = null;
                                                                                    statearr_34844_34912[1] = 8;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_34785 === 25) {
                                                                                      var inst_34722 = state_34784[11];
                                                                                      var inst_34723 = state_34784[12];
                                                                                      var inst_34725 = inst_34723 < inst_34722;
                                                                                      var inst_34726 = inst_34725;
                                                                                      var state_34784__$1 = state_34784;
                                                                                      if (cljs.core.truth_(inst_34726)) {
                                                                                        var statearr_34845_34913 = state_34784__$1;
                                                                                        statearr_34845_34913[1] = 27;
                                                                                      } else {
                                                                                        var statearr_34846_34914 = state_34784__$1;
                                                                                        statearr_34846_34914[1] = 28;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_34785 === 26) {
                                                                                        var inst_34712 = state_34784[19];
                                                                                        var inst_34770 = state_34784[2];
                                                                                        var inst_34771 = cljs.core.seq.call(null, inst_34712);
                                                                                        var state_34784__$1 = function() {
                                                                                          var statearr_34847 = state_34784;
                                                                                          statearr_34847[30] = inst_34770;
                                                                                          return statearr_34847;
                                                                                        }();
                                                                                        if (inst_34771) {
                                                                                          var statearr_34848_34915 = state_34784__$1;
                                                                                          statearr_34848_34915[1] = 42;
                                                                                        } else {
                                                                                          var statearr_34849_34916 = state_34784__$1;
                                                                                          statearr_34849_34916[1] = 43;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_34785 === 27) {
                                                                                          var inst_34721 = state_34784[10];
                                                                                          var inst_34723 = state_34784[12];
                                                                                          var inst_34728 = cljs.core._nth.call(null, inst_34721, inst_34723);
                                                                                          var state_34784__$1 = function() {
                                                                                            var statearr_34850 = state_34784;
                                                                                            statearr_34850[8] = inst_34728;
                                                                                            return statearr_34850;
                                                                                          }();
                                                                                          var statearr_34851_34917 = state_34784__$1;
                                                                                          statearr_34851_34917[2] = null;
                                                                                          statearr_34851_34917[1] = 32;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_34785 === 28) {
                                                                                            var inst_34720 = state_34784[13];
                                                                                            var inst_34741 = state_34784[9];
                                                                                            var inst_34741__$1 = cljs.core.seq.call(null, inst_34720);
                                                                                            var state_34784__$1 = function() {
                                                                                              var statearr_34855 = state_34784;
                                                                                              statearr_34855[9] = inst_34741__$1;
                                                                                              return statearr_34855;
                                                                                            }();
                                                                                            if (inst_34741__$1) {
                                                                                              var statearr_34856_34918 = state_34784__$1;
                                                                                              statearr_34856_34918[1] = 33;
                                                                                            } else {
                                                                                              var statearr_34857_34919 = state_34784__$1;
                                                                                              statearr_34857_34919[1] = 34;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_34785 === 29) {
                                                                                              var inst_34768 = state_34784[2];
                                                                                              var state_34784__$1 = state_34784;
                                                                                              var statearr_34858_34920 = state_34784__$1;
                                                                                              statearr_34858_34920[2] = inst_34768;
                                                                                              statearr_34858_34920[1] = 26;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_34785 === 30) {
                                                                                                var inst_34721 = state_34784[10];
                                                                                                var inst_34722 = state_34784[11];
                                                                                                var inst_34723 = state_34784[12];
                                                                                                var inst_34720 = state_34784[13];
                                                                                                var inst_34737 = state_34784[2];
                                                                                                var inst_34738 = inst_34723 + 1;
                                                                                                var tmp34852 = inst_34721;
                                                                                                var tmp34853 = inst_34722;
                                                                                                var tmp34854 = inst_34720;
                                                                                                var inst_34720__$1 = tmp34854;
                                                                                                var inst_34721__$1 = tmp34852;
                                                                                                var inst_34722__$1 = tmp34853;
                                                                                                var inst_34723__$1 = inst_34738;
                                                                                                var state_34784__$1 = function() {
                                                                                                  var statearr_34859 = state_34784;
                                                                                                  statearr_34859[31] = inst_34737;
                                                                                                  statearr_34859[10] = inst_34721__$1;
                                                                                                  statearr_34859[11] = inst_34722__$1;
                                                                                                  statearr_34859[12] = inst_34723__$1;
                                                                                                  statearr_34859[13] = inst_34720__$1;
                                                                                                  return statearr_34859;
                                                                                                }();
                                                                                                var statearr_34860_34921 = state_34784__$1;
                                                                                                statearr_34860_34921[2] = null;
                                                                                                statearr_34860_34921[1] = 25;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_34785 === 31) {
                                                                                                  var inst_34728 = state_34784[8];
                                                                                                  var inst_34729 = state_34784[2];
                                                                                                  var inst_34730 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                                  var inst_34731 = cljs.core.async.untap_STAR_.call(null, m, inst_34728);
                                                                                                  var state_34784__$1 = function() {
                                                                                                    var statearr_34861 = state_34784;
                                                                                                    statearr_34861[32] = inst_34730;
                                                                                                    statearr_34861[33] = inst_34729;
                                                                                                    return statearr_34861;
                                                                                                  }();
                                                                                                  var statearr_34862_34922 = state_34784__$1;
                                                                                                  statearr_34862_34922[2] = inst_34731;
                                                                                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34784__$1);
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                } else {
                                                                                                  return null;
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13883__auto__) {
        return function() {
          var state_machine__13884__auto__ = null;
          var state_machine__13884__auto____0 = function() {
            var statearr_34866 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_34866[0] = state_machine__13884__auto__;
            statearr_34866[1] = 1;
            return statearr_34866;
          };
          var state_machine__13884__auto____1 = function(state_34784) {
            while (true) {
              var ret_value__13885__auto__ = function() {
                try {
                  while (true) {
                    var result__13886__auto__ = switch__13883__auto__.call(null, state_34784);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13886__auto__;
                    }
                    break;
                  }
                } catch (e34867) {
                  if (e34867 instanceof Object) {
                    var ex__13887__auto__ = e34867;
                    var statearr_34868_34923 = state_34784;
                    statearr_34868_34923[5] = ex__13887__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_34784);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e34867;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__34924 = state_34784;
                state_34784 = G__34924;
                continue;
              } else {
                return ret_value__13885__auto__;
              }
              break;
            }
          };
          state_machine__13884__auto__ = function(state_34784) {
            switch(arguments.length) {
              case 0:
                return state_machine__13884__auto____0.call(this);
              case 1:
                return state_machine__13884__auto____1.call(this, state_34784);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
          return state_machine__13884__auto__;
        }();
      }(switch__13883__auto__);
    }();
    var state__13955__auto__ = function() {
      var statearr_34869 = f__13954__auto__.call(null);
      statearr_34869[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___34870;
      return statearr_34869;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj34926 = {};
  return obj34926;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__10317__auto__ = m;
    if (and__10317__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__10956__auto__ = m == null ? null : m;
    return function() {
      var or__10329__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__10317__auto__ = m;
    if (and__10317__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__10956__auto__ = m == null ? null : m;
    return function() {
      var or__10329__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__10317__auto__ = m;
    if (and__10317__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__10956__auto__ = m == null ? null : m;
    return function() {
      var or__10329__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__10317__auto__ = m;
    if (and__10317__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__10956__auto__ = m == null ? null : m;
    return function() {
      var or__10329__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__10317__auto__ = m;
    if (and__10317__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__10956__auto__ = m == null ? null : m;
    return function() {
      var or__10329__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t35036 !== "undefined") {
    } else {
      cljs.core.async.t35036 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta35037) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta35037 = meta35037;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t35036.cljs$lang$type = true;
      cljs.core.async.t35036.cljs$lang$ctorStr = "cljs.core.async/t35036";
      cljs.core.async.t35036.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
          return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t35036");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t35036.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t35036.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t35036.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t35036.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t35036.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t35036.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t35036.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t35036.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t35036.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_35038) {
          var self__ = this;
          var _35038__$1 = this;
          return self__.meta35037;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t35036.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_35038, meta35037__$1) {
          var self__ = this;
          var _35038__$1 = this;
          return new cljs.core.async.t35036(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta35037__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t35036 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t35036(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta35037) {
          return new cljs.core.async.t35036(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta35037);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t35036(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__13953__auto___35145 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13954__auto__ = function() {
      var switch__13883__auto__ = function(state_35103) {
        var state_val_35104 = state_35103[1];
        if (state_val_35104 === 1) {
          var inst_35042 = state_35103[7];
          var inst_35042__$1 = calc_state.call(null);
          var inst_35043 = cljs.core.seq_QMARK_.call(null, inst_35042__$1);
          var state_35103__$1 = function() {
            var statearr_35105 = state_35103;
            statearr_35105[7] = inst_35042__$1;
            return statearr_35105;
          }();
          if (inst_35043) {
            var statearr_35106_35146 = state_35103__$1;
            statearr_35106_35146[1] = 2;
          } else {
            var statearr_35107_35147 = state_35103__$1;
            statearr_35107_35147[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_35104 === 2) {
            var inst_35042 = state_35103[7];
            var inst_35045 = cljs.core.apply.call(null, cljs.core.hash_map, inst_35042);
            var state_35103__$1 = state_35103;
            var statearr_35108_35148 = state_35103__$1;
            statearr_35108_35148[2] = inst_35045;
            statearr_35108_35148[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35104 === 3) {
              var inst_35042 = state_35103[7];
              var state_35103__$1 = state_35103;
              var statearr_35109_35149 = state_35103__$1;
              statearr_35109_35149[2] = inst_35042;
              statearr_35109_35149[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_35104 === 4) {
                var inst_35042 = state_35103[7];
                var inst_35048 = state_35103[2];
                var inst_35049 = cljs.core.get.call(null, inst_35048, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_35050 = cljs.core.get.call(null, inst_35048, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_35051 = cljs.core.get.call(null, inst_35048, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_35052 = inst_35042;
                var state_35103__$1 = function() {
                  var statearr_35110 = state_35103;
                  statearr_35110[8] = inst_35051;
                  statearr_35110[9] = inst_35050;
                  statearr_35110[10] = inst_35052;
                  statearr_35110[11] = inst_35049;
                  return statearr_35110;
                }();
                var statearr_35111_35150 = state_35103__$1;
                statearr_35111_35150[2] = null;
                statearr_35111_35150[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_35104 === 5) {
                  var inst_35052 = state_35103[10];
                  var inst_35055 = cljs.core.seq_QMARK_.call(null, inst_35052);
                  var state_35103__$1 = state_35103;
                  if (inst_35055) {
                    var statearr_35112_35151 = state_35103__$1;
                    statearr_35112_35151[1] = 7;
                  } else {
                    var statearr_35113_35152 = state_35103__$1;
                    statearr_35113_35152[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_35104 === 6) {
                    var inst_35101 = state_35103[2];
                    var state_35103__$1 = state_35103;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35103__$1, inst_35101);
                  } else {
                    if (state_val_35104 === 7) {
                      var inst_35052 = state_35103[10];
                      var inst_35057 = cljs.core.apply.call(null, cljs.core.hash_map, inst_35052);
                      var state_35103__$1 = state_35103;
                      var statearr_35114_35153 = state_35103__$1;
                      statearr_35114_35153[2] = inst_35057;
                      statearr_35114_35153[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35104 === 8) {
                        var inst_35052 = state_35103[10];
                        var state_35103__$1 = state_35103;
                        var statearr_35115_35154 = state_35103__$1;
                        statearr_35115_35154[2] = inst_35052;
                        statearr_35115_35154[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35104 === 9) {
                          var inst_35060 = state_35103[12];
                          var inst_35060__$1 = state_35103[2];
                          var inst_35061 = cljs.core.get.call(null, inst_35060__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_35062 = cljs.core.get.call(null, inst_35060__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_35063 = cljs.core.get.call(null, inst_35060__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_35103__$1 = function() {
                            var statearr_35116 = state_35103;
                            statearr_35116[13] = inst_35062;
                            statearr_35116[14] = inst_35063;
                            statearr_35116[12] = inst_35060__$1;
                            return statearr_35116;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_35103__$1, 10, inst_35061);
                        } else {
                          if (state_val_35104 === 10) {
                            var inst_35067 = state_35103[15];
                            var inst_35068 = state_35103[16];
                            var inst_35066 = state_35103[2];
                            var inst_35067__$1 = cljs.core.nth.call(null, inst_35066, 0, null);
                            var inst_35068__$1 = cljs.core.nth.call(null, inst_35066, 1, null);
                            var inst_35069 = inst_35067__$1 == null;
                            var inst_35070 = cljs.core._EQ_.call(null, inst_35068__$1, change);
                            var inst_35071 = inst_35069 || inst_35070;
                            var state_35103__$1 = function() {
                              var statearr_35117 = state_35103;
                              statearr_35117[15] = inst_35067__$1;
                              statearr_35117[16] = inst_35068__$1;
                              return statearr_35117;
                            }();
                            if (cljs.core.truth_(inst_35071)) {
                              var statearr_35118_35155 = state_35103__$1;
                              statearr_35118_35155[1] = 11;
                            } else {
                              var statearr_35119_35156 = state_35103__$1;
                              statearr_35119_35156[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_35104 === 11) {
                              var inst_35067 = state_35103[15];
                              var inst_35073 = inst_35067 == null;
                              var state_35103__$1 = state_35103;
                              if (cljs.core.truth_(inst_35073)) {
                                var statearr_35120_35157 = state_35103__$1;
                                statearr_35120_35157[1] = 14;
                              } else {
                                var statearr_35121_35158 = state_35103__$1;
                                statearr_35121_35158[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35104 === 12) {
                                var inst_35082 = state_35103[17];
                                var inst_35068 = state_35103[16];
                                var inst_35063 = state_35103[14];
                                var inst_35082__$1 = inst_35063.call(null, inst_35068);
                                var state_35103__$1 = function() {
                                  var statearr_35122 = state_35103;
                                  statearr_35122[17] = inst_35082__$1;
                                  return statearr_35122;
                                }();
                                if (cljs.core.truth_(inst_35082__$1)) {
                                  var statearr_35123_35159 = state_35103__$1;
                                  statearr_35123_35159[1] = 17;
                                } else {
                                  var statearr_35124_35160 = state_35103__$1;
                                  statearr_35124_35160[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_35104 === 13) {
                                  var inst_35099 = state_35103[2];
                                  var state_35103__$1 = state_35103;
                                  var statearr_35125_35161 = state_35103__$1;
                                  statearr_35125_35161[2] = inst_35099;
                                  statearr_35125_35161[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_35104 === 14) {
                                    var inst_35068 = state_35103[16];
                                    var inst_35075 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_35068);
                                    var state_35103__$1 = state_35103;
                                    var statearr_35126_35162 = state_35103__$1;
                                    statearr_35126_35162[2] = inst_35075;
                                    statearr_35126_35162[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_35104 === 15) {
                                      var state_35103__$1 = state_35103;
                                      var statearr_35127_35163 = state_35103__$1;
                                      statearr_35127_35163[2] = null;
                                      statearr_35127_35163[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_35104 === 16) {
                                        var inst_35078 = state_35103[2];
                                        var inst_35079 = calc_state.call(null);
                                        var inst_35052 = inst_35079;
                                        var state_35103__$1 = function() {
                                          var statearr_35128 = state_35103;
                                          statearr_35128[10] = inst_35052;
                                          statearr_35128[18] = inst_35078;
                                          return statearr_35128;
                                        }();
                                        var statearr_35129_35164 = state_35103__$1;
                                        statearr_35129_35164[2] = null;
                                        statearr_35129_35164[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_35104 === 17) {
                                          var inst_35082 = state_35103[17];
                                          var state_35103__$1 = state_35103;
                                          var statearr_35130_35165 = state_35103__$1;
                                          statearr_35130_35165[2] = inst_35082;
                                          statearr_35130_35165[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_35104 === 18) {
                                            var inst_35068 = state_35103[16];
                                            var inst_35062 = state_35103[13];
                                            var inst_35063 = state_35103[14];
                                            var inst_35085 = cljs.core.empty_QMARK_.call(null, inst_35063);
                                            var inst_35086 = inst_35062.call(null, inst_35068);
                                            var inst_35087 = cljs.core.not.call(null, inst_35086);
                                            var inst_35088 = inst_35085 && inst_35087;
                                            var state_35103__$1 = state_35103;
                                            var statearr_35131_35166 = state_35103__$1;
                                            statearr_35131_35166[2] = inst_35088;
                                            statearr_35131_35166[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_35104 === 19) {
                                              var inst_35090 = state_35103[2];
                                              var state_35103__$1 = state_35103;
                                              if (cljs.core.truth_(inst_35090)) {
                                                var statearr_35132_35167 = state_35103__$1;
                                                statearr_35132_35167[1] = 20;
                                              } else {
                                                var statearr_35133_35168 = state_35103__$1;
                                                statearr_35133_35168[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_35104 === 20) {
                                                var inst_35067 = state_35103[15];
                                                var state_35103__$1 = state_35103;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35103__$1, 23, out, inst_35067);
                                              } else {
                                                if (state_val_35104 === 21) {
                                                  var state_35103__$1 = state_35103;
                                                  var statearr_35134_35169 = state_35103__$1;
                                                  statearr_35134_35169[2] = null;
                                                  statearr_35134_35169[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_35104 === 22) {
                                                    var inst_35060 = state_35103[12];
                                                    var inst_35096 = state_35103[2];
                                                    var inst_35052 = inst_35060;
                                                    var state_35103__$1 = function() {
                                                      var statearr_35135 = state_35103;
                                                      statearr_35135[10] = inst_35052;
                                                      statearr_35135[19] = inst_35096;
                                                      return statearr_35135;
                                                    }();
                                                    var statearr_35136_35170 = state_35103__$1;
                                                    statearr_35136_35170[2] = null;
                                                    statearr_35136_35170[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_35104 === 23) {
                                                      var inst_35093 = state_35103[2];
                                                      var state_35103__$1 = state_35103;
                                                      var statearr_35137_35171 = state_35103__$1;
                                                      statearr_35137_35171[2] = inst_35093;
                                                      statearr_35137_35171[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13883__auto__) {
        return function() {
          var state_machine__13884__auto__ = null;
          var state_machine__13884__auto____0 = function() {
            var statearr_35141 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_35141[0] = state_machine__13884__auto__;
            statearr_35141[1] = 1;
            return statearr_35141;
          };
          var state_machine__13884__auto____1 = function(state_35103) {
            while (true) {
              var ret_value__13885__auto__ = function() {
                try {
                  while (true) {
                    var result__13886__auto__ = switch__13883__auto__.call(null, state_35103);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13886__auto__;
                    }
                    break;
                  }
                } catch (e35142) {
                  if (e35142 instanceof Object) {
                    var ex__13887__auto__ = e35142;
                    var statearr_35143_35172 = state_35103;
                    statearr_35143_35172[5] = ex__13887__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35103);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e35142;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__35173 = state_35103;
                state_35103 = G__35173;
                continue;
              } else {
                return ret_value__13885__auto__;
              }
              break;
            }
          };
          state_machine__13884__auto__ = function(state_35103) {
            switch(arguments.length) {
              case 0:
                return state_machine__13884__auto____0.call(this);
              case 1:
                return state_machine__13884__auto____1.call(this, state_35103);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
          return state_machine__13884__auto__;
        }();
      }(switch__13883__auto__);
    }();
    var state__13955__auto__ = function() {
      var statearr_35144 = f__13954__auto__.call(null);
      statearr_35144[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___35145;
      return statearr_35144;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj35175 = {};
  return obj35175;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__10317__auto__ = p;
    if (and__10317__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__10956__auto__ = p == null ? null : p;
    return function() {
      var or__10329__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__10317__auto__ = p;
    if (and__10317__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__10956__auto__ = p == null ? null : p;
    return function() {
      var or__10329__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__10317__auto__ = p;
      if (and__10317__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__10956__auto__ = p == null ? null : p;
      return function() {
        var or__10329__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__10317__auto__ = p;
      if (and__10317__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__10956__auto__ = p == null ? null : p;
      return function() {
        var or__10329__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__10329__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__10329__auto__, mults) {
            return function(p1__35176_SHARP_) {
              if (cljs.core.truth_(p1__35176_SHARP_.call(null, topic))) {
                return p1__35176_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__35176_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__10329__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t35301 !== "undefined") {
      } else {
        cljs.core.async.t35301 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta35302) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta35302 = meta35302;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t35301.cljs$lang$type = true;
        cljs.core.async.t35301.cljs$lang$ctorStr = "cljs.core.async/t35301";
        cljs.core.async.t35301.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
            return cljs.core._write.call(null, writer__10897__auto__, "cljs.core.async/t35301");
          };
        }(mults, ensure_mult);
        cljs.core.async.t35301.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t35301.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t35301.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t35301.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t35301.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t35301.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t35301.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t35301.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_35303) {
            var self__ = this;
            var _35303__$1 = this;
            return self__.meta35302;
          };
        }(mults, ensure_mult);
        cljs.core.async.t35301.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_35303, meta35302__$1) {
            var self__ = this;
            var _35303__$1 = this;
            return new cljs.core.async.t35301(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta35302__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t35301 = function(mults, ensure_mult) {
          return function __GT_t35301(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta35302) {
            return new cljs.core.async.t35301(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta35302);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t35301(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__13953__auto___35425 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_35377) {
          var state_val_35378 = state_35377[1];
          if (state_val_35378 === 1) {
            var state_35377__$1 = state_35377;
            var statearr_35379_35426 = state_35377__$1;
            statearr_35379_35426[2] = null;
            statearr_35379_35426[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35378 === 2) {
              var state_35377__$1 = state_35377;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35377__$1, 4, ch);
            } else {
              if (state_val_35378 === 3) {
                var inst_35375 = state_35377[2];
                var state_35377__$1 = state_35377;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35377__$1, inst_35375);
              } else {
                if (state_val_35378 === 4) {
                  var inst_35306 = state_35377[7];
                  var inst_35306__$1 = state_35377[2];
                  var inst_35307 = inst_35306__$1 == null;
                  var state_35377__$1 = function() {
                    var statearr_35380 = state_35377;
                    statearr_35380[7] = inst_35306__$1;
                    return statearr_35380;
                  }();
                  if (cljs.core.truth_(inst_35307)) {
                    var statearr_35381_35427 = state_35377__$1;
                    statearr_35381_35427[1] = 5;
                  } else {
                    var statearr_35382_35428 = state_35377__$1;
                    statearr_35382_35428[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_35378 === 5) {
                    var inst_35313 = cljs.core.deref.call(null, mults);
                    var inst_35314 = cljs.core.vals.call(null, inst_35313);
                    var inst_35315 = cljs.core.seq.call(null, inst_35314);
                    var inst_35316 = inst_35315;
                    var inst_35317 = null;
                    var inst_35318 = 0;
                    var inst_35319 = 0;
                    var state_35377__$1 = function() {
                      var statearr_35383 = state_35377;
                      statearr_35383[8] = inst_35319;
                      statearr_35383[9] = inst_35316;
                      statearr_35383[10] = inst_35317;
                      statearr_35383[11] = inst_35318;
                      return statearr_35383;
                    }();
                    var statearr_35384_35429 = state_35377__$1;
                    statearr_35384_35429[2] = null;
                    statearr_35384_35429[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_35378 === 6) {
                      var inst_35354 = state_35377[12];
                      var inst_35356 = state_35377[13];
                      var inst_35306 = state_35377[7];
                      var inst_35354__$1 = topic_fn.call(null, inst_35306);
                      var inst_35355 = cljs.core.deref.call(null, mults);
                      var inst_35356__$1 = cljs.core.get.call(null, inst_35355, inst_35354__$1);
                      var state_35377__$1 = function() {
                        var statearr_35385 = state_35377;
                        statearr_35385[12] = inst_35354__$1;
                        statearr_35385[13] = inst_35356__$1;
                        return statearr_35385;
                      }();
                      if (cljs.core.truth_(inst_35356__$1)) {
                        var statearr_35386_35430 = state_35377__$1;
                        statearr_35386_35430[1] = 19;
                      } else {
                        var statearr_35387_35431 = state_35377__$1;
                        statearr_35387_35431[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35378 === 7) {
                        var inst_35373 = state_35377[2];
                        var state_35377__$1 = state_35377;
                        var statearr_35388_35432 = state_35377__$1;
                        statearr_35388_35432[2] = inst_35373;
                        statearr_35388_35432[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35378 === 8) {
                          var inst_35319 = state_35377[8];
                          var inst_35318 = state_35377[11];
                          var inst_35321 = inst_35319 < inst_35318;
                          var inst_35322 = inst_35321;
                          var state_35377__$1 = state_35377;
                          if (cljs.core.truth_(inst_35322)) {
                            var statearr_35392_35433 = state_35377__$1;
                            statearr_35392_35433[1] = 10;
                          } else {
                            var statearr_35393_35434 = state_35377__$1;
                            statearr_35393_35434[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35378 === 9) {
                            var inst_35352 = state_35377[2];
                            var state_35377__$1 = state_35377;
                            var statearr_35394_35435 = state_35377__$1;
                            statearr_35394_35435[2] = inst_35352;
                            statearr_35394_35435[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_35378 === 10) {
                              var inst_35319 = state_35377[8];
                              var inst_35316 = state_35377[9];
                              var inst_35317 = state_35377[10];
                              var inst_35318 = state_35377[11];
                              var inst_35324 = cljs.core._nth.call(null, inst_35317, inst_35319);
                              var inst_35325 = cljs.core.async.muxch_STAR_.call(null, inst_35324);
                              var inst_35326 = cljs.core.async.close_BANG_.call(null, inst_35325);
                              var inst_35327 = inst_35319 + 1;
                              var tmp35389 = inst_35316;
                              var tmp35390 = inst_35317;
                              var tmp35391 = inst_35318;
                              var inst_35316__$1 = tmp35389;
                              var inst_35317__$1 = tmp35390;
                              var inst_35318__$1 = tmp35391;
                              var inst_35319__$1 = inst_35327;
                              var state_35377__$1 = function() {
                                var statearr_35395 = state_35377;
                                statearr_35395[8] = inst_35319__$1;
                                statearr_35395[14] = inst_35326;
                                statearr_35395[9] = inst_35316__$1;
                                statearr_35395[10] = inst_35317__$1;
                                statearr_35395[11] = inst_35318__$1;
                                return statearr_35395;
                              }();
                              var statearr_35396_35436 = state_35377__$1;
                              statearr_35396_35436[2] = null;
                              statearr_35396_35436[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35378 === 11) {
                                var inst_35330 = state_35377[15];
                                var inst_35316 = state_35377[9];
                                var inst_35330__$1 = cljs.core.seq.call(null, inst_35316);
                                var state_35377__$1 = function() {
                                  var statearr_35397 = state_35377;
                                  statearr_35397[15] = inst_35330__$1;
                                  return statearr_35397;
                                }();
                                if (inst_35330__$1) {
                                  var statearr_35398_35437 = state_35377__$1;
                                  statearr_35398_35437[1] = 13;
                                } else {
                                  var statearr_35399_35438 = state_35377__$1;
                                  statearr_35399_35438[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_35378 === 12) {
                                  var inst_35350 = state_35377[2];
                                  var state_35377__$1 = state_35377;
                                  var statearr_35400_35439 = state_35377__$1;
                                  statearr_35400_35439[2] = inst_35350;
                                  statearr_35400_35439[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_35378 === 13) {
                                    var inst_35330 = state_35377[15];
                                    var inst_35332 = cljs.core.chunked_seq_QMARK_.call(null, inst_35330);
                                    var state_35377__$1 = state_35377;
                                    if (inst_35332) {
                                      var statearr_35401_35440 = state_35377__$1;
                                      statearr_35401_35440[1] = 16;
                                    } else {
                                      var statearr_35402_35441 = state_35377__$1;
                                      statearr_35402_35441[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_35378 === 14) {
                                      var state_35377__$1 = state_35377;
                                      var statearr_35403_35442 = state_35377__$1;
                                      statearr_35403_35442[2] = null;
                                      statearr_35403_35442[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_35378 === 15) {
                                        var inst_35348 = state_35377[2];
                                        var state_35377__$1 = state_35377;
                                        var statearr_35404_35443 = state_35377__$1;
                                        statearr_35404_35443[2] = inst_35348;
                                        statearr_35404_35443[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_35378 === 16) {
                                          var inst_35330 = state_35377[15];
                                          var inst_35334 = cljs.core.chunk_first.call(null, inst_35330);
                                          var inst_35335 = cljs.core.chunk_rest.call(null, inst_35330);
                                          var inst_35336 = cljs.core.count.call(null, inst_35334);
                                          var inst_35316 = inst_35335;
                                          var inst_35317 = inst_35334;
                                          var inst_35318 = inst_35336;
                                          var inst_35319 = 0;
                                          var state_35377__$1 = function() {
                                            var statearr_35405 = state_35377;
                                            statearr_35405[8] = inst_35319;
                                            statearr_35405[9] = inst_35316;
                                            statearr_35405[10] = inst_35317;
                                            statearr_35405[11] = inst_35318;
                                            return statearr_35405;
                                          }();
                                          var statearr_35406_35444 = state_35377__$1;
                                          statearr_35406_35444[2] = null;
                                          statearr_35406_35444[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_35378 === 17) {
                                            var inst_35330 = state_35377[15];
                                            var inst_35339 = cljs.core.first.call(null, inst_35330);
                                            var inst_35340 = cljs.core.async.muxch_STAR_.call(null, inst_35339);
                                            var inst_35341 = cljs.core.async.close_BANG_.call(null, inst_35340);
                                            var inst_35342 = cljs.core.next.call(null, inst_35330);
                                            var inst_35316 = inst_35342;
                                            var inst_35317 = null;
                                            var inst_35318 = 0;
                                            var inst_35319 = 0;
                                            var state_35377__$1 = function() {
                                              var statearr_35407 = state_35377;
                                              statearr_35407[8] = inst_35319;
                                              statearr_35407[16] = inst_35341;
                                              statearr_35407[9] = inst_35316;
                                              statearr_35407[10] = inst_35317;
                                              statearr_35407[11] = inst_35318;
                                              return statearr_35407;
                                            }();
                                            var statearr_35408_35445 = state_35377__$1;
                                            statearr_35408_35445[2] = null;
                                            statearr_35408_35445[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_35378 === 18) {
                                              var inst_35345 = state_35377[2];
                                              var state_35377__$1 = state_35377;
                                              var statearr_35409_35446 = state_35377__$1;
                                              statearr_35409_35446[2] = inst_35345;
                                              statearr_35409_35446[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_35378 === 19) {
                                                var state_35377__$1 = state_35377;
                                                var statearr_35410_35447 = state_35377__$1;
                                                statearr_35410_35447[2] = null;
                                                statearr_35410_35447[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_35378 === 20) {
                                                  var state_35377__$1 = state_35377;
                                                  var statearr_35411_35448 = state_35377__$1;
                                                  statearr_35411_35448[2] = null;
                                                  statearr_35411_35448[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_35378 === 21) {
                                                    var inst_35370 = state_35377[2];
                                                    var state_35377__$1 = function() {
                                                      var statearr_35412 = state_35377;
                                                      statearr_35412[17] = inst_35370;
                                                      return statearr_35412;
                                                    }();
                                                    var statearr_35413_35449 = state_35377__$1;
                                                    statearr_35413_35449[2] = null;
                                                    statearr_35413_35449[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_35378 === 22) {
                                                      var inst_35367 = state_35377[2];
                                                      var state_35377__$1 = state_35377;
                                                      var statearr_35414_35450 = state_35377__$1;
                                                      statearr_35414_35450[2] = inst_35367;
                                                      statearr_35414_35450[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_35378 === 23) {
                                                        var inst_35354 = state_35377[12];
                                                        var inst_35358 = state_35377[2];
                                                        var inst_35359 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_35354);
                                                        var state_35377__$1 = function() {
                                                          var statearr_35415 = state_35377;
                                                          statearr_35415[18] = inst_35358;
                                                          return statearr_35415;
                                                        }();
                                                        var statearr_35416_35451 = state_35377__$1;
                                                        statearr_35416_35451[2] = inst_35359;
                                                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35377__$1);
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_35378 === 24) {
                                                          var inst_35356 = state_35377[13];
                                                          var inst_35306 = state_35377[7];
                                                          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_35377, 23, Object, null, 22);
                                                          var inst_35363 = cljs.core.async.muxch_STAR_.call(null, inst_35356);
                                                          var state_35377__$1 = state_35377;
                                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35377__$1, 25, inst_35363, inst_35306);
                                                        } else {
                                                          if (state_val_35378 === 25) {
                                                            var inst_35365 = state_35377[2];
                                                            var state_35377__$1 = state_35377;
                                                            var statearr_35417_35452 = state_35377__$1;
                                                            statearr_35417_35452[2] = inst_35365;
                                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35377__$1);
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_35421 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_35421[0] = state_machine__13884__auto__;
              statearr_35421[1] = 1;
              return statearr_35421;
            };
            var state_machine__13884__auto____1 = function(state_35377) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_35377);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e35422) {
                    if (e35422 instanceof Object) {
                      var ex__13887__auto__ = e35422;
                      var statearr_35423_35453 = state_35377;
                      statearr_35423_35453[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35377);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35422;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35454 = state_35377;
                  state_35377 = G__35454;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_35377) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_35377);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_35424 = f__13954__auto__.call(null);
        statearr_35424[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___35425;
        return statearr_35424;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__13953__auto___35591 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_35561) {
          var state_val_35562 = state_35561[1];
          if (state_val_35562 === 1) {
            var state_35561__$1 = state_35561;
            var statearr_35563_35592 = state_35561__$1;
            statearr_35563_35592[2] = null;
            statearr_35563_35592[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35562 === 2) {
              var inst_35524 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_35525 = 0;
              var state_35561__$1 = function() {
                var statearr_35564 = state_35561;
                statearr_35564[7] = inst_35524;
                statearr_35564[8] = inst_35525;
                return statearr_35564;
              }();
              var statearr_35565_35593 = state_35561__$1;
              statearr_35565_35593[2] = null;
              statearr_35565_35593[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_35562 === 3) {
                var inst_35559 = state_35561[2];
                var state_35561__$1 = state_35561;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35561__$1, inst_35559);
              } else {
                if (state_val_35562 === 4) {
                  var inst_35525 = state_35561[8];
                  var inst_35527 = inst_35525 < cnt;
                  var state_35561__$1 = state_35561;
                  if (cljs.core.truth_(inst_35527)) {
                    var statearr_35566_35594 = state_35561__$1;
                    statearr_35566_35594[1] = 6;
                  } else {
                    var statearr_35567_35595 = state_35561__$1;
                    statearr_35567_35595[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_35562 === 5) {
                    var inst_35545 = state_35561[2];
                    var state_35561__$1 = function() {
                      var statearr_35568 = state_35561;
                      statearr_35568[9] = inst_35545;
                      return statearr_35568;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35561__$1, 12, dchan);
                  } else {
                    if (state_val_35562 === 6) {
                      var state_35561__$1 = state_35561;
                      var statearr_35569_35596 = state_35561__$1;
                      statearr_35569_35596[2] = null;
                      statearr_35569_35596[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35562 === 7) {
                        var state_35561__$1 = state_35561;
                        var statearr_35570_35597 = state_35561__$1;
                        statearr_35570_35597[2] = null;
                        statearr_35570_35597[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35562 === 8) {
                          var inst_35543 = state_35561[2];
                          var state_35561__$1 = state_35561;
                          var statearr_35571_35598 = state_35561__$1;
                          statearr_35571_35598[2] = inst_35543;
                          statearr_35571_35598[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35562 === 9) {
                            var inst_35525 = state_35561[8];
                            var inst_35538 = state_35561[2];
                            var inst_35539 = inst_35525 + 1;
                            var inst_35525__$1 = inst_35539;
                            var state_35561__$1 = function() {
                              var statearr_35572 = state_35561;
                              statearr_35572[10] = inst_35538;
                              statearr_35572[8] = inst_35525__$1;
                              return statearr_35572;
                            }();
                            var statearr_35573_35599 = state_35561__$1;
                            statearr_35573_35599[2] = null;
                            statearr_35573_35599[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_35562 === 10) {
                              var inst_35529 = state_35561[2];
                              var inst_35530 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_35561__$1 = function() {
                                var statearr_35574 = state_35561;
                                statearr_35574[11] = inst_35529;
                                return statearr_35574;
                              }();
                              var statearr_35575_35600 = state_35561__$1;
                              statearr_35575_35600[2] = inst_35530;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35561__$1);
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35562 === 11) {
                                var inst_35525 = state_35561[8];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_35561, 10, Object, null, 9);
                                var inst_35534 = chs__$1.call(null, inst_35525);
                                var inst_35535 = done.call(null, inst_35525);
                                var inst_35536 = cljs.core.async.take_BANG_.call(null, inst_35534, inst_35535);
                                var state_35561__$1 = state_35561;
                                var statearr_35576_35601 = state_35561__$1;
                                statearr_35576_35601[2] = inst_35536;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35561__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_35562 === 12) {
                                  var inst_35547 = state_35561[12];
                                  var inst_35547__$1 = state_35561[2];
                                  var inst_35548 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_35547__$1);
                                  var state_35561__$1 = function() {
                                    var statearr_35577 = state_35561;
                                    statearr_35577[12] = inst_35547__$1;
                                    return statearr_35577;
                                  }();
                                  if (cljs.core.truth_(inst_35548)) {
                                    var statearr_35578_35602 = state_35561__$1;
                                    statearr_35578_35602[1] = 13;
                                  } else {
                                    var statearr_35579_35603 = state_35561__$1;
                                    statearr_35579_35603[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_35562 === 13) {
                                    var inst_35550 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_35561__$1 = state_35561;
                                    var statearr_35580_35604 = state_35561__$1;
                                    statearr_35580_35604[2] = inst_35550;
                                    statearr_35580_35604[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_35562 === 14) {
                                      var inst_35547 = state_35561[12];
                                      var inst_35552 = cljs.core.apply.call(null, f, inst_35547);
                                      var state_35561__$1 = state_35561;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35561__$1, 16, out, inst_35552);
                                    } else {
                                      if (state_val_35562 === 15) {
                                        var inst_35557 = state_35561[2];
                                        var state_35561__$1 = state_35561;
                                        var statearr_35581_35605 = state_35561__$1;
                                        statearr_35581_35605[2] = inst_35557;
                                        statearr_35581_35605[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_35562 === 16) {
                                          var inst_35554 = state_35561[2];
                                          var state_35561__$1 = function() {
                                            var statearr_35582 = state_35561;
                                            statearr_35582[13] = inst_35554;
                                            return statearr_35582;
                                          }();
                                          var statearr_35583_35606 = state_35561__$1;
                                          statearr_35583_35606[2] = null;
                                          statearr_35583_35606[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_35587 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_35587[0] = state_machine__13884__auto__;
              statearr_35587[1] = 1;
              return statearr_35587;
            };
            var state_machine__13884__auto____1 = function(state_35561) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_35561);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e35588) {
                    if (e35588 instanceof Object) {
                      var ex__13887__auto__ = e35588;
                      var statearr_35589_35607 = state_35561;
                      statearr_35589_35607[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35561);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35588;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35608 = state_35561;
                  state_35561 = G__35608;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_35561) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_35561);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_35590 = f__13954__auto__.call(null);
        statearr_35590[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___35591;
        return statearr_35590;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13953__auto___35716 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_35692) {
          var state_val_35693 = state_35692[1];
          if (state_val_35693 === 1) {
            var inst_35663 = cljs.core.vec.call(null, chs);
            var inst_35664 = inst_35663;
            var state_35692__$1 = function() {
              var statearr_35694 = state_35692;
              statearr_35694[7] = inst_35664;
              return statearr_35694;
            }();
            var statearr_35695_35717 = state_35692__$1;
            statearr_35695_35717[2] = null;
            statearr_35695_35717[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35693 === 2) {
              var inst_35664 = state_35692[7];
              var inst_35666 = cljs.core.count.call(null, inst_35664);
              var inst_35667 = inst_35666 > 0;
              var state_35692__$1 = state_35692;
              if (cljs.core.truth_(inst_35667)) {
                var statearr_35696_35718 = state_35692__$1;
                statearr_35696_35718[1] = 4;
              } else {
                var statearr_35697_35719 = state_35692__$1;
                statearr_35697_35719[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_35693 === 3) {
                var inst_35690 = state_35692[2];
                var state_35692__$1 = state_35692;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35692__$1, inst_35690);
              } else {
                if (state_val_35693 === 4) {
                  var inst_35664 = state_35692[7];
                  var state_35692__$1 = state_35692;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_35692__$1, 7, inst_35664);
                } else {
                  if (state_val_35693 === 5) {
                    var inst_35686 = cljs.core.async.close_BANG_.call(null, out);
                    var state_35692__$1 = state_35692;
                    var statearr_35698_35720 = state_35692__$1;
                    statearr_35698_35720[2] = inst_35686;
                    statearr_35698_35720[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_35693 === 6) {
                      var inst_35688 = state_35692[2];
                      var state_35692__$1 = state_35692;
                      var statearr_35699_35721 = state_35692__$1;
                      statearr_35699_35721[2] = inst_35688;
                      statearr_35699_35721[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35693 === 7) {
                        var inst_35672 = state_35692[8];
                        var inst_35671 = state_35692[9];
                        var inst_35671__$1 = state_35692[2];
                        var inst_35672__$1 = cljs.core.nth.call(null, inst_35671__$1, 0, null);
                        var inst_35673 = cljs.core.nth.call(null, inst_35671__$1, 1, null);
                        var inst_35674 = inst_35672__$1 == null;
                        var state_35692__$1 = function() {
                          var statearr_35700 = state_35692;
                          statearr_35700[8] = inst_35672__$1;
                          statearr_35700[10] = inst_35673;
                          statearr_35700[9] = inst_35671__$1;
                          return statearr_35700;
                        }();
                        if (cljs.core.truth_(inst_35674)) {
                          var statearr_35701_35722 = state_35692__$1;
                          statearr_35701_35722[1] = 8;
                        } else {
                          var statearr_35702_35723 = state_35692__$1;
                          statearr_35702_35723[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35693 === 8) {
                          var inst_35664 = state_35692[7];
                          var inst_35672 = state_35692[8];
                          var inst_35673 = state_35692[10];
                          var inst_35671 = state_35692[9];
                          var inst_35676 = function() {
                            var c = inst_35673;
                            var v = inst_35672;
                            var vec__35669 = inst_35671;
                            var cs = inst_35664;
                            return function(c, v, vec__35669, cs, inst_35664, inst_35672, inst_35673, inst_35671, state_val_35693) {
                              return function(p1__35609_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__35609_SHARP_);
                              };
                            }(c, v, vec__35669, cs, inst_35664, inst_35672, inst_35673, inst_35671, state_val_35693);
                          }();
                          var inst_35677 = cljs.core.filterv.call(null, inst_35676, inst_35664);
                          var inst_35664__$1 = inst_35677;
                          var state_35692__$1 = function() {
                            var statearr_35703 = state_35692;
                            statearr_35703[7] = inst_35664__$1;
                            return statearr_35703;
                          }();
                          var statearr_35704_35724 = state_35692__$1;
                          statearr_35704_35724[2] = null;
                          statearr_35704_35724[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35693 === 9) {
                            var inst_35672 = state_35692[8];
                            var state_35692__$1 = state_35692;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35692__$1, 11, out, inst_35672);
                          } else {
                            if (state_val_35693 === 10) {
                              var inst_35684 = state_35692[2];
                              var state_35692__$1 = state_35692;
                              var statearr_35706_35725 = state_35692__$1;
                              statearr_35706_35725[2] = inst_35684;
                              statearr_35706_35725[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35693 === 11) {
                                var inst_35664 = state_35692[7];
                                var inst_35681 = state_35692[2];
                                var tmp35705 = inst_35664;
                                var inst_35664__$1 = tmp35705;
                                var state_35692__$1 = function() {
                                  var statearr_35707 = state_35692;
                                  statearr_35707[7] = inst_35664__$1;
                                  statearr_35707[11] = inst_35681;
                                  return statearr_35707;
                                }();
                                var statearr_35708_35726 = state_35692__$1;
                                statearr_35708_35726[2] = null;
                                statearr_35708_35726[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_35712 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_35712[0] = state_machine__13884__auto__;
              statearr_35712[1] = 1;
              return statearr_35712;
            };
            var state_machine__13884__auto____1 = function(state_35692) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_35692);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e35713) {
                    if (e35713 instanceof Object) {
                      var ex__13887__auto__ = e35713;
                      var statearr_35714_35727 = state_35692;
                      statearr_35714_35727[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35692);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35713;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35728 = state_35692;
                  state_35692 = G__35728;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_35692) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_35692);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_35715 = f__13954__auto__.call(null);
        statearr_35715[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___35716;
        return statearr_35715;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13953__auto___35821 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_35798) {
          var state_val_35799 = state_35798[1];
          if (state_val_35799 === 1) {
            var inst_35775 = 0;
            var state_35798__$1 = function() {
              var statearr_35800 = state_35798;
              statearr_35800[7] = inst_35775;
              return statearr_35800;
            }();
            var statearr_35801_35822 = state_35798__$1;
            statearr_35801_35822[2] = null;
            statearr_35801_35822[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35799 === 2) {
              var inst_35775 = state_35798[7];
              var inst_35777 = inst_35775 < n;
              var state_35798__$1 = state_35798;
              if (cljs.core.truth_(inst_35777)) {
                var statearr_35802_35823 = state_35798__$1;
                statearr_35802_35823[1] = 4;
              } else {
                var statearr_35803_35824 = state_35798__$1;
                statearr_35803_35824[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_35799 === 3) {
                var inst_35795 = state_35798[2];
                var inst_35796 = cljs.core.async.close_BANG_.call(null, out);
                var state_35798__$1 = function() {
                  var statearr_35804 = state_35798;
                  statearr_35804[8] = inst_35795;
                  return statearr_35804;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35798__$1, inst_35796);
              } else {
                if (state_val_35799 === 4) {
                  var state_35798__$1 = state_35798;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35798__$1, 7, ch);
                } else {
                  if (state_val_35799 === 5) {
                    var state_35798__$1 = state_35798;
                    var statearr_35805_35825 = state_35798__$1;
                    statearr_35805_35825[2] = null;
                    statearr_35805_35825[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_35799 === 6) {
                      var inst_35793 = state_35798[2];
                      var state_35798__$1 = state_35798;
                      var statearr_35806_35826 = state_35798__$1;
                      statearr_35806_35826[2] = inst_35793;
                      statearr_35806_35826[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35799 === 7) {
                        var inst_35780 = state_35798[9];
                        var inst_35780__$1 = state_35798[2];
                        var inst_35781 = inst_35780__$1 == null;
                        var inst_35782 = cljs.core.not.call(null, inst_35781);
                        var state_35798__$1 = function() {
                          var statearr_35807 = state_35798;
                          statearr_35807[9] = inst_35780__$1;
                          return statearr_35807;
                        }();
                        if (inst_35782) {
                          var statearr_35808_35827 = state_35798__$1;
                          statearr_35808_35827[1] = 8;
                        } else {
                          var statearr_35809_35828 = state_35798__$1;
                          statearr_35809_35828[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35799 === 8) {
                          var inst_35780 = state_35798[9];
                          var state_35798__$1 = state_35798;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35798__$1, 11, out, inst_35780);
                        } else {
                          if (state_val_35799 === 9) {
                            var state_35798__$1 = state_35798;
                            var statearr_35810_35829 = state_35798__$1;
                            statearr_35810_35829[2] = null;
                            statearr_35810_35829[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_35799 === 10) {
                              var inst_35790 = state_35798[2];
                              var state_35798__$1 = state_35798;
                              var statearr_35811_35830 = state_35798__$1;
                              statearr_35811_35830[2] = inst_35790;
                              statearr_35811_35830[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35799 === 11) {
                                var inst_35775 = state_35798[7];
                                var inst_35785 = state_35798[2];
                                var inst_35786 = inst_35775 + 1;
                                var inst_35775__$1 = inst_35786;
                                var state_35798__$1 = function() {
                                  var statearr_35812 = state_35798;
                                  statearr_35812[10] = inst_35785;
                                  statearr_35812[7] = inst_35775__$1;
                                  return statearr_35812;
                                }();
                                var statearr_35813_35831 = state_35798__$1;
                                statearr_35813_35831[2] = null;
                                statearr_35813_35831[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_35817 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_35817[0] = state_machine__13884__auto__;
              statearr_35817[1] = 1;
              return statearr_35817;
            };
            var state_machine__13884__auto____1 = function(state_35798) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_35798);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e35818) {
                    if (e35818 instanceof Object) {
                      var ex__13887__auto__ = e35818;
                      var statearr_35819_35832 = state_35798;
                      statearr_35819_35832[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35798);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35818;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35833 = state_35798;
                  state_35798 = G__35833;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_35798) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_35798);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_35820 = f__13954__auto__.call(null);
        statearr_35820[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___35821;
        return statearr_35820;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13953__auto___35930 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_35905) {
          var state_val_35906 = state_35905[1];
          if (state_val_35906 === 1) {
            var inst_35882 = null;
            var state_35905__$1 = function() {
              var statearr_35907 = state_35905;
              statearr_35907[7] = inst_35882;
              return statearr_35907;
            }();
            var statearr_35908_35931 = state_35905__$1;
            statearr_35908_35931[2] = null;
            statearr_35908_35931[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_35906 === 2) {
              var state_35905__$1 = state_35905;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_35905__$1, 4, ch);
            } else {
              if (state_val_35906 === 3) {
                var inst_35902 = state_35905[2];
                var inst_35903 = cljs.core.async.close_BANG_.call(null, out);
                var state_35905__$1 = function() {
                  var statearr_35909 = state_35905;
                  statearr_35909[8] = inst_35902;
                  return statearr_35909;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_35905__$1, inst_35903);
              } else {
                if (state_val_35906 === 4) {
                  var inst_35885 = state_35905[9];
                  var inst_35885__$1 = state_35905[2];
                  var inst_35886 = inst_35885__$1 == null;
                  var inst_35887 = cljs.core.not.call(null, inst_35886);
                  var state_35905__$1 = function() {
                    var statearr_35910 = state_35905;
                    statearr_35910[9] = inst_35885__$1;
                    return statearr_35910;
                  }();
                  if (inst_35887) {
                    var statearr_35911_35932 = state_35905__$1;
                    statearr_35911_35932[1] = 5;
                  } else {
                    var statearr_35912_35933 = state_35905__$1;
                    statearr_35912_35933[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_35906 === 5) {
                    var inst_35885 = state_35905[9];
                    var inst_35882 = state_35905[7];
                    var inst_35889 = cljs.core._EQ_.call(null, inst_35885, inst_35882);
                    var state_35905__$1 = state_35905;
                    if (inst_35889) {
                      var statearr_35913_35934 = state_35905__$1;
                      statearr_35913_35934[1] = 8;
                    } else {
                      var statearr_35914_35935 = state_35905__$1;
                      statearr_35914_35935[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_35906 === 6) {
                      var state_35905__$1 = state_35905;
                      var statearr_35916_35936 = state_35905__$1;
                      statearr_35916_35936[2] = null;
                      statearr_35916_35936[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_35906 === 7) {
                        var inst_35900 = state_35905[2];
                        var state_35905__$1 = state_35905;
                        var statearr_35917_35937 = state_35905__$1;
                        statearr_35917_35937[2] = inst_35900;
                        statearr_35917_35937[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_35906 === 8) {
                          var inst_35882 = state_35905[7];
                          var tmp35915 = inst_35882;
                          var inst_35882__$1 = tmp35915;
                          var state_35905__$1 = function() {
                            var statearr_35918 = state_35905;
                            statearr_35918[7] = inst_35882__$1;
                            return statearr_35918;
                          }();
                          var statearr_35919_35938 = state_35905__$1;
                          statearr_35919_35938[2] = null;
                          statearr_35919_35938[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_35906 === 9) {
                            var inst_35885 = state_35905[9];
                            var state_35905__$1 = state_35905;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_35905__$1, 11, out, inst_35885);
                          } else {
                            if (state_val_35906 === 10) {
                              var inst_35897 = state_35905[2];
                              var state_35905__$1 = state_35905;
                              var statearr_35920_35939 = state_35905__$1;
                              statearr_35920_35939[2] = inst_35897;
                              statearr_35920_35939[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_35906 === 11) {
                                var inst_35885 = state_35905[9];
                                var inst_35894 = state_35905[2];
                                var inst_35882 = inst_35885;
                                var state_35905__$1 = function() {
                                  var statearr_35921 = state_35905;
                                  statearr_35921[10] = inst_35894;
                                  statearr_35921[7] = inst_35882;
                                  return statearr_35921;
                                }();
                                var statearr_35922_35940 = state_35905__$1;
                                statearr_35922_35940[2] = null;
                                statearr_35922_35940[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_35926 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_35926[0] = state_machine__13884__auto__;
              statearr_35926[1] = 1;
              return statearr_35926;
            };
            var state_machine__13884__auto____1 = function(state_35905) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_35905);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e35927) {
                    if (e35927 instanceof Object) {
                      var ex__13887__auto__ = e35927;
                      var statearr_35928_35941 = state_35905;
                      statearr_35928_35941[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_35905);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e35927;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__35942 = state_35905;
                  state_35905 = G__35942;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_35905) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_35905);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_35929 = f__13954__auto__.call(null);
        statearr_35929[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___35930;
        return statearr_35929;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13953__auto___36077 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_36047) {
          var state_val_36048 = state_36047[1];
          if (state_val_36048 === 1) {
            var inst_36010 = new Array(n);
            var inst_36011 = inst_36010;
            var inst_36012 = 0;
            var state_36047__$1 = function() {
              var statearr_36049 = state_36047;
              statearr_36049[7] = inst_36011;
              statearr_36049[8] = inst_36012;
              return statearr_36049;
            }();
            var statearr_36050_36078 = state_36047__$1;
            statearr_36050_36078[2] = null;
            statearr_36050_36078[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_36048 === 2) {
              var state_36047__$1 = state_36047;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_36047__$1, 4, ch);
            } else {
              if (state_val_36048 === 3) {
                var inst_36045 = state_36047[2];
                var state_36047__$1 = state_36047;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_36047__$1, inst_36045);
              } else {
                if (state_val_36048 === 4) {
                  var inst_36015 = state_36047[9];
                  var inst_36015__$1 = state_36047[2];
                  var inst_36016 = inst_36015__$1 == null;
                  var inst_36017 = cljs.core.not.call(null, inst_36016);
                  var state_36047__$1 = function() {
                    var statearr_36051 = state_36047;
                    statearr_36051[9] = inst_36015__$1;
                    return statearr_36051;
                  }();
                  if (inst_36017) {
                    var statearr_36052_36079 = state_36047__$1;
                    statearr_36052_36079[1] = 5;
                  } else {
                    var statearr_36053_36080 = state_36047__$1;
                    statearr_36053_36080[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_36048 === 5) {
                    var inst_36020 = state_36047[10];
                    var inst_36015 = state_36047[9];
                    var inst_36011 = state_36047[7];
                    var inst_36012 = state_36047[8];
                    var inst_36019 = inst_36011[inst_36012] = inst_36015;
                    var inst_36020__$1 = inst_36012 + 1;
                    var inst_36021 = inst_36020__$1 < n;
                    var state_36047__$1 = function() {
                      var statearr_36054 = state_36047;
                      statearr_36054[10] = inst_36020__$1;
                      statearr_36054[11] = inst_36019;
                      return statearr_36054;
                    }();
                    if (cljs.core.truth_(inst_36021)) {
                      var statearr_36055_36081 = state_36047__$1;
                      statearr_36055_36081[1] = 8;
                    } else {
                      var statearr_36056_36082 = state_36047__$1;
                      statearr_36056_36082[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_36048 === 6) {
                      var inst_36012 = state_36047[8];
                      var inst_36033 = inst_36012 > 0;
                      var state_36047__$1 = state_36047;
                      if (cljs.core.truth_(inst_36033)) {
                        var statearr_36058_36083 = state_36047__$1;
                        statearr_36058_36083[1] = 12;
                      } else {
                        var statearr_36059_36084 = state_36047__$1;
                        statearr_36059_36084[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_36048 === 7) {
                        var inst_36043 = state_36047[2];
                        var state_36047__$1 = state_36047;
                        var statearr_36060_36085 = state_36047__$1;
                        statearr_36060_36085[2] = inst_36043;
                        statearr_36060_36085[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_36048 === 8) {
                          var inst_36020 = state_36047[10];
                          var inst_36011 = state_36047[7];
                          var tmp36057 = inst_36011;
                          var inst_36011__$1 = tmp36057;
                          var inst_36012 = inst_36020;
                          var state_36047__$1 = function() {
                            var statearr_36061 = state_36047;
                            statearr_36061[7] = inst_36011__$1;
                            statearr_36061[8] = inst_36012;
                            return statearr_36061;
                          }();
                          var statearr_36062_36086 = state_36047__$1;
                          statearr_36062_36086[2] = null;
                          statearr_36062_36086[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_36048 === 9) {
                            var inst_36011 = state_36047[7];
                            var inst_36025 = cljs.core.vec.call(null, inst_36011);
                            var state_36047__$1 = state_36047;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36047__$1, 11, out, inst_36025);
                          } else {
                            if (state_val_36048 === 10) {
                              var inst_36031 = state_36047[2];
                              var state_36047__$1 = state_36047;
                              var statearr_36063_36087 = state_36047__$1;
                              statearr_36063_36087[2] = inst_36031;
                              statearr_36063_36087[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_36048 === 11) {
                                var inst_36027 = state_36047[2];
                                var inst_36028 = new Array(n);
                                var inst_36011 = inst_36028;
                                var inst_36012 = 0;
                                var state_36047__$1 = function() {
                                  var statearr_36064 = state_36047;
                                  statearr_36064[12] = inst_36027;
                                  statearr_36064[7] = inst_36011;
                                  statearr_36064[8] = inst_36012;
                                  return statearr_36064;
                                }();
                                var statearr_36065_36088 = state_36047__$1;
                                statearr_36065_36088[2] = null;
                                statearr_36065_36088[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_36048 === 12) {
                                  var inst_36011 = state_36047[7];
                                  var inst_36035 = cljs.core.vec.call(null, inst_36011);
                                  var state_36047__$1 = state_36047;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36047__$1, 15, out, inst_36035);
                                } else {
                                  if (state_val_36048 === 13) {
                                    var state_36047__$1 = state_36047;
                                    var statearr_36066_36089 = state_36047__$1;
                                    statearr_36066_36089[2] = null;
                                    statearr_36066_36089[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_36048 === 14) {
                                      var inst_36040 = state_36047[2];
                                      var inst_36041 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_36047__$1 = function() {
                                        var statearr_36067 = state_36047;
                                        statearr_36067[13] = inst_36040;
                                        return statearr_36067;
                                      }();
                                      var statearr_36068_36090 = state_36047__$1;
                                      statearr_36068_36090[2] = inst_36041;
                                      statearr_36068_36090[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_36048 === 15) {
                                        var inst_36037 = state_36047[2];
                                        var state_36047__$1 = state_36047;
                                        var statearr_36069_36091 = state_36047__$1;
                                        statearr_36069_36091[2] = inst_36037;
                                        statearr_36069_36091[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_36073 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_36073[0] = state_machine__13884__auto__;
              statearr_36073[1] = 1;
              return statearr_36073;
            };
            var state_machine__13884__auto____1 = function(state_36047) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_36047);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e36074) {
                    if (e36074 instanceof Object) {
                      var ex__13887__auto__ = e36074;
                      var statearr_36075_36092 = state_36047;
                      statearr_36075_36092[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36047);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e36074;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__36093 = state_36047;
                  state_36047 = G__36093;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_36047) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_36047);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_36076 = f__13954__auto__.call(null);
        statearr_36076[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___36077;
        return statearr_36076;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13953__auto___36236 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13954__auto__ = function() {
        var switch__13883__auto__ = function(state_36206) {
          var state_val_36207 = state_36206[1];
          if (state_val_36207 === 1) {
            var inst_36165 = [];
            var inst_36166 = inst_36165;
            var inst_36167 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
            var state_36206__$1 = function() {
              var statearr_36208 = state_36206;
              statearr_36208[7] = inst_36167;
              statearr_36208[8] = inst_36166;
              return statearr_36208;
            }();
            var statearr_36209_36237 = state_36206__$1;
            statearr_36209_36237[2] = null;
            statearr_36209_36237[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_36207 === 2) {
              var state_36206__$1 = state_36206;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_36206__$1, 4, ch);
            } else {
              if (state_val_36207 === 3) {
                var inst_36204 = state_36206[2];
                var state_36206__$1 = state_36206;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_36206__$1, inst_36204);
              } else {
                if (state_val_36207 === 4) {
                  var inst_36170 = state_36206[9];
                  var inst_36170__$1 = state_36206[2];
                  var inst_36171 = inst_36170__$1 == null;
                  var inst_36172 = cljs.core.not.call(null, inst_36171);
                  var state_36206__$1 = function() {
                    var statearr_36210 = state_36206;
                    statearr_36210[9] = inst_36170__$1;
                    return statearr_36210;
                  }();
                  if (inst_36172) {
                    var statearr_36211_36238 = state_36206__$1;
                    statearr_36211_36238[1] = 5;
                  } else {
                    var statearr_36212_36239 = state_36206__$1;
                    statearr_36212_36239[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_36207 === 5) {
                    var inst_36170 = state_36206[9];
                    var inst_36167 = state_36206[7];
                    var inst_36174 = state_36206[10];
                    var inst_36174__$1 = f.call(null, inst_36170);
                    var inst_36175 = cljs.core._EQ_.call(null, inst_36174__$1, inst_36167);
                    var inst_36176 = cljs.core.keyword_identical_QMARK_.call(null, inst_36167, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                    var inst_36177 = inst_36175 || inst_36176;
                    var state_36206__$1 = function() {
                      var statearr_36213 = state_36206;
                      statearr_36213[10] = inst_36174__$1;
                      return statearr_36213;
                    }();
                    if (cljs.core.truth_(inst_36177)) {
                      var statearr_36214_36240 = state_36206__$1;
                      statearr_36214_36240[1] = 8;
                    } else {
                      var statearr_36215_36241 = state_36206__$1;
                      statearr_36215_36241[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_36207 === 6) {
                      var inst_36166 = state_36206[8];
                      var inst_36191 = inst_36166.length;
                      var inst_36192 = inst_36191 > 0;
                      var state_36206__$1 = state_36206;
                      if (cljs.core.truth_(inst_36192)) {
                        var statearr_36217_36242 = state_36206__$1;
                        statearr_36217_36242[1] = 12;
                      } else {
                        var statearr_36218_36243 = state_36206__$1;
                        statearr_36218_36243[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_36207 === 7) {
                        var inst_36202 = state_36206[2];
                        var state_36206__$1 = state_36206;
                        var statearr_36219_36244 = state_36206__$1;
                        statearr_36219_36244[2] = inst_36202;
                        statearr_36219_36244[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_36207 === 8) {
                          var inst_36170 = state_36206[9];
                          var inst_36166 = state_36206[8];
                          var inst_36174 = state_36206[10];
                          var inst_36179 = inst_36166.push(inst_36170);
                          var tmp36216 = inst_36166;
                          var inst_36166__$1 = tmp36216;
                          var inst_36167 = inst_36174;
                          var state_36206__$1 = function() {
                            var statearr_36220 = state_36206;
                            statearr_36220[7] = inst_36167;
                            statearr_36220[8] = inst_36166__$1;
                            statearr_36220[11] = inst_36179;
                            return statearr_36220;
                          }();
                          var statearr_36221_36245 = state_36206__$1;
                          statearr_36221_36245[2] = null;
                          statearr_36221_36245[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_36207 === 9) {
                            var inst_36166 = state_36206[8];
                            var inst_36182 = cljs.core.vec.call(null, inst_36166);
                            var state_36206__$1 = state_36206;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36206__$1, 11, out, inst_36182);
                          } else {
                            if (state_val_36207 === 10) {
                              var inst_36189 = state_36206[2];
                              var state_36206__$1 = state_36206;
                              var statearr_36222_36246 = state_36206__$1;
                              statearr_36222_36246[2] = inst_36189;
                              statearr_36222_36246[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_36207 === 11) {
                                var inst_36170 = state_36206[9];
                                var inst_36174 = state_36206[10];
                                var inst_36184 = state_36206[2];
                                var inst_36185 = [];
                                var inst_36186 = inst_36185.push(inst_36170);
                                var inst_36166 = inst_36185;
                                var inst_36167 = inst_36174;
                                var state_36206__$1 = function() {
                                  var statearr_36223 = state_36206;
                                  statearr_36223[12] = inst_36184;
                                  statearr_36223[13] = inst_36186;
                                  statearr_36223[7] = inst_36167;
                                  statearr_36223[8] = inst_36166;
                                  return statearr_36223;
                                }();
                                var statearr_36224_36247 = state_36206__$1;
                                statearr_36224_36247[2] = null;
                                statearr_36224_36247[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_36207 === 12) {
                                  var inst_36166 = state_36206[8];
                                  var inst_36194 = cljs.core.vec.call(null, inst_36166);
                                  var state_36206__$1 = state_36206;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_36206__$1, 15, out, inst_36194);
                                } else {
                                  if (state_val_36207 === 13) {
                                    var state_36206__$1 = state_36206;
                                    var statearr_36225_36248 = state_36206__$1;
                                    statearr_36225_36248[2] = null;
                                    statearr_36225_36248[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_36207 === 14) {
                                      var inst_36199 = state_36206[2];
                                      var inst_36200 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_36206__$1 = function() {
                                        var statearr_36226 = state_36206;
                                        statearr_36226[14] = inst_36199;
                                        return statearr_36226;
                                      }();
                                      var statearr_36227_36249 = state_36206__$1;
                                      statearr_36227_36249[2] = inst_36200;
                                      statearr_36227_36249[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_36207 === 15) {
                                        var inst_36196 = state_36206[2];
                                        var state_36206__$1 = state_36206;
                                        var statearr_36228_36250 = state_36206__$1;
                                        statearr_36228_36250[2] = inst_36196;
                                        statearr_36228_36250[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13883__auto__) {
          return function() {
            var state_machine__13884__auto__ = null;
            var state_machine__13884__auto____0 = function() {
              var statearr_36232 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_36232[0] = state_machine__13884__auto__;
              statearr_36232[1] = 1;
              return statearr_36232;
            };
            var state_machine__13884__auto____1 = function(state_36206) {
              while (true) {
                var ret_value__13885__auto__ = function() {
                  try {
                    while (true) {
                      var result__13886__auto__ = switch__13883__auto__.call(null, state_36206);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13886__auto__;
                      }
                      break;
                    }
                  } catch (e36233) {
                    if (e36233 instanceof Object) {
                      var ex__13887__auto__ = e36233;
                      var statearr_36234_36251 = state_36206;
                      statearr_36234_36251[5] = ex__13887__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_36206);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e36233;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__36252 = state_36206;
                  state_36206 = G__36252;
                  continue;
                } else {
                  return ret_value__13885__auto__;
                }
                break;
              }
            };
            state_machine__13884__auto__ = function(state_36206) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13884__auto____0.call(this);
                case 1:
                  return state_machine__13884__auto____1.call(this, state_36206);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
            state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
            return state_machine__13884__auto__;
          }();
        }(switch__13883__auto__);
      }();
      var state__13955__auto__ = function() {
        var statearr_36235 = f__13954__auto__.call(null);
        statearr_36235[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___36236;
        return statearr_36235;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
    });
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.events");
goog.require("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = [];
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (!goog.isArray(type)) {
    goog.events.EventHandler.typeArray_[0] = (type);
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var key = (goog.events.listen(src, type[i], opt_fn || this, opt_capture || false, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var key = (goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  return this.keys_.length;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this));
    if (listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key);
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0;
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.base(this);
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = request.xhrLite = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && (!request.getCompleted() && !request.hasReachedMaxRetries())) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || (xhrIo.isSuccess() || request.hasReachedMaxRetries())) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  var requests = this.requests_;
  goog.structs.forEach(requests, function(value, key) {
    value.dispose();
  });
  requests.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
  this.xhrLite = (xhrIo);
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  goog.Disposable.call(this);
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.inherits(goog.net.XhrManager.Request, goog.Disposable);
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrManager.Request.prototype.disposeInternal = function() {
  goog.net.XhrManager.Request.superClass_.disposeInternal.call(this);
  delete this.xhrEventCallback_;
  delete this.completeCallback_;
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj36424 = {};
  return obj36424;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__10317__auto__ = reader;
    if (and__10317__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__10956__auto__ = reader == null ? null : reader;
    return function() {
      var or__10329__auto__ = cljs.reader.read_char[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.reader.read_char["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__10317__auto__ = reader;
    if (and__10317__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__10956__auto__ = reader == null ? null : reader;
    return function() {
      var or__10329__auto__ = cljs.reader.unread[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.reader.unread["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__10329__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__36425) {
    var rdr = cljs.core.first(arglist__36425);
    var msg = cljs.core.rest(arglist__36425);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__10317__auto__ = !(ch === "#");
  if (and__10317__auto__) {
    var and__10317__auto____$1 = !(ch === "'");
    if (and__10317__auto____$1) {
      var and__10317__auto____$2 = !(ch === ":");
      if (and__10317__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__10317__auto____$2;
      }
    } else {
      return and__10317__auto____$1;
    }
  } else {
    return and__10317__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__36426 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__36427 = cljs.reader.read_char.call(null, rdr);
      sb = G__36426;
      ch = G__36427;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__36428 = cljs.reader.read_char.call(null, rdr);
      ch = G__36428;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__36429 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__36429;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__36430 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__36430;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__10329__auto__ = ch == null;
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__10329__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__36431 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__36432 = cljs.reader.read_char.call(null, reader);
      buffer = G__36431;
      ch = G__36432;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__36433 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__36434 = cljs.reader.read_char.call(null, reader);
        buffer = G__36433;
        ch = G__36434;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__36435 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__36436 = cljs.reader.read_char.call(null, reader);
            buffer = G__36435;
            ch = G__36436;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__36438 = o;
    if (G__36438) {
      var bit__10979__auto__ = G__36438.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__10979__auto__ || G__36438.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__36438.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__36438);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__36438);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__36439 = reader;
        var G__36440 = eof_is_error;
        var G__36441 = sentinel;
        var G__36442 = is_recursive;
        reader = G__36439;
        eof_is_error = G__36440;
        sentinel = G__36441;
        is_recursive = G__36442;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__36443 = cljs.reader.read_comment.call(null, reader, ch);
          var G__36444 = eof_is_error;
          var G__36445 = sentinel;
          var G__36446 = is_recursive;
          reader = G__36443;
          eof_is_error = G__36444;
          sentinel = G__36445;
          is_recursive = G__36446;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__36447 = reader;
              var G__36448 = eof_is_error;
              var G__36449 = sentinel;
              var G__36450 = is_recursive;
              reader = G__36447;
              eof_is_error = G__36448;
              sentinel = G__36449;
              is_recursive = G__36450;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__36451 = b.append("0");
            b = G__36451;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__36453 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__36453, 0, null);
  var years = cljs.core.nth.call(null, vec__36453, 1, null);
  var months = cljs.core.nth.call(null, vec__36453, 2, null);
  var days = cljs.core.nth.call(null, vec__36453, 3, null);
  var hours = cljs.core.nth.call(null, vec__36453, 4, null);
  var minutes = cljs.core.nth.call(null, vec__36453, 5, null);
  var seconds = cljs.core.nth.call(null, vec__36453, 6, null);
  var fraction = cljs.core.nth.call(null, vec__36453, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__36453, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__36453, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__36453, 10, null);
  var v = vec__36453;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__36455 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__36455, 0, null);
    var months = cljs.core.nth.call(null, vec__36455, 1, null);
    var days = cljs.core.nth.call(null, vec__36455, 2, null);
    var hours = cljs.core.nth.call(null, vec__36455, 3, null);
    var minutes = cljs.core.nth.call(null, vec__36455, 4, null);
    var seconds = cljs.core.nth.call(null, vec__36455, 5, null);
    var ms = cljs.core.nth.call(null, vec__36455, 6, null);
    var offset = cljs.core.nth.call(null, vec__36455, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__36468_36480 = cljs.core.seq.call(null, form);
    var chunk__36469_36481 = null;
    var count__36470_36482 = 0;
    var i__36471_36483 = 0;
    while (true) {
      if (i__36471_36483 < count__36470_36482) {
        var x_36484 = cljs.core._nth.call(null, chunk__36469_36481, i__36471_36483);
        arr.push(x_36484);
        var G__36485 = seq__36468_36480;
        var G__36486 = chunk__36469_36481;
        var G__36487 = count__36470_36482;
        var G__36488 = i__36471_36483 + 1;
        seq__36468_36480 = G__36485;
        chunk__36469_36481 = G__36486;
        count__36470_36482 = G__36487;
        i__36471_36483 = G__36488;
        continue;
      } else {
        var temp__4092__auto___36489 = cljs.core.seq.call(null, seq__36468_36480);
        if (temp__4092__auto___36489) {
          var seq__36468_36490__$1 = temp__4092__auto___36489;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__36468_36490__$1)) {
            var c__11077__auto___36491 = cljs.core.chunk_first.call(null, seq__36468_36490__$1);
            var G__36492 = cljs.core.chunk_rest.call(null, seq__36468_36490__$1);
            var G__36493 = c__11077__auto___36491;
            var G__36494 = cljs.core.count.call(null, c__11077__auto___36491);
            var G__36495 = 0;
            seq__36468_36480 = G__36492;
            chunk__36469_36481 = G__36493;
            count__36470_36482 = G__36494;
            i__36471_36483 = G__36495;
            continue;
          } else {
            var x_36496 = cljs.core.first.call(null, seq__36468_36490__$1);
            arr.push(x_36496);
            var G__36497 = cljs.core.next.call(null, seq__36468_36490__$1);
            var G__36498 = null;
            var G__36499 = 0;
            var G__36500 = 0;
            seq__36468_36480 = G__36497;
            chunk__36469_36481 = G__36498;
            count__36470_36482 = G__36499;
            i__36471_36483 = G__36500;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj36473 = {};
        return obj36473;
      }();
      var seq__36474_36501 = cljs.core.seq.call(null, form);
      var chunk__36475_36502 = null;
      var count__36476_36503 = 0;
      var i__36477_36504 = 0;
      while (true) {
        if (i__36477_36504 < count__36476_36503) {
          var vec__36478_36505 = cljs.core._nth.call(null, chunk__36475_36502, i__36477_36504);
          var k_36506 = cljs.core.nth.call(null, vec__36478_36505, 0, null);
          var v_36507 = cljs.core.nth.call(null, vec__36478_36505, 1, null);
          obj[cljs.core.name.call(null, k_36506)] = v_36507;
          var G__36508 = seq__36474_36501;
          var G__36509 = chunk__36475_36502;
          var G__36510 = count__36476_36503;
          var G__36511 = i__36477_36504 + 1;
          seq__36474_36501 = G__36508;
          chunk__36475_36502 = G__36509;
          count__36476_36503 = G__36510;
          i__36477_36504 = G__36511;
          continue;
        } else {
          var temp__4092__auto___36512 = cljs.core.seq.call(null, seq__36474_36501);
          if (temp__4092__auto___36512) {
            var seq__36474_36513__$1 = temp__4092__auto___36512;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__36474_36513__$1)) {
              var c__11077__auto___36514 = cljs.core.chunk_first.call(null, seq__36474_36513__$1);
              var G__36515 = cljs.core.chunk_rest.call(null, seq__36474_36513__$1);
              var G__36516 = c__11077__auto___36514;
              var G__36517 = cljs.core.count.call(null, c__11077__auto___36514);
              var G__36518 = 0;
              seq__36474_36501 = G__36515;
              chunk__36475_36502 = G__36516;
              count__36476_36503 = G__36517;
              i__36477_36504 = G__36518;
              continue;
            } else {
              var vec__36479_36519 = cljs.core.first.call(null, seq__36474_36513__$1);
              var k_36520 = cljs.core.nth.call(null, vec__36479_36519, 0, null);
              var v_36521 = cljs.core.nth.call(null, vec__36479_36519, 1, null);
              obj[cljs.core.name.call(null, k_36520)] = v_36521;
              var G__36522 = cljs.core.next.call(null, seq__36474_36513__$1);
              var G__36523 = null;
              var G__36524 = 0;
              var G__36525 = 0;
              seq__36474_36501 = G__36522;
              chunk__36475_36502 = G__36523;
              count__36476_36503 = G__36524;
              i__36477_36504 = G__36525;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.json.Serializer");
goog.require("goog.net.XhrManager");
goog.require("goog.Uri.QueryData");
goog.require("goog.events");
goog.require("goog.net.XhrManager");
goog.require("cljs.reader");
goog.require("goog.net.EventType");
goog.require("goog.structs");
goog.require("goog.Uri.QueryData");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("goog.structs");
goog.require("cljs.reader");
goog.require("goog.Uri");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIo");
goog.require("goog.events");
goog.require("goog.Uri");
ajax.core.AjaxImpl = function() {
  var obj36357 = {};
  return obj36357;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__10317__auto__ = this$;
    if (and__10317__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__10956__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10329__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__36358) {
  var map__36359 = p__36358;
  var map__36359__$1 = cljs.core.seq_QMARK_.call(null, map__36359) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36359) : map__36359;
  var timeout = cljs.core.get.call(null, map__36359__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var this$__$1 = this;
  var G__36360 = this$__$1;
  goog.events.listen(G__36360, goog.net.EventType.COMPLETE, handler);
  G__36360.send(uri, method, body, headers, timeout);
  return G__36360;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__36361) {
  var map__36362 = p__36361;
  var map__36362__$1 = cljs.core.seq_QMARK_.call(null, map__36362) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36362) : map__36362;
  var max_retries = cljs.core.get.call(null, map__36362__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", 902021455));
  var priority = cljs.core.get.call(null, map__36362__$1, new cljs.core.Keyword(null, "priority", "priority", 4143410454));
  var timeout = cljs.core.get.call(null, map__36362__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var id = cljs.core.get.call(null, map__36362__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, headers, priority, handler, max_retries);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, xhrio.getResponseText());
};
ajax.core.edn_response_format = function edn_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN"], null);
};
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/edn"], null);
};
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.read_text = function read_text(xhrio) {
  return xhrio.getResponseText();
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function raw_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_text, new cljs.core.Keyword(null, "description", "description", 3584325486), "raw text"], null);
};
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/json"], null);
};
ajax.core.json_response_format = function json_response_format(p__36363) {
  var map__36365 = p__36363;
  var map__36365__$1 = cljs.core.seq_QMARK_.call(null, map__36365) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36365) : map__36365;
  var keywords_QMARK_ = cljs.core.get.call(null, map__36365__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 4346628423));
  var prefix = cljs.core.get.call(null, map__36365__$1, new cljs.core.Keyword(null, "prefix", "prefix", 4328760836));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function read_json(xhrio) {
    var json = xhrio.getResponseJson(prefix);
    return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), keywords_QMARK_);
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join("")], null);
};
ajax.core.get_default_format = function get_default_format(xhrio) {
  var ct = xhrio.getResponseHeader("Content-Type");
  var format = cljs.core.truth_(function() {
    var and__10317__auto__ = ct;
    if (cljs.core.truth_(and__10317__auto__)) {
      return ct.indexOf("json") >= 0;
    } else {
      return and__10317__auto__;
    }
  }()) ? ajax.core.json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY) : ajax.core.edn_response_format.call(null);
  return cljs.core.update_in.call(null, format, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "description", "description", 3584325486)], null), function(p1__36366_SHARP_) {
    return[cljs.core.str(p1__36366_SHARP_), cljs.core.str(" (default)")].join("");
  });
};
ajax.core.use_content_type = function use_content_type(format) {
  return cljs.core.dissoc.call(null, format, new cljs.core.Keyword(null, "write", "write", 1127304017));
};
ajax.core.codec = function codec(request_format, p__36367) {
  var map__36369 = p__36367;
  var map__36369__$1 = cljs.core.seq_QMARK_.call(null, map__36369) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36369) : map__36369;
  var response_format = map__36369__$1;
  var description = cljs.core.get.call(null, map__36369__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var read = cljs.core.get.call(null, map__36369__$1, new cljs.core.Keyword(null, "read", "read", 1017400584));
  return cljs.core.assoc.call(null, request_format, new cljs.core.Keyword(null, "read", "read", 1017400584), read, new cljs.core.Keyword(null, "description", "description", 3584325486), description);
};
ajax.core.get_format = function get_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), format, new cljs.core.Keyword(null, "description", "description", 3584325486), "custom"], null));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("unrecognized format: "), cljs.core.str(format)].join(""));
      } else {
        return null;
      }
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__36370, xhrio) {
  var map__36372 = p__36370;
  var map__36372__$1 = cljs.core.seq_QMARK_.call(null, map__36372) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36372) : map__36372;
  var description = cljs.core.get.call(null, map__36372__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var response = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "response", "response", 673580979), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), status_text, new cljs.core.Keyword(null, "is-parse-error", "is-parse-error", 4116943293), true, new cljs.core.Keyword(null, "original-text", "original-text", 2831108891), xhrio.getResponseText());
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "parse-error", "parse-error", 3528843744), parse_error);
  }
};
ajax.core.interpret_response = function interpret_response(format, response, get_default_format) {
  try {
    var xhrio = response.target;
    var status = xhrio.getStatus();
    var format__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format)) ? format : get_default_format.call(null, xhrio);
    var parse = (new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format__$1);
    try {
      var response__$1 = parse.call(null, xhrio);
      if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response__$1], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "response", "response", 673580979), response__$1], null)], null);
      }
    } catch (e36376) {
      if (e36376 instanceof Object) {
        var e = e36376;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format__$1, xhrio)], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e36376;
        } else {
          return null;
        }
      }
    }
  } catch (e36375) {
    if (e36375 instanceof Object) {
      var e = e36375;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), 0, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), e.message, new cljs.core.Keyword(null, "response", "response", 673580979), null], null)], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e36375;
      } else {
        return null;
      }
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.process_inputs = function process_inputs(uri, method, p__36377, p__36378) {
  var map__36382 = p__36377;
  var map__36382__$1 = cljs.core.seq_QMARK_.call(null, map__36382) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36382) : map__36382;
  var format = map__36382__$1;
  var content_type = cljs.core.get.call(null, map__36382__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
  var write = cljs.core.get.call(null, map__36382__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
  var map__36383 = p__36378;
  var map__36383__$1 = cljs.core.seq_QMARK_.call(null, map__36383) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36383) : map__36383;
  var headers = cljs.core.get.call(null, map__36383__$1, new cljs.core.Keyword(null, "headers", "headers", 1809212152));
  var params = cljs.core.get.call(null, map__36383__$1, new cljs.core.Keyword(null, "params", "params", 4313443576));
  if (cljs.core._EQ_.call(null, method, "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers], null);
  } else {
    var map__36384 = format;
    var map__36384__$1 = cljs.core.seq_QMARK_.call(null, map__36384) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36384) : map__36384;
    var content_type__$1 = cljs.core.get.call(null, map__36384__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
    var write__$1 = cljs.core.get.call(null, map__36384__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
    var body = write__$1.call(null, params);
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$1 = cljs.core.merge.call(null, function() {
      var or__10329__auto__ = headers;
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$1], null);
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.base_handler = function base_handler(format, p__36385) {
  var map__36387 = p__36385;
  var map__36387__$1 = cljs.core.seq_QMARK_.call(null, map__36387) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36387) : map__36387;
  var get_default_format = cljs.core.get.call(null, map__36387__$1, new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996));
  var handler = cljs.core.get.call(null, map__36387__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function(xhrio) {
    return handler.call(null, ajax.core.interpret_response.call(null, format, xhrio, function() {
      var or__10329__auto__ = get_default_format;
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return ajax.core.no_format;
      }
    }()));
  };
};
ajax.core.ajax_request = function() {
  var ajax_request = null;
  var ajax_request__3 = function(uri, method, opts) {
    return ajax_request.call(null, uri, method, opts, new goog.net.XhrIo);
  };
  var ajax_request__4 = function(uri, method, p__36388, js_ajax) {
    var map__36391 = p__36388;
    var map__36391__$1 = cljs.core.seq_QMARK_.call(null, map__36391) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36391) : map__36391;
    var opts = map__36391__$1;
    var format = cljs.core.get.call(null, map__36391__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
    var format__$1 = ajax.core.get_format.call(null, format);
    var method__$1 = ajax.core.normalize_method.call(null, method);
    var vec__36392 = ajax.core.process_inputs.call(null, uri, method__$1, format__$1, opts);
    var uri__$1 = cljs.core.nth.call(null, vec__36392, 0, null);
    var body = cljs.core.nth.call(null, vec__36392, 1, null);
    var headers = cljs.core.nth.call(null, vec__36392, 2, null);
    var handler = ajax.core.base_handler.call(null, format__$1, opts);
    return ajax.core._js_ajax_request.call(null, js_ajax, uri__$1, method__$1, body, cljs.core.clj__GT_js.call(null, headers), handler, opts);
  };
  ajax_request = function(uri, method, p__36388, js_ajax) {
    switch(arguments.length) {
      case 3:
        return ajax_request__3.call(this, uri, method, p__36388);
      case 4:
        return ajax_request__4.call(this, uri, method, p__36388, js_ajax);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax_request.cljs$core$IFn$_invoke$arity$3 = ajax_request__3;
  ajax_request.cljs$core$IFn$_invoke$arity$4 = ajax_request__4;
  return ajax_request;
}();
ajax.core.json_format = function json_format(format_params) {
  return ajax.core.codec.call(null, ajax.core.json_request_format.call(null), ajax.core.json_response_format.call(null, format_params));
};
ajax.core.edn_format = function edn_format() {
  return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), ajax.core.edn_response_format.call(null));
};
ajax.core.raw_format = function raw_format() {
  return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), ajax.core.raw_response_format.call(null));
};
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  var G__36394 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "url", "url", 1014020321), G__36394)) {
    return ajax.core.url_request_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__36394)) {
      return ajax.core.url_request_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__36394)) {
        return ajax.core.edn_request_format.call(null);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__36394)) {
          return ajax.core.json_request_format.call(null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  var G__36396 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__36396)) {
    return ajax.core.raw_response_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__36396)) {
      return ajax.core.edn_response_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__36396)) {
        return ajax.core.json_response_format.call(null, format_params);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return null;
        } else {
          return null;
        }
      }
    }
  }
};
ajax.core.transform_handler = function transform_handler(p__36397) {
  var map__36402 = p__36397;
  var map__36402__$1 = cljs.core.seq_QMARK_.call(null, map__36402) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36402) : map__36402;
  var finally$ = cljs.core.get.call(null, map__36402__$1, new cljs.core.Keyword(null, "finally", "finally", 4455611637));
  var error_handler = cljs.core.get.call(null, map__36402__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671));
  var handler = cljs.core.get.call(null, map__36402__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function easy_handler(p__36403) {
    var vec__36405 = p__36403;
    var ok = cljs.core.nth.call(null, vec__36405, 0, null);
    var result = cljs.core.nth.call(null, vec__36405, 1, null);
    var temp__4090__auto___36406 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4090__auto___36406)) {
      var h_36407 = temp__4090__auto___36406;
      h_36407.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
};
ajax.core.transform_format = function transform_format(p__36408) {
  var map__36410 = p__36408;
  var map__36410__$1 = cljs.core.seq_QMARK_.call(null, map__36410) ? cljs.core.apply.call(null, cljs.core.hash_map, map__36410) : map__36410;
  var opts = map__36410__$1;
  var response_format = cljs.core.get.call(null, map__36410__$1, new cljs.core.Keyword(null, "response-format", "response-format", 4250805877));
  var format = cljs.core.get.call(null, map__36410__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
  var rf = ajax.core.keyword_response_format.call(null, response_format, opts);
  if (format == null) {
    return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), rf);
  } else {
    if (format instanceof cljs.core.Keyword) {
      return ajax.core.codec.call(null, ajax.core.keyword_request_format.call(null, format, opts), rf);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return format;
      } else {
        return null;
      }
    }
  }
};
ajax.core.transform_opts = function transform_opts(opts) {
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", 1706707644), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", 4040092521), ajax.core.transform_format.call(null, opts), new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996), ajax.core.get_default_format);
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, p__36411) {
    var vec__36413 = p__36411;
    var opts = cljs.core.nth.call(null, vec__36413, 0, null);
    return ajax.core.ajax_request.call(null, uri, "GET", ajax.core.transform_opts.call(null, opts));
  };
  var GET = function(uri, var_args) {
    var p__36411 = null;
    if (arguments.length > 1) {
      p__36411 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return GET__delegate.call(this, uri, p__36411);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__36414) {
    var uri = cljs.core.first(arglist__36414);
    var p__36411 = cljs.core.rest(arglist__36414);
    return GET__delegate(uri, p__36411);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, p__36415) {
    var vec__36417 = p__36415;
    var opts = cljs.core.nth.call(null, vec__36417, 0, null);
    return ajax.core.ajax_request.call(null, uri, "PUT", ajax.core.transform_opts.call(null, opts));
  };
  var PUT = function(uri, var_args) {
    var p__36415 = null;
    if (arguments.length > 1) {
      p__36415 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return PUT__delegate.call(this, uri, p__36415);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__36418) {
    var uri = cljs.core.first(arglist__36418);
    var p__36415 = cljs.core.rest(arglist__36418);
    return PUT__delegate(uri, p__36415);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, p__36419) {
    var vec__36421 = p__36419;
    var opts = cljs.core.nth.call(null, vec__36421, 0, null);
    return ajax.core.ajax_request.call(null, uri, "POST", ajax.core.transform_opts.call(null, opts));
  };
  var POST = function(uri, var_args) {
    var p__36419 = null;
    if (arguments.length > 1) {
      p__36419 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return POST__delegate.call(this, uri, p__36419);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__36422) {
    var uri = cljs.core.first(arglist__36422);
    var p__36419 = cljs.core.rest(arglist__36422);
    return POST__delegate(uri, p__36419);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
goog.provide("quiescent");
goog.require("cljs.core");
quiescent._STAR_component_STAR_ = null;
quiescent.component = function component(renderer) {
  var react_component = React.createClass({"render":function() {
    var this$ = this;
    var _STAR_component_STAR_33695 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return cljs.core.apply.call(null, renderer, this$.props["value"], this$.props["statics"]);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_33695;
    }
  }, "shouldComponentUpdate":function(next_props, _) {
    var this$ = this;
    return cljs.core.not_EQ_.call(null, this$.props["value"], next_props["value"]);
  }});
  return function() {
    var G__33696__delegate = function(value, static_args) {
      return react_component.call(null, {"statics":static_args, "value":value});
    };
    var G__33696 = function(value, var_args) {
      var static_args = null;
      if (arguments.length > 1) {
        static_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__33696__delegate.call(this, value, static_args);
    };
    G__33696.cljs$lang$maxFixedArity = 1;
    G__33696.cljs$lang$applyTo = function(arglist__33697) {
      var value = cljs.core.first(arglist__33697);
      var static_args = cljs.core.rest(arglist__33697);
      return G__33696__delegate(value, static_args);
    };
    G__33696.cljs$core$IFn$_invoke$arity$variadic = G__33696__delegate;
    return G__33696;
  }();
};
quiescent.WrapperComponent = React.createClass({"componentDidMount":function() {
  var this$ = this;
  var temp__4092__auto__ = this$.props["onMount"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var f = temp__4092__auto__;
    return f.call(null, this$.getDOMNode());
  } else {
    return null;
  }
}, "componentDidUpdate":function(prev_props, prev_state) {
  var this$ = this;
  var temp__4092__auto__ = this$.props["onUpdate"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var f = temp__4092__auto__;
    var _STAR_component_STAR_33698 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_33698;
    }
  } else {
    return null;
  }
}, "render":function() {
  var this$ = this;
  return this$.props["wrappee"];
}});
quiescent.on_update = function on_update(child, f) {
  return quiescent.WrapperComponent.call(null, {"onUpdate":f, "wrappee":child});
};
quiescent.on_initial_render = function on_initial_render(child, f) {
  return quiescent.WrapperComponent.call(null, {"onMount":f, "wrappee":child});
};
quiescent.on_render = function on_render(child, f) {
  return quiescent.WrapperComponent.call(null, {"onMount":f, "onUpdate":f, "wrappee":child});
};
quiescent.render = function render(component, node) {
  return React.renderComponent(component, node);
};
goog.provide("quiescent.dom");
goog.require("cljs.core");
goog.require("quiescent");
goog.require("quiescent");
quiescent.dom.js_props = function js_props(obj) {
  if (cljs.core.map_QMARK_.call(null, obj)) {
    var o = function() {
      var obj30092 = {};
      return obj30092;
    }();
    var seq__30093_30099 = cljs.core.seq.call(null, obj);
    var chunk__30094_30100 = null;
    var count__30095_30101 = 0;
    var i__30096_30102 = 0;
    while (true) {
      if (i__30096_30102 < count__30095_30101) {
        var vec__30097_30103 = cljs.core._nth.call(null, chunk__30094_30100, i__30096_30102);
        var k_30104 = cljs.core.nth.call(null, vec__30097_30103, 0, null);
        var v_30105 = cljs.core.nth.call(null, vec__30097_30103, 1, null);
        o[cljs.core.name.call(null, k_30104)] = js_props.call(null, v_30105);
        var G__30106 = seq__30093_30099;
        var G__30107 = chunk__30094_30100;
        var G__30108 = count__30095_30101;
        var G__30109 = i__30096_30102 + 1;
        seq__30093_30099 = G__30106;
        chunk__30094_30100 = G__30107;
        count__30095_30101 = G__30108;
        i__30096_30102 = G__30109;
        continue;
      } else {
        var temp__4092__auto___30110 = cljs.core.seq.call(null, seq__30093_30099);
        if (temp__4092__auto___30110) {
          var seq__30093_30111__$1 = temp__4092__auto___30110;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30093_30111__$1)) {
            var c__11077__auto___30112 = cljs.core.chunk_first.call(null, seq__30093_30111__$1);
            var G__30113 = cljs.core.chunk_rest.call(null, seq__30093_30111__$1);
            var G__30114 = c__11077__auto___30112;
            var G__30115 = cljs.core.count.call(null, c__11077__auto___30112);
            var G__30116 = 0;
            seq__30093_30099 = G__30113;
            chunk__30094_30100 = G__30114;
            count__30095_30101 = G__30115;
            i__30096_30102 = G__30116;
            continue;
          } else {
            var vec__30098_30117 = cljs.core.first.call(null, seq__30093_30111__$1);
            var k_30118 = cljs.core.nth.call(null, vec__30098_30117, 0, null);
            var v_30119 = cljs.core.nth.call(null, vec__30098_30117, 1, null);
            o[cljs.core.name.call(null, k_30118)] = js_props.call(null, v_30119);
            var G__30120 = cljs.core.next.call(null, seq__30093_30111__$1);
            var G__30121 = null;
            var G__30122 = 0;
            var G__30123 = 0;
            seq__30093_30099 = G__30120;
            chunk__30094_30100 = G__30121;
            count__30095_30101 = G__30122;
            i__30096_30102 = G__30123;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o;
  } else {
    return obj;
  }
};
quiescent.dom.a = function() {
  var a__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30128_31076 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30129_31077 = null;
    var count__30130_31078 = 0;
    var i__30131_31079 = 0;
    while (true) {
      if (i__30131_31079 < count__30130_31078) {
        var arg__11709__auto___31080 = cljs.core._nth.call(null, chunk__30129_31077, i__30131_31079);
        a__11708__auto__.push(arg__11709__auto___31080);
        var G__31081 = seq__30128_31076;
        var G__31082 = chunk__30129_31077;
        var G__31083 = count__30130_31078;
        var G__31084 = i__30131_31079 + 1;
        seq__30128_31076 = G__31081;
        chunk__30129_31077 = G__31082;
        count__30130_31078 = G__31083;
        i__30131_31079 = G__31084;
        continue;
      } else {
        var temp__4092__auto___31085 = cljs.core.seq.call(null, seq__30128_31076);
        if (temp__4092__auto___31085) {
          var seq__30128_31086__$1 = temp__4092__auto___31085;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30128_31086__$1)) {
            var c__11077__auto___31087 = cljs.core.chunk_first.call(null, seq__30128_31086__$1);
            var G__31088 = cljs.core.chunk_rest.call(null, seq__30128_31086__$1);
            var G__31089 = c__11077__auto___31087;
            var G__31090 = cljs.core.count.call(null, c__11077__auto___31087);
            var G__31091 = 0;
            seq__30128_31076 = G__31088;
            chunk__30129_31077 = G__31089;
            count__30130_31078 = G__31090;
            i__30131_31079 = G__31091;
            continue;
          } else {
            var arg__11709__auto___31092 = cljs.core.first.call(null, seq__30128_31086__$1);
            a__11708__auto__.push(arg__11709__auto___31092);
            var G__31093 = cljs.core.next.call(null, seq__30128_31086__$1);
            var G__31094 = null;
            var G__31095 = 0;
            var G__31096 = 0;
            seq__30128_31076 = G__31093;
            chunk__30129_31077 = G__31094;
            count__30130_31078 = G__31095;
            i__30131_31079 = G__31096;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.a.apply(null, a__11708__auto__);
  };
  var a = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return a__delegate.call(this, args__11707__auto__);
  };
  a.cljs$lang$maxFixedArity = 0;
  a.cljs$lang$applyTo = function(arglist__31097) {
    var args__11707__auto__ = cljs.core.seq(arglist__31097);
    return a__delegate(args__11707__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
quiescent.dom.abbr = function() {
  var abbr__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30136_31098 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30137_31099 = null;
    var count__30138_31100 = 0;
    var i__30139_31101 = 0;
    while (true) {
      if (i__30139_31101 < count__30138_31100) {
        var arg__11709__auto___31102 = cljs.core._nth.call(null, chunk__30137_31099, i__30139_31101);
        a__11708__auto__.push(arg__11709__auto___31102);
        var G__31103 = seq__30136_31098;
        var G__31104 = chunk__30137_31099;
        var G__31105 = count__30138_31100;
        var G__31106 = i__30139_31101 + 1;
        seq__30136_31098 = G__31103;
        chunk__30137_31099 = G__31104;
        count__30138_31100 = G__31105;
        i__30139_31101 = G__31106;
        continue;
      } else {
        var temp__4092__auto___31107 = cljs.core.seq.call(null, seq__30136_31098);
        if (temp__4092__auto___31107) {
          var seq__30136_31108__$1 = temp__4092__auto___31107;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30136_31108__$1)) {
            var c__11077__auto___31109 = cljs.core.chunk_first.call(null, seq__30136_31108__$1);
            var G__31110 = cljs.core.chunk_rest.call(null, seq__30136_31108__$1);
            var G__31111 = c__11077__auto___31109;
            var G__31112 = cljs.core.count.call(null, c__11077__auto___31109);
            var G__31113 = 0;
            seq__30136_31098 = G__31110;
            chunk__30137_31099 = G__31111;
            count__30138_31100 = G__31112;
            i__30139_31101 = G__31113;
            continue;
          } else {
            var arg__11709__auto___31114 = cljs.core.first.call(null, seq__30136_31108__$1);
            a__11708__auto__.push(arg__11709__auto___31114);
            var G__31115 = cljs.core.next.call(null, seq__30136_31108__$1);
            var G__31116 = null;
            var G__31117 = 0;
            var G__31118 = 0;
            seq__30136_31098 = G__31115;
            chunk__30137_31099 = G__31116;
            count__30138_31100 = G__31117;
            i__30139_31101 = G__31118;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.abbr.apply(null, a__11708__auto__);
  };
  var abbr = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return abbr__delegate.call(this, args__11707__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 0;
  abbr.cljs$lang$applyTo = function(arglist__31119) {
    var args__11707__auto__ = cljs.core.seq(arglist__31119);
    return abbr__delegate(args__11707__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
quiescent.dom.address = function() {
  var address__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30144_31120 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30145_31121 = null;
    var count__30146_31122 = 0;
    var i__30147_31123 = 0;
    while (true) {
      if (i__30147_31123 < count__30146_31122) {
        var arg__11709__auto___31124 = cljs.core._nth.call(null, chunk__30145_31121, i__30147_31123);
        a__11708__auto__.push(arg__11709__auto___31124);
        var G__31125 = seq__30144_31120;
        var G__31126 = chunk__30145_31121;
        var G__31127 = count__30146_31122;
        var G__31128 = i__30147_31123 + 1;
        seq__30144_31120 = G__31125;
        chunk__30145_31121 = G__31126;
        count__30146_31122 = G__31127;
        i__30147_31123 = G__31128;
        continue;
      } else {
        var temp__4092__auto___31129 = cljs.core.seq.call(null, seq__30144_31120);
        if (temp__4092__auto___31129) {
          var seq__30144_31130__$1 = temp__4092__auto___31129;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30144_31130__$1)) {
            var c__11077__auto___31131 = cljs.core.chunk_first.call(null, seq__30144_31130__$1);
            var G__31132 = cljs.core.chunk_rest.call(null, seq__30144_31130__$1);
            var G__31133 = c__11077__auto___31131;
            var G__31134 = cljs.core.count.call(null, c__11077__auto___31131);
            var G__31135 = 0;
            seq__30144_31120 = G__31132;
            chunk__30145_31121 = G__31133;
            count__30146_31122 = G__31134;
            i__30147_31123 = G__31135;
            continue;
          } else {
            var arg__11709__auto___31136 = cljs.core.first.call(null, seq__30144_31130__$1);
            a__11708__auto__.push(arg__11709__auto___31136);
            var G__31137 = cljs.core.next.call(null, seq__30144_31130__$1);
            var G__31138 = null;
            var G__31139 = 0;
            var G__31140 = 0;
            seq__30144_31120 = G__31137;
            chunk__30145_31121 = G__31138;
            count__30146_31122 = G__31139;
            i__30147_31123 = G__31140;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.address.apply(null, a__11708__auto__);
  };
  var address = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return address__delegate.call(this, args__11707__auto__);
  };
  address.cljs$lang$maxFixedArity = 0;
  address.cljs$lang$applyTo = function(arglist__31141) {
    var args__11707__auto__ = cljs.core.seq(arglist__31141);
    return address__delegate(args__11707__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
quiescent.dom.area = function() {
  var area__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30152_31142 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30153_31143 = null;
    var count__30154_31144 = 0;
    var i__30155_31145 = 0;
    while (true) {
      if (i__30155_31145 < count__30154_31144) {
        var arg__11709__auto___31146 = cljs.core._nth.call(null, chunk__30153_31143, i__30155_31145);
        a__11708__auto__.push(arg__11709__auto___31146);
        var G__31147 = seq__30152_31142;
        var G__31148 = chunk__30153_31143;
        var G__31149 = count__30154_31144;
        var G__31150 = i__30155_31145 + 1;
        seq__30152_31142 = G__31147;
        chunk__30153_31143 = G__31148;
        count__30154_31144 = G__31149;
        i__30155_31145 = G__31150;
        continue;
      } else {
        var temp__4092__auto___31151 = cljs.core.seq.call(null, seq__30152_31142);
        if (temp__4092__auto___31151) {
          var seq__30152_31152__$1 = temp__4092__auto___31151;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30152_31152__$1)) {
            var c__11077__auto___31153 = cljs.core.chunk_first.call(null, seq__30152_31152__$1);
            var G__31154 = cljs.core.chunk_rest.call(null, seq__30152_31152__$1);
            var G__31155 = c__11077__auto___31153;
            var G__31156 = cljs.core.count.call(null, c__11077__auto___31153);
            var G__31157 = 0;
            seq__30152_31142 = G__31154;
            chunk__30153_31143 = G__31155;
            count__30154_31144 = G__31156;
            i__30155_31145 = G__31157;
            continue;
          } else {
            var arg__11709__auto___31158 = cljs.core.first.call(null, seq__30152_31152__$1);
            a__11708__auto__.push(arg__11709__auto___31158);
            var G__31159 = cljs.core.next.call(null, seq__30152_31152__$1);
            var G__31160 = null;
            var G__31161 = 0;
            var G__31162 = 0;
            seq__30152_31142 = G__31159;
            chunk__30153_31143 = G__31160;
            count__30154_31144 = G__31161;
            i__30155_31145 = G__31162;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.area.apply(null, a__11708__auto__);
  };
  var area = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return area__delegate.call(this, args__11707__auto__);
  };
  area.cljs$lang$maxFixedArity = 0;
  area.cljs$lang$applyTo = function(arglist__31163) {
    var args__11707__auto__ = cljs.core.seq(arglist__31163);
    return area__delegate(args__11707__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
quiescent.dom.article = function() {
  var article__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30160_31164 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30161_31165 = null;
    var count__30162_31166 = 0;
    var i__30163_31167 = 0;
    while (true) {
      if (i__30163_31167 < count__30162_31166) {
        var arg__11709__auto___31168 = cljs.core._nth.call(null, chunk__30161_31165, i__30163_31167);
        a__11708__auto__.push(arg__11709__auto___31168);
        var G__31169 = seq__30160_31164;
        var G__31170 = chunk__30161_31165;
        var G__31171 = count__30162_31166;
        var G__31172 = i__30163_31167 + 1;
        seq__30160_31164 = G__31169;
        chunk__30161_31165 = G__31170;
        count__30162_31166 = G__31171;
        i__30163_31167 = G__31172;
        continue;
      } else {
        var temp__4092__auto___31173 = cljs.core.seq.call(null, seq__30160_31164);
        if (temp__4092__auto___31173) {
          var seq__30160_31174__$1 = temp__4092__auto___31173;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30160_31174__$1)) {
            var c__11077__auto___31175 = cljs.core.chunk_first.call(null, seq__30160_31174__$1);
            var G__31176 = cljs.core.chunk_rest.call(null, seq__30160_31174__$1);
            var G__31177 = c__11077__auto___31175;
            var G__31178 = cljs.core.count.call(null, c__11077__auto___31175);
            var G__31179 = 0;
            seq__30160_31164 = G__31176;
            chunk__30161_31165 = G__31177;
            count__30162_31166 = G__31178;
            i__30163_31167 = G__31179;
            continue;
          } else {
            var arg__11709__auto___31180 = cljs.core.first.call(null, seq__30160_31174__$1);
            a__11708__auto__.push(arg__11709__auto___31180);
            var G__31181 = cljs.core.next.call(null, seq__30160_31174__$1);
            var G__31182 = null;
            var G__31183 = 0;
            var G__31184 = 0;
            seq__30160_31164 = G__31181;
            chunk__30161_31165 = G__31182;
            count__30162_31166 = G__31183;
            i__30163_31167 = G__31184;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.article.apply(null, a__11708__auto__);
  };
  var article = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return article__delegate.call(this, args__11707__auto__);
  };
  article.cljs$lang$maxFixedArity = 0;
  article.cljs$lang$applyTo = function(arglist__31185) {
    var args__11707__auto__ = cljs.core.seq(arglist__31185);
    return article__delegate(args__11707__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
quiescent.dom.aside = function() {
  var aside__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30168_31186 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30169_31187 = null;
    var count__30170_31188 = 0;
    var i__30171_31189 = 0;
    while (true) {
      if (i__30171_31189 < count__30170_31188) {
        var arg__11709__auto___31190 = cljs.core._nth.call(null, chunk__30169_31187, i__30171_31189);
        a__11708__auto__.push(arg__11709__auto___31190);
        var G__31191 = seq__30168_31186;
        var G__31192 = chunk__30169_31187;
        var G__31193 = count__30170_31188;
        var G__31194 = i__30171_31189 + 1;
        seq__30168_31186 = G__31191;
        chunk__30169_31187 = G__31192;
        count__30170_31188 = G__31193;
        i__30171_31189 = G__31194;
        continue;
      } else {
        var temp__4092__auto___31195 = cljs.core.seq.call(null, seq__30168_31186);
        if (temp__4092__auto___31195) {
          var seq__30168_31196__$1 = temp__4092__auto___31195;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30168_31196__$1)) {
            var c__11077__auto___31197 = cljs.core.chunk_first.call(null, seq__30168_31196__$1);
            var G__31198 = cljs.core.chunk_rest.call(null, seq__30168_31196__$1);
            var G__31199 = c__11077__auto___31197;
            var G__31200 = cljs.core.count.call(null, c__11077__auto___31197);
            var G__31201 = 0;
            seq__30168_31186 = G__31198;
            chunk__30169_31187 = G__31199;
            count__30170_31188 = G__31200;
            i__30171_31189 = G__31201;
            continue;
          } else {
            var arg__11709__auto___31202 = cljs.core.first.call(null, seq__30168_31196__$1);
            a__11708__auto__.push(arg__11709__auto___31202);
            var G__31203 = cljs.core.next.call(null, seq__30168_31196__$1);
            var G__31204 = null;
            var G__31205 = 0;
            var G__31206 = 0;
            seq__30168_31186 = G__31203;
            chunk__30169_31187 = G__31204;
            count__30170_31188 = G__31205;
            i__30171_31189 = G__31206;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.aside.apply(null, a__11708__auto__);
  };
  var aside = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return aside__delegate.call(this, args__11707__auto__);
  };
  aside.cljs$lang$maxFixedArity = 0;
  aside.cljs$lang$applyTo = function(arglist__31207) {
    var args__11707__auto__ = cljs.core.seq(arglist__31207);
    return aside__delegate(args__11707__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
quiescent.dom.audio = function() {
  var audio__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30176_31208 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30177_31209 = null;
    var count__30178_31210 = 0;
    var i__30179_31211 = 0;
    while (true) {
      if (i__30179_31211 < count__30178_31210) {
        var arg__11709__auto___31212 = cljs.core._nth.call(null, chunk__30177_31209, i__30179_31211);
        a__11708__auto__.push(arg__11709__auto___31212);
        var G__31213 = seq__30176_31208;
        var G__31214 = chunk__30177_31209;
        var G__31215 = count__30178_31210;
        var G__31216 = i__30179_31211 + 1;
        seq__30176_31208 = G__31213;
        chunk__30177_31209 = G__31214;
        count__30178_31210 = G__31215;
        i__30179_31211 = G__31216;
        continue;
      } else {
        var temp__4092__auto___31217 = cljs.core.seq.call(null, seq__30176_31208);
        if (temp__4092__auto___31217) {
          var seq__30176_31218__$1 = temp__4092__auto___31217;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30176_31218__$1)) {
            var c__11077__auto___31219 = cljs.core.chunk_first.call(null, seq__30176_31218__$1);
            var G__31220 = cljs.core.chunk_rest.call(null, seq__30176_31218__$1);
            var G__31221 = c__11077__auto___31219;
            var G__31222 = cljs.core.count.call(null, c__11077__auto___31219);
            var G__31223 = 0;
            seq__30176_31208 = G__31220;
            chunk__30177_31209 = G__31221;
            count__30178_31210 = G__31222;
            i__30179_31211 = G__31223;
            continue;
          } else {
            var arg__11709__auto___31224 = cljs.core.first.call(null, seq__30176_31218__$1);
            a__11708__auto__.push(arg__11709__auto___31224);
            var G__31225 = cljs.core.next.call(null, seq__30176_31218__$1);
            var G__31226 = null;
            var G__31227 = 0;
            var G__31228 = 0;
            seq__30176_31208 = G__31225;
            chunk__30177_31209 = G__31226;
            count__30178_31210 = G__31227;
            i__30179_31211 = G__31228;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.audio.apply(null, a__11708__auto__);
  };
  var audio = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return audio__delegate.call(this, args__11707__auto__);
  };
  audio.cljs$lang$maxFixedArity = 0;
  audio.cljs$lang$applyTo = function(arglist__31229) {
    var args__11707__auto__ = cljs.core.seq(arglist__31229);
    return audio__delegate(args__11707__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
quiescent.dom.b = function() {
  var b__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30184_31230 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30185_31231 = null;
    var count__30186_31232 = 0;
    var i__30187_31233 = 0;
    while (true) {
      if (i__30187_31233 < count__30186_31232) {
        var arg__11709__auto___31234 = cljs.core._nth.call(null, chunk__30185_31231, i__30187_31233);
        a__11708__auto__.push(arg__11709__auto___31234);
        var G__31235 = seq__30184_31230;
        var G__31236 = chunk__30185_31231;
        var G__31237 = count__30186_31232;
        var G__31238 = i__30187_31233 + 1;
        seq__30184_31230 = G__31235;
        chunk__30185_31231 = G__31236;
        count__30186_31232 = G__31237;
        i__30187_31233 = G__31238;
        continue;
      } else {
        var temp__4092__auto___31239 = cljs.core.seq.call(null, seq__30184_31230);
        if (temp__4092__auto___31239) {
          var seq__30184_31240__$1 = temp__4092__auto___31239;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30184_31240__$1)) {
            var c__11077__auto___31241 = cljs.core.chunk_first.call(null, seq__30184_31240__$1);
            var G__31242 = cljs.core.chunk_rest.call(null, seq__30184_31240__$1);
            var G__31243 = c__11077__auto___31241;
            var G__31244 = cljs.core.count.call(null, c__11077__auto___31241);
            var G__31245 = 0;
            seq__30184_31230 = G__31242;
            chunk__30185_31231 = G__31243;
            count__30186_31232 = G__31244;
            i__30187_31233 = G__31245;
            continue;
          } else {
            var arg__11709__auto___31246 = cljs.core.first.call(null, seq__30184_31240__$1);
            a__11708__auto__.push(arg__11709__auto___31246);
            var G__31247 = cljs.core.next.call(null, seq__30184_31240__$1);
            var G__31248 = null;
            var G__31249 = 0;
            var G__31250 = 0;
            seq__30184_31230 = G__31247;
            chunk__30185_31231 = G__31248;
            count__30186_31232 = G__31249;
            i__30187_31233 = G__31250;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.b.apply(null, a__11708__auto__);
  };
  var b = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return b__delegate.call(this, args__11707__auto__);
  };
  b.cljs$lang$maxFixedArity = 0;
  b.cljs$lang$applyTo = function(arglist__31251) {
    var args__11707__auto__ = cljs.core.seq(arglist__31251);
    return b__delegate(args__11707__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
quiescent.dom.base = function() {
  var base__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30192_31252 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30193_31253 = null;
    var count__30194_31254 = 0;
    var i__30195_31255 = 0;
    while (true) {
      if (i__30195_31255 < count__30194_31254) {
        var arg__11709__auto___31256 = cljs.core._nth.call(null, chunk__30193_31253, i__30195_31255);
        a__11708__auto__.push(arg__11709__auto___31256);
        var G__31257 = seq__30192_31252;
        var G__31258 = chunk__30193_31253;
        var G__31259 = count__30194_31254;
        var G__31260 = i__30195_31255 + 1;
        seq__30192_31252 = G__31257;
        chunk__30193_31253 = G__31258;
        count__30194_31254 = G__31259;
        i__30195_31255 = G__31260;
        continue;
      } else {
        var temp__4092__auto___31261 = cljs.core.seq.call(null, seq__30192_31252);
        if (temp__4092__auto___31261) {
          var seq__30192_31262__$1 = temp__4092__auto___31261;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30192_31262__$1)) {
            var c__11077__auto___31263 = cljs.core.chunk_first.call(null, seq__30192_31262__$1);
            var G__31264 = cljs.core.chunk_rest.call(null, seq__30192_31262__$1);
            var G__31265 = c__11077__auto___31263;
            var G__31266 = cljs.core.count.call(null, c__11077__auto___31263);
            var G__31267 = 0;
            seq__30192_31252 = G__31264;
            chunk__30193_31253 = G__31265;
            count__30194_31254 = G__31266;
            i__30195_31255 = G__31267;
            continue;
          } else {
            var arg__11709__auto___31268 = cljs.core.first.call(null, seq__30192_31262__$1);
            a__11708__auto__.push(arg__11709__auto___31268);
            var G__31269 = cljs.core.next.call(null, seq__30192_31262__$1);
            var G__31270 = null;
            var G__31271 = 0;
            var G__31272 = 0;
            seq__30192_31252 = G__31269;
            chunk__30193_31253 = G__31270;
            count__30194_31254 = G__31271;
            i__30195_31255 = G__31272;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.base.apply(null, a__11708__auto__);
  };
  var base = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return base__delegate.call(this, args__11707__auto__);
  };
  base.cljs$lang$maxFixedArity = 0;
  base.cljs$lang$applyTo = function(arglist__31273) {
    var args__11707__auto__ = cljs.core.seq(arglist__31273);
    return base__delegate(args__11707__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
quiescent.dom.bdi = function() {
  var bdi__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30200_31274 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30201_31275 = null;
    var count__30202_31276 = 0;
    var i__30203_31277 = 0;
    while (true) {
      if (i__30203_31277 < count__30202_31276) {
        var arg__11709__auto___31278 = cljs.core._nth.call(null, chunk__30201_31275, i__30203_31277);
        a__11708__auto__.push(arg__11709__auto___31278);
        var G__31279 = seq__30200_31274;
        var G__31280 = chunk__30201_31275;
        var G__31281 = count__30202_31276;
        var G__31282 = i__30203_31277 + 1;
        seq__30200_31274 = G__31279;
        chunk__30201_31275 = G__31280;
        count__30202_31276 = G__31281;
        i__30203_31277 = G__31282;
        continue;
      } else {
        var temp__4092__auto___31283 = cljs.core.seq.call(null, seq__30200_31274);
        if (temp__4092__auto___31283) {
          var seq__30200_31284__$1 = temp__4092__auto___31283;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30200_31284__$1)) {
            var c__11077__auto___31285 = cljs.core.chunk_first.call(null, seq__30200_31284__$1);
            var G__31286 = cljs.core.chunk_rest.call(null, seq__30200_31284__$1);
            var G__31287 = c__11077__auto___31285;
            var G__31288 = cljs.core.count.call(null, c__11077__auto___31285);
            var G__31289 = 0;
            seq__30200_31274 = G__31286;
            chunk__30201_31275 = G__31287;
            count__30202_31276 = G__31288;
            i__30203_31277 = G__31289;
            continue;
          } else {
            var arg__11709__auto___31290 = cljs.core.first.call(null, seq__30200_31284__$1);
            a__11708__auto__.push(arg__11709__auto___31290);
            var G__31291 = cljs.core.next.call(null, seq__30200_31284__$1);
            var G__31292 = null;
            var G__31293 = 0;
            var G__31294 = 0;
            seq__30200_31274 = G__31291;
            chunk__30201_31275 = G__31292;
            count__30202_31276 = G__31293;
            i__30203_31277 = G__31294;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdi.apply(null, a__11708__auto__);
  };
  var bdi = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdi__delegate.call(this, args__11707__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 0;
  bdi.cljs$lang$applyTo = function(arglist__31295) {
    var args__11707__auto__ = cljs.core.seq(arglist__31295);
    return bdi__delegate(args__11707__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
quiescent.dom.bdo = function() {
  var bdo__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30208_31296 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30209_31297 = null;
    var count__30210_31298 = 0;
    var i__30211_31299 = 0;
    while (true) {
      if (i__30211_31299 < count__30210_31298) {
        var arg__11709__auto___31300 = cljs.core._nth.call(null, chunk__30209_31297, i__30211_31299);
        a__11708__auto__.push(arg__11709__auto___31300);
        var G__31301 = seq__30208_31296;
        var G__31302 = chunk__30209_31297;
        var G__31303 = count__30210_31298;
        var G__31304 = i__30211_31299 + 1;
        seq__30208_31296 = G__31301;
        chunk__30209_31297 = G__31302;
        count__30210_31298 = G__31303;
        i__30211_31299 = G__31304;
        continue;
      } else {
        var temp__4092__auto___31305 = cljs.core.seq.call(null, seq__30208_31296);
        if (temp__4092__auto___31305) {
          var seq__30208_31306__$1 = temp__4092__auto___31305;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30208_31306__$1)) {
            var c__11077__auto___31307 = cljs.core.chunk_first.call(null, seq__30208_31306__$1);
            var G__31308 = cljs.core.chunk_rest.call(null, seq__30208_31306__$1);
            var G__31309 = c__11077__auto___31307;
            var G__31310 = cljs.core.count.call(null, c__11077__auto___31307);
            var G__31311 = 0;
            seq__30208_31296 = G__31308;
            chunk__30209_31297 = G__31309;
            count__30210_31298 = G__31310;
            i__30211_31299 = G__31311;
            continue;
          } else {
            var arg__11709__auto___31312 = cljs.core.first.call(null, seq__30208_31306__$1);
            a__11708__auto__.push(arg__11709__auto___31312);
            var G__31313 = cljs.core.next.call(null, seq__30208_31306__$1);
            var G__31314 = null;
            var G__31315 = 0;
            var G__31316 = 0;
            seq__30208_31296 = G__31313;
            chunk__30209_31297 = G__31314;
            count__30210_31298 = G__31315;
            i__30211_31299 = G__31316;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdo.apply(null, a__11708__auto__);
  };
  var bdo = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdo__delegate.call(this, args__11707__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 0;
  bdo.cljs$lang$applyTo = function(arglist__31317) {
    var args__11707__auto__ = cljs.core.seq(arglist__31317);
    return bdo__delegate(args__11707__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
quiescent.dom.big = function() {
  var big__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30216_31318 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30217_31319 = null;
    var count__30218_31320 = 0;
    var i__30219_31321 = 0;
    while (true) {
      if (i__30219_31321 < count__30218_31320) {
        var arg__11709__auto___31322 = cljs.core._nth.call(null, chunk__30217_31319, i__30219_31321);
        a__11708__auto__.push(arg__11709__auto___31322);
        var G__31323 = seq__30216_31318;
        var G__31324 = chunk__30217_31319;
        var G__31325 = count__30218_31320;
        var G__31326 = i__30219_31321 + 1;
        seq__30216_31318 = G__31323;
        chunk__30217_31319 = G__31324;
        count__30218_31320 = G__31325;
        i__30219_31321 = G__31326;
        continue;
      } else {
        var temp__4092__auto___31327 = cljs.core.seq.call(null, seq__30216_31318);
        if (temp__4092__auto___31327) {
          var seq__30216_31328__$1 = temp__4092__auto___31327;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30216_31328__$1)) {
            var c__11077__auto___31329 = cljs.core.chunk_first.call(null, seq__30216_31328__$1);
            var G__31330 = cljs.core.chunk_rest.call(null, seq__30216_31328__$1);
            var G__31331 = c__11077__auto___31329;
            var G__31332 = cljs.core.count.call(null, c__11077__auto___31329);
            var G__31333 = 0;
            seq__30216_31318 = G__31330;
            chunk__30217_31319 = G__31331;
            count__30218_31320 = G__31332;
            i__30219_31321 = G__31333;
            continue;
          } else {
            var arg__11709__auto___31334 = cljs.core.first.call(null, seq__30216_31328__$1);
            a__11708__auto__.push(arg__11709__auto___31334);
            var G__31335 = cljs.core.next.call(null, seq__30216_31328__$1);
            var G__31336 = null;
            var G__31337 = 0;
            var G__31338 = 0;
            seq__30216_31318 = G__31335;
            chunk__30217_31319 = G__31336;
            count__30218_31320 = G__31337;
            i__30219_31321 = G__31338;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.big.apply(null, a__11708__auto__);
  };
  var big = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return big__delegate.call(this, args__11707__auto__);
  };
  big.cljs$lang$maxFixedArity = 0;
  big.cljs$lang$applyTo = function(arglist__31339) {
    var args__11707__auto__ = cljs.core.seq(arglist__31339);
    return big__delegate(args__11707__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
quiescent.dom.blockquote = function() {
  var blockquote__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30224_31340 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30225_31341 = null;
    var count__30226_31342 = 0;
    var i__30227_31343 = 0;
    while (true) {
      if (i__30227_31343 < count__30226_31342) {
        var arg__11709__auto___31344 = cljs.core._nth.call(null, chunk__30225_31341, i__30227_31343);
        a__11708__auto__.push(arg__11709__auto___31344);
        var G__31345 = seq__30224_31340;
        var G__31346 = chunk__30225_31341;
        var G__31347 = count__30226_31342;
        var G__31348 = i__30227_31343 + 1;
        seq__30224_31340 = G__31345;
        chunk__30225_31341 = G__31346;
        count__30226_31342 = G__31347;
        i__30227_31343 = G__31348;
        continue;
      } else {
        var temp__4092__auto___31349 = cljs.core.seq.call(null, seq__30224_31340);
        if (temp__4092__auto___31349) {
          var seq__30224_31350__$1 = temp__4092__auto___31349;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30224_31350__$1)) {
            var c__11077__auto___31351 = cljs.core.chunk_first.call(null, seq__30224_31350__$1);
            var G__31352 = cljs.core.chunk_rest.call(null, seq__30224_31350__$1);
            var G__31353 = c__11077__auto___31351;
            var G__31354 = cljs.core.count.call(null, c__11077__auto___31351);
            var G__31355 = 0;
            seq__30224_31340 = G__31352;
            chunk__30225_31341 = G__31353;
            count__30226_31342 = G__31354;
            i__30227_31343 = G__31355;
            continue;
          } else {
            var arg__11709__auto___31356 = cljs.core.first.call(null, seq__30224_31350__$1);
            a__11708__auto__.push(arg__11709__auto___31356);
            var G__31357 = cljs.core.next.call(null, seq__30224_31350__$1);
            var G__31358 = null;
            var G__31359 = 0;
            var G__31360 = 0;
            seq__30224_31340 = G__31357;
            chunk__30225_31341 = G__31358;
            count__30226_31342 = G__31359;
            i__30227_31343 = G__31360;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.blockquote.apply(null, a__11708__auto__);
  };
  var blockquote = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return blockquote__delegate.call(this, args__11707__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 0;
  blockquote.cljs$lang$applyTo = function(arglist__31361) {
    var args__11707__auto__ = cljs.core.seq(arglist__31361);
    return blockquote__delegate(args__11707__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
quiescent.dom.body = function() {
  var body__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30232_31362 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30233_31363 = null;
    var count__30234_31364 = 0;
    var i__30235_31365 = 0;
    while (true) {
      if (i__30235_31365 < count__30234_31364) {
        var arg__11709__auto___31366 = cljs.core._nth.call(null, chunk__30233_31363, i__30235_31365);
        a__11708__auto__.push(arg__11709__auto___31366);
        var G__31367 = seq__30232_31362;
        var G__31368 = chunk__30233_31363;
        var G__31369 = count__30234_31364;
        var G__31370 = i__30235_31365 + 1;
        seq__30232_31362 = G__31367;
        chunk__30233_31363 = G__31368;
        count__30234_31364 = G__31369;
        i__30235_31365 = G__31370;
        continue;
      } else {
        var temp__4092__auto___31371 = cljs.core.seq.call(null, seq__30232_31362);
        if (temp__4092__auto___31371) {
          var seq__30232_31372__$1 = temp__4092__auto___31371;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30232_31372__$1)) {
            var c__11077__auto___31373 = cljs.core.chunk_first.call(null, seq__30232_31372__$1);
            var G__31374 = cljs.core.chunk_rest.call(null, seq__30232_31372__$1);
            var G__31375 = c__11077__auto___31373;
            var G__31376 = cljs.core.count.call(null, c__11077__auto___31373);
            var G__31377 = 0;
            seq__30232_31362 = G__31374;
            chunk__30233_31363 = G__31375;
            count__30234_31364 = G__31376;
            i__30235_31365 = G__31377;
            continue;
          } else {
            var arg__11709__auto___31378 = cljs.core.first.call(null, seq__30232_31372__$1);
            a__11708__auto__.push(arg__11709__auto___31378);
            var G__31379 = cljs.core.next.call(null, seq__30232_31372__$1);
            var G__31380 = null;
            var G__31381 = 0;
            var G__31382 = 0;
            seq__30232_31362 = G__31379;
            chunk__30233_31363 = G__31380;
            count__30234_31364 = G__31381;
            i__30235_31365 = G__31382;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.body.apply(null, a__11708__auto__);
  };
  var body = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return body__delegate.call(this, args__11707__auto__);
  };
  body.cljs$lang$maxFixedArity = 0;
  body.cljs$lang$applyTo = function(arglist__31383) {
    var args__11707__auto__ = cljs.core.seq(arglist__31383);
    return body__delegate(args__11707__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
quiescent.dom.br = function() {
  var br__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30240_31384 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30241_31385 = null;
    var count__30242_31386 = 0;
    var i__30243_31387 = 0;
    while (true) {
      if (i__30243_31387 < count__30242_31386) {
        var arg__11709__auto___31388 = cljs.core._nth.call(null, chunk__30241_31385, i__30243_31387);
        a__11708__auto__.push(arg__11709__auto___31388);
        var G__31389 = seq__30240_31384;
        var G__31390 = chunk__30241_31385;
        var G__31391 = count__30242_31386;
        var G__31392 = i__30243_31387 + 1;
        seq__30240_31384 = G__31389;
        chunk__30241_31385 = G__31390;
        count__30242_31386 = G__31391;
        i__30243_31387 = G__31392;
        continue;
      } else {
        var temp__4092__auto___31393 = cljs.core.seq.call(null, seq__30240_31384);
        if (temp__4092__auto___31393) {
          var seq__30240_31394__$1 = temp__4092__auto___31393;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30240_31394__$1)) {
            var c__11077__auto___31395 = cljs.core.chunk_first.call(null, seq__30240_31394__$1);
            var G__31396 = cljs.core.chunk_rest.call(null, seq__30240_31394__$1);
            var G__31397 = c__11077__auto___31395;
            var G__31398 = cljs.core.count.call(null, c__11077__auto___31395);
            var G__31399 = 0;
            seq__30240_31384 = G__31396;
            chunk__30241_31385 = G__31397;
            count__30242_31386 = G__31398;
            i__30243_31387 = G__31399;
            continue;
          } else {
            var arg__11709__auto___31400 = cljs.core.first.call(null, seq__30240_31394__$1);
            a__11708__auto__.push(arg__11709__auto___31400);
            var G__31401 = cljs.core.next.call(null, seq__30240_31394__$1);
            var G__31402 = null;
            var G__31403 = 0;
            var G__31404 = 0;
            seq__30240_31384 = G__31401;
            chunk__30241_31385 = G__31402;
            count__30242_31386 = G__31403;
            i__30243_31387 = G__31404;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.br.apply(null, a__11708__auto__);
  };
  var br = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return br__delegate.call(this, args__11707__auto__);
  };
  br.cljs$lang$maxFixedArity = 0;
  br.cljs$lang$applyTo = function(arglist__31405) {
    var args__11707__auto__ = cljs.core.seq(arglist__31405);
    return br__delegate(args__11707__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
quiescent.dom.button = function() {
  var button__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30248_31406 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30249_31407 = null;
    var count__30250_31408 = 0;
    var i__30251_31409 = 0;
    while (true) {
      if (i__30251_31409 < count__30250_31408) {
        var arg__11709__auto___31410 = cljs.core._nth.call(null, chunk__30249_31407, i__30251_31409);
        a__11708__auto__.push(arg__11709__auto___31410);
        var G__31411 = seq__30248_31406;
        var G__31412 = chunk__30249_31407;
        var G__31413 = count__30250_31408;
        var G__31414 = i__30251_31409 + 1;
        seq__30248_31406 = G__31411;
        chunk__30249_31407 = G__31412;
        count__30250_31408 = G__31413;
        i__30251_31409 = G__31414;
        continue;
      } else {
        var temp__4092__auto___31415 = cljs.core.seq.call(null, seq__30248_31406);
        if (temp__4092__auto___31415) {
          var seq__30248_31416__$1 = temp__4092__auto___31415;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30248_31416__$1)) {
            var c__11077__auto___31417 = cljs.core.chunk_first.call(null, seq__30248_31416__$1);
            var G__31418 = cljs.core.chunk_rest.call(null, seq__30248_31416__$1);
            var G__31419 = c__11077__auto___31417;
            var G__31420 = cljs.core.count.call(null, c__11077__auto___31417);
            var G__31421 = 0;
            seq__30248_31406 = G__31418;
            chunk__30249_31407 = G__31419;
            count__30250_31408 = G__31420;
            i__30251_31409 = G__31421;
            continue;
          } else {
            var arg__11709__auto___31422 = cljs.core.first.call(null, seq__30248_31416__$1);
            a__11708__auto__.push(arg__11709__auto___31422);
            var G__31423 = cljs.core.next.call(null, seq__30248_31416__$1);
            var G__31424 = null;
            var G__31425 = 0;
            var G__31426 = 0;
            seq__30248_31406 = G__31423;
            chunk__30249_31407 = G__31424;
            count__30250_31408 = G__31425;
            i__30251_31409 = G__31426;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.button.apply(null, a__11708__auto__);
  };
  var button = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return button__delegate.call(this, args__11707__auto__);
  };
  button.cljs$lang$maxFixedArity = 0;
  button.cljs$lang$applyTo = function(arglist__31427) {
    var args__11707__auto__ = cljs.core.seq(arglist__31427);
    return button__delegate(args__11707__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
quiescent.dom.canvas = function() {
  var canvas__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30256_31428 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30257_31429 = null;
    var count__30258_31430 = 0;
    var i__30259_31431 = 0;
    while (true) {
      if (i__30259_31431 < count__30258_31430) {
        var arg__11709__auto___31432 = cljs.core._nth.call(null, chunk__30257_31429, i__30259_31431);
        a__11708__auto__.push(arg__11709__auto___31432);
        var G__31433 = seq__30256_31428;
        var G__31434 = chunk__30257_31429;
        var G__31435 = count__30258_31430;
        var G__31436 = i__30259_31431 + 1;
        seq__30256_31428 = G__31433;
        chunk__30257_31429 = G__31434;
        count__30258_31430 = G__31435;
        i__30259_31431 = G__31436;
        continue;
      } else {
        var temp__4092__auto___31437 = cljs.core.seq.call(null, seq__30256_31428);
        if (temp__4092__auto___31437) {
          var seq__30256_31438__$1 = temp__4092__auto___31437;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30256_31438__$1)) {
            var c__11077__auto___31439 = cljs.core.chunk_first.call(null, seq__30256_31438__$1);
            var G__31440 = cljs.core.chunk_rest.call(null, seq__30256_31438__$1);
            var G__31441 = c__11077__auto___31439;
            var G__31442 = cljs.core.count.call(null, c__11077__auto___31439);
            var G__31443 = 0;
            seq__30256_31428 = G__31440;
            chunk__30257_31429 = G__31441;
            count__30258_31430 = G__31442;
            i__30259_31431 = G__31443;
            continue;
          } else {
            var arg__11709__auto___31444 = cljs.core.first.call(null, seq__30256_31438__$1);
            a__11708__auto__.push(arg__11709__auto___31444);
            var G__31445 = cljs.core.next.call(null, seq__30256_31438__$1);
            var G__31446 = null;
            var G__31447 = 0;
            var G__31448 = 0;
            seq__30256_31428 = G__31445;
            chunk__30257_31429 = G__31446;
            count__30258_31430 = G__31447;
            i__30259_31431 = G__31448;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.canvas.apply(null, a__11708__auto__);
  };
  var canvas = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return canvas__delegate.call(this, args__11707__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 0;
  canvas.cljs$lang$applyTo = function(arglist__31449) {
    var args__11707__auto__ = cljs.core.seq(arglist__31449);
    return canvas__delegate(args__11707__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
quiescent.dom.caption = function() {
  var caption__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30264_31450 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30265_31451 = null;
    var count__30266_31452 = 0;
    var i__30267_31453 = 0;
    while (true) {
      if (i__30267_31453 < count__30266_31452) {
        var arg__11709__auto___31454 = cljs.core._nth.call(null, chunk__30265_31451, i__30267_31453);
        a__11708__auto__.push(arg__11709__auto___31454);
        var G__31455 = seq__30264_31450;
        var G__31456 = chunk__30265_31451;
        var G__31457 = count__30266_31452;
        var G__31458 = i__30267_31453 + 1;
        seq__30264_31450 = G__31455;
        chunk__30265_31451 = G__31456;
        count__30266_31452 = G__31457;
        i__30267_31453 = G__31458;
        continue;
      } else {
        var temp__4092__auto___31459 = cljs.core.seq.call(null, seq__30264_31450);
        if (temp__4092__auto___31459) {
          var seq__30264_31460__$1 = temp__4092__auto___31459;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30264_31460__$1)) {
            var c__11077__auto___31461 = cljs.core.chunk_first.call(null, seq__30264_31460__$1);
            var G__31462 = cljs.core.chunk_rest.call(null, seq__30264_31460__$1);
            var G__31463 = c__11077__auto___31461;
            var G__31464 = cljs.core.count.call(null, c__11077__auto___31461);
            var G__31465 = 0;
            seq__30264_31450 = G__31462;
            chunk__30265_31451 = G__31463;
            count__30266_31452 = G__31464;
            i__30267_31453 = G__31465;
            continue;
          } else {
            var arg__11709__auto___31466 = cljs.core.first.call(null, seq__30264_31460__$1);
            a__11708__auto__.push(arg__11709__auto___31466);
            var G__31467 = cljs.core.next.call(null, seq__30264_31460__$1);
            var G__31468 = null;
            var G__31469 = 0;
            var G__31470 = 0;
            seq__30264_31450 = G__31467;
            chunk__30265_31451 = G__31468;
            count__30266_31452 = G__31469;
            i__30267_31453 = G__31470;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.caption.apply(null, a__11708__auto__);
  };
  var caption = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return caption__delegate.call(this, args__11707__auto__);
  };
  caption.cljs$lang$maxFixedArity = 0;
  caption.cljs$lang$applyTo = function(arglist__31471) {
    var args__11707__auto__ = cljs.core.seq(arglist__31471);
    return caption__delegate(args__11707__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
quiescent.dom.cite = function() {
  var cite__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30272_31472 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30273_31473 = null;
    var count__30274_31474 = 0;
    var i__30275_31475 = 0;
    while (true) {
      if (i__30275_31475 < count__30274_31474) {
        var arg__11709__auto___31476 = cljs.core._nth.call(null, chunk__30273_31473, i__30275_31475);
        a__11708__auto__.push(arg__11709__auto___31476);
        var G__31477 = seq__30272_31472;
        var G__31478 = chunk__30273_31473;
        var G__31479 = count__30274_31474;
        var G__31480 = i__30275_31475 + 1;
        seq__30272_31472 = G__31477;
        chunk__30273_31473 = G__31478;
        count__30274_31474 = G__31479;
        i__30275_31475 = G__31480;
        continue;
      } else {
        var temp__4092__auto___31481 = cljs.core.seq.call(null, seq__30272_31472);
        if (temp__4092__auto___31481) {
          var seq__30272_31482__$1 = temp__4092__auto___31481;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30272_31482__$1)) {
            var c__11077__auto___31483 = cljs.core.chunk_first.call(null, seq__30272_31482__$1);
            var G__31484 = cljs.core.chunk_rest.call(null, seq__30272_31482__$1);
            var G__31485 = c__11077__auto___31483;
            var G__31486 = cljs.core.count.call(null, c__11077__auto___31483);
            var G__31487 = 0;
            seq__30272_31472 = G__31484;
            chunk__30273_31473 = G__31485;
            count__30274_31474 = G__31486;
            i__30275_31475 = G__31487;
            continue;
          } else {
            var arg__11709__auto___31488 = cljs.core.first.call(null, seq__30272_31482__$1);
            a__11708__auto__.push(arg__11709__auto___31488);
            var G__31489 = cljs.core.next.call(null, seq__30272_31482__$1);
            var G__31490 = null;
            var G__31491 = 0;
            var G__31492 = 0;
            seq__30272_31472 = G__31489;
            chunk__30273_31473 = G__31490;
            count__30274_31474 = G__31491;
            i__30275_31475 = G__31492;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.cite.apply(null, a__11708__auto__);
  };
  var cite = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cite__delegate.call(this, args__11707__auto__);
  };
  cite.cljs$lang$maxFixedArity = 0;
  cite.cljs$lang$applyTo = function(arglist__31493) {
    var args__11707__auto__ = cljs.core.seq(arglist__31493);
    return cite__delegate(args__11707__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
quiescent.dom.code = function() {
  var code__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30280_31494 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30281_31495 = null;
    var count__30282_31496 = 0;
    var i__30283_31497 = 0;
    while (true) {
      if (i__30283_31497 < count__30282_31496) {
        var arg__11709__auto___31498 = cljs.core._nth.call(null, chunk__30281_31495, i__30283_31497);
        a__11708__auto__.push(arg__11709__auto___31498);
        var G__31499 = seq__30280_31494;
        var G__31500 = chunk__30281_31495;
        var G__31501 = count__30282_31496;
        var G__31502 = i__30283_31497 + 1;
        seq__30280_31494 = G__31499;
        chunk__30281_31495 = G__31500;
        count__30282_31496 = G__31501;
        i__30283_31497 = G__31502;
        continue;
      } else {
        var temp__4092__auto___31503 = cljs.core.seq.call(null, seq__30280_31494);
        if (temp__4092__auto___31503) {
          var seq__30280_31504__$1 = temp__4092__auto___31503;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30280_31504__$1)) {
            var c__11077__auto___31505 = cljs.core.chunk_first.call(null, seq__30280_31504__$1);
            var G__31506 = cljs.core.chunk_rest.call(null, seq__30280_31504__$1);
            var G__31507 = c__11077__auto___31505;
            var G__31508 = cljs.core.count.call(null, c__11077__auto___31505);
            var G__31509 = 0;
            seq__30280_31494 = G__31506;
            chunk__30281_31495 = G__31507;
            count__30282_31496 = G__31508;
            i__30283_31497 = G__31509;
            continue;
          } else {
            var arg__11709__auto___31510 = cljs.core.first.call(null, seq__30280_31504__$1);
            a__11708__auto__.push(arg__11709__auto___31510);
            var G__31511 = cljs.core.next.call(null, seq__30280_31504__$1);
            var G__31512 = null;
            var G__31513 = 0;
            var G__31514 = 0;
            seq__30280_31494 = G__31511;
            chunk__30281_31495 = G__31512;
            count__30282_31496 = G__31513;
            i__30283_31497 = G__31514;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.code.apply(null, a__11708__auto__);
  };
  var code = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return code__delegate.call(this, args__11707__auto__);
  };
  code.cljs$lang$maxFixedArity = 0;
  code.cljs$lang$applyTo = function(arglist__31515) {
    var args__11707__auto__ = cljs.core.seq(arglist__31515);
    return code__delegate(args__11707__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
quiescent.dom.col = function() {
  var col__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30288_31516 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30289_31517 = null;
    var count__30290_31518 = 0;
    var i__30291_31519 = 0;
    while (true) {
      if (i__30291_31519 < count__30290_31518) {
        var arg__11709__auto___31520 = cljs.core._nth.call(null, chunk__30289_31517, i__30291_31519);
        a__11708__auto__.push(arg__11709__auto___31520);
        var G__31521 = seq__30288_31516;
        var G__31522 = chunk__30289_31517;
        var G__31523 = count__30290_31518;
        var G__31524 = i__30291_31519 + 1;
        seq__30288_31516 = G__31521;
        chunk__30289_31517 = G__31522;
        count__30290_31518 = G__31523;
        i__30291_31519 = G__31524;
        continue;
      } else {
        var temp__4092__auto___31525 = cljs.core.seq.call(null, seq__30288_31516);
        if (temp__4092__auto___31525) {
          var seq__30288_31526__$1 = temp__4092__auto___31525;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30288_31526__$1)) {
            var c__11077__auto___31527 = cljs.core.chunk_first.call(null, seq__30288_31526__$1);
            var G__31528 = cljs.core.chunk_rest.call(null, seq__30288_31526__$1);
            var G__31529 = c__11077__auto___31527;
            var G__31530 = cljs.core.count.call(null, c__11077__auto___31527);
            var G__31531 = 0;
            seq__30288_31516 = G__31528;
            chunk__30289_31517 = G__31529;
            count__30290_31518 = G__31530;
            i__30291_31519 = G__31531;
            continue;
          } else {
            var arg__11709__auto___31532 = cljs.core.first.call(null, seq__30288_31526__$1);
            a__11708__auto__.push(arg__11709__auto___31532);
            var G__31533 = cljs.core.next.call(null, seq__30288_31526__$1);
            var G__31534 = null;
            var G__31535 = 0;
            var G__31536 = 0;
            seq__30288_31516 = G__31533;
            chunk__30289_31517 = G__31534;
            count__30290_31518 = G__31535;
            i__30291_31519 = G__31536;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.col.apply(null, a__11708__auto__);
  };
  var col = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col__delegate.call(this, args__11707__auto__);
  };
  col.cljs$lang$maxFixedArity = 0;
  col.cljs$lang$applyTo = function(arglist__31537) {
    var args__11707__auto__ = cljs.core.seq(arglist__31537);
    return col__delegate(args__11707__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
quiescent.dom.colgroup = function() {
  var colgroup__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30296_31538 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30297_31539 = null;
    var count__30298_31540 = 0;
    var i__30299_31541 = 0;
    while (true) {
      if (i__30299_31541 < count__30298_31540) {
        var arg__11709__auto___31542 = cljs.core._nth.call(null, chunk__30297_31539, i__30299_31541);
        a__11708__auto__.push(arg__11709__auto___31542);
        var G__31543 = seq__30296_31538;
        var G__31544 = chunk__30297_31539;
        var G__31545 = count__30298_31540;
        var G__31546 = i__30299_31541 + 1;
        seq__30296_31538 = G__31543;
        chunk__30297_31539 = G__31544;
        count__30298_31540 = G__31545;
        i__30299_31541 = G__31546;
        continue;
      } else {
        var temp__4092__auto___31547 = cljs.core.seq.call(null, seq__30296_31538);
        if (temp__4092__auto___31547) {
          var seq__30296_31548__$1 = temp__4092__auto___31547;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30296_31548__$1)) {
            var c__11077__auto___31549 = cljs.core.chunk_first.call(null, seq__30296_31548__$1);
            var G__31550 = cljs.core.chunk_rest.call(null, seq__30296_31548__$1);
            var G__31551 = c__11077__auto___31549;
            var G__31552 = cljs.core.count.call(null, c__11077__auto___31549);
            var G__31553 = 0;
            seq__30296_31538 = G__31550;
            chunk__30297_31539 = G__31551;
            count__30298_31540 = G__31552;
            i__30299_31541 = G__31553;
            continue;
          } else {
            var arg__11709__auto___31554 = cljs.core.first.call(null, seq__30296_31548__$1);
            a__11708__auto__.push(arg__11709__auto___31554);
            var G__31555 = cljs.core.next.call(null, seq__30296_31548__$1);
            var G__31556 = null;
            var G__31557 = 0;
            var G__31558 = 0;
            seq__30296_31538 = G__31555;
            chunk__30297_31539 = G__31556;
            count__30298_31540 = G__31557;
            i__30299_31541 = G__31558;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.colgroup.apply(null, a__11708__auto__);
  };
  var colgroup = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return colgroup__delegate.call(this, args__11707__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 0;
  colgroup.cljs$lang$applyTo = function(arglist__31559) {
    var args__11707__auto__ = cljs.core.seq(arglist__31559);
    return colgroup__delegate(args__11707__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
quiescent.dom.data = function() {
  var data__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30304_31560 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30305_31561 = null;
    var count__30306_31562 = 0;
    var i__30307_31563 = 0;
    while (true) {
      if (i__30307_31563 < count__30306_31562) {
        var arg__11709__auto___31564 = cljs.core._nth.call(null, chunk__30305_31561, i__30307_31563);
        a__11708__auto__.push(arg__11709__auto___31564);
        var G__31565 = seq__30304_31560;
        var G__31566 = chunk__30305_31561;
        var G__31567 = count__30306_31562;
        var G__31568 = i__30307_31563 + 1;
        seq__30304_31560 = G__31565;
        chunk__30305_31561 = G__31566;
        count__30306_31562 = G__31567;
        i__30307_31563 = G__31568;
        continue;
      } else {
        var temp__4092__auto___31569 = cljs.core.seq.call(null, seq__30304_31560);
        if (temp__4092__auto___31569) {
          var seq__30304_31570__$1 = temp__4092__auto___31569;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30304_31570__$1)) {
            var c__11077__auto___31571 = cljs.core.chunk_first.call(null, seq__30304_31570__$1);
            var G__31572 = cljs.core.chunk_rest.call(null, seq__30304_31570__$1);
            var G__31573 = c__11077__auto___31571;
            var G__31574 = cljs.core.count.call(null, c__11077__auto___31571);
            var G__31575 = 0;
            seq__30304_31560 = G__31572;
            chunk__30305_31561 = G__31573;
            count__30306_31562 = G__31574;
            i__30307_31563 = G__31575;
            continue;
          } else {
            var arg__11709__auto___31576 = cljs.core.first.call(null, seq__30304_31570__$1);
            a__11708__auto__.push(arg__11709__auto___31576);
            var G__31577 = cljs.core.next.call(null, seq__30304_31570__$1);
            var G__31578 = null;
            var G__31579 = 0;
            var G__31580 = 0;
            seq__30304_31560 = G__31577;
            chunk__30305_31561 = G__31578;
            count__30306_31562 = G__31579;
            i__30307_31563 = G__31580;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.data.apply(null, a__11708__auto__);
  };
  var data = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return data__delegate.call(this, args__11707__auto__);
  };
  data.cljs$lang$maxFixedArity = 0;
  data.cljs$lang$applyTo = function(arglist__31581) {
    var args__11707__auto__ = cljs.core.seq(arglist__31581);
    return data__delegate(args__11707__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
quiescent.dom.datalist = function() {
  var datalist__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30312_31582 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30313_31583 = null;
    var count__30314_31584 = 0;
    var i__30315_31585 = 0;
    while (true) {
      if (i__30315_31585 < count__30314_31584) {
        var arg__11709__auto___31586 = cljs.core._nth.call(null, chunk__30313_31583, i__30315_31585);
        a__11708__auto__.push(arg__11709__auto___31586);
        var G__31587 = seq__30312_31582;
        var G__31588 = chunk__30313_31583;
        var G__31589 = count__30314_31584;
        var G__31590 = i__30315_31585 + 1;
        seq__30312_31582 = G__31587;
        chunk__30313_31583 = G__31588;
        count__30314_31584 = G__31589;
        i__30315_31585 = G__31590;
        continue;
      } else {
        var temp__4092__auto___31591 = cljs.core.seq.call(null, seq__30312_31582);
        if (temp__4092__auto___31591) {
          var seq__30312_31592__$1 = temp__4092__auto___31591;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30312_31592__$1)) {
            var c__11077__auto___31593 = cljs.core.chunk_first.call(null, seq__30312_31592__$1);
            var G__31594 = cljs.core.chunk_rest.call(null, seq__30312_31592__$1);
            var G__31595 = c__11077__auto___31593;
            var G__31596 = cljs.core.count.call(null, c__11077__auto___31593);
            var G__31597 = 0;
            seq__30312_31582 = G__31594;
            chunk__30313_31583 = G__31595;
            count__30314_31584 = G__31596;
            i__30315_31585 = G__31597;
            continue;
          } else {
            var arg__11709__auto___31598 = cljs.core.first.call(null, seq__30312_31592__$1);
            a__11708__auto__.push(arg__11709__auto___31598);
            var G__31599 = cljs.core.next.call(null, seq__30312_31592__$1);
            var G__31600 = null;
            var G__31601 = 0;
            var G__31602 = 0;
            seq__30312_31582 = G__31599;
            chunk__30313_31583 = G__31600;
            count__30314_31584 = G__31601;
            i__30315_31585 = G__31602;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.datalist.apply(null, a__11708__auto__);
  };
  var datalist = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return datalist__delegate.call(this, args__11707__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 0;
  datalist.cljs$lang$applyTo = function(arglist__31603) {
    var args__11707__auto__ = cljs.core.seq(arglist__31603);
    return datalist__delegate(args__11707__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
quiescent.dom.dd = function() {
  var dd__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30320_31604 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30321_31605 = null;
    var count__30322_31606 = 0;
    var i__30323_31607 = 0;
    while (true) {
      if (i__30323_31607 < count__30322_31606) {
        var arg__11709__auto___31608 = cljs.core._nth.call(null, chunk__30321_31605, i__30323_31607);
        a__11708__auto__.push(arg__11709__auto___31608);
        var G__31609 = seq__30320_31604;
        var G__31610 = chunk__30321_31605;
        var G__31611 = count__30322_31606;
        var G__31612 = i__30323_31607 + 1;
        seq__30320_31604 = G__31609;
        chunk__30321_31605 = G__31610;
        count__30322_31606 = G__31611;
        i__30323_31607 = G__31612;
        continue;
      } else {
        var temp__4092__auto___31613 = cljs.core.seq.call(null, seq__30320_31604);
        if (temp__4092__auto___31613) {
          var seq__30320_31614__$1 = temp__4092__auto___31613;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30320_31614__$1)) {
            var c__11077__auto___31615 = cljs.core.chunk_first.call(null, seq__30320_31614__$1);
            var G__31616 = cljs.core.chunk_rest.call(null, seq__30320_31614__$1);
            var G__31617 = c__11077__auto___31615;
            var G__31618 = cljs.core.count.call(null, c__11077__auto___31615);
            var G__31619 = 0;
            seq__30320_31604 = G__31616;
            chunk__30321_31605 = G__31617;
            count__30322_31606 = G__31618;
            i__30323_31607 = G__31619;
            continue;
          } else {
            var arg__11709__auto___31620 = cljs.core.first.call(null, seq__30320_31614__$1);
            a__11708__auto__.push(arg__11709__auto___31620);
            var G__31621 = cljs.core.next.call(null, seq__30320_31614__$1);
            var G__31622 = null;
            var G__31623 = 0;
            var G__31624 = 0;
            seq__30320_31604 = G__31621;
            chunk__30321_31605 = G__31622;
            count__30322_31606 = G__31623;
            i__30323_31607 = G__31624;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dd.apply(null, a__11708__auto__);
  };
  var dd = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dd__delegate.call(this, args__11707__auto__);
  };
  dd.cljs$lang$maxFixedArity = 0;
  dd.cljs$lang$applyTo = function(arglist__31625) {
    var args__11707__auto__ = cljs.core.seq(arglist__31625);
    return dd__delegate(args__11707__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
quiescent.dom.del = function() {
  var del__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30328_31626 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30329_31627 = null;
    var count__30330_31628 = 0;
    var i__30331_31629 = 0;
    while (true) {
      if (i__30331_31629 < count__30330_31628) {
        var arg__11709__auto___31630 = cljs.core._nth.call(null, chunk__30329_31627, i__30331_31629);
        a__11708__auto__.push(arg__11709__auto___31630);
        var G__31631 = seq__30328_31626;
        var G__31632 = chunk__30329_31627;
        var G__31633 = count__30330_31628;
        var G__31634 = i__30331_31629 + 1;
        seq__30328_31626 = G__31631;
        chunk__30329_31627 = G__31632;
        count__30330_31628 = G__31633;
        i__30331_31629 = G__31634;
        continue;
      } else {
        var temp__4092__auto___31635 = cljs.core.seq.call(null, seq__30328_31626);
        if (temp__4092__auto___31635) {
          var seq__30328_31636__$1 = temp__4092__auto___31635;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30328_31636__$1)) {
            var c__11077__auto___31637 = cljs.core.chunk_first.call(null, seq__30328_31636__$1);
            var G__31638 = cljs.core.chunk_rest.call(null, seq__30328_31636__$1);
            var G__31639 = c__11077__auto___31637;
            var G__31640 = cljs.core.count.call(null, c__11077__auto___31637);
            var G__31641 = 0;
            seq__30328_31626 = G__31638;
            chunk__30329_31627 = G__31639;
            count__30330_31628 = G__31640;
            i__30331_31629 = G__31641;
            continue;
          } else {
            var arg__11709__auto___31642 = cljs.core.first.call(null, seq__30328_31636__$1);
            a__11708__auto__.push(arg__11709__auto___31642);
            var G__31643 = cljs.core.next.call(null, seq__30328_31636__$1);
            var G__31644 = null;
            var G__31645 = 0;
            var G__31646 = 0;
            seq__30328_31626 = G__31643;
            chunk__30329_31627 = G__31644;
            count__30330_31628 = G__31645;
            i__30331_31629 = G__31646;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.del.apply(null, a__11708__auto__);
  };
  var del = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return del__delegate.call(this, args__11707__auto__);
  };
  del.cljs$lang$maxFixedArity = 0;
  del.cljs$lang$applyTo = function(arglist__31647) {
    var args__11707__auto__ = cljs.core.seq(arglist__31647);
    return del__delegate(args__11707__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
quiescent.dom.details = function() {
  var details__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30336_31648 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30337_31649 = null;
    var count__30338_31650 = 0;
    var i__30339_31651 = 0;
    while (true) {
      if (i__30339_31651 < count__30338_31650) {
        var arg__11709__auto___31652 = cljs.core._nth.call(null, chunk__30337_31649, i__30339_31651);
        a__11708__auto__.push(arg__11709__auto___31652);
        var G__31653 = seq__30336_31648;
        var G__31654 = chunk__30337_31649;
        var G__31655 = count__30338_31650;
        var G__31656 = i__30339_31651 + 1;
        seq__30336_31648 = G__31653;
        chunk__30337_31649 = G__31654;
        count__30338_31650 = G__31655;
        i__30339_31651 = G__31656;
        continue;
      } else {
        var temp__4092__auto___31657 = cljs.core.seq.call(null, seq__30336_31648);
        if (temp__4092__auto___31657) {
          var seq__30336_31658__$1 = temp__4092__auto___31657;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30336_31658__$1)) {
            var c__11077__auto___31659 = cljs.core.chunk_first.call(null, seq__30336_31658__$1);
            var G__31660 = cljs.core.chunk_rest.call(null, seq__30336_31658__$1);
            var G__31661 = c__11077__auto___31659;
            var G__31662 = cljs.core.count.call(null, c__11077__auto___31659);
            var G__31663 = 0;
            seq__30336_31648 = G__31660;
            chunk__30337_31649 = G__31661;
            count__30338_31650 = G__31662;
            i__30339_31651 = G__31663;
            continue;
          } else {
            var arg__11709__auto___31664 = cljs.core.first.call(null, seq__30336_31658__$1);
            a__11708__auto__.push(arg__11709__auto___31664);
            var G__31665 = cljs.core.next.call(null, seq__30336_31658__$1);
            var G__31666 = null;
            var G__31667 = 0;
            var G__31668 = 0;
            seq__30336_31648 = G__31665;
            chunk__30337_31649 = G__31666;
            count__30338_31650 = G__31667;
            i__30339_31651 = G__31668;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.details.apply(null, a__11708__auto__);
  };
  var details = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return details__delegate.call(this, args__11707__auto__);
  };
  details.cljs$lang$maxFixedArity = 0;
  details.cljs$lang$applyTo = function(arglist__31669) {
    var args__11707__auto__ = cljs.core.seq(arglist__31669);
    return details__delegate(args__11707__auto__);
  };
  details.cljs$core$IFn$_invoke$arity$variadic = details__delegate;
  return details;
}();
quiescent.dom.dfn = function() {
  var dfn__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30344_31670 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30345_31671 = null;
    var count__30346_31672 = 0;
    var i__30347_31673 = 0;
    while (true) {
      if (i__30347_31673 < count__30346_31672) {
        var arg__11709__auto___31674 = cljs.core._nth.call(null, chunk__30345_31671, i__30347_31673);
        a__11708__auto__.push(arg__11709__auto___31674);
        var G__31675 = seq__30344_31670;
        var G__31676 = chunk__30345_31671;
        var G__31677 = count__30346_31672;
        var G__31678 = i__30347_31673 + 1;
        seq__30344_31670 = G__31675;
        chunk__30345_31671 = G__31676;
        count__30346_31672 = G__31677;
        i__30347_31673 = G__31678;
        continue;
      } else {
        var temp__4092__auto___31679 = cljs.core.seq.call(null, seq__30344_31670);
        if (temp__4092__auto___31679) {
          var seq__30344_31680__$1 = temp__4092__auto___31679;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30344_31680__$1)) {
            var c__11077__auto___31681 = cljs.core.chunk_first.call(null, seq__30344_31680__$1);
            var G__31682 = cljs.core.chunk_rest.call(null, seq__30344_31680__$1);
            var G__31683 = c__11077__auto___31681;
            var G__31684 = cljs.core.count.call(null, c__11077__auto___31681);
            var G__31685 = 0;
            seq__30344_31670 = G__31682;
            chunk__30345_31671 = G__31683;
            count__30346_31672 = G__31684;
            i__30347_31673 = G__31685;
            continue;
          } else {
            var arg__11709__auto___31686 = cljs.core.first.call(null, seq__30344_31680__$1);
            a__11708__auto__.push(arg__11709__auto___31686);
            var G__31687 = cljs.core.next.call(null, seq__30344_31680__$1);
            var G__31688 = null;
            var G__31689 = 0;
            var G__31690 = 0;
            seq__30344_31670 = G__31687;
            chunk__30345_31671 = G__31688;
            count__30346_31672 = G__31689;
            i__30347_31673 = G__31690;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dfn.apply(null, a__11708__auto__);
  };
  var dfn = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dfn__delegate.call(this, args__11707__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 0;
  dfn.cljs$lang$applyTo = function(arglist__31691) {
    var args__11707__auto__ = cljs.core.seq(arglist__31691);
    return dfn__delegate(args__11707__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
quiescent.dom.div = function() {
  var div__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30352_31692 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30353_31693 = null;
    var count__30354_31694 = 0;
    var i__30355_31695 = 0;
    while (true) {
      if (i__30355_31695 < count__30354_31694) {
        var arg__11709__auto___31696 = cljs.core._nth.call(null, chunk__30353_31693, i__30355_31695);
        a__11708__auto__.push(arg__11709__auto___31696);
        var G__31697 = seq__30352_31692;
        var G__31698 = chunk__30353_31693;
        var G__31699 = count__30354_31694;
        var G__31700 = i__30355_31695 + 1;
        seq__30352_31692 = G__31697;
        chunk__30353_31693 = G__31698;
        count__30354_31694 = G__31699;
        i__30355_31695 = G__31700;
        continue;
      } else {
        var temp__4092__auto___31701 = cljs.core.seq.call(null, seq__30352_31692);
        if (temp__4092__auto___31701) {
          var seq__30352_31702__$1 = temp__4092__auto___31701;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30352_31702__$1)) {
            var c__11077__auto___31703 = cljs.core.chunk_first.call(null, seq__30352_31702__$1);
            var G__31704 = cljs.core.chunk_rest.call(null, seq__30352_31702__$1);
            var G__31705 = c__11077__auto___31703;
            var G__31706 = cljs.core.count.call(null, c__11077__auto___31703);
            var G__31707 = 0;
            seq__30352_31692 = G__31704;
            chunk__30353_31693 = G__31705;
            count__30354_31694 = G__31706;
            i__30355_31695 = G__31707;
            continue;
          } else {
            var arg__11709__auto___31708 = cljs.core.first.call(null, seq__30352_31702__$1);
            a__11708__auto__.push(arg__11709__auto___31708);
            var G__31709 = cljs.core.next.call(null, seq__30352_31702__$1);
            var G__31710 = null;
            var G__31711 = 0;
            var G__31712 = 0;
            seq__30352_31692 = G__31709;
            chunk__30353_31693 = G__31710;
            count__30354_31694 = G__31711;
            i__30355_31695 = G__31712;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.div.apply(null, a__11708__auto__);
  };
  var div = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return div__delegate.call(this, args__11707__auto__);
  };
  div.cljs$lang$maxFixedArity = 0;
  div.cljs$lang$applyTo = function(arglist__31713) {
    var args__11707__auto__ = cljs.core.seq(arglist__31713);
    return div__delegate(args__11707__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
quiescent.dom.dl = function() {
  var dl__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30360_31714 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30361_31715 = null;
    var count__30362_31716 = 0;
    var i__30363_31717 = 0;
    while (true) {
      if (i__30363_31717 < count__30362_31716) {
        var arg__11709__auto___31718 = cljs.core._nth.call(null, chunk__30361_31715, i__30363_31717);
        a__11708__auto__.push(arg__11709__auto___31718);
        var G__31719 = seq__30360_31714;
        var G__31720 = chunk__30361_31715;
        var G__31721 = count__30362_31716;
        var G__31722 = i__30363_31717 + 1;
        seq__30360_31714 = G__31719;
        chunk__30361_31715 = G__31720;
        count__30362_31716 = G__31721;
        i__30363_31717 = G__31722;
        continue;
      } else {
        var temp__4092__auto___31723 = cljs.core.seq.call(null, seq__30360_31714);
        if (temp__4092__auto___31723) {
          var seq__30360_31724__$1 = temp__4092__auto___31723;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30360_31724__$1)) {
            var c__11077__auto___31725 = cljs.core.chunk_first.call(null, seq__30360_31724__$1);
            var G__31726 = cljs.core.chunk_rest.call(null, seq__30360_31724__$1);
            var G__31727 = c__11077__auto___31725;
            var G__31728 = cljs.core.count.call(null, c__11077__auto___31725);
            var G__31729 = 0;
            seq__30360_31714 = G__31726;
            chunk__30361_31715 = G__31727;
            count__30362_31716 = G__31728;
            i__30363_31717 = G__31729;
            continue;
          } else {
            var arg__11709__auto___31730 = cljs.core.first.call(null, seq__30360_31724__$1);
            a__11708__auto__.push(arg__11709__auto___31730);
            var G__31731 = cljs.core.next.call(null, seq__30360_31724__$1);
            var G__31732 = null;
            var G__31733 = 0;
            var G__31734 = 0;
            seq__30360_31714 = G__31731;
            chunk__30361_31715 = G__31732;
            count__30362_31716 = G__31733;
            i__30363_31717 = G__31734;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dl.apply(null, a__11708__auto__);
  };
  var dl = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dl__delegate.call(this, args__11707__auto__);
  };
  dl.cljs$lang$maxFixedArity = 0;
  dl.cljs$lang$applyTo = function(arglist__31735) {
    var args__11707__auto__ = cljs.core.seq(arglist__31735);
    return dl__delegate(args__11707__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
quiescent.dom.dt = function() {
  var dt__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30368_31736 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30369_31737 = null;
    var count__30370_31738 = 0;
    var i__30371_31739 = 0;
    while (true) {
      if (i__30371_31739 < count__30370_31738) {
        var arg__11709__auto___31740 = cljs.core._nth.call(null, chunk__30369_31737, i__30371_31739);
        a__11708__auto__.push(arg__11709__auto___31740);
        var G__31741 = seq__30368_31736;
        var G__31742 = chunk__30369_31737;
        var G__31743 = count__30370_31738;
        var G__31744 = i__30371_31739 + 1;
        seq__30368_31736 = G__31741;
        chunk__30369_31737 = G__31742;
        count__30370_31738 = G__31743;
        i__30371_31739 = G__31744;
        continue;
      } else {
        var temp__4092__auto___31745 = cljs.core.seq.call(null, seq__30368_31736);
        if (temp__4092__auto___31745) {
          var seq__30368_31746__$1 = temp__4092__auto___31745;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30368_31746__$1)) {
            var c__11077__auto___31747 = cljs.core.chunk_first.call(null, seq__30368_31746__$1);
            var G__31748 = cljs.core.chunk_rest.call(null, seq__30368_31746__$1);
            var G__31749 = c__11077__auto___31747;
            var G__31750 = cljs.core.count.call(null, c__11077__auto___31747);
            var G__31751 = 0;
            seq__30368_31736 = G__31748;
            chunk__30369_31737 = G__31749;
            count__30370_31738 = G__31750;
            i__30371_31739 = G__31751;
            continue;
          } else {
            var arg__11709__auto___31752 = cljs.core.first.call(null, seq__30368_31746__$1);
            a__11708__auto__.push(arg__11709__auto___31752);
            var G__31753 = cljs.core.next.call(null, seq__30368_31746__$1);
            var G__31754 = null;
            var G__31755 = 0;
            var G__31756 = 0;
            seq__30368_31736 = G__31753;
            chunk__30369_31737 = G__31754;
            count__30370_31738 = G__31755;
            i__30371_31739 = G__31756;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dt.apply(null, a__11708__auto__);
  };
  var dt = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dt__delegate.call(this, args__11707__auto__);
  };
  dt.cljs$lang$maxFixedArity = 0;
  dt.cljs$lang$applyTo = function(arglist__31757) {
    var args__11707__auto__ = cljs.core.seq(arglist__31757);
    return dt__delegate(args__11707__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
quiescent.dom.em = function() {
  var em__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30376_31758 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30377_31759 = null;
    var count__30378_31760 = 0;
    var i__30379_31761 = 0;
    while (true) {
      if (i__30379_31761 < count__30378_31760) {
        var arg__11709__auto___31762 = cljs.core._nth.call(null, chunk__30377_31759, i__30379_31761);
        a__11708__auto__.push(arg__11709__auto___31762);
        var G__31763 = seq__30376_31758;
        var G__31764 = chunk__30377_31759;
        var G__31765 = count__30378_31760;
        var G__31766 = i__30379_31761 + 1;
        seq__30376_31758 = G__31763;
        chunk__30377_31759 = G__31764;
        count__30378_31760 = G__31765;
        i__30379_31761 = G__31766;
        continue;
      } else {
        var temp__4092__auto___31767 = cljs.core.seq.call(null, seq__30376_31758);
        if (temp__4092__auto___31767) {
          var seq__30376_31768__$1 = temp__4092__auto___31767;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30376_31768__$1)) {
            var c__11077__auto___31769 = cljs.core.chunk_first.call(null, seq__30376_31768__$1);
            var G__31770 = cljs.core.chunk_rest.call(null, seq__30376_31768__$1);
            var G__31771 = c__11077__auto___31769;
            var G__31772 = cljs.core.count.call(null, c__11077__auto___31769);
            var G__31773 = 0;
            seq__30376_31758 = G__31770;
            chunk__30377_31759 = G__31771;
            count__30378_31760 = G__31772;
            i__30379_31761 = G__31773;
            continue;
          } else {
            var arg__11709__auto___31774 = cljs.core.first.call(null, seq__30376_31768__$1);
            a__11708__auto__.push(arg__11709__auto___31774);
            var G__31775 = cljs.core.next.call(null, seq__30376_31768__$1);
            var G__31776 = null;
            var G__31777 = 0;
            var G__31778 = 0;
            seq__30376_31758 = G__31775;
            chunk__30377_31759 = G__31776;
            count__30378_31760 = G__31777;
            i__30379_31761 = G__31778;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.em.apply(null, a__11708__auto__);
  };
  var em = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return em__delegate.call(this, args__11707__auto__);
  };
  em.cljs$lang$maxFixedArity = 0;
  em.cljs$lang$applyTo = function(arglist__31779) {
    var args__11707__auto__ = cljs.core.seq(arglist__31779);
    return em__delegate(args__11707__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
quiescent.dom.embed = function() {
  var embed__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30392_31780 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30393_31781 = null;
    var count__30394_31782 = 0;
    var i__30395_31783 = 0;
    while (true) {
      if (i__30395_31783 < count__30394_31782) {
        var arg__11709__auto___31784 = cljs.core._nth.call(null, chunk__30393_31781, i__30395_31783);
        a__11708__auto__.push(arg__11709__auto___31784);
        var G__31785 = seq__30392_31780;
        var G__31786 = chunk__30393_31781;
        var G__31787 = count__30394_31782;
        var G__31788 = i__30395_31783 + 1;
        seq__30392_31780 = G__31785;
        chunk__30393_31781 = G__31786;
        count__30394_31782 = G__31787;
        i__30395_31783 = G__31788;
        continue;
      } else {
        var temp__4092__auto___31789 = cljs.core.seq.call(null, seq__30392_31780);
        if (temp__4092__auto___31789) {
          var seq__30392_31790__$1 = temp__4092__auto___31789;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30392_31790__$1)) {
            var c__11077__auto___31791 = cljs.core.chunk_first.call(null, seq__30392_31790__$1);
            var G__31792 = cljs.core.chunk_rest.call(null, seq__30392_31790__$1);
            var G__31793 = c__11077__auto___31791;
            var G__31794 = cljs.core.count.call(null, c__11077__auto___31791);
            var G__31795 = 0;
            seq__30392_31780 = G__31792;
            chunk__30393_31781 = G__31793;
            count__30394_31782 = G__31794;
            i__30395_31783 = G__31795;
            continue;
          } else {
            var arg__11709__auto___31796 = cljs.core.first.call(null, seq__30392_31790__$1);
            a__11708__auto__.push(arg__11709__auto___31796);
            var G__31797 = cljs.core.next.call(null, seq__30392_31790__$1);
            var G__31798 = null;
            var G__31799 = 0;
            var G__31800 = 0;
            seq__30392_31780 = G__31797;
            chunk__30393_31781 = G__31798;
            count__30394_31782 = G__31799;
            i__30395_31783 = G__31800;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.embed.apply(null, a__11708__auto__);
  };
  var embed = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return embed__delegate.call(this, args__11707__auto__);
  };
  embed.cljs$lang$maxFixedArity = 0;
  embed.cljs$lang$applyTo = function(arglist__31801) {
    var args__11707__auto__ = cljs.core.seq(arglist__31801);
    return embed__delegate(args__11707__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
quiescent.dom.fieldset = function() {
  var fieldset__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30400_31802 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30401_31803 = null;
    var count__30402_31804 = 0;
    var i__30403_31805 = 0;
    while (true) {
      if (i__30403_31805 < count__30402_31804) {
        var arg__11709__auto___31806 = cljs.core._nth.call(null, chunk__30401_31803, i__30403_31805);
        a__11708__auto__.push(arg__11709__auto___31806);
        var G__31807 = seq__30400_31802;
        var G__31808 = chunk__30401_31803;
        var G__31809 = count__30402_31804;
        var G__31810 = i__30403_31805 + 1;
        seq__30400_31802 = G__31807;
        chunk__30401_31803 = G__31808;
        count__30402_31804 = G__31809;
        i__30403_31805 = G__31810;
        continue;
      } else {
        var temp__4092__auto___31811 = cljs.core.seq.call(null, seq__30400_31802);
        if (temp__4092__auto___31811) {
          var seq__30400_31812__$1 = temp__4092__auto___31811;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30400_31812__$1)) {
            var c__11077__auto___31813 = cljs.core.chunk_first.call(null, seq__30400_31812__$1);
            var G__31814 = cljs.core.chunk_rest.call(null, seq__30400_31812__$1);
            var G__31815 = c__11077__auto___31813;
            var G__31816 = cljs.core.count.call(null, c__11077__auto___31813);
            var G__31817 = 0;
            seq__30400_31802 = G__31814;
            chunk__30401_31803 = G__31815;
            count__30402_31804 = G__31816;
            i__30403_31805 = G__31817;
            continue;
          } else {
            var arg__11709__auto___31818 = cljs.core.first.call(null, seq__30400_31812__$1);
            a__11708__auto__.push(arg__11709__auto___31818);
            var G__31819 = cljs.core.next.call(null, seq__30400_31812__$1);
            var G__31820 = null;
            var G__31821 = 0;
            var G__31822 = 0;
            seq__30400_31802 = G__31819;
            chunk__30401_31803 = G__31820;
            count__30402_31804 = G__31821;
            i__30403_31805 = G__31822;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.fieldset.apply(null, a__11708__auto__);
  };
  var fieldset = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return fieldset__delegate.call(this, args__11707__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 0;
  fieldset.cljs$lang$applyTo = function(arglist__31823) {
    var args__11707__auto__ = cljs.core.seq(arglist__31823);
    return fieldset__delegate(args__11707__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
quiescent.dom.figcaption = function() {
  var figcaption__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30408_31824 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30409_31825 = null;
    var count__30410_31826 = 0;
    var i__30411_31827 = 0;
    while (true) {
      if (i__30411_31827 < count__30410_31826) {
        var arg__11709__auto___31828 = cljs.core._nth.call(null, chunk__30409_31825, i__30411_31827);
        a__11708__auto__.push(arg__11709__auto___31828);
        var G__31829 = seq__30408_31824;
        var G__31830 = chunk__30409_31825;
        var G__31831 = count__30410_31826;
        var G__31832 = i__30411_31827 + 1;
        seq__30408_31824 = G__31829;
        chunk__30409_31825 = G__31830;
        count__30410_31826 = G__31831;
        i__30411_31827 = G__31832;
        continue;
      } else {
        var temp__4092__auto___31833 = cljs.core.seq.call(null, seq__30408_31824);
        if (temp__4092__auto___31833) {
          var seq__30408_31834__$1 = temp__4092__auto___31833;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30408_31834__$1)) {
            var c__11077__auto___31835 = cljs.core.chunk_first.call(null, seq__30408_31834__$1);
            var G__31836 = cljs.core.chunk_rest.call(null, seq__30408_31834__$1);
            var G__31837 = c__11077__auto___31835;
            var G__31838 = cljs.core.count.call(null, c__11077__auto___31835);
            var G__31839 = 0;
            seq__30408_31824 = G__31836;
            chunk__30409_31825 = G__31837;
            count__30410_31826 = G__31838;
            i__30411_31827 = G__31839;
            continue;
          } else {
            var arg__11709__auto___31840 = cljs.core.first.call(null, seq__30408_31834__$1);
            a__11708__auto__.push(arg__11709__auto___31840);
            var G__31841 = cljs.core.next.call(null, seq__30408_31834__$1);
            var G__31842 = null;
            var G__31843 = 0;
            var G__31844 = 0;
            seq__30408_31824 = G__31841;
            chunk__30409_31825 = G__31842;
            count__30410_31826 = G__31843;
            i__30411_31827 = G__31844;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figcaption.apply(null, a__11708__auto__);
  };
  var figcaption = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figcaption__delegate.call(this, args__11707__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 0;
  figcaption.cljs$lang$applyTo = function(arglist__31845) {
    var args__11707__auto__ = cljs.core.seq(arglist__31845);
    return figcaption__delegate(args__11707__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
quiescent.dom.figure = function() {
  var figure__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30416_31846 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30417_31847 = null;
    var count__30418_31848 = 0;
    var i__30419_31849 = 0;
    while (true) {
      if (i__30419_31849 < count__30418_31848) {
        var arg__11709__auto___31850 = cljs.core._nth.call(null, chunk__30417_31847, i__30419_31849);
        a__11708__auto__.push(arg__11709__auto___31850);
        var G__31851 = seq__30416_31846;
        var G__31852 = chunk__30417_31847;
        var G__31853 = count__30418_31848;
        var G__31854 = i__30419_31849 + 1;
        seq__30416_31846 = G__31851;
        chunk__30417_31847 = G__31852;
        count__30418_31848 = G__31853;
        i__30419_31849 = G__31854;
        continue;
      } else {
        var temp__4092__auto___31855 = cljs.core.seq.call(null, seq__30416_31846);
        if (temp__4092__auto___31855) {
          var seq__30416_31856__$1 = temp__4092__auto___31855;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30416_31856__$1)) {
            var c__11077__auto___31857 = cljs.core.chunk_first.call(null, seq__30416_31856__$1);
            var G__31858 = cljs.core.chunk_rest.call(null, seq__30416_31856__$1);
            var G__31859 = c__11077__auto___31857;
            var G__31860 = cljs.core.count.call(null, c__11077__auto___31857);
            var G__31861 = 0;
            seq__30416_31846 = G__31858;
            chunk__30417_31847 = G__31859;
            count__30418_31848 = G__31860;
            i__30419_31849 = G__31861;
            continue;
          } else {
            var arg__11709__auto___31862 = cljs.core.first.call(null, seq__30416_31856__$1);
            a__11708__auto__.push(arg__11709__auto___31862);
            var G__31863 = cljs.core.next.call(null, seq__30416_31856__$1);
            var G__31864 = null;
            var G__31865 = 0;
            var G__31866 = 0;
            seq__30416_31846 = G__31863;
            chunk__30417_31847 = G__31864;
            count__30418_31848 = G__31865;
            i__30419_31849 = G__31866;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figure.apply(null, a__11708__auto__);
  };
  var figure = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figure__delegate.call(this, args__11707__auto__);
  };
  figure.cljs$lang$maxFixedArity = 0;
  figure.cljs$lang$applyTo = function(arglist__31867) {
    var args__11707__auto__ = cljs.core.seq(arglist__31867);
    return figure__delegate(args__11707__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
quiescent.dom.footer = function() {
  var footer__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30424_31868 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30425_31869 = null;
    var count__30426_31870 = 0;
    var i__30427_31871 = 0;
    while (true) {
      if (i__30427_31871 < count__30426_31870) {
        var arg__11709__auto___31872 = cljs.core._nth.call(null, chunk__30425_31869, i__30427_31871);
        a__11708__auto__.push(arg__11709__auto___31872);
        var G__31873 = seq__30424_31868;
        var G__31874 = chunk__30425_31869;
        var G__31875 = count__30426_31870;
        var G__31876 = i__30427_31871 + 1;
        seq__30424_31868 = G__31873;
        chunk__30425_31869 = G__31874;
        count__30426_31870 = G__31875;
        i__30427_31871 = G__31876;
        continue;
      } else {
        var temp__4092__auto___31877 = cljs.core.seq.call(null, seq__30424_31868);
        if (temp__4092__auto___31877) {
          var seq__30424_31878__$1 = temp__4092__auto___31877;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30424_31878__$1)) {
            var c__11077__auto___31879 = cljs.core.chunk_first.call(null, seq__30424_31878__$1);
            var G__31880 = cljs.core.chunk_rest.call(null, seq__30424_31878__$1);
            var G__31881 = c__11077__auto___31879;
            var G__31882 = cljs.core.count.call(null, c__11077__auto___31879);
            var G__31883 = 0;
            seq__30424_31868 = G__31880;
            chunk__30425_31869 = G__31881;
            count__30426_31870 = G__31882;
            i__30427_31871 = G__31883;
            continue;
          } else {
            var arg__11709__auto___31884 = cljs.core.first.call(null, seq__30424_31878__$1);
            a__11708__auto__.push(arg__11709__auto___31884);
            var G__31885 = cljs.core.next.call(null, seq__30424_31878__$1);
            var G__31886 = null;
            var G__31887 = 0;
            var G__31888 = 0;
            seq__30424_31868 = G__31885;
            chunk__30425_31869 = G__31886;
            count__30426_31870 = G__31887;
            i__30427_31871 = G__31888;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.footer.apply(null, a__11708__auto__);
  };
  var footer = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return footer__delegate.call(this, args__11707__auto__);
  };
  footer.cljs$lang$maxFixedArity = 0;
  footer.cljs$lang$applyTo = function(arglist__31889) {
    var args__11707__auto__ = cljs.core.seq(arglist__31889);
    return footer__delegate(args__11707__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
quiescent.dom.form = function() {
  var form__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30432_31890 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30433_31891 = null;
    var count__30434_31892 = 0;
    var i__30435_31893 = 0;
    while (true) {
      if (i__30435_31893 < count__30434_31892) {
        var arg__11709__auto___31894 = cljs.core._nth.call(null, chunk__30433_31891, i__30435_31893);
        a__11708__auto__.push(arg__11709__auto___31894);
        var G__31895 = seq__30432_31890;
        var G__31896 = chunk__30433_31891;
        var G__31897 = count__30434_31892;
        var G__31898 = i__30435_31893 + 1;
        seq__30432_31890 = G__31895;
        chunk__30433_31891 = G__31896;
        count__30434_31892 = G__31897;
        i__30435_31893 = G__31898;
        continue;
      } else {
        var temp__4092__auto___31899 = cljs.core.seq.call(null, seq__30432_31890);
        if (temp__4092__auto___31899) {
          var seq__30432_31900__$1 = temp__4092__auto___31899;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30432_31900__$1)) {
            var c__11077__auto___31901 = cljs.core.chunk_first.call(null, seq__30432_31900__$1);
            var G__31902 = cljs.core.chunk_rest.call(null, seq__30432_31900__$1);
            var G__31903 = c__11077__auto___31901;
            var G__31904 = cljs.core.count.call(null, c__11077__auto___31901);
            var G__31905 = 0;
            seq__30432_31890 = G__31902;
            chunk__30433_31891 = G__31903;
            count__30434_31892 = G__31904;
            i__30435_31893 = G__31905;
            continue;
          } else {
            var arg__11709__auto___31906 = cljs.core.first.call(null, seq__30432_31900__$1);
            a__11708__auto__.push(arg__11709__auto___31906);
            var G__31907 = cljs.core.next.call(null, seq__30432_31900__$1);
            var G__31908 = null;
            var G__31909 = 0;
            var G__31910 = 0;
            seq__30432_31890 = G__31907;
            chunk__30433_31891 = G__31908;
            count__30434_31892 = G__31909;
            i__30435_31893 = G__31910;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.form.apply(null, a__11708__auto__);
  };
  var form = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return form__delegate.call(this, args__11707__auto__);
  };
  form.cljs$lang$maxFixedArity = 0;
  form.cljs$lang$applyTo = function(arglist__31911) {
    var args__11707__auto__ = cljs.core.seq(arglist__31911);
    return form__delegate(args__11707__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
quiescent.dom.h1 = function() {
  var h1__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30440_31912 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30441_31913 = null;
    var count__30442_31914 = 0;
    var i__30443_31915 = 0;
    while (true) {
      if (i__30443_31915 < count__30442_31914) {
        var arg__11709__auto___31916 = cljs.core._nth.call(null, chunk__30441_31913, i__30443_31915);
        a__11708__auto__.push(arg__11709__auto___31916);
        var G__31917 = seq__30440_31912;
        var G__31918 = chunk__30441_31913;
        var G__31919 = count__30442_31914;
        var G__31920 = i__30443_31915 + 1;
        seq__30440_31912 = G__31917;
        chunk__30441_31913 = G__31918;
        count__30442_31914 = G__31919;
        i__30443_31915 = G__31920;
        continue;
      } else {
        var temp__4092__auto___31921 = cljs.core.seq.call(null, seq__30440_31912);
        if (temp__4092__auto___31921) {
          var seq__30440_31922__$1 = temp__4092__auto___31921;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30440_31922__$1)) {
            var c__11077__auto___31923 = cljs.core.chunk_first.call(null, seq__30440_31922__$1);
            var G__31924 = cljs.core.chunk_rest.call(null, seq__30440_31922__$1);
            var G__31925 = c__11077__auto___31923;
            var G__31926 = cljs.core.count.call(null, c__11077__auto___31923);
            var G__31927 = 0;
            seq__30440_31912 = G__31924;
            chunk__30441_31913 = G__31925;
            count__30442_31914 = G__31926;
            i__30443_31915 = G__31927;
            continue;
          } else {
            var arg__11709__auto___31928 = cljs.core.first.call(null, seq__30440_31922__$1);
            a__11708__auto__.push(arg__11709__auto___31928);
            var G__31929 = cljs.core.next.call(null, seq__30440_31922__$1);
            var G__31930 = null;
            var G__31931 = 0;
            var G__31932 = 0;
            seq__30440_31912 = G__31929;
            chunk__30441_31913 = G__31930;
            count__30442_31914 = G__31931;
            i__30443_31915 = G__31932;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h1.apply(null, a__11708__auto__);
  };
  var h1 = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h1__delegate.call(this, args__11707__auto__);
  };
  h1.cljs$lang$maxFixedArity = 0;
  h1.cljs$lang$applyTo = function(arglist__31933) {
    var args__11707__auto__ = cljs.core.seq(arglist__31933);
    return h1__delegate(args__11707__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
quiescent.dom.h2 = function() {
  var h2__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30448_31934 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30449_31935 = null;
    var count__30450_31936 = 0;
    var i__30451_31937 = 0;
    while (true) {
      if (i__30451_31937 < count__30450_31936) {
        var arg__11709__auto___31938 = cljs.core._nth.call(null, chunk__30449_31935, i__30451_31937);
        a__11708__auto__.push(arg__11709__auto___31938);
        var G__31939 = seq__30448_31934;
        var G__31940 = chunk__30449_31935;
        var G__31941 = count__30450_31936;
        var G__31942 = i__30451_31937 + 1;
        seq__30448_31934 = G__31939;
        chunk__30449_31935 = G__31940;
        count__30450_31936 = G__31941;
        i__30451_31937 = G__31942;
        continue;
      } else {
        var temp__4092__auto___31943 = cljs.core.seq.call(null, seq__30448_31934);
        if (temp__4092__auto___31943) {
          var seq__30448_31944__$1 = temp__4092__auto___31943;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30448_31944__$1)) {
            var c__11077__auto___31945 = cljs.core.chunk_first.call(null, seq__30448_31944__$1);
            var G__31946 = cljs.core.chunk_rest.call(null, seq__30448_31944__$1);
            var G__31947 = c__11077__auto___31945;
            var G__31948 = cljs.core.count.call(null, c__11077__auto___31945);
            var G__31949 = 0;
            seq__30448_31934 = G__31946;
            chunk__30449_31935 = G__31947;
            count__30450_31936 = G__31948;
            i__30451_31937 = G__31949;
            continue;
          } else {
            var arg__11709__auto___31950 = cljs.core.first.call(null, seq__30448_31944__$1);
            a__11708__auto__.push(arg__11709__auto___31950);
            var G__31951 = cljs.core.next.call(null, seq__30448_31944__$1);
            var G__31952 = null;
            var G__31953 = 0;
            var G__31954 = 0;
            seq__30448_31934 = G__31951;
            chunk__30449_31935 = G__31952;
            count__30450_31936 = G__31953;
            i__30451_31937 = G__31954;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h2.apply(null, a__11708__auto__);
  };
  var h2 = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h2__delegate.call(this, args__11707__auto__);
  };
  h2.cljs$lang$maxFixedArity = 0;
  h2.cljs$lang$applyTo = function(arglist__31955) {
    var args__11707__auto__ = cljs.core.seq(arglist__31955);
    return h2__delegate(args__11707__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
quiescent.dom.h3 = function() {
  var h3__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30456_31956 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30457_31957 = null;
    var count__30458_31958 = 0;
    var i__30459_31959 = 0;
    while (true) {
      if (i__30459_31959 < count__30458_31958) {
        var arg__11709__auto___31960 = cljs.core._nth.call(null, chunk__30457_31957, i__30459_31959);
        a__11708__auto__.push(arg__11709__auto___31960);
        var G__31961 = seq__30456_31956;
        var G__31962 = chunk__30457_31957;
        var G__31963 = count__30458_31958;
        var G__31964 = i__30459_31959 + 1;
        seq__30456_31956 = G__31961;
        chunk__30457_31957 = G__31962;
        count__30458_31958 = G__31963;
        i__30459_31959 = G__31964;
        continue;
      } else {
        var temp__4092__auto___31965 = cljs.core.seq.call(null, seq__30456_31956);
        if (temp__4092__auto___31965) {
          var seq__30456_31966__$1 = temp__4092__auto___31965;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30456_31966__$1)) {
            var c__11077__auto___31967 = cljs.core.chunk_first.call(null, seq__30456_31966__$1);
            var G__31968 = cljs.core.chunk_rest.call(null, seq__30456_31966__$1);
            var G__31969 = c__11077__auto___31967;
            var G__31970 = cljs.core.count.call(null, c__11077__auto___31967);
            var G__31971 = 0;
            seq__30456_31956 = G__31968;
            chunk__30457_31957 = G__31969;
            count__30458_31958 = G__31970;
            i__30459_31959 = G__31971;
            continue;
          } else {
            var arg__11709__auto___31972 = cljs.core.first.call(null, seq__30456_31966__$1);
            a__11708__auto__.push(arg__11709__auto___31972);
            var G__31973 = cljs.core.next.call(null, seq__30456_31966__$1);
            var G__31974 = null;
            var G__31975 = 0;
            var G__31976 = 0;
            seq__30456_31956 = G__31973;
            chunk__30457_31957 = G__31974;
            count__30458_31958 = G__31975;
            i__30459_31959 = G__31976;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h3.apply(null, a__11708__auto__);
  };
  var h3 = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h3__delegate.call(this, args__11707__auto__);
  };
  h3.cljs$lang$maxFixedArity = 0;
  h3.cljs$lang$applyTo = function(arglist__31977) {
    var args__11707__auto__ = cljs.core.seq(arglist__31977);
    return h3__delegate(args__11707__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
quiescent.dom.h4 = function() {
  var h4__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30464_31978 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30465_31979 = null;
    var count__30466_31980 = 0;
    var i__30467_31981 = 0;
    while (true) {
      if (i__30467_31981 < count__30466_31980) {
        var arg__11709__auto___31982 = cljs.core._nth.call(null, chunk__30465_31979, i__30467_31981);
        a__11708__auto__.push(arg__11709__auto___31982);
        var G__31983 = seq__30464_31978;
        var G__31984 = chunk__30465_31979;
        var G__31985 = count__30466_31980;
        var G__31986 = i__30467_31981 + 1;
        seq__30464_31978 = G__31983;
        chunk__30465_31979 = G__31984;
        count__30466_31980 = G__31985;
        i__30467_31981 = G__31986;
        continue;
      } else {
        var temp__4092__auto___31987 = cljs.core.seq.call(null, seq__30464_31978);
        if (temp__4092__auto___31987) {
          var seq__30464_31988__$1 = temp__4092__auto___31987;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30464_31988__$1)) {
            var c__11077__auto___31989 = cljs.core.chunk_first.call(null, seq__30464_31988__$1);
            var G__31990 = cljs.core.chunk_rest.call(null, seq__30464_31988__$1);
            var G__31991 = c__11077__auto___31989;
            var G__31992 = cljs.core.count.call(null, c__11077__auto___31989);
            var G__31993 = 0;
            seq__30464_31978 = G__31990;
            chunk__30465_31979 = G__31991;
            count__30466_31980 = G__31992;
            i__30467_31981 = G__31993;
            continue;
          } else {
            var arg__11709__auto___31994 = cljs.core.first.call(null, seq__30464_31988__$1);
            a__11708__auto__.push(arg__11709__auto___31994);
            var G__31995 = cljs.core.next.call(null, seq__30464_31988__$1);
            var G__31996 = null;
            var G__31997 = 0;
            var G__31998 = 0;
            seq__30464_31978 = G__31995;
            chunk__30465_31979 = G__31996;
            count__30466_31980 = G__31997;
            i__30467_31981 = G__31998;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h4.apply(null, a__11708__auto__);
  };
  var h4 = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h4__delegate.call(this, args__11707__auto__);
  };
  h4.cljs$lang$maxFixedArity = 0;
  h4.cljs$lang$applyTo = function(arglist__31999) {
    var args__11707__auto__ = cljs.core.seq(arglist__31999);
    return h4__delegate(args__11707__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
quiescent.dom.h5 = function() {
  var h5__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30472_32000 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30473_32001 = null;
    var count__30474_32002 = 0;
    var i__30475_32003 = 0;
    while (true) {
      if (i__30475_32003 < count__30474_32002) {
        var arg__11709__auto___32004 = cljs.core._nth.call(null, chunk__30473_32001, i__30475_32003);
        a__11708__auto__.push(arg__11709__auto___32004);
        var G__32005 = seq__30472_32000;
        var G__32006 = chunk__30473_32001;
        var G__32007 = count__30474_32002;
        var G__32008 = i__30475_32003 + 1;
        seq__30472_32000 = G__32005;
        chunk__30473_32001 = G__32006;
        count__30474_32002 = G__32007;
        i__30475_32003 = G__32008;
        continue;
      } else {
        var temp__4092__auto___32009 = cljs.core.seq.call(null, seq__30472_32000);
        if (temp__4092__auto___32009) {
          var seq__30472_32010__$1 = temp__4092__auto___32009;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30472_32010__$1)) {
            var c__11077__auto___32011 = cljs.core.chunk_first.call(null, seq__30472_32010__$1);
            var G__32012 = cljs.core.chunk_rest.call(null, seq__30472_32010__$1);
            var G__32013 = c__11077__auto___32011;
            var G__32014 = cljs.core.count.call(null, c__11077__auto___32011);
            var G__32015 = 0;
            seq__30472_32000 = G__32012;
            chunk__30473_32001 = G__32013;
            count__30474_32002 = G__32014;
            i__30475_32003 = G__32015;
            continue;
          } else {
            var arg__11709__auto___32016 = cljs.core.first.call(null, seq__30472_32010__$1);
            a__11708__auto__.push(arg__11709__auto___32016);
            var G__32017 = cljs.core.next.call(null, seq__30472_32010__$1);
            var G__32018 = null;
            var G__32019 = 0;
            var G__32020 = 0;
            seq__30472_32000 = G__32017;
            chunk__30473_32001 = G__32018;
            count__30474_32002 = G__32019;
            i__30475_32003 = G__32020;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h5.apply(null, a__11708__auto__);
  };
  var h5 = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h5__delegate.call(this, args__11707__auto__);
  };
  h5.cljs$lang$maxFixedArity = 0;
  h5.cljs$lang$applyTo = function(arglist__32021) {
    var args__11707__auto__ = cljs.core.seq(arglist__32021);
    return h5__delegate(args__11707__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
quiescent.dom.h6 = function() {
  var h6__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30480_32022 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30481_32023 = null;
    var count__30482_32024 = 0;
    var i__30483_32025 = 0;
    while (true) {
      if (i__30483_32025 < count__30482_32024) {
        var arg__11709__auto___32026 = cljs.core._nth.call(null, chunk__30481_32023, i__30483_32025);
        a__11708__auto__.push(arg__11709__auto___32026);
        var G__32027 = seq__30480_32022;
        var G__32028 = chunk__30481_32023;
        var G__32029 = count__30482_32024;
        var G__32030 = i__30483_32025 + 1;
        seq__30480_32022 = G__32027;
        chunk__30481_32023 = G__32028;
        count__30482_32024 = G__32029;
        i__30483_32025 = G__32030;
        continue;
      } else {
        var temp__4092__auto___32031 = cljs.core.seq.call(null, seq__30480_32022);
        if (temp__4092__auto___32031) {
          var seq__30480_32032__$1 = temp__4092__auto___32031;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30480_32032__$1)) {
            var c__11077__auto___32033 = cljs.core.chunk_first.call(null, seq__30480_32032__$1);
            var G__32034 = cljs.core.chunk_rest.call(null, seq__30480_32032__$1);
            var G__32035 = c__11077__auto___32033;
            var G__32036 = cljs.core.count.call(null, c__11077__auto___32033);
            var G__32037 = 0;
            seq__30480_32022 = G__32034;
            chunk__30481_32023 = G__32035;
            count__30482_32024 = G__32036;
            i__30483_32025 = G__32037;
            continue;
          } else {
            var arg__11709__auto___32038 = cljs.core.first.call(null, seq__30480_32032__$1);
            a__11708__auto__.push(arg__11709__auto___32038);
            var G__32039 = cljs.core.next.call(null, seq__30480_32032__$1);
            var G__32040 = null;
            var G__32041 = 0;
            var G__32042 = 0;
            seq__30480_32022 = G__32039;
            chunk__30481_32023 = G__32040;
            count__30482_32024 = G__32041;
            i__30483_32025 = G__32042;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h6.apply(null, a__11708__auto__);
  };
  var h6 = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h6__delegate.call(this, args__11707__auto__);
  };
  h6.cljs$lang$maxFixedArity = 0;
  h6.cljs$lang$applyTo = function(arglist__32043) {
    var args__11707__auto__ = cljs.core.seq(arglist__32043);
    return h6__delegate(args__11707__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
quiescent.dom.head = function() {
  var head__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30488_32044 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30489_32045 = null;
    var count__30490_32046 = 0;
    var i__30491_32047 = 0;
    while (true) {
      if (i__30491_32047 < count__30490_32046) {
        var arg__11709__auto___32048 = cljs.core._nth.call(null, chunk__30489_32045, i__30491_32047);
        a__11708__auto__.push(arg__11709__auto___32048);
        var G__32049 = seq__30488_32044;
        var G__32050 = chunk__30489_32045;
        var G__32051 = count__30490_32046;
        var G__32052 = i__30491_32047 + 1;
        seq__30488_32044 = G__32049;
        chunk__30489_32045 = G__32050;
        count__30490_32046 = G__32051;
        i__30491_32047 = G__32052;
        continue;
      } else {
        var temp__4092__auto___32053 = cljs.core.seq.call(null, seq__30488_32044);
        if (temp__4092__auto___32053) {
          var seq__30488_32054__$1 = temp__4092__auto___32053;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30488_32054__$1)) {
            var c__11077__auto___32055 = cljs.core.chunk_first.call(null, seq__30488_32054__$1);
            var G__32056 = cljs.core.chunk_rest.call(null, seq__30488_32054__$1);
            var G__32057 = c__11077__auto___32055;
            var G__32058 = cljs.core.count.call(null, c__11077__auto___32055);
            var G__32059 = 0;
            seq__30488_32044 = G__32056;
            chunk__30489_32045 = G__32057;
            count__30490_32046 = G__32058;
            i__30491_32047 = G__32059;
            continue;
          } else {
            var arg__11709__auto___32060 = cljs.core.first.call(null, seq__30488_32054__$1);
            a__11708__auto__.push(arg__11709__auto___32060);
            var G__32061 = cljs.core.next.call(null, seq__30488_32054__$1);
            var G__32062 = null;
            var G__32063 = 0;
            var G__32064 = 0;
            seq__30488_32044 = G__32061;
            chunk__30489_32045 = G__32062;
            count__30490_32046 = G__32063;
            i__30491_32047 = G__32064;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.head.apply(null, a__11708__auto__);
  };
  var head = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return head__delegate.call(this, args__11707__auto__);
  };
  head.cljs$lang$maxFixedArity = 0;
  head.cljs$lang$applyTo = function(arglist__32065) {
    var args__11707__auto__ = cljs.core.seq(arglist__32065);
    return head__delegate(args__11707__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
quiescent.dom.header = function() {
  var header__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30496_32066 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30497_32067 = null;
    var count__30498_32068 = 0;
    var i__30499_32069 = 0;
    while (true) {
      if (i__30499_32069 < count__30498_32068) {
        var arg__11709__auto___32070 = cljs.core._nth.call(null, chunk__30497_32067, i__30499_32069);
        a__11708__auto__.push(arg__11709__auto___32070);
        var G__32071 = seq__30496_32066;
        var G__32072 = chunk__30497_32067;
        var G__32073 = count__30498_32068;
        var G__32074 = i__30499_32069 + 1;
        seq__30496_32066 = G__32071;
        chunk__30497_32067 = G__32072;
        count__30498_32068 = G__32073;
        i__30499_32069 = G__32074;
        continue;
      } else {
        var temp__4092__auto___32075 = cljs.core.seq.call(null, seq__30496_32066);
        if (temp__4092__auto___32075) {
          var seq__30496_32076__$1 = temp__4092__auto___32075;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30496_32076__$1)) {
            var c__11077__auto___32077 = cljs.core.chunk_first.call(null, seq__30496_32076__$1);
            var G__32078 = cljs.core.chunk_rest.call(null, seq__30496_32076__$1);
            var G__32079 = c__11077__auto___32077;
            var G__32080 = cljs.core.count.call(null, c__11077__auto___32077);
            var G__32081 = 0;
            seq__30496_32066 = G__32078;
            chunk__30497_32067 = G__32079;
            count__30498_32068 = G__32080;
            i__30499_32069 = G__32081;
            continue;
          } else {
            var arg__11709__auto___32082 = cljs.core.first.call(null, seq__30496_32076__$1);
            a__11708__auto__.push(arg__11709__auto___32082);
            var G__32083 = cljs.core.next.call(null, seq__30496_32076__$1);
            var G__32084 = null;
            var G__32085 = 0;
            var G__32086 = 0;
            seq__30496_32066 = G__32083;
            chunk__30497_32067 = G__32084;
            count__30498_32068 = G__32085;
            i__30499_32069 = G__32086;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.header.apply(null, a__11708__auto__);
  };
  var header = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return header__delegate.call(this, args__11707__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__32087) {
    var args__11707__auto__ = cljs.core.seq(arglist__32087);
    return header__delegate(args__11707__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
quiescent.dom.hr = function() {
  var hr__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30504_32088 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30505_32089 = null;
    var count__30506_32090 = 0;
    var i__30507_32091 = 0;
    while (true) {
      if (i__30507_32091 < count__30506_32090) {
        var arg__11709__auto___32092 = cljs.core._nth.call(null, chunk__30505_32089, i__30507_32091);
        a__11708__auto__.push(arg__11709__auto___32092);
        var G__32093 = seq__30504_32088;
        var G__32094 = chunk__30505_32089;
        var G__32095 = count__30506_32090;
        var G__32096 = i__30507_32091 + 1;
        seq__30504_32088 = G__32093;
        chunk__30505_32089 = G__32094;
        count__30506_32090 = G__32095;
        i__30507_32091 = G__32096;
        continue;
      } else {
        var temp__4092__auto___32097 = cljs.core.seq.call(null, seq__30504_32088);
        if (temp__4092__auto___32097) {
          var seq__30504_32098__$1 = temp__4092__auto___32097;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30504_32098__$1)) {
            var c__11077__auto___32099 = cljs.core.chunk_first.call(null, seq__30504_32098__$1);
            var G__32100 = cljs.core.chunk_rest.call(null, seq__30504_32098__$1);
            var G__32101 = c__11077__auto___32099;
            var G__32102 = cljs.core.count.call(null, c__11077__auto___32099);
            var G__32103 = 0;
            seq__30504_32088 = G__32100;
            chunk__30505_32089 = G__32101;
            count__30506_32090 = G__32102;
            i__30507_32091 = G__32103;
            continue;
          } else {
            var arg__11709__auto___32104 = cljs.core.first.call(null, seq__30504_32098__$1);
            a__11708__auto__.push(arg__11709__auto___32104);
            var G__32105 = cljs.core.next.call(null, seq__30504_32098__$1);
            var G__32106 = null;
            var G__32107 = 0;
            var G__32108 = 0;
            seq__30504_32088 = G__32105;
            chunk__30505_32089 = G__32106;
            count__30506_32090 = G__32107;
            i__30507_32091 = G__32108;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.hr.apply(null, a__11708__auto__);
  };
  var hr = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hr__delegate.call(this, args__11707__auto__);
  };
  hr.cljs$lang$maxFixedArity = 0;
  hr.cljs$lang$applyTo = function(arglist__32109) {
    var args__11707__auto__ = cljs.core.seq(arglist__32109);
    return hr__delegate(args__11707__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
quiescent.dom.html = function() {
  var html__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30512_32110 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30513_32111 = null;
    var count__30514_32112 = 0;
    var i__30515_32113 = 0;
    while (true) {
      if (i__30515_32113 < count__30514_32112) {
        var arg__11709__auto___32114 = cljs.core._nth.call(null, chunk__30513_32111, i__30515_32113);
        a__11708__auto__.push(arg__11709__auto___32114);
        var G__32115 = seq__30512_32110;
        var G__32116 = chunk__30513_32111;
        var G__32117 = count__30514_32112;
        var G__32118 = i__30515_32113 + 1;
        seq__30512_32110 = G__32115;
        chunk__30513_32111 = G__32116;
        count__30514_32112 = G__32117;
        i__30515_32113 = G__32118;
        continue;
      } else {
        var temp__4092__auto___32119 = cljs.core.seq.call(null, seq__30512_32110);
        if (temp__4092__auto___32119) {
          var seq__30512_32120__$1 = temp__4092__auto___32119;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30512_32120__$1)) {
            var c__11077__auto___32121 = cljs.core.chunk_first.call(null, seq__30512_32120__$1);
            var G__32122 = cljs.core.chunk_rest.call(null, seq__30512_32120__$1);
            var G__32123 = c__11077__auto___32121;
            var G__32124 = cljs.core.count.call(null, c__11077__auto___32121);
            var G__32125 = 0;
            seq__30512_32110 = G__32122;
            chunk__30513_32111 = G__32123;
            count__30514_32112 = G__32124;
            i__30515_32113 = G__32125;
            continue;
          } else {
            var arg__11709__auto___32126 = cljs.core.first.call(null, seq__30512_32120__$1);
            a__11708__auto__.push(arg__11709__auto___32126);
            var G__32127 = cljs.core.next.call(null, seq__30512_32120__$1);
            var G__32128 = null;
            var G__32129 = 0;
            var G__32130 = 0;
            seq__30512_32110 = G__32127;
            chunk__30513_32111 = G__32128;
            count__30514_32112 = G__32129;
            i__30515_32113 = G__32130;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.html.apply(null, a__11708__auto__);
  };
  var html = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return html__delegate.call(this, args__11707__auto__);
  };
  html.cljs$lang$maxFixedArity = 0;
  html.cljs$lang$applyTo = function(arglist__32131) {
    var args__11707__auto__ = cljs.core.seq(arglist__32131);
    return html__delegate(args__11707__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
quiescent.dom.i = function() {
  var i__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30520_32132 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30521_32133 = null;
    var count__30522_32134 = 0;
    var i__30523_32135 = 0;
    while (true) {
      if (i__30523_32135 < count__30522_32134) {
        var arg__11709__auto___32136 = cljs.core._nth.call(null, chunk__30521_32133, i__30523_32135);
        a__11708__auto__.push(arg__11709__auto___32136);
        var G__32137 = seq__30520_32132;
        var G__32138 = chunk__30521_32133;
        var G__32139 = count__30522_32134;
        var G__32140 = i__30523_32135 + 1;
        seq__30520_32132 = G__32137;
        chunk__30521_32133 = G__32138;
        count__30522_32134 = G__32139;
        i__30523_32135 = G__32140;
        continue;
      } else {
        var temp__4092__auto___32141 = cljs.core.seq.call(null, seq__30520_32132);
        if (temp__4092__auto___32141) {
          var seq__30520_32142__$1 = temp__4092__auto___32141;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30520_32142__$1)) {
            var c__11077__auto___32143 = cljs.core.chunk_first.call(null, seq__30520_32142__$1);
            var G__32144 = cljs.core.chunk_rest.call(null, seq__30520_32142__$1);
            var G__32145 = c__11077__auto___32143;
            var G__32146 = cljs.core.count.call(null, c__11077__auto___32143);
            var G__32147 = 0;
            seq__30520_32132 = G__32144;
            chunk__30521_32133 = G__32145;
            count__30522_32134 = G__32146;
            i__30523_32135 = G__32147;
            continue;
          } else {
            var arg__11709__auto___32148 = cljs.core.first.call(null, seq__30520_32142__$1);
            a__11708__auto__.push(arg__11709__auto___32148);
            var G__32149 = cljs.core.next.call(null, seq__30520_32142__$1);
            var G__32150 = null;
            var G__32151 = 0;
            var G__32152 = 0;
            seq__30520_32132 = G__32149;
            chunk__30521_32133 = G__32150;
            count__30522_32134 = G__32151;
            i__30523_32135 = G__32152;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.i.apply(null, a__11708__auto__);
  };
  var i = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return i__delegate.call(this, args__11707__auto__);
  };
  i.cljs$lang$maxFixedArity = 0;
  i.cljs$lang$applyTo = function(arglist__32153) {
    var args__11707__auto__ = cljs.core.seq(arglist__32153);
    return i__delegate(args__11707__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
quiescent.dom.iframe = function() {
  var iframe__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30528_32154 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30529_32155 = null;
    var count__30530_32156 = 0;
    var i__30531_32157 = 0;
    while (true) {
      if (i__30531_32157 < count__30530_32156) {
        var arg__11709__auto___32158 = cljs.core._nth.call(null, chunk__30529_32155, i__30531_32157);
        a__11708__auto__.push(arg__11709__auto___32158);
        var G__32159 = seq__30528_32154;
        var G__32160 = chunk__30529_32155;
        var G__32161 = count__30530_32156;
        var G__32162 = i__30531_32157 + 1;
        seq__30528_32154 = G__32159;
        chunk__30529_32155 = G__32160;
        count__30530_32156 = G__32161;
        i__30531_32157 = G__32162;
        continue;
      } else {
        var temp__4092__auto___32163 = cljs.core.seq.call(null, seq__30528_32154);
        if (temp__4092__auto___32163) {
          var seq__30528_32164__$1 = temp__4092__auto___32163;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30528_32164__$1)) {
            var c__11077__auto___32165 = cljs.core.chunk_first.call(null, seq__30528_32164__$1);
            var G__32166 = cljs.core.chunk_rest.call(null, seq__30528_32164__$1);
            var G__32167 = c__11077__auto___32165;
            var G__32168 = cljs.core.count.call(null, c__11077__auto___32165);
            var G__32169 = 0;
            seq__30528_32154 = G__32166;
            chunk__30529_32155 = G__32167;
            count__30530_32156 = G__32168;
            i__30531_32157 = G__32169;
            continue;
          } else {
            var arg__11709__auto___32170 = cljs.core.first.call(null, seq__30528_32164__$1);
            a__11708__auto__.push(arg__11709__auto___32170);
            var G__32171 = cljs.core.next.call(null, seq__30528_32164__$1);
            var G__32172 = null;
            var G__32173 = 0;
            var G__32174 = 0;
            seq__30528_32154 = G__32171;
            chunk__30529_32155 = G__32172;
            count__30530_32156 = G__32173;
            i__30531_32157 = G__32174;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.iframe.apply(null, a__11708__auto__);
  };
  var iframe = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return iframe__delegate.call(this, args__11707__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 0;
  iframe.cljs$lang$applyTo = function(arglist__32175) {
    var args__11707__auto__ = cljs.core.seq(arglist__32175);
    return iframe__delegate(args__11707__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
quiescent.dom.img = function() {
  var img__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30536_32176 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30537_32177 = null;
    var count__30538_32178 = 0;
    var i__30539_32179 = 0;
    while (true) {
      if (i__30539_32179 < count__30538_32178) {
        var arg__11709__auto___32180 = cljs.core._nth.call(null, chunk__30537_32177, i__30539_32179);
        a__11708__auto__.push(arg__11709__auto___32180);
        var G__32181 = seq__30536_32176;
        var G__32182 = chunk__30537_32177;
        var G__32183 = count__30538_32178;
        var G__32184 = i__30539_32179 + 1;
        seq__30536_32176 = G__32181;
        chunk__30537_32177 = G__32182;
        count__30538_32178 = G__32183;
        i__30539_32179 = G__32184;
        continue;
      } else {
        var temp__4092__auto___32185 = cljs.core.seq.call(null, seq__30536_32176);
        if (temp__4092__auto___32185) {
          var seq__30536_32186__$1 = temp__4092__auto___32185;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30536_32186__$1)) {
            var c__11077__auto___32187 = cljs.core.chunk_first.call(null, seq__30536_32186__$1);
            var G__32188 = cljs.core.chunk_rest.call(null, seq__30536_32186__$1);
            var G__32189 = c__11077__auto___32187;
            var G__32190 = cljs.core.count.call(null, c__11077__auto___32187);
            var G__32191 = 0;
            seq__30536_32176 = G__32188;
            chunk__30537_32177 = G__32189;
            count__30538_32178 = G__32190;
            i__30539_32179 = G__32191;
            continue;
          } else {
            var arg__11709__auto___32192 = cljs.core.first.call(null, seq__30536_32186__$1);
            a__11708__auto__.push(arg__11709__auto___32192);
            var G__32193 = cljs.core.next.call(null, seq__30536_32186__$1);
            var G__32194 = null;
            var G__32195 = 0;
            var G__32196 = 0;
            seq__30536_32176 = G__32193;
            chunk__30537_32177 = G__32194;
            count__30538_32178 = G__32195;
            i__30539_32179 = G__32196;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.img.apply(null, a__11708__auto__);
  };
  var img = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return img__delegate.call(this, args__11707__auto__);
  };
  img.cljs$lang$maxFixedArity = 0;
  img.cljs$lang$applyTo = function(arglist__32197) {
    var args__11707__auto__ = cljs.core.seq(arglist__32197);
    return img__delegate(args__11707__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
quiescent.dom.input = function() {
  var input__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30544_32198 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30545_32199 = null;
    var count__30546_32200 = 0;
    var i__30547_32201 = 0;
    while (true) {
      if (i__30547_32201 < count__30546_32200) {
        var arg__11709__auto___32202 = cljs.core._nth.call(null, chunk__30545_32199, i__30547_32201);
        a__11708__auto__.push(arg__11709__auto___32202);
        var G__32203 = seq__30544_32198;
        var G__32204 = chunk__30545_32199;
        var G__32205 = count__30546_32200;
        var G__32206 = i__30547_32201 + 1;
        seq__30544_32198 = G__32203;
        chunk__30545_32199 = G__32204;
        count__30546_32200 = G__32205;
        i__30547_32201 = G__32206;
        continue;
      } else {
        var temp__4092__auto___32207 = cljs.core.seq.call(null, seq__30544_32198);
        if (temp__4092__auto___32207) {
          var seq__30544_32208__$1 = temp__4092__auto___32207;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30544_32208__$1)) {
            var c__11077__auto___32209 = cljs.core.chunk_first.call(null, seq__30544_32208__$1);
            var G__32210 = cljs.core.chunk_rest.call(null, seq__30544_32208__$1);
            var G__32211 = c__11077__auto___32209;
            var G__32212 = cljs.core.count.call(null, c__11077__auto___32209);
            var G__32213 = 0;
            seq__30544_32198 = G__32210;
            chunk__30545_32199 = G__32211;
            count__30546_32200 = G__32212;
            i__30547_32201 = G__32213;
            continue;
          } else {
            var arg__11709__auto___32214 = cljs.core.first.call(null, seq__30544_32208__$1);
            a__11708__auto__.push(arg__11709__auto___32214);
            var G__32215 = cljs.core.next.call(null, seq__30544_32208__$1);
            var G__32216 = null;
            var G__32217 = 0;
            var G__32218 = 0;
            seq__30544_32198 = G__32215;
            chunk__30545_32199 = G__32216;
            count__30546_32200 = G__32217;
            i__30547_32201 = G__32218;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.input.apply(null, a__11708__auto__);
  };
  var input = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return input__delegate.call(this, args__11707__auto__);
  };
  input.cljs$lang$maxFixedArity = 0;
  input.cljs$lang$applyTo = function(arglist__32219) {
    var args__11707__auto__ = cljs.core.seq(arglist__32219);
    return input__delegate(args__11707__auto__);
  };
  input.cljs$core$IFn$_invoke$arity$variadic = input__delegate;
  return input;
}();
quiescent.dom.ins = function() {
  var ins__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30552_32220 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30553_32221 = null;
    var count__30554_32222 = 0;
    var i__30555_32223 = 0;
    while (true) {
      if (i__30555_32223 < count__30554_32222) {
        var arg__11709__auto___32224 = cljs.core._nth.call(null, chunk__30553_32221, i__30555_32223);
        a__11708__auto__.push(arg__11709__auto___32224);
        var G__32225 = seq__30552_32220;
        var G__32226 = chunk__30553_32221;
        var G__32227 = count__30554_32222;
        var G__32228 = i__30555_32223 + 1;
        seq__30552_32220 = G__32225;
        chunk__30553_32221 = G__32226;
        count__30554_32222 = G__32227;
        i__30555_32223 = G__32228;
        continue;
      } else {
        var temp__4092__auto___32229 = cljs.core.seq.call(null, seq__30552_32220);
        if (temp__4092__auto___32229) {
          var seq__30552_32230__$1 = temp__4092__auto___32229;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30552_32230__$1)) {
            var c__11077__auto___32231 = cljs.core.chunk_first.call(null, seq__30552_32230__$1);
            var G__32232 = cljs.core.chunk_rest.call(null, seq__30552_32230__$1);
            var G__32233 = c__11077__auto___32231;
            var G__32234 = cljs.core.count.call(null, c__11077__auto___32231);
            var G__32235 = 0;
            seq__30552_32220 = G__32232;
            chunk__30553_32221 = G__32233;
            count__30554_32222 = G__32234;
            i__30555_32223 = G__32235;
            continue;
          } else {
            var arg__11709__auto___32236 = cljs.core.first.call(null, seq__30552_32230__$1);
            a__11708__auto__.push(arg__11709__auto___32236);
            var G__32237 = cljs.core.next.call(null, seq__30552_32230__$1);
            var G__32238 = null;
            var G__32239 = 0;
            var G__32240 = 0;
            seq__30552_32220 = G__32237;
            chunk__30553_32221 = G__32238;
            count__30554_32222 = G__32239;
            i__30555_32223 = G__32240;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ins.apply(null, a__11708__auto__);
  };
  var ins = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ins__delegate.call(this, args__11707__auto__);
  };
  ins.cljs$lang$maxFixedArity = 0;
  ins.cljs$lang$applyTo = function(arglist__32241) {
    var args__11707__auto__ = cljs.core.seq(arglist__32241);
    return ins__delegate(args__11707__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
quiescent.dom.kbd = function() {
  var kbd__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30560_32242 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30561_32243 = null;
    var count__30562_32244 = 0;
    var i__30563_32245 = 0;
    while (true) {
      if (i__30563_32245 < count__30562_32244) {
        var arg__11709__auto___32246 = cljs.core._nth.call(null, chunk__30561_32243, i__30563_32245);
        a__11708__auto__.push(arg__11709__auto___32246);
        var G__32247 = seq__30560_32242;
        var G__32248 = chunk__30561_32243;
        var G__32249 = count__30562_32244;
        var G__32250 = i__30563_32245 + 1;
        seq__30560_32242 = G__32247;
        chunk__30561_32243 = G__32248;
        count__30562_32244 = G__32249;
        i__30563_32245 = G__32250;
        continue;
      } else {
        var temp__4092__auto___32251 = cljs.core.seq.call(null, seq__30560_32242);
        if (temp__4092__auto___32251) {
          var seq__30560_32252__$1 = temp__4092__auto___32251;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30560_32252__$1)) {
            var c__11077__auto___32253 = cljs.core.chunk_first.call(null, seq__30560_32252__$1);
            var G__32254 = cljs.core.chunk_rest.call(null, seq__30560_32252__$1);
            var G__32255 = c__11077__auto___32253;
            var G__32256 = cljs.core.count.call(null, c__11077__auto___32253);
            var G__32257 = 0;
            seq__30560_32242 = G__32254;
            chunk__30561_32243 = G__32255;
            count__30562_32244 = G__32256;
            i__30563_32245 = G__32257;
            continue;
          } else {
            var arg__11709__auto___32258 = cljs.core.first.call(null, seq__30560_32252__$1);
            a__11708__auto__.push(arg__11709__auto___32258);
            var G__32259 = cljs.core.next.call(null, seq__30560_32252__$1);
            var G__32260 = null;
            var G__32261 = 0;
            var G__32262 = 0;
            seq__30560_32242 = G__32259;
            chunk__30561_32243 = G__32260;
            count__30562_32244 = G__32261;
            i__30563_32245 = G__32262;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.kbd.apply(null, a__11708__auto__);
  };
  var kbd = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return kbd__delegate.call(this, args__11707__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 0;
  kbd.cljs$lang$applyTo = function(arglist__32263) {
    var args__11707__auto__ = cljs.core.seq(arglist__32263);
    return kbd__delegate(args__11707__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
quiescent.dom.keygen = function() {
  var keygen__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30568_32264 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30569_32265 = null;
    var count__30570_32266 = 0;
    var i__30571_32267 = 0;
    while (true) {
      if (i__30571_32267 < count__30570_32266) {
        var arg__11709__auto___32268 = cljs.core._nth.call(null, chunk__30569_32265, i__30571_32267);
        a__11708__auto__.push(arg__11709__auto___32268);
        var G__32269 = seq__30568_32264;
        var G__32270 = chunk__30569_32265;
        var G__32271 = count__30570_32266;
        var G__32272 = i__30571_32267 + 1;
        seq__30568_32264 = G__32269;
        chunk__30569_32265 = G__32270;
        count__30570_32266 = G__32271;
        i__30571_32267 = G__32272;
        continue;
      } else {
        var temp__4092__auto___32273 = cljs.core.seq.call(null, seq__30568_32264);
        if (temp__4092__auto___32273) {
          var seq__30568_32274__$1 = temp__4092__auto___32273;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30568_32274__$1)) {
            var c__11077__auto___32275 = cljs.core.chunk_first.call(null, seq__30568_32274__$1);
            var G__32276 = cljs.core.chunk_rest.call(null, seq__30568_32274__$1);
            var G__32277 = c__11077__auto___32275;
            var G__32278 = cljs.core.count.call(null, c__11077__auto___32275);
            var G__32279 = 0;
            seq__30568_32264 = G__32276;
            chunk__30569_32265 = G__32277;
            count__30570_32266 = G__32278;
            i__30571_32267 = G__32279;
            continue;
          } else {
            var arg__11709__auto___32280 = cljs.core.first.call(null, seq__30568_32274__$1);
            a__11708__auto__.push(arg__11709__auto___32280);
            var G__32281 = cljs.core.next.call(null, seq__30568_32274__$1);
            var G__32282 = null;
            var G__32283 = 0;
            var G__32284 = 0;
            seq__30568_32264 = G__32281;
            chunk__30569_32265 = G__32282;
            count__30570_32266 = G__32283;
            i__30571_32267 = G__32284;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.keygen.apply(null, a__11708__auto__);
  };
  var keygen = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return keygen__delegate.call(this, args__11707__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 0;
  keygen.cljs$lang$applyTo = function(arglist__32285) {
    var args__11707__auto__ = cljs.core.seq(arglist__32285);
    return keygen__delegate(args__11707__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
quiescent.dom.label = function() {
  var label__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30576_32286 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30577_32287 = null;
    var count__30578_32288 = 0;
    var i__30579_32289 = 0;
    while (true) {
      if (i__30579_32289 < count__30578_32288) {
        var arg__11709__auto___32290 = cljs.core._nth.call(null, chunk__30577_32287, i__30579_32289);
        a__11708__auto__.push(arg__11709__auto___32290);
        var G__32291 = seq__30576_32286;
        var G__32292 = chunk__30577_32287;
        var G__32293 = count__30578_32288;
        var G__32294 = i__30579_32289 + 1;
        seq__30576_32286 = G__32291;
        chunk__30577_32287 = G__32292;
        count__30578_32288 = G__32293;
        i__30579_32289 = G__32294;
        continue;
      } else {
        var temp__4092__auto___32295 = cljs.core.seq.call(null, seq__30576_32286);
        if (temp__4092__auto___32295) {
          var seq__30576_32296__$1 = temp__4092__auto___32295;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30576_32296__$1)) {
            var c__11077__auto___32297 = cljs.core.chunk_first.call(null, seq__30576_32296__$1);
            var G__32298 = cljs.core.chunk_rest.call(null, seq__30576_32296__$1);
            var G__32299 = c__11077__auto___32297;
            var G__32300 = cljs.core.count.call(null, c__11077__auto___32297);
            var G__32301 = 0;
            seq__30576_32286 = G__32298;
            chunk__30577_32287 = G__32299;
            count__30578_32288 = G__32300;
            i__30579_32289 = G__32301;
            continue;
          } else {
            var arg__11709__auto___32302 = cljs.core.first.call(null, seq__30576_32296__$1);
            a__11708__auto__.push(arg__11709__auto___32302);
            var G__32303 = cljs.core.next.call(null, seq__30576_32296__$1);
            var G__32304 = null;
            var G__32305 = 0;
            var G__32306 = 0;
            seq__30576_32286 = G__32303;
            chunk__30577_32287 = G__32304;
            count__30578_32288 = G__32305;
            i__30579_32289 = G__32306;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.label.apply(null, a__11708__auto__);
  };
  var label = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return label__delegate.call(this, args__11707__auto__);
  };
  label.cljs$lang$maxFixedArity = 0;
  label.cljs$lang$applyTo = function(arglist__32307) {
    var args__11707__auto__ = cljs.core.seq(arglist__32307);
    return label__delegate(args__11707__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
quiescent.dom.legend = function() {
  var legend__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30584_32308 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30585_32309 = null;
    var count__30586_32310 = 0;
    var i__30587_32311 = 0;
    while (true) {
      if (i__30587_32311 < count__30586_32310) {
        var arg__11709__auto___32312 = cljs.core._nth.call(null, chunk__30585_32309, i__30587_32311);
        a__11708__auto__.push(arg__11709__auto___32312);
        var G__32313 = seq__30584_32308;
        var G__32314 = chunk__30585_32309;
        var G__32315 = count__30586_32310;
        var G__32316 = i__30587_32311 + 1;
        seq__30584_32308 = G__32313;
        chunk__30585_32309 = G__32314;
        count__30586_32310 = G__32315;
        i__30587_32311 = G__32316;
        continue;
      } else {
        var temp__4092__auto___32317 = cljs.core.seq.call(null, seq__30584_32308);
        if (temp__4092__auto___32317) {
          var seq__30584_32318__$1 = temp__4092__auto___32317;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30584_32318__$1)) {
            var c__11077__auto___32319 = cljs.core.chunk_first.call(null, seq__30584_32318__$1);
            var G__32320 = cljs.core.chunk_rest.call(null, seq__30584_32318__$1);
            var G__32321 = c__11077__auto___32319;
            var G__32322 = cljs.core.count.call(null, c__11077__auto___32319);
            var G__32323 = 0;
            seq__30584_32308 = G__32320;
            chunk__30585_32309 = G__32321;
            count__30586_32310 = G__32322;
            i__30587_32311 = G__32323;
            continue;
          } else {
            var arg__11709__auto___32324 = cljs.core.first.call(null, seq__30584_32318__$1);
            a__11708__auto__.push(arg__11709__auto___32324);
            var G__32325 = cljs.core.next.call(null, seq__30584_32318__$1);
            var G__32326 = null;
            var G__32327 = 0;
            var G__32328 = 0;
            seq__30584_32308 = G__32325;
            chunk__30585_32309 = G__32326;
            count__30586_32310 = G__32327;
            i__30587_32311 = G__32328;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.legend.apply(null, a__11708__auto__);
  };
  var legend = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return legend__delegate.call(this, args__11707__auto__);
  };
  legend.cljs$lang$maxFixedArity = 0;
  legend.cljs$lang$applyTo = function(arglist__32329) {
    var args__11707__auto__ = cljs.core.seq(arglist__32329);
    return legend__delegate(args__11707__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
quiescent.dom.li = function() {
  var li__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30592_32330 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30593_32331 = null;
    var count__30594_32332 = 0;
    var i__30595_32333 = 0;
    while (true) {
      if (i__30595_32333 < count__30594_32332) {
        var arg__11709__auto___32334 = cljs.core._nth.call(null, chunk__30593_32331, i__30595_32333);
        a__11708__auto__.push(arg__11709__auto___32334);
        var G__32335 = seq__30592_32330;
        var G__32336 = chunk__30593_32331;
        var G__32337 = count__30594_32332;
        var G__32338 = i__30595_32333 + 1;
        seq__30592_32330 = G__32335;
        chunk__30593_32331 = G__32336;
        count__30594_32332 = G__32337;
        i__30595_32333 = G__32338;
        continue;
      } else {
        var temp__4092__auto___32339 = cljs.core.seq.call(null, seq__30592_32330);
        if (temp__4092__auto___32339) {
          var seq__30592_32340__$1 = temp__4092__auto___32339;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30592_32340__$1)) {
            var c__11077__auto___32341 = cljs.core.chunk_first.call(null, seq__30592_32340__$1);
            var G__32342 = cljs.core.chunk_rest.call(null, seq__30592_32340__$1);
            var G__32343 = c__11077__auto___32341;
            var G__32344 = cljs.core.count.call(null, c__11077__auto___32341);
            var G__32345 = 0;
            seq__30592_32330 = G__32342;
            chunk__30593_32331 = G__32343;
            count__30594_32332 = G__32344;
            i__30595_32333 = G__32345;
            continue;
          } else {
            var arg__11709__auto___32346 = cljs.core.first.call(null, seq__30592_32340__$1);
            a__11708__auto__.push(arg__11709__auto___32346);
            var G__32347 = cljs.core.next.call(null, seq__30592_32340__$1);
            var G__32348 = null;
            var G__32349 = 0;
            var G__32350 = 0;
            seq__30592_32330 = G__32347;
            chunk__30593_32331 = G__32348;
            count__30594_32332 = G__32349;
            i__30595_32333 = G__32350;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.li.apply(null, a__11708__auto__);
  };
  var li = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return li__delegate.call(this, args__11707__auto__);
  };
  li.cljs$lang$maxFixedArity = 0;
  li.cljs$lang$applyTo = function(arglist__32351) {
    var args__11707__auto__ = cljs.core.seq(arglist__32351);
    return li__delegate(args__11707__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
quiescent.dom.link = function() {
  var link__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30600_32352 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30601_32353 = null;
    var count__30602_32354 = 0;
    var i__30603_32355 = 0;
    while (true) {
      if (i__30603_32355 < count__30602_32354) {
        var arg__11709__auto___32356 = cljs.core._nth.call(null, chunk__30601_32353, i__30603_32355);
        a__11708__auto__.push(arg__11709__auto___32356);
        var G__32357 = seq__30600_32352;
        var G__32358 = chunk__30601_32353;
        var G__32359 = count__30602_32354;
        var G__32360 = i__30603_32355 + 1;
        seq__30600_32352 = G__32357;
        chunk__30601_32353 = G__32358;
        count__30602_32354 = G__32359;
        i__30603_32355 = G__32360;
        continue;
      } else {
        var temp__4092__auto___32361 = cljs.core.seq.call(null, seq__30600_32352);
        if (temp__4092__auto___32361) {
          var seq__30600_32362__$1 = temp__4092__auto___32361;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30600_32362__$1)) {
            var c__11077__auto___32363 = cljs.core.chunk_first.call(null, seq__30600_32362__$1);
            var G__32364 = cljs.core.chunk_rest.call(null, seq__30600_32362__$1);
            var G__32365 = c__11077__auto___32363;
            var G__32366 = cljs.core.count.call(null, c__11077__auto___32363);
            var G__32367 = 0;
            seq__30600_32352 = G__32364;
            chunk__30601_32353 = G__32365;
            count__30602_32354 = G__32366;
            i__30603_32355 = G__32367;
            continue;
          } else {
            var arg__11709__auto___32368 = cljs.core.first.call(null, seq__30600_32362__$1);
            a__11708__auto__.push(arg__11709__auto___32368);
            var G__32369 = cljs.core.next.call(null, seq__30600_32362__$1);
            var G__32370 = null;
            var G__32371 = 0;
            var G__32372 = 0;
            seq__30600_32352 = G__32369;
            chunk__30601_32353 = G__32370;
            count__30602_32354 = G__32371;
            i__30603_32355 = G__32372;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.link.apply(null, a__11708__auto__);
  };
  var link = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return link__delegate.call(this, args__11707__auto__);
  };
  link.cljs$lang$maxFixedArity = 0;
  link.cljs$lang$applyTo = function(arglist__32373) {
    var args__11707__auto__ = cljs.core.seq(arglist__32373);
    return link__delegate(args__11707__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
quiescent.dom.main = function() {
  var main__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30608_32374 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30609_32375 = null;
    var count__30610_32376 = 0;
    var i__30611_32377 = 0;
    while (true) {
      if (i__30611_32377 < count__30610_32376) {
        var arg__11709__auto___32378 = cljs.core._nth.call(null, chunk__30609_32375, i__30611_32377);
        a__11708__auto__.push(arg__11709__auto___32378);
        var G__32379 = seq__30608_32374;
        var G__32380 = chunk__30609_32375;
        var G__32381 = count__30610_32376;
        var G__32382 = i__30611_32377 + 1;
        seq__30608_32374 = G__32379;
        chunk__30609_32375 = G__32380;
        count__30610_32376 = G__32381;
        i__30611_32377 = G__32382;
        continue;
      } else {
        var temp__4092__auto___32383 = cljs.core.seq.call(null, seq__30608_32374);
        if (temp__4092__auto___32383) {
          var seq__30608_32384__$1 = temp__4092__auto___32383;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30608_32384__$1)) {
            var c__11077__auto___32385 = cljs.core.chunk_first.call(null, seq__30608_32384__$1);
            var G__32386 = cljs.core.chunk_rest.call(null, seq__30608_32384__$1);
            var G__32387 = c__11077__auto___32385;
            var G__32388 = cljs.core.count.call(null, c__11077__auto___32385);
            var G__32389 = 0;
            seq__30608_32374 = G__32386;
            chunk__30609_32375 = G__32387;
            count__30610_32376 = G__32388;
            i__30611_32377 = G__32389;
            continue;
          } else {
            var arg__11709__auto___32390 = cljs.core.first.call(null, seq__30608_32384__$1);
            a__11708__auto__.push(arg__11709__auto___32390);
            var G__32391 = cljs.core.next.call(null, seq__30608_32384__$1);
            var G__32392 = null;
            var G__32393 = 0;
            var G__32394 = 0;
            seq__30608_32374 = G__32391;
            chunk__30609_32375 = G__32392;
            count__30610_32376 = G__32393;
            i__30611_32377 = G__32394;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.main.apply(null, a__11708__auto__);
  };
  var main = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return main__delegate.call(this, args__11707__auto__);
  };
  main.cljs$lang$maxFixedArity = 0;
  main.cljs$lang$applyTo = function(arglist__32395) {
    var args__11707__auto__ = cljs.core.seq(arglist__32395);
    return main__delegate(args__11707__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
quiescent.dom.map = function() {
  var map__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30616_32396 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30617_32397 = null;
    var count__30618_32398 = 0;
    var i__30619_32399 = 0;
    while (true) {
      if (i__30619_32399 < count__30618_32398) {
        var arg__11709__auto___32400 = cljs.core._nth.call(null, chunk__30617_32397, i__30619_32399);
        a__11708__auto__.push(arg__11709__auto___32400);
        var G__32401 = seq__30616_32396;
        var G__32402 = chunk__30617_32397;
        var G__32403 = count__30618_32398;
        var G__32404 = i__30619_32399 + 1;
        seq__30616_32396 = G__32401;
        chunk__30617_32397 = G__32402;
        count__30618_32398 = G__32403;
        i__30619_32399 = G__32404;
        continue;
      } else {
        var temp__4092__auto___32405 = cljs.core.seq.call(null, seq__30616_32396);
        if (temp__4092__auto___32405) {
          var seq__30616_32406__$1 = temp__4092__auto___32405;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30616_32406__$1)) {
            var c__11077__auto___32407 = cljs.core.chunk_first.call(null, seq__30616_32406__$1);
            var G__32408 = cljs.core.chunk_rest.call(null, seq__30616_32406__$1);
            var G__32409 = c__11077__auto___32407;
            var G__32410 = cljs.core.count.call(null, c__11077__auto___32407);
            var G__32411 = 0;
            seq__30616_32396 = G__32408;
            chunk__30617_32397 = G__32409;
            count__30618_32398 = G__32410;
            i__30619_32399 = G__32411;
            continue;
          } else {
            var arg__11709__auto___32412 = cljs.core.first.call(null, seq__30616_32406__$1);
            a__11708__auto__.push(arg__11709__auto___32412);
            var G__32413 = cljs.core.next.call(null, seq__30616_32406__$1);
            var G__32414 = null;
            var G__32415 = 0;
            var G__32416 = 0;
            seq__30616_32396 = G__32413;
            chunk__30617_32397 = G__32414;
            count__30618_32398 = G__32415;
            i__30619_32399 = G__32416;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.map.apply(null, a__11708__auto__);
  };
  var map = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return map__delegate.call(this, args__11707__auto__);
  };
  map.cljs$lang$maxFixedArity = 0;
  map.cljs$lang$applyTo = function(arglist__32417) {
    var args__11707__auto__ = cljs.core.seq(arglist__32417);
    return map__delegate(args__11707__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
quiescent.dom.mark = function() {
  var mark__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30624_32418 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30625_32419 = null;
    var count__30626_32420 = 0;
    var i__30627_32421 = 0;
    while (true) {
      if (i__30627_32421 < count__30626_32420) {
        var arg__11709__auto___32422 = cljs.core._nth.call(null, chunk__30625_32419, i__30627_32421);
        a__11708__auto__.push(arg__11709__auto___32422);
        var G__32423 = seq__30624_32418;
        var G__32424 = chunk__30625_32419;
        var G__32425 = count__30626_32420;
        var G__32426 = i__30627_32421 + 1;
        seq__30624_32418 = G__32423;
        chunk__30625_32419 = G__32424;
        count__30626_32420 = G__32425;
        i__30627_32421 = G__32426;
        continue;
      } else {
        var temp__4092__auto___32427 = cljs.core.seq.call(null, seq__30624_32418);
        if (temp__4092__auto___32427) {
          var seq__30624_32428__$1 = temp__4092__auto___32427;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30624_32428__$1)) {
            var c__11077__auto___32429 = cljs.core.chunk_first.call(null, seq__30624_32428__$1);
            var G__32430 = cljs.core.chunk_rest.call(null, seq__30624_32428__$1);
            var G__32431 = c__11077__auto___32429;
            var G__32432 = cljs.core.count.call(null, c__11077__auto___32429);
            var G__32433 = 0;
            seq__30624_32418 = G__32430;
            chunk__30625_32419 = G__32431;
            count__30626_32420 = G__32432;
            i__30627_32421 = G__32433;
            continue;
          } else {
            var arg__11709__auto___32434 = cljs.core.first.call(null, seq__30624_32428__$1);
            a__11708__auto__.push(arg__11709__auto___32434);
            var G__32435 = cljs.core.next.call(null, seq__30624_32428__$1);
            var G__32436 = null;
            var G__32437 = 0;
            var G__32438 = 0;
            seq__30624_32418 = G__32435;
            chunk__30625_32419 = G__32436;
            count__30626_32420 = G__32437;
            i__30627_32421 = G__32438;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.mark.apply(null, a__11708__auto__);
  };
  var mark = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return mark__delegate.call(this, args__11707__auto__);
  };
  mark.cljs$lang$maxFixedArity = 0;
  mark.cljs$lang$applyTo = function(arglist__32439) {
    var args__11707__auto__ = cljs.core.seq(arglist__32439);
    return mark__delegate(args__11707__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
quiescent.dom.menu = function() {
  var menu__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30632_32440 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30633_32441 = null;
    var count__30634_32442 = 0;
    var i__30635_32443 = 0;
    while (true) {
      if (i__30635_32443 < count__30634_32442) {
        var arg__11709__auto___32444 = cljs.core._nth.call(null, chunk__30633_32441, i__30635_32443);
        a__11708__auto__.push(arg__11709__auto___32444);
        var G__32445 = seq__30632_32440;
        var G__32446 = chunk__30633_32441;
        var G__32447 = count__30634_32442;
        var G__32448 = i__30635_32443 + 1;
        seq__30632_32440 = G__32445;
        chunk__30633_32441 = G__32446;
        count__30634_32442 = G__32447;
        i__30635_32443 = G__32448;
        continue;
      } else {
        var temp__4092__auto___32449 = cljs.core.seq.call(null, seq__30632_32440);
        if (temp__4092__auto___32449) {
          var seq__30632_32450__$1 = temp__4092__auto___32449;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30632_32450__$1)) {
            var c__11077__auto___32451 = cljs.core.chunk_first.call(null, seq__30632_32450__$1);
            var G__32452 = cljs.core.chunk_rest.call(null, seq__30632_32450__$1);
            var G__32453 = c__11077__auto___32451;
            var G__32454 = cljs.core.count.call(null, c__11077__auto___32451);
            var G__32455 = 0;
            seq__30632_32440 = G__32452;
            chunk__30633_32441 = G__32453;
            count__30634_32442 = G__32454;
            i__30635_32443 = G__32455;
            continue;
          } else {
            var arg__11709__auto___32456 = cljs.core.first.call(null, seq__30632_32450__$1);
            a__11708__auto__.push(arg__11709__auto___32456);
            var G__32457 = cljs.core.next.call(null, seq__30632_32450__$1);
            var G__32458 = null;
            var G__32459 = 0;
            var G__32460 = 0;
            seq__30632_32440 = G__32457;
            chunk__30633_32441 = G__32458;
            count__30634_32442 = G__32459;
            i__30635_32443 = G__32460;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menu.apply(null, a__11708__auto__);
  };
  var menu = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menu__delegate.call(this, args__11707__auto__);
  };
  menu.cljs$lang$maxFixedArity = 0;
  menu.cljs$lang$applyTo = function(arglist__32461) {
    var args__11707__auto__ = cljs.core.seq(arglist__32461);
    return menu__delegate(args__11707__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
quiescent.dom.menuitem = function() {
  var menuitem__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30640_32462 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30641_32463 = null;
    var count__30642_32464 = 0;
    var i__30643_32465 = 0;
    while (true) {
      if (i__30643_32465 < count__30642_32464) {
        var arg__11709__auto___32466 = cljs.core._nth.call(null, chunk__30641_32463, i__30643_32465);
        a__11708__auto__.push(arg__11709__auto___32466);
        var G__32467 = seq__30640_32462;
        var G__32468 = chunk__30641_32463;
        var G__32469 = count__30642_32464;
        var G__32470 = i__30643_32465 + 1;
        seq__30640_32462 = G__32467;
        chunk__30641_32463 = G__32468;
        count__30642_32464 = G__32469;
        i__30643_32465 = G__32470;
        continue;
      } else {
        var temp__4092__auto___32471 = cljs.core.seq.call(null, seq__30640_32462);
        if (temp__4092__auto___32471) {
          var seq__30640_32472__$1 = temp__4092__auto___32471;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30640_32472__$1)) {
            var c__11077__auto___32473 = cljs.core.chunk_first.call(null, seq__30640_32472__$1);
            var G__32474 = cljs.core.chunk_rest.call(null, seq__30640_32472__$1);
            var G__32475 = c__11077__auto___32473;
            var G__32476 = cljs.core.count.call(null, c__11077__auto___32473);
            var G__32477 = 0;
            seq__30640_32462 = G__32474;
            chunk__30641_32463 = G__32475;
            count__30642_32464 = G__32476;
            i__30643_32465 = G__32477;
            continue;
          } else {
            var arg__11709__auto___32478 = cljs.core.first.call(null, seq__30640_32472__$1);
            a__11708__auto__.push(arg__11709__auto___32478);
            var G__32479 = cljs.core.next.call(null, seq__30640_32472__$1);
            var G__32480 = null;
            var G__32481 = 0;
            var G__32482 = 0;
            seq__30640_32462 = G__32479;
            chunk__30641_32463 = G__32480;
            count__30642_32464 = G__32481;
            i__30643_32465 = G__32482;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menuitem.apply(null, a__11708__auto__);
  };
  var menuitem = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menuitem__delegate.call(this, args__11707__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 0;
  menuitem.cljs$lang$applyTo = function(arglist__32483) {
    var args__11707__auto__ = cljs.core.seq(arglist__32483);
    return menuitem__delegate(args__11707__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
quiescent.dom.meta = function() {
  var meta__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30648_32484 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30649_32485 = null;
    var count__30650_32486 = 0;
    var i__30651_32487 = 0;
    while (true) {
      if (i__30651_32487 < count__30650_32486) {
        var arg__11709__auto___32488 = cljs.core._nth.call(null, chunk__30649_32485, i__30651_32487);
        a__11708__auto__.push(arg__11709__auto___32488);
        var G__32489 = seq__30648_32484;
        var G__32490 = chunk__30649_32485;
        var G__32491 = count__30650_32486;
        var G__32492 = i__30651_32487 + 1;
        seq__30648_32484 = G__32489;
        chunk__30649_32485 = G__32490;
        count__30650_32486 = G__32491;
        i__30651_32487 = G__32492;
        continue;
      } else {
        var temp__4092__auto___32493 = cljs.core.seq.call(null, seq__30648_32484);
        if (temp__4092__auto___32493) {
          var seq__30648_32494__$1 = temp__4092__auto___32493;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30648_32494__$1)) {
            var c__11077__auto___32495 = cljs.core.chunk_first.call(null, seq__30648_32494__$1);
            var G__32496 = cljs.core.chunk_rest.call(null, seq__30648_32494__$1);
            var G__32497 = c__11077__auto___32495;
            var G__32498 = cljs.core.count.call(null, c__11077__auto___32495);
            var G__32499 = 0;
            seq__30648_32484 = G__32496;
            chunk__30649_32485 = G__32497;
            count__30650_32486 = G__32498;
            i__30651_32487 = G__32499;
            continue;
          } else {
            var arg__11709__auto___32500 = cljs.core.first.call(null, seq__30648_32494__$1);
            a__11708__auto__.push(arg__11709__auto___32500);
            var G__32501 = cljs.core.next.call(null, seq__30648_32494__$1);
            var G__32502 = null;
            var G__32503 = 0;
            var G__32504 = 0;
            seq__30648_32484 = G__32501;
            chunk__30649_32485 = G__32502;
            count__30650_32486 = G__32503;
            i__30651_32487 = G__32504;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meta.apply(null, a__11708__auto__);
  };
  var meta = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meta__delegate.call(this, args__11707__auto__);
  };
  meta.cljs$lang$maxFixedArity = 0;
  meta.cljs$lang$applyTo = function(arglist__32505) {
    var args__11707__auto__ = cljs.core.seq(arglist__32505);
    return meta__delegate(args__11707__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
quiescent.dom.meter = function() {
  var meter__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30656_32506 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30657_32507 = null;
    var count__30658_32508 = 0;
    var i__30659_32509 = 0;
    while (true) {
      if (i__30659_32509 < count__30658_32508) {
        var arg__11709__auto___32510 = cljs.core._nth.call(null, chunk__30657_32507, i__30659_32509);
        a__11708__auto__.push(arg__11709__auto___32510);
        var G__32511 = seq__30656_32506;
        var G__32512 = chunk__30657_32507;
        var G__32513 = count__30658_32508;
        var G__32514 = i__30659_32509 + 1;
        seq__30656_32506 = G__32511;
        chunk__30657_32507 = G__32512;
        count__30658_32508 = G__32513;
        i__30659_32509 = G__32514;
        continue;
      } else {
        var temp__4092__auto___32515 = cljs.core.seq.call(null, seq__30656_32506);
        if (temp__4092__auto___32515) {
          var seq__30656_32516__$1 = temp__4092__auto___32515;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30656_32516__$1)) {
            var c__11077__auto___32517 = cljs.core.chunk_first.call(null, seq__30656_32516__$1);
            var G__32518 = cljs.core.chunk_rest.call(null, seq__30656_32516__$1);
            var G__32519 = c__11077__auto___32517;
            var G__32520 = cljs.core.count.call(null, c__11077__auto___32517);
            var G__32521 = 0;
            seq__30656_32506 = G__32518;
            chunk__30657_32507 = G__32519;
            count__30658_32508 = G__32520;
            i__30659_32509 = G__32521;
            continue;
          } else {
            var arg__11709__auto___32522 = cljs.core.first.call(null, seq__30656_32516__$1);
            a__11708__auto__.push(arg__11709__auto___32522);
            var G__32523 = cljs.core.next.call(null, seq__30656_32516__$1);
            var G__32524 = null;
            var G__32525 = 0;
            var G__32526 = 0;
            seq__30656_32506 = G__32523;
            chunk__30657_32507 = G__32524;
            count__30658_32508 = G__32525;
            i__30659_32509 = G__32526;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meter.apply(null, a__11708__auto__);
  };
  var meter = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meter__delegate.call(this, args__11707__auto__);
  };
  meter.cljs$lang$maxFixedArity = 0;
  meter.cljs$lang$applyTo = function(arglist__32527) {
    var args__11707__auto__ = cljs.core.seq(arglist__32527);
    return meter__delegate(args__11707__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
quiescent.dom.nav = function() {
  var nav__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30664_32528 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30665_32529 = null;
    var count__30666_32530 = 0;
    var i__30667_32531 = 0;
    while (true) {
      if (i__30667_32531 < count__30666_32530) {
        var arg__11709__auto___32532 = cljs.core._nth.call(null, chunk__30665_32529, i__30667_32531);
        a__11708__auto__.push(arg__11709__auto___32532);
        var G__32533 = seq__30664_32528;
        var G__32534 = chunk__30665_32529;
        var G__32535 = count__30666_32530;
        var G__32536 = i__30667_32531 + 1;
        seq__30664_32528 = G__32533;
        chunk__30665_32529 = G__32534;
        count__30666_32530 = G__32535;
        i__30667_32531 = G__32536;
        continue;
      } else {
        var temp__4092__auto___32537 = cljs.core.seq.call(null, seq__30664_32528);
        if (temp__4092__auto___32537) {
          var seq__30664_32538__$1 = temp__4092__auto___32537;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30664_32538__$1)) {
            var c__11077__auto___32539 = cljs.core.chunk_first.call(null, seq__30664_32538__$1);
            var G__32540 = cljs.core.chunk_rest.call(null, seq__30664_32538__$1);
            var G__32541 = c__11077__auto___32539;
            var G__32542 = cljs.core.count.call(null, c__11077__auto___32539);
            var G__32543 = 0;
            seq__30664_32528 = G__32540;
            chunk__30665_32529 = G__32541;
            count__30666_32530 = G__32542;
            i__30667_32531 = G__32543;
            continue;
          } else {
            var arg__11709__auto___32544 = cljs.core.first.call(null, seq__30664_32538__$1);
            a__11708__auto__.push(arg__11709__auto___32544);
            var G__32545 = cljs.core.next.call(null, seq__30664_32538__$1);
            var G__32546 = null;
            var G__32547 = 0;
            var G__32548 = 0;
            seq__30664_32528 = G__32545;
            chunk__30665_32529 = G__32546;
            count__30666_32530 = G__32547;
            i__30667_32531 = G__32548;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.nav.apply(null, a__11708__auto__);
  };
  var nav = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return nav__delegate.call(this, args__11707__auto__);
  };
  nav.cljs$lang$maxFixedArity = 0;
  nav.cljs$lang$applyTo = function(arglist__32549) {
    var args__11707__auto__ = cljs.core.seq(arglist__32549);
    return nav__delegate(args__11707__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
quiescent.dom.noscript = function() {
  var noscript__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30672_32550 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30673_32551 = null;
    var count__30674_32552 = 0;
    var i__30675_32553 = 0;
    while (true) {
      if (i__30675_32553 < count__30674_32552) {
        var arg__11709__auto___32554 = cljs.core._nth.call(null, chunk__30673_32551, i__30675_32553);
        a__11708__auto__.push(arg__11709__auto___32554);
        var G__32555 = seq__30672_32550;
        var G__32556 = chunk__30673_32551;
        var G__32557 = count__30674_32552;
        var G__32558 = i__30675_32553 + 1;
        seq__30672_32550 = G__32555;
        chunk__30673_32551 = G__32556;
        count__30674_32552 = G__32557;
        i__30675_32553 = G__32558;
        continue;
      } else {
        var temp__4092__auto___32559 = cljs.core.seq.call(null, seq__30672_32550);
        if (temp__4092__auto___32559) {
          var seq__30672_32560__$1 = temp__4092__auto___32559;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30672_32560__$1)) {
            var c__11077__auto___32561 = cljs.core.chunk_first.call(null, seq__30672_32560__$1);
            var G__32562 = cljs.core.chunk_rest.call(null, seq__30672_32560__$1);
            var G__32563 = c__11077__auto___32561;
            var G__32564 = cljs.core.count.call(null, c__11077__auto___32561);
            var G__32565 = 0;
            seq__30672_32550 = G__32562;
            chunk__30673_32551 = G__32563;
            count__30674_32552 = G__32564;
            i__30675_32553 = G__32565;
            continue;
          } else {
            var arg__11709__auto___32566 = cljs.core.first.call(null, seq__30672_32560__$1);
            a__11708__auto__.push(arg__11709__auto___32566);
            var G__32567 = cljs.core.next.call(null, seq__30672_32560__$1);
            var G__32568 = null;
            var G__32569 = 0;
            var G__32570 = 0;
            seq__30672_32550 = G__32567;
            chunk__30673_32551 = G__32568;
            count__30674_32552 = G__32569;
            i__30675_32553 = G__32570;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.noscript.apply(null, a__11708__auto__);
  };
  var noscript = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return noscript__delegate.call(this, args__11707__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 0;
  noscript.cljs$lang$applyTo = function(arglist__32571) {
    var args__11707__auto__ = cljs.core.seq(arglist__32571);
    return noscript__delegate(args__11707__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
quiescent.dom.object = function() {
  var object__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30680_32572 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30681_32573 = null;
    var count__30682_32574 = 0;
    var i__30683_32575 = 0;
    while (true) {
      if (i__30683_32575 < count__30682_32574) {
        var arg__11709__auto___32576 = cljs.core._nth.call(null, chunk__30681_32573, i__30683_32575);
        a__11708__auto__.push(arg__11709__auto___32576);
        var G__32577 = seq__30680_32572;
        var G__32578 = chunk__30681_32573;
        var G__32579 = count__30682_32574;
        var G__32580 = i__30683_32575 + 1;
        seq__30680_32572 = G__32577;
        chunk__30681_32573 = G__32578;
        count__30682_32574 = G__32579;
        i__30683_32575 = G__32580;
        continue;
      } else {
        var temp__4092__auto___32581 = cljs.core.seq.call(null, seq__30680_32572);
        if (temp__4092__auto___32581) {
          var seq__30680_32582__$1 = temp__4092__auto___32581;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30680_32582__$1)) {
            var c__11077__auto___32583 = cljs.core.chunk_first.call(null, seq__30680_32582__$1);
            var G__32584 = cljs.core.chunk_rest.call(null, seq__30680_32582__$1);
            var G__32585 = c__11077__auto___32583;
            var G__32586 = cljs.core.count.call(null, c__11077__auto___32583);
            var G__32587 = 0;
            seq__30680_32572 = G__32584;
            chunk__30681_32573 = G__32585;
            count__30682_32574 = G__32586;
            i__30683_32575 = G__32587;
            continue;
          } else {
            var arg__11709__auto___32588 = cljs.core.first.call(null, seq__30680_32582__$1);
            a__11708__auto__.push(arg__11709__auto___32588);
            var G__32589 = cljs.core.next.call(null, seq__30680_32582__$1);
            var G__32590 = null;
            var G__32591 = 0;
            var G__32592 = 0;
            seq__30680_32572 = G__32589;
            chunk__30681_32573 = G__32590;
            count__30682_32574 = G__32591;
            i__30683_32575 = G__32592;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.object.apply(null, a__11708__auto__);
  };
  var object = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return object__delegate.call(this, args__11707__auto__);
  };
  object.cljs$lang$maxFixedArity = 0;
  object.cljs$lang$applyTo = function(arglist__32593) {
    var args__11707__auto__ = cljs.core.seq(arglist__32593);
    return object__delegate(args__11707__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
quiescent.dom.ol = function() {
  var ol__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30688_32594 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30689_32595 = null;
    var count__30690_32596 = 0;
    var i__30691_32597 = 0;
    while (true) {
      if (i__30691_32597 < count__30690_32596) {
        var arg__11709__auto___32598 = cljs.core._nth.call(null, chunk__30689_32595, i__30691_32597);
        a__11708__auto__.push(arg__11709__auto___32598);
        var G__32599 = seq__30688_32594;
        var G__32600 = chunk__30689_32595;
        var G__32601 = count__30690_32596;
        var G__32602 = i__30691_32597 + 1;
        seq__30688_32594 = G__32599;
        chunk__30689_32595 = G__32600;
        count__30690_32596 = G__32601;
        i__30691_32597 = G__32602;
        continue;
      } else {
        var temp__4092__auto___32603 = cljs.core.seq.call(null, seq__30688_32594);
        if (temp__4092__auto___32603) {
          var seq__30688_32604__$1 = temp__4092__auto___32603;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30688_32604__$1)) {
            var c__11077__auto___32605 = cljs.core.chunk_first.call(null, seq__30688_32604__$1);
            var G__32606 = cljs.core.chunk_rest.call(null, seq__30688_32604__$1);
            var G__32607 = c__11077__auto___32605;
            var G__32608 = cljs.core.count.call(null, c__11077__auto___32605);
            var G__32609 = 0;
            seq__30688_32594 = G__32606;
            chunk__30689_32595 = G__32607;
            count__30690_32596 = G__32608;
            i__30691_32597 = G__32609;
            continue;
          } else {
            var arg__11709__auto___32610 = cljs.core.first.call(null, seq__30688_32604__$1);
            a__11708__auto__.push(arg__11709__auto___32610);
            var G__32611 = cljs.core.next.call(null, seq__30688_32604__$1);
            var G__32612 = null;
            var G__32613 = 0;
            var G__32614 = 0;
            seq__30688_32594 = G__32611;
            chunk__30689_32595 = G__32612;
            count__30690_32596 = G__32613;
            i__30691_32597 = G__32614;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ol.apply(null, a__11708__auto__);
  };
  var ol = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ol__delegate.call(this, args__11707__auto__);
  };
  ol.cljs$lang$maxFixedArity = 0;
  ol.cljs$lang$applyTo = function(arglist__32615) {
    var args__11707__auto__ = cljs.core.seq(arglist__32615);
    return ol__delegate(args__11707__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
quiescent.dom.optgroup = function() {
  var optgroup__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30696_32616 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30697_32617 = null;
    var count__30698_32618 = 0;
    var i__30699_32619 = 0;
    while (true) {
      if (i__30699_32619 < count__30698_32618) {
        var arg__11709__auto___32620 = cljs.core._nth.call(null, chunk__30697_32617, i__30699_32619);
        a__11708__auto__.push(arg__11709__auto___32620);
        var G__32621 = seq__30696_32616;
        var G__32622 = chunk__30697_32617;
        var G__32623 = count__30698_32618;
        var G__32624 = i__30699_32619 + 1;
        seq__30696_32616 = G__32621;
        chunk__30697_32617 = G__32622;
        count__30698_32618 = G__32623;
        i__30699_32619 = G__32624;
        continue;
      } else {
        var temp__4092__auto___32625 = cljs.core.seq.call(null, seq__30696_32616);
        if (temp__4092__auto___32625) {
          var seq__30696_32626__$1 = temp__4092__auto___32625;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30696_32626__$1)) {
            var c__11077__auto___32627 = cljs.core.chunk_first.call(null, seq__30696_32626__$1);
            var G__32628 = cljs.core.chunk_rest.call(null, seq__30696_32626__$1);
            var G__32629 = c__11077__auto___32627;
            var G__32630 = cljs.core.count.call(null, c__11077__auto___32627);
            var G__32631 = 0;
            seq__30696_32616 = G__32628;
            chunk__30697_32617 = G__32629;
            count__30698_32618 = G__32630;
            i__30699_32619 = G__32631;
            continue;
          } else {
            var arg__11709__auto___32632 = cljs.core.first.call(null, seq__30696_32626__$1);
            a__11708__auto__.push(arg__11709__auto___32632);
            var G__32633 = cljs.core.next.call(null, seq__30696_32626__$1);
            var G__32634 = null;
            var G__32635 = 0;
            var G__32636 = 0;
            seq__30696_32616 = G__32633;
            chunk__30697_32617 = G__32634;
            count__30698_32618 = G__32635;
            i__30699_32619 = G__32636;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.optgroup.apply(null, a__11708__auto__);
  };
  var optgroup = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return optgroup__delegate.call(this, args__11707__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 0;
  optgroup.cljs$lang$applyTo = function(arglist__32637) {
    var args__11707__auto__ = cljs.core.seq(arglist__32637);
    return optgroup__delegate(args__11707__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
quiescent.dom.option = function() {
  var option__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30704_32638 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30705_32639 = null;
    var count__30706_32640 = 0;
    var i__30707_32641 = 0;
    while (true) {
      if (i__30707_32641 < count__30706_32640) {
        var arg__11709__auto___32642 = cljs.core._nth.call(null, chunk__30705_32639, i__30707_32641);
        a__11708__auto__.push(arg__11709__auto___32642);
        var G__32643 = seq__30704_32638;
        var G__32644 = chunk__30705_32639;
        var G__32645 = count__30706_32640;
        var G__32646 = i__30707_32641 + 1;
        seq__30704_32638 = G__32643;
        chunk__30705_32639 = G__32644;
        count__30706_32640 = G__32645;
        i__30707_32641 = G__32646;
        continue;
      } else {
        var temp__4092__auto___32647 = cljs.core.seq.call(null, seq__30704_32638);
        if (temp__4092__auto___32647) {
          var seq__30704_32648__$1 = temp__4092__auto___32647;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30704_32648__$1)) {
            var c__11077__auto___32649 = cljs.core.chunk_first.call(null, seq__30704_32648__$1);
            var G__32650 = cljs.core.chunk_rest.call(null, seq__30704_32648__$1);
            var G__32651 = c__11077__auto___32649;
            var G__32652 = cljs.core.count.call(null, c__11077__auto___32649);
            var G__32653 = 0;
            seq__30704_32638 = G__32650;
            chunk__30705_32639 = G__32651;
            count__30706_32640 = G__32652;
            i__30707_32641 = G__32653;
            continue;
          } else {
            var arg__11709__auto___32654 = cljs.core.first.call(null, seq__30704_32648__$1);
            a__11708__auto__.push(arg__11709__auto___32654);
            var G__32655 = cljs.core.next.call(null, seq__30704_32648__$1);
            var G__32656 = null;
            var G__32657 = 0;
            var G__32658 = 0;
            seq__30704_32638 = G__32655;
            chunk__30705_32639 = G__32656;
            count__30706_32640 = G__32657;
            i__30707_32641 = G__32658;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.option.apply(null, a__11708__auto__);
  };
  var option = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return option__delegate.call(this, args__11707__auto__);
  };
  option.cljs$lang$maxFixedArity = 0;
  option.cljs$lang$applyTo = function(arglist__32659) {
    var args__11707__auto__ = cljs.core.seq(arglist__32659);
    return option__delegate(args__11707__auto__);
  };
  option.cljs$core$IFn$_invoke$arity$variadic = option__delegate;
  return option;
}();
quiescent.dom.output = function() {
  var output__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30712_32660 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30713_32661 = null;
    var count__30714_32662 = 0;
    var i__30715_32663 = 0;
    while (true) {
      if (i__30715_32663 < count__30714_32662) {
        var arg__11709__auto___32664 = cljs.core._nth.call(null, chunk__30713_32661, i__30715_32663);
        a__11708__auto__.push(arg__11709__auto___32664);
        var G__32665 = seq__30712_32660;
        var G__32666 = chunk__30713_32661;
        var G__32667 = count__30714_32662;
        var G__32668 = i__30715_32663 + 1;
        seq__30712_32660 = G__32665;
        chunk__30713_32661 = G__32666;
        count__30714_32662 = G__32667;
        i__30715_32663 = G__32668;
        continue;
      } else {
        var temp__4092__auto___32669 = cljs.core.seq.call(null, seq__30712_32660);
        if (temp__4092__auto___32669) {
          var seq__30712_32670__$1 = temp__4092__auto___32669;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30712_32670__$1)) {
            var c__11077__auto___32671 = cljs.core.chunk_first.call(null, seq__30712_32670__$1);
            var G__32672 = cljs.core.chunk_rest.call(null, seq__30712_32670__$1);
            var G__32673 = c__11077__auto___32671;
            var G__32674 = cljs.core.count.call(null, c__11077__auto___32671);
            var G__32675 = 0;
            seq__30712_32660 = G__32672;
            chunk__30713_32661 = G__32673;
            count__30714_32662 = G__32674;
            i__30715_32663 = G__32675;
            continue;
          } else {
            var arg__11709__auto___32676 = cljs.core.first.call(null, seq__30712_32670__$1);
            a__11708__auto__.push(arg__11709__auto___32676);
            var G__32677 = cljs.core.next.call(null, seq__30712_32670__$1);
            var G__32678 = null;
            var G__32679 = 0;
            var G__32680 = 0;
            seq__30712_32660 = G__32677;
            chunk__30713_32661 = G__32678;
            count__30714_32662 = G__32679;
            i__30715_32663 = G__32680;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.output.apply(null, a__11708__auto__);
  };
  var output = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return output__delegate.call(this, args__11707__auto__);
  };
  output.cljs$lang$maxFixedArity = 0;
  output.cljs$lang$applyTo = function(arglist__32681) {
    var args__11707__auto__ = cljs.core.seq(arglist__32681);
    return output__delegate(args__11707__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
quiescent.dom.p = function() {
  var p__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30720_32682 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30721_32683 = null;
    var count__30722_32684 = 0;
    var i__30723_32685 = 0;
    while (true) {
      if (i__30723_32685 < count__30722_32684) {
        var arg__11709__auto___32686 = cljs.core._nth.call(null, chunk__30721_32683, i__30723_32685);
        a__11708__auto__.push(arg__11709__auto___32686);
        var G__32687 = seq__30720_32682;
        var G__32688 = chunk__30721_32683;
        var G__32689 = count__30722_32684;
        var G__32690 = i__30723_32685 + 1;
        seq__30720_32682 = G__32687;
        chunk__30721_32683 = G__32688;
        count__30722_32684 = G__32689;
        i__30723_32685 = G__32690;
        continue;
      } else {
        var temp__4092__auto___32691 = cljs.core.seq.call(null, seq__30720_32682);
        if (temp__4092__auto___32691) {
          var seq__30720_32692__$1 = temp__4092__auto___32691;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30720_32692__$1)) {
            var c__11077__auto___32693 = cljs.core.chunk_first.call(null, seq__30720_32692__$1);
            var G__32694 = cljs.core.chunk_rest.call(null, seq__30720_32692__$1);
            var G__32695 = c__11077__auto___32693;
            var G__32696 = cljs.core.count.call(null, c__11077__auto___32693);
            var G__32697 = 0;
            seq__30720_32682 = G__32694;
            chunk__30721_32683 = G__32695;
            count__30722_32684 = G__32696;
            i__30723_32685 = G__32697;
            continue;
          } else {
            var arg__11709__auto___32698 = cljs.core.first.call(null, seq__30720_32692__$1);
            a__11708__auto__.push(arg__11709__auto___32698);
            var G__32699 = cljs.core.next.call(null, seq__30720_32692__$1);
            var G__32700 = null;
            var G__32701 = 0;
            var G__32702 = 0;
            seq__30720_32682 = G__32699;
            chunk__30721_32683 = G__32700;
            count__30722_32684 = G__32701;
            i__30723_32685 = G__32702;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.p.apply(null, a__11708__auto__);
  };
  var p = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return p__delegate.call(this, args__11707__auto__);
  };
  p.cljs$lang$maxFixedArity = 0;
  p.cljs$lang$applyTo = function(arglist__32703) {
    var args__11707__auto__ = cljs.core.seq(arglist__32703);
    return p__delegate(args__11707__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
quiescent.dom.param = function() {
  var param__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30728_32704 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30729_32705 = null;
    var count__30730_32706 = 0;
    var i__30731_32707 = 0;
    while (true) {
      if (i__30731_32707 < count__30730_32706) {
        var arg__11709__auto___32708 = cljs.core._nth.call(null, chunk__30729_32705, i__30731_32707);
        a__11708__auto__.push(arg__11709__auto___32708);
        var G__32709 = seq__30728_32704;
        var G__32710 = chunk__30729_32705;
        var G__32711 = count__30730_32706;
        var G__32712 = i__30731_32707 + 1;
        seq__30728_32704 = G__32709;
        chunk__30729_32705 = G__32710;
        count__30730_32706 = G__32711;
        i__30731_32707 = G__32712;
        continue;
      } else {
        var temp__4092__auto___32713 = cljs.core.seq.call(null, seq__30728_32704);
        if (temp__4092__auto___32713) {
          var seq__30728_32714__$1 = temp__4092__auto___32713;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30728_32714__$1)) {
            var c__11077__auto___32715 = cljs.core.chunk_first.call(null, seq__30728_32714__$1);
            var G__32716 = cljs.core.chunk_rest.call(null, seq__30728_32714__$1);
            var G__32717 = c__11077__auto___32715;
            var G__32718 = cljs.core.count.call(null, c__11077__auto___32715);
            var G__32719 = 0;
            seq__30728_32704 = G__32716;
            chunk__30729_32705 = G__32717;
            count__30730_32706 = G__32718;
            i__30731_32707 = G__32719;
            continue;
          } else {
            var arg__11709__auto___32720 = cljs.core.first.call(null, seq__30728_32714__$1);
            a__11708__auto__.push(arg__11709__auto___32720);
            var G__32721 = cljs.core.next.call(null, seq__30728_32714__$1);
            var G__32722 = null;
            var G__32723 = 0;
            var G__32724 = 0;
            seq__30728_32704 = G__32721;
            chunk__30729_32705 = G__32722;
            count__30730_32706 = G__32723;
            i__30731_32707 = G__32724;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.param.apply(null, a__11708__auto__);
  };
  var param = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return param__delegate.call(this, args__11707__auto__);
  };
  param.cljs$lang$maxFixedArity = 0;
  param.cljs$lang$applyTo = function(arglist__32725) {
    var args__11707__auto__ = cljs.core.seq(arglist__32725);
    return param__delegate(args__11707__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
quiescent.dom.pre = function() {
  var pre__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30736_32726 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30737_32727 = null;
    var count__30738_32728 = 0;
    var i__30739_32729 = 0;
    while (true) {
      if (i__30739_32729 < count__30738_32728) {
        var arg__11709__auto___32730 = cljs.core._nth.call(null, chunk__30737_32727, i__30739_32729);
        a__11708__auto__.push(arg__11709__auto___32730);
        var G__32731 = seq__30736_32726;
        var G__32732 = chunk__30737_32727;
        var G__32733 = count__30738_32728;
        var G__32734 = i__30739_32729 + 1;
        seq__30736_32726 = G__32731;
        chunk__30737_32727 = G__32732;
        count__30738_32728 = G__32733;
        i__30739_32729 = G__32734;
        continue;
      } else {
        var temp__4092__auto___32735 = cljs.core.seq.call(null, seq__30736_32726);
        if (temp__4092__auto___32735) {
          var seq__30736_32736__$1 = temp__4092__auto___32735;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30736_32736__$1)) {
            var c__11077__auto___32737 = cljs.core.chunk_first.call(null, seq__30736_32736__$1);
            var G__32738 = cljs.core.chunk_rest.call(null, seq__30736_32736__$1);
            var G__32739 = c__11077__auto___32737;
            var G__32740 = cljs.core.count.call(null, c__11077__auto___32737);
            var G__32741 = 0;
            seq__30736_32726 = G__32738;
            chunk__30737_32727 = G__32739;
            count__30738_32728 = G__32740;
            i__30739_32729 = G__32741;
            continue;
          } else {
            var arg__11709__auto___32742 = cljs.core.first.call(null, seq__30736_32736__$1);
            a__11708__auto__.push(arg__11709__auto___32742);
            var G__32743 = cljs.core.next.call(null, seq__30736_32736__$1);
            var G__32744 = null;
            var G__32745 = 0;
            var G__32746 = 0;
            seq__30736_32726 = G__32743;
            chunk__30737_32727 = G__32744;
            count__30738_32728 = G__32745;
            i__30739_32729 = G__32746;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.pre.apply(null, a__11708__auto__);
  };
  var pre = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pre__delegate.call(this, args__11707__auto__);
  };
  pre.cljs$lang$maxFixedArity = 0;
  pre.cljs$lang$applyTo = function(arglist__32747) {
    var args__11707__auto__ = cljs.core.seq(arglist__32747);
    return pre__delegate(args__11707__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
quiescent.dom.progress = function() {
  var progress__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30744_32748 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30745_32749 = null;
    var count__30746_32750 = 0;
    var i__30747_32751 = 0;
    while (true) {
      if (i__30747_32751 < count__30746_32750) {
        var arg__11709__auto___32752 = cljs.core._nth.call(null, chunk__30745_32749, i__30747_32751);
        a__11708__auto__.push(arg__11709__auto___32752);
        var G__32753 = seq__30744_32748;
        var G__32754 = chunk__30745_32749;
        var G__32755 = count__30746_32750;
        var G__32756 = i__30747_32751 + 1;
        seq__30744_32748 = G__32753;
        chunk__30745_32749 = G__32754;
        count__30746_32750 = G__32755;
        i__30747_32751 = G__32756;
        continue;
      } else {
        var temp__4092__auto___32757 = cljs.core.seq.call(null, seq__30744_32748);
        if (temp__4092__auto___32757) {
          var seq__30744_32758__$1 = temp__4092__auto___32757;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30744_32758__$1)) {
            var c__11077__auto___32759 = cljs.core.chunk_first.call(null, seq__30744_32758__$1);
            var G__32760 = cljs.core.chunk_rest.call(null, seq__30744_32758__$1);
            var G__32761 = c__11077__auto___32759;
            var G__32762 = cljs.core.count.call(null, c__11077__auto___32759);
            var G__32763 = 0;
            seq__30744_32748 = G__32760;
            chunk__30745_32749 = G__32761;
            count__30746_32750 = G__32762;
            i__30747_32751 = G__32763;
            continue;
          } else {
            var arg__11709__auto___32764 = cljs.core.first.call(null, seq__30744_32758__$1);
            a__11708__auto__.push(arg__11709__auto___32764);
            var G__32765 = cljs.core.next.call(null, seq__30744_32758__$1);
            var G__32766 = null;
            var G__32767 = 0;
            var G__32768 = 0;
            seq__30744_32748 = G__32765;
            chunk__30745_32749 = G__32766;
            count__30746_32750 = G__32767;
            i__30747_32751 = G__32768;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.progress.apply(null, a__11708__auto__);
  };
  var progress = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return progress__delegate.call(this, args__11707__auto__);
  };
  progress.cljs$lang$maxFixedArity = 0;
  progress.cljs$lang$applyTo = function(arglist__32769) {
    var args__11707__auto__ = cljs.core.seq(arglist__32769);
    return progress__delegate(args__11707__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
quiescent.dom.q = function() {
  var q__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30752_32770 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30753_32771 = null;
    var count__30754_32772 = 0;
    var i__30755_32773 = 0;
    while (true) {
      if (i__30755_32773 < count__30754_32772) {
        var arg__11709__auto___32774 = cljs.core._nth.call(null, chunk__30753_32771, i__30755_32773);
        a__11708__auto__.push(arg__11709__auto___32774);
        var G__32775 = seq__30752_32770;
        var G__32776 = chunk__30753_32771;
        var G__32777 = count__30754_32772;
        var G__32778 = i__30755_32773 + 1;
        seq__30752_32770 = G__32775;
        chunk__30753_32771 = G__32776;
        count__30754_32772 = G__32777;
        i__30755_32773 = G__32778;
        continue;
      } else {
        var temp__4092__auto___32779 = cljs.core.seq.call(null, seq__30752_32770);
        if (temp__4092__auto___32779) {
          var seq__30752_32780__$1 = temp__4092__auto___32779;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30752_32780__$1)) {
            var c__11077__auto___32781 = cljs.core.chunk_first.call(null, seq__30752_32780__$1);
            var G__32782 = cljs.core.chunk_rest.call(null, seq__30752_32780__$1);
            var G__32783 = c__11077__auto___32781;
            var G__32784 = cljs.core.count.call(null, c__11077__auto___32781);
            var G__32785 = 0;
            seq__30752_32770 = G__32782;
            chunk__30753_32771 = G__32783;
            count__30754_32772 = G__32784;
            i__30755_32773 = G__32785;
            continue;
          } else {
            var arg__11709__auto___32786 = cljs.core.first.call(null, seq__30752_32780__$1);
            a__11708__auto__.push(arg__11709__auto___32786);
            var G__32787 = cljs.core.next.call(null, seq__30752_32780__$1);
            var G__32788 = null;
            var G__32789 = 0;
            var G__32790 = 0;
            seq__30752_32770 = G__32787;
            chunk__30753_32771 = G__32788;
            count__30754_32772 = G__32789;
            i__30755_32773 = G__32790;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.q.apply(null, a__11708__auto__);
  };
  var q = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return q__delegate.call(this, args__11707__auto__);
  };
  q.cljs$lang$maxFixedArity = 0;
  q.cljs$lang$applyTo = function(arglist__32791) {
    var args__11707__auto__ = cljs.core.seq(arglist__32791);
    return q__delegate(args__11707__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
quiescent.dom.rp = function() {
  var rp__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30760_32792 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30761_32793 = null;
    var count__30762_32794 = 0;
    var i__30763_32795 = 0;
    while (true) {
      if (i__30763_32795 < count__30762_32794) {
        var arg__11709__auto___32796 = cljs.core._nth.call(null, chunk__30761_32793, i__30763_32795);
        a__11708__auto__.push(arg__11709__auto___32796);
        var G__32797 = seq__30760_32792;
        var G__32798 = chunk__30761_32793;
        var G__32799 = count__30762_32794;
        var G__32800 = i__30763_32795 + 1;
        seq__30760_32792 = G__32797;
        chunk__30761_32793 = G__32798;
        count__30762_32794 = G__32799;
        i__30763_32795 = G__32800;
        continue;
      } else {
        var temp__4092__auto___32801 = cljs.core.seq.call(null, seq__30760_32792);
        if (temp__4092__auto___32801) {
          var seq__30760_32802__$1 = temp__4092__auto___32801;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30760_32802__$1)) {
            var c__11077__auto___32803 = cljs.core.chunk_first.call(null, seq__30760_32802__$1);
            var G__32804 = cljs.core.chunk_rest.call(null, seq__30760_32802__$1);
            var G__32805 = c__11077__auto___32803;
            var G__32806 = cljs.core.count.call(null, c__11077__auto___32803);
            var G__32807 = 0;
            seq__30760_32792 = G__32804;
            chunk__30761_32793 = G__32805;
            count__30762_32794 = G__32806;
            i__30763_32795 = G__32807;
            continue;
          } else {
            var arg__11709__auto___32808 = cljs.core.first.call(null, seq__30760_32802__$1);
            a__11708__auto__.push(arg__11709__auto___32808);
            var G__32809 = cljs.core.next.call(null, seq__30760_32802__$1);
            var G__32810 = null;
            var G__32811 = 0;
            var G__32812 = 0;
            seq__30760_32792 = G__32809;
            chunk__30761_32793 = G__32810;
            count__30762_32794 = G__32811;
            i__30763_32795 = G__32812;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rp.apply(null, a__11708__auto__);
  };
  var rp = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rp__delegate.call(this, args__11707__auto__);
  };
  rp.cljs$lang$maxFixedArity = 0;
  rp.cljs$lang$applyTo = function(arglist__32813) {
    var args__11707__auto__ = cljs.core.seq(arglist__32813);
    return rp__delegate(args__11707__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
quiescent.dom.rt = function() {
  var rt__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30768_32814 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30769_32815 = null;
    var count__30770_32816 = 0;
    var i__30771_32817 = 0;
    while (true) {
      if (i__30771_32817 < count__30770_32816) {
        var arg__11709__auto___32818 = cljs.core._nth.call(null, chunk__30769_32815, i__30771_32817);
        a__11708__auto__.push(arg__11709__auto___32818);
        var G__32819 = seq__30768_32814;
        var G__32820 = chunk__30769_32815;
        var G__32821 = count__30770_32816;
        var G__32822 = i__30771_32817 + 1;
        seq__30768_32814 = G__32819;
        chunk__30769_32815 = G__32820;
        count__30770_32816 = G__32821;
        i__30771_32817 = G__32822;
        continue;
      } else {
        var temp__4092__auto___32823 = cljs.core.seq.call(null, seq__30768_32814);
        if (temp__4092__auto___32823) {
          var seq__30768_32824__$1 = temp__4092__auto___32823;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30768_32824__$1)) {
            var c__11077__auto___32825 = cljs.core.chunk_first.call(null, seq__30768_32824__$1);
            var G__32826 = cljs.core.chunk_rest.call(null, seq__30768_32824__$1);
            var G__32827 = c__11077__auto___32825;
            var G__32828 = cljs.core.count.call(null, c__11077__auto___32825);
            var G__32829 = 0;
            seq__30768_32814 = G__32826;
            chunk__30769_32815 = G__32827;
            count__30770_32816 = G__32828;
            i__30771_32817 = G__32829;
            continue;
          } else {
            var arg__11709__auto___32830 = cljs.core.first.call(null, seq__30768_32824__$1);
            a__11708__auto__.push(arg__11709__auto___32830);
            var G__32831 = cljs.core.next.call(null, seq__30768_32824__$1);
            var G__32832 = null;
            var G__32833 = 0;
            var G__32834 = 0;
            seq__30768_32814 = G__32831;
            chunk__30769_32815 = G__32832;
            count__30770_32816 = G__32833;
            i__30771_32817 = G__32834;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rt.apply(null, a__11708__auto__);
  };
  var rt = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rt__delegate.call(this, args__11707__auto__);
  };
  rt.cljs$lang$maxFixedArity = 0;
  rt.cljs$lang$applyTo = function(arglist__32835) {
    var args__11707__auto__ = cljs.core.seq(arglist__32835);
    return rt__delegate(args__11707__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
quiescent.dom.ruby = function() {
  var ruby__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30776_32836 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30777_32837 = null;
    var count__30778_32838 = 0;
    var i__30779_32839 = 0;
    while (true) {
      if (i__30779_32839 < count__30778_32838) {
        var arg__11709__auto___32840 = cljs.core._nth.call(null, chunk__30777_32837, i__30779_32839);
        a__11708__auto__.push(arg__11709__auto___32840);
        var G__32841 = seq__30776_32836;
        var G__32842 = chunk__30777_32837;
        var G__32843 = count__30778_32838;
        var G__32844 = i__30779_32839 + 1;
        seq__30776_32836 = G__32841;
        chunk__30777_32837 = G__32842;
        count__30778_32838 = G__32843;
        i__30779_32839 = G__32844;
        continue;
      } else {
        var temp__4092__auto___32845 = cljs.core.seq.call(null, seq__30776_32836);
        if (temp__4092__auto___32845) {
          var seq__30776_32846__$1 = temp__4092__auto___32845;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30776_32846__$1)) {
            var c__11077__auto___32847 = cljs.core.chunk_first.call(null, seq__30776_32846__$1);
            var G__32848 = cljs.core.chunk_rest.call(null, seq__30776_32846__$1);
            var G__32849 = c__11077__auto___32847;
            var G__32850 = cljs.core.count.call(null, c__11077__auto___32847);
            var G__32851 = 0;
            seq__30776_32836 = G__32848;
            chunk__30777_32837 = G__32849;
            count__30778_32838 = G__32850;
            i__30779_32839 = G__32851;
            continue;
          } else {
            var arg__11709__auto___32852 = cljs.core.first.call(null, seq__30776_32846__$1);
            a__11708__auto__.push(arg__11709__auto___32852);
            var G__32853 = cljs.core.next.call(null, seq__30776_32846__$1);
            var G__32854 = null;
            var G__32855 = 0;
            var G__32856 = 0;
            seq__30776_32836 = G__32853;
            chunk__30777_32837 = G__32854;
            count__30778_32838 = G__32855;
            i__30779_32839 = G__32856;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ruby.apply(null, a__11708__auto__);
  };
  var ruby = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ruby__delegate.call(this, args__11707__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 0;
  ruby.cljs$lang$applyTo = function(arglist__32857) {
    var args__11707__auto__ = cljs.core.seq(arglist__32857);
    return ruby__delegate(args__11707__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
quiescent.dom.s = function() {
  var s__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30784_32858 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30785_32859 = null;
    var count__30786_32860 = 0;
    var i__30787_32861 = 0;
    while (true) {
      if (i__30787_32861 < count__30786_32860) {
        var arg__11709__auto___32862 = cljs.core._nth.call(null, chunk__30785_32859, i__30787_32861);
        a__11708__auto__.push(arg__11709__auto___32862);
        var G__32863 = seq__30784_32858;
        var G__32864 = chunk__30785_32859;
        var G__32865 = count__30786_32860;
        var G__32866 = i__30787_32861 + 1;
        seq__30784_32858 = G__32863;
        chunk__30785_32859 = G__32864;
        count__30786_32860 = G__32865;
        i__30787_32861 = G__32866;
        continue;
      } else {
        var temp__4092__auto___32867 = cljs.core.seq.call(null, seq__30784_32858);
        if (temp__4092__auto___32867) {
          var seq__30784_32868__$1 = temp__4092__auto___32867;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30784_32868__$1)) {
            var c__11077__auto___32869 = cljs.core.chunk_first.call(null, seq__30784_32868__$1);
            var G__32870 = cljs.core.chunk_rest.call(null, seq__30784_32868__$1);
            var G__32871 = c__11077__auto___32869;
            var G__32872 = cljs.core.count.call(null, c__11077__auto___32869);
            var G__32873 = 0;
            seq__30784_32858 = G__32870;
            chunk__30785_32859 = G__32871;
            count__30786_32860 = G__32872;
            i__30787_32861 = G__32873;
            continue;
          } else {
            var arg__11709__auto___32874 = cljs.core.first.call(null, seq__30784_32868__$1);
            a__11708__auto__.push(arg__11709__auto___32874);
            var G__32875 = cljs.core.next.call(null, seq__30784_32868__$1);
            var G__32876 = null;
            var G__32877 = 0;
            var G__32878 = 0;
            seq__30784_32858 = G__32875;
            chunk__30785_32859 = G__32876;
            count__30786_32860 = G__32877;
            i__30787_32861 = G__32878;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.s.apply(null, a__11708__auto__);
  };
  var s = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return s__delegate.call(this, args__11707__auto__);
  };
  s.cljs$lang$maxFixedArity = 0;
  s.cljs$lang$applyTo = function(arglist__32879) {
    var args__11707__auto__ = cljs.core.seq(arglist__32879);
    return s__delegate(args__11707__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
quiescent.dom.samp = function() {
  var samp__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30792_32880 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30793_32881 = null;
    var count__30794_32882 = 0;
    var i__30795_32883 = 0;
    while (true) {
      if (i__30795_32883 < count__30794_32882) {
        var arg__11709__auto___32884 = cljs.core._nth.call(null, chunk__30793_32881, i__30795_32883);
        a__11708__auto__.push(arg__11709__auto___32884);
        var G__32885 = seq__30792_32880;
        var G__32886 = chunk__30793_32881;
        var G__32887 = count__30794_32882;
        var G__32888 = i__30795_32883 + 1;
        seq__30792_32880 = G__32885;
        chunk__30793_32881 = G__32886;
        count__30794_32882 = G__32887;
        i__30795_32883 = G__32888;
        continue;
      } else {
        var temp__4092__auto___32889 = cljs.core.seq.call(null, seq__30792_32880);
        if (temp__4092__auto___32889) {
          var seq__30792_32890__$1 = temp__4092__auto___32889;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30792_32890__$1)) {
            var c__11077__auto___32891 = cljs.core.chunk_first.call(null, seq__30792_32890__$1);
            var G__32892 = cljs.core.chunk_rest.call(null, seq__30792_32890__$1);
            var G__32893 = c__11077__auto___32891;
            var G__32894 = cljs.core.count.call(null, c__11077__auto___32891);
            var G__32895 = 0;
            seq__30792_32880 = G__32892;
            chunk__30793_32881 = G__32893;
            count__30794_32882 = G__32894;
            i__30795_32883 = G__32895;
            continue;
          } else {
            var arg__11709__auto___32896 = cljs.core.first.call(null, seq__30792_32890__$1);
            a__11708__auto__.push(arg__11709__auto___32896);
            var G__32897 = cljs.core.next.call(null, seq__30792_32890__$1);
            var G__32898 = null;
            var G__32899 = 0;
            var G__32900 = 0;
            seq__30792_32880 = G__32897;
            chunk__30793_32881 = G__32898;
            count__30794_32882 = G__32899;
            i__30795_32883 = G__32900;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.samp.apply(null, a__11708__auto__);
  };
  var samp = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return samp__delegate.call(this, args__11707__auto__);
  };
  samp.cljs$lang$maxFixedArity = 0;
  samp.cljs$lang$applyTo = function(arglist__32901) {
    var args__11707__auto__ = cljs.core.seq(arglist__32901);
    return samp__delegate(args__11707__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
quiescent.dom.script = function() {
  var script__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30800_32902 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30801_32903 = null;
    var count__30802_32904 = 0;
    var i__30803_32905 = 0;
    while (true) {
      if (i__30803_32905 < count__30802_32904) {
        var arg__11709__auto___32906 = cljs.core._nth.call(null, chunk__30801_32903, i__30803_32905);
        a__11708__auto__.push(arg__11709__auto___32906);
        var G__32907 = seq__30800_32902;
        var G__32908 = chunk__30801_32903;
        var G__32909 = count__30802_32904;
        var G__32910 = i__30803_32905 + 1;
        seq__30800_32902 = G__32907;
        chunk__30801_32903 = G__32908;
        count__30802_32904 = G__32909;
        i__30803_32905 = G__32910;
        continue;
      } else {
        var temp__4092__auto___32911 = cljs.core.seq.call(null, seq__30800_32902);
        if (temp__4092__auto___32911) {
          var seq__30800_32912__$1 = temp__4092__auto___32911;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30800_32912__$1)) {
            var c__11077__auto___32913 = cljs.core.chunk_first.call(null, seq__30800_32912__$1);
            var G__32914 = cljs.core.chunk_rest.call(null, seq__30800_32912__$1);
            var G__32915 = c__11077__auto___32913;
            var G__32916 = cljs.core.count.call(null, c__11077__auto___32913);
            var G__32917 = 0;
            seq__30800_32902 = G__32914;
            chunk__30801_32903 = G__32915;
            count__30802_32904 = G__32916;
            i__30803_32905 = G__32917;
            continue;
          } else {
            var arg__11709__auto___32918 = cljs.core.first.call(null, seq__30800_32912__$1);
            a__11708__auto__.push(arg__11709__auto___32918);
            var G__32919 = cljs.core.next.call(null, seq__30800_32912__$1);
            var G__32920 = null;
            var G__32921 = 0;
            var G__32922 = 0;
            seq__30800_32902 = G__32919;
            chunk__30801_32903 = G__32920;
            count__30802_32904 = G__32921;
            i__30803_32905 = G__32922;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.script.apply(null, a__11708__auto__);
  };
  var script = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return script__delegate.call(this, args__11707__auto__);
  };
  script.cljs$lang$maxFixedArity = 0;
  script.cljs$lang$applyTo = function(arglist__32923) {
    var args__11707__auto__ = cljs.core.seq(arglist__32923);
    return script__delegate(args__11707__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
quiescent.dom.section = function() {
  var section__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30808_32924 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30809_32925 = null;
    var count__30810_32926 = 0;
    var i__30811_32927 = 0;
    while (true) {
      if (i__30811_32927 < count__30810_32926) {
        var arg__11709__auto___32928 = cljs.core._nth.call(null, chunk__30809_32925, i__30811_32927);
        a__11708__auto__.push(arg__11709__auto___32928);
        var G__32929 = seq__30808_32924;
        var G__32930 = chunk__30809_32925;
        var G__32931 = count__30810_32926;
        var G__32932 = i__30811_32927 + 1;
        seq__30808_32924 = G__32929;
        chunk__30809_32925 = G__32930;
        count__30810_32926 = G__32931;
        i__30811_32927 = G__32932;
        continue;
      } else {
        var temp__4092__auto___32933 = cljs.core.seq.call(null, seq__30808_32924);
        if (temp__4092__auto___32933) {
          var seq__30808_32934__$1 = temp__4092__auto___32933;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30808_32934__$1)) {
            var c__11077__auto___32935 = cljs.core.chunk_first.call(null, seq__30808_32934__$1);
            var G__32936 = cljs.core.chunk_rest.call(null, seq__30808_32934__$1);
            var G__32937 = c__11077__auto___32935;
            var G__32938 = cljs.core.count.call(null, c__11077__auto___32935);
            var G__32939 = 0;
            seq__30808_32924 = G__32936;
            chunk__30809_32925 = G__32937;
            count__30810_32926 = G__32938;
            i__30811_32927 = G__32939;
            continue;
          } else {
            var arg__11709__auto___32940 = cljs.core.first.call(null, seq__30808_32934__$1);
            a__11708__auto__.push(arg__11709__auto___32940);
            var G__32941 = cljs.core.next.call(null, seq__30808_32934__$1);
            var G__32942 = null;
            var G__32943 = 0;
            var G__32944 = 0;
            seq__30808_32924 = G__32941;
            chunk__30809_32925 = G__32942;
            count__30810_32926 = G__32943;
            i__30811_32927 = G__32944;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.section.apply(null, a__11708__auto__);
  };
  var section = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return section__delegate.call(this, args__11707__auto__);
  };
  section.cljs$lang$maxFixedArity = 0;
  section.cljs$lang$applyTo = function(arglist__32945) {
    var args__11707__auto__ = cljs.core.seq(arglist__32945);
    return section__delegate(args__11707__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
quiescent.dom.select = function() {
  var select__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30816_32946 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30817_32947 = null;
    var count__30818_32948 = 0;
    var i__30819_32949 = 0;
    while (true) {
      if (i__30819_32949 < count__30818_32948) {
        var arg__11709__auto___32950 = cljs.core._nth.call(null, chunk__30817_32947, i__30819_32949);
        a__11708__auto__.push(arg__11709__auto___32950);
        var G__32951 = seq__30816_32946;
        var G__32952 = chunk__30817_32947;
        var G__32953 = count__30818_32948;
        var G__32954 = i__30819_32949 + 1;
        seq__30816_32946 = G__32951;
        chunk__30817_32947 = G__32952;
        count__30818_32948 = G__32953;
        i__30819_32949 = G__32954;
        continue;
      } else {
        var temp__4092__auto___32955 = cljs.core.seq.call(null, seq__30816_32946);
        if (temp__4092__auto___32955) {
          var seq__30816_32956__$1 = temp__4092__auto___32955;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30816_32956__$1)) {
            var c__11077__auto___32957 = cljs.core.chunk_first.call(null, seq__30816_32956__$1);
            var G__32958 = cljs.core.chunk_rest.call(null, seq__30816_32956__$1);
            var G__32959 = c__11077__auto___32957;
            var G__32960 = cljs.core.count.call(null, c__11077__auto___32957);
            var G__32961 = 0;
            seq__30816_32946 = G__32958;
            chunk__30817_32947 = G__32959;
            count__30818_32948 = G__32960;
            i__30819_32949 = G__32961;
            continue;
          } else {
            var arg__11709__auto___32962 = cljs.core.first.call(null, seq__30816_32956__$1);
            a__11708__auto__.push(arg__11709__auto___32962);
            var G__32963 = cljs.core.next.call(null, seq__30816_32956__$1);
            var G__32964 = null;
            var G__32965 = 0;
            var G__32966 = 0;
            seq__30816_32946 = G__32963;
            chunk__30817_32947 = G__32964;
            count__30818_32948 = G__32965;
            i__30819_32949 = G__32966;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.select.apply(null, a__11708__auto__);
  };
  var select = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return select__delegate.call(this, args__11707__auto__);
  };
  select.cljs$lang$maxFixedArity = 0;
  select.cljs$lang$applyTo = function(arglist__32967) {
    var args__11707__auto__ = cljs.core.seq(arglist__32967);
    return select__delegate(args__11707__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
quiescent.dom.small = function() {
  var small__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30824_32968 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30825_32969 = null;
    var count__30826_32970 = 0;
    var i__30827_32971 = 0;
    while (true) {
      if (i__30827_32971 < count__30826_32970) {
        var arg__11709__auto___32972 = cljs.core._nth.call(null, chunk__30825_32969, i__30827_32971);
        a__11708__auto__.push(arg__11709__auto___32972);
        var G__32973 = seq__30824_32968;
        var G__32974 = chunk__30825_32969;
        var G__32975 = count__30826_32970;
        var G__32976 = i__30827_32971 + 1;
        seq__30824_32968 = G__32973;
        chunk__30825_32969 = G__32974;
        count__30826_32970 = G__32975;
        i__30827_32971 = G__32976;
        continue;
      } else {
        var temp__4092__auto___32977 = cljs.core.seq.call(null, seq__30824_32968);
        if (temp__4092__auto___32977) {
          var seq__30824_32978__$1 = temp__4092__auto___32977;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30824_32978__$1)) {
            var c__11077__auto___32979 = cljs.core.chunk_first.call(null, seq__30824_32978__$1);
            var G__32980 = cljs.core.chunk_rest.call(null, seq__30824_32978__$1);
            var G__32981 = c__11077__auto___32979;
            var G__32982 = cljs.core.count.call(null, c__11077__auto___32979);
            var G__32983 = 0;
            seq__30824_32968 = G__32980;
            chunk__30825_32969 = G__32981;
            count__30826_32970 = G__32982;
            i__30827_32971 = G__32983;
            continue;
          } else {
            var arg__11709__auto___32984 = cljs.core.first.call(null, seq__30824_32978__$1);
            a__11708__auto__.push(arg__11709__auto___32984);
            var G__32985 = cljs.core.next.call(null, seq__30824_32978__$1);
            var G__32986 = null;
            var G__32987 = 0;
            var G__32988 = 0;
            seq__30824_32968 = G__32985;
            chunk__30825_32969 = G__32986;
            count__30826_32970 = G__32987;
            i__30827_32971 = G__32988;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.small.apply(null, a__11708__auto__);
  };
  var small = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return small__delegate.call(this, args__11707__auto__);
  };
  small.cljs$lang$maxFixedArity = 0;
  small.cljs$lang$applyTo = function(arglist__32989) {
    var args__11707__auto__ = cljs.core.seq(arglist__32989);
    return small__delegate(args__11707__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
quiescent.dom.source = function() {
  var source__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30832_32990 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30833_32991 = null;
    var count__30834_32992 = 0;
    var i__30835_32993 = 0;
    while (true) {
      if (i__30835_32993 < count__30834_32992) {
        var arg__11709__auto___32994 = cljs.core._nth.call(null, chunk__30833_32991, i__30835_32993);
        a__11708__auto__.push(arg__11709__auto___32994);
        var G__32995 = seq__30832_32990;
        var G__32996 = chunk__30833_32991;
        var G__32997 = count__30834_32992;
        var G__32998 = i__30835_32993 + 1;
        seq__30832_32990 = G__32995;
        chunk__30833_32991 = G__32996;
        count__30834_32992 = G__32997;
        i__30835_32993 = G__32998;
        continue;
      } else {
        var temp__4092__auto___32999 = cljs.core.seq.call(null, seq__30832_32990);
        if (temp__4092__auto___32999) {
          var seq__30832_33000__$1 = temp__4092__auto___32999;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30832_33000__$1)) {
            var c__11077__auto___33001 = cljs.core.chunk_first.call(null, seq__30832_33000__$1);
            var G__33002 = cljs.core.chunk_rest.call(null, seq__30832_33000__$1);
            var G__33003 = c__11077__auto___33001;
            var G__33004 = cljs.core.count.call(null, c__11077__auto___33001);
            var G__33005 = 0;
            seq__30832_32990 = G__33002;
            chunk__30833_32991 = G__33003;
            count__30834_32992 = G__33004;
            i__30835_32993 = G__33005;
            continue;
          } else {
            var arg__11709__auto___33006 = cljs.core.first.call(null, seq__30832_33000__$1);
            a__11708__auto__.push(arg__11709__auto___33006);
            var G__33007 = cljs.core.next.call(null, seq__30832_33000__$1);
            var G__33008 = null;
            var G__33009 = 0;
            var G__33010 = 0;
            seq__30832_32990 = G__33007;
            chunk__30833_32991 = G__33008;
            count__30834_32992 = G__33009;
            i__30835_32993 = G__33010;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.source.apply(null, a__11708__auto__);
  };
  var source = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return source__delegate.call(this, args__11707__auto__);
  };
  source.cljs$lang$maxFixedArity = 0;
  source.cljs$lang$applyTo = function(arglist__33011) {
    var args__11707__auto__ = cljs.core.seq(arglist__33011);
    return source__delegate(args__11707__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
quiescent.dom.span = function() {
  var span__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30840_33012 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30841_33013 = null;
    var count__30842_33014 = 0;
    var i__30843_33015 = 0;
    while (true) {
      if (i__30843_33015 < count__30842_33014) {
        var arg__11709__auto___33016 = cljs.core._nth.call(null, chunk__30841_33013, i__30843_33015);
        a__11708__auto__.push(arg__11709__auto___33016);
        var G__33017 = seq__30840_33012;
        var G__33018 = chunk__30841_33013;
        var G__33019 = count__30842_33014;
        var G__33020 = i__30843_33015 + 1;
        seq__30840_33012 = G__33017;
        chunk__30841_33013 = G__33018;
        count__30842_33014 = G__33019;
        i__30843_33015 = G__33020;
        continue;
      } else {
        var temp__4092__auto___33021 = cljs.core.seq.call(null, seq__30840_33012);
        if (temp__4092__auto___33021) {
          var seq__30840_33022__$1 = temp__4092__auto___33021;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30840_33022__$1)) {
            var c__11077__auto___33023 = cljs.core.chunk_first.call(null, seq__30840_33022__$1);
            var G__33024 = cljs.core.chunk_rest.call(null, seq__30840_33022__$1);
            var G__33025 = c__11077__auto___33023;
            var G__33026 = cljs.core.count.call(null, c__11077__auto___33023);
            var G__33027 = 0;
            seq__30840_33012 = G__33024;
            chunk__30841_33013 = G__33025;
            count__30842_33014 = G__33026;
            i__30843_33015 = G__33027;
            continue;
          } else {
            var arg__11709__auto___33028 = cljs.core.first.call(null, seq__30840_33022__$1);
            a__11708__auto__.push(arg__11709__auto___33028);
            var G__33029 = cljs.core.next.call(null, seq__30840_33022__$1);
            var G__33030 = null;
            var G__33031 = 0;
            var G__33032 = 0;
            seq__30840_33012 = G__33029;
            chunk__30841_33013 = G__33030;
            count__30842_33014 = G__33031;
            i__30843_33015 = G__33032;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.span.apply(null, a__11708__auto__);
  };
  var span = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return span__delegate.call(this, args__11707__auto__);
  };
  span.cljs$lang$maxFixedArity = 0;
  span.cljs$lang$applyTo = function(arglist__33033) {
    var args__11707__auto__ = cljs.core.seq(arglist__33033);
    return span__delegate(args__11707__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
quiescent.dom.strong = function() {
  var strong__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30848_33034 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30849_33035 = null;
    var count__30850_33036 = 0;
    var i__30851_33037 = 0;
    while (true) {
      if (i__30851_33037 < count__30850_33036) {
        var arg__11709__auto___33038 = cljs.core._nth.call(null, chunk__30849_33035, i__30851_33037);
        a__11708__auto__.push(arg__11709__auto___33038);
        var G__33039 = seq__30848_33034;
        var G__33040 = chunk__30849_33035;
        var G__33041 = count__30850_33036;
        var G__33042 = i__30851_33037 + 1;
        seq__30848_33034 = G__33039;
        chunk__30849_33035 = G__33040;
        count__30850_33036 = G__33041;
        i__30851_33037 = G__33042;
        continue;
      } else {
        var temp__4092__auto___33043 = cljs.core.seq.call(null, seq__30848_33034);
        if (temp__4092__auto___33043) {
          var seq__30848_33044__$1 = temp__4092__auto___33043;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30848_33044__$1)) {
            var c__11077__auto___33045 = cljs.core.chunk_first.call(null, seq__30848_33044__$1);
            var G__33046 = cljs.core.chunk_rest.call(null, seq__30848_33044__$1);
            var G__33047 = c__11077__auto___33045;
            var G__33048 = cljs.core.count.call(null, c__11077__auto___33045);
            var G__33049 = 0;
            seq__30848_33034 = G__33046;
            chunk__30849_33035 = G__33047;
            count__30850_33036 = G__33048;
            i__30851_33037 = G__33049;
            continue;
          } else {
            var arg__11709__auto___33050 = cljs.core.first.call(null, seq__30848_33044__$1);
            a__11708__auto__.push(arg__11709__auto___33050);
            var G__33051 = cljs.core.next.call(null, seq__30848_33044__$1);
            var G__33052 = null;
            var G__33053 = 0;
            var G__33054 = 0;
            seq__30848_33034 = G__33051;
            chunk__30849_33035 = G__33052;
            count__30850_33036 = G__33053;
            i__30851_33037 = G__33054;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.strong.apply(null, a__11708__auto__);
  };
  var strong = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return strong__delegate.call(this, args__11707__auto__);
  };
  strong.cljs$lang$maxFixedArity = 0;
  strong.cljs$lang$applyTo = function(arglist__33055) {
    var args__11707__auto__ = cljs.core.seq(arglist__33055);
    return strong__delegate(args__11707__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
quiescent.dom.style = function() {
  var style__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30856_33056 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30857_33057 = null;
    var count__30858_33058 = 0;
    var i__30859_33059 = 0;
    while (true) {
      if (i__30859_33059 < count__30858_33058) {
        var arg__11709__auto___33060 = cljs.core._nth.call(null, chunk__30857_33057, i__30859_33059);
        a__11708__auto__.push(arg__11709__auto___33060);
        var G__33061 = seq__30856_33056;
        var G__33062 = chunk__30857_33057;
        var G__33063 = count__30858_33058;
        var G__33064 = i__30859_33059 + 1;
        seq__30856_33056 = G__33061;
        chunk__30857_33057 = G__33062;
        count__30858_33058 = G__33063;
        i__30859_33059 = G__33064;
        continue;
      } else {
        var temp__4092__auto___33065 = cljs.core.seq.call(null, seq__30856_33056);
        if (temp__4092__auto___33065) {
          var seq__30856_33066__$1 = temp__4092__auto___33065;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30856_33066__$1)) {
            var c__11077__auto___33067 = cljs.core.chunk_first.call(null, seq__30856_33066__$1);
            var G__33068 = cljs.core.chunk_rest.call(null, seq__30856_33066__$1);
            var G__33069 = c__11077__auto___33067;
            var G__33070 = cljs.core.count.call(null, c__11077__auto___33067);
            var G__33071 = 0;
            seq__30856_33056 = G__33068;
            chunk__30857_33057 = G__33069;
            count__30858_33058 = G__33070;
            i__30859_33059 = G__33071;
            continue;
          } else {
            var arg__11709__auto___33072 = cljs.core.first.call(null, seq__30856_33066__$1);
            a__11708__auto__.push(arg__11709__auto___33072);
            var G__33073 = cljs.core.next.call(null, seq__30856_33066__$1);
            var G__33074 = null;
            var G__33075 = 0;
            var G__33076 = 0;
            seq__30856_33056 = G__33073;
            chunk__30857_33057 = G__33074;
            count__30858_33058 = G__33075;
            i__30859_33059 = G__33076;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.style.apply(null, a__11708__auto__);
  };
  var style = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return style__delegate.call(this, args__11707__auto__);
  };
  style.cljs$lang$maxFixedArity = 0;
  style.cljs$lang$applyTo = function(arglist__33077) {
    var args__11707__auto__ = cljs.core.seq(arglist__33077);
    return style__delegate(args__11707__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
quiescent.dom.sub = function() {
  var sub__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30864_33078 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30865_33079 = null;
    var count__30866_33080 = 0;
    var i__30867_33081 = 0;
    while (true) {
      if (i__30867_33081 < count__30866_33080) {
        var arg__11709__auto___33082 = cljs.core._nth.call(null, chunk__30865_33079, i__30867_33081);
        a__11708__auto__.push(arg__11709__auto___33082);
        var G__33083 = seq__30864_33078;
        var G__33084 = chunk__30865_33079;
        var G__33085 = count__30866_33080;
        var G__33086 = i__30867_33081 + 1;
        seq__30864_33078 = G__33083;
        chunk__30865_33079 = G__33084;
        count__30866_33080 = G__33085;
        i__30867_33081 = G__33086;
        continue;
      } else {
        var temp__4092__auto___33087 = cljs.core.seq.call(null, seq__30864_33078);
        if (temp__4092__auto___33087) {
          var seq__30864_33088__$1 = temp__4092__auto___33087;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30864_33088__$1)) {
            var c__11077__auto___33089 = cljs.core.chunk_first.call(null, seq__30864_33088__$1);
            var G__33090 = cljs.core.chunk_rest.call(null, seq__30864_33088__$1);
            var G__33091 = c__11077__auto___33089;
            var G__33092 = cljs.core.count.call(null, c__11077__auto___33089);
            var G__33093 = 0;
            seq__30864_33078 = G__33090;
            chunk__30865_33079 = G__33091;
            count__30866_33080 = G__33092;
            i__30867_33081 = G__33093;
            continue;
          } else {
            var arg__11709__auto___33094 = cljs.core.first.call(null, seq__30864_33088__$1);
            a__11708__auto__.push(arg__11709__auto___33094);
            var G__33095 = cljs.core.next.call(null, seq__30864_33088__$1);
            var G__33096 = null;
            var G__33097 = 0;
            var G__33098 = 0;
            seq__30864_33078 = G__33095;
            chunk__30865_33079 = G__33096;
            count__30866_33080 = G__33097;
            i__30867_33081 = G__33098;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sub.apply(null, a__11708__auto__);
  };
  var sub = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sub__delegate.call(this, args__11707__auto__);
  };
  sub.cljs$lang$maxFixedArity = 0;
  sub.cljs$lang$applyTo = function(arglist__33099) {
    var args__11707__auto__ = cljs.core.seq(arglist__33099);
    return sub__delegate(args__11707__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
quiescent.dom.summary = function() {
  var summary__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30872_33100 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30873_33101 = null;
    var count__30874_33102 = 0;
    var i__30875_33103 = 0;
    while (true) {
      if (i__30875_33103 < count__30874_33102) {
        var arg__11709__auto___33104 = cljs.core._nth.call(null, chunk__30873_33101, i__30875_33103);
        a__11708__auto__.push(arg__11709__auto___33104);
        var G__33105 = seq__30872_33100;
        var G__33106 = chunk__30873_33101;
        var G__33107 = count__30874_33102;
        var G__33108 = i__30875_33103 + 1;
        seq__30872_33100 = G__33105;
        chunk__30873_33101 = G__33106;
        count__30874_33102 = G__33107;
        i__30875_33103 = G__33108;
        continue;
      } else {
        var temp__4092__auto___33109 = cljs.core.seq.call(null, seq__30872_33100);
        if (temp__4092__auto___33109) {
          var seq__30872_33110__$1 = temp__4092__auto___33109;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30872_33110__$1)) {
            var c__11077__auto___33111 = cljs.core.chunk_first.call(null, seq__30872_33110__$1);
            var G__33112 = cljs.core.chunk_rest.call(null, seq__30872_33110__$1);
            var G__33113 = c__11077__auto___33111;
            var G__33114 = cljs.core.count.call(null, c__11077__auto___33111);
            var G__33115 = 0;
            seq__30872_33100 = G__33112;
            chunk__30873_33101 = G__33113;
            count__30874_33102 = G__33114;
            i__30875_33103 = G__33115;
            continue;
          } else {
            var arg__11709__auto___33116 = cljs.core.first.call(null, seq__30872_33110__$1);
            a__11708__auto__.push(arg__11709__auto___33116);
            var G__33117 = cljs.core.next.call(null, seq__30872_33110__$1);
            var G__33118 = null;
            var G__33119 = 0;
            var G__33120 = 0;
            seq__30872_33100 = G__33117;
            chunk__30873_33101 = G__33118;
            count__30874_33102 = G__33119;
            i__30875_33103 = G__33120;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.summary.apply(null, a__11708__auto__);
  };
  var summary = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return summary__delegate.call(this, args__11707__auto__);
  };
  summary.cljs$lang$maxFixedArity = 0;
  summary.cljs$lang$applyTo = function(arglist__33121) {
    var args__11707__auto__ = cljs.core.seq(arglist__33121);
    return summary__delegate(args__11707__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
quiescent.dom.sup = function() {
  var sup__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30880_33122 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30881_33123 = null;
    var count__30882_33124 = 0;
    var i__30883_33125 = 0;
    while (true) {
      if (i__30883_33125 < count__30882_33124) {
        var arg__11709__auto___33126 = cljs.core._nth.call(null, chunk__30881_33123, i__30883_33125);
        a__11708__auto__.push(arg__11709__auto___33126);
        var G__33127 = seq__30880_33122;
        var G__33128 = chunk__30881_33123;
        var G__33129 = count__30882_33124;
        var G__33130 = i__30883_33125 + 1;
        seq__30880_33122 = G__33127;
        chunk__30881_33123 = G__33128;
        count__30882_33124 = G__33129;
        i__30883_33125 = G__33130;
        continue;
      } else {
        var temp__4092__auto___33131 = cljs.core.seq.call(null, seq__30880_33122);
        if (temp__4092__auto___33131) {
          var seq__30880_33132__$1 = temp__4092__auto___33131;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30880_33132__$1)) {
            var c__11077__auto___33133 = cljs.core.chunk_first.call(null, seq__30880_33132__$1);
            var G__33134 = cljs.core.chunk_rest.call(null, seq__30880_33132__$1);
            var G__33135 = c__11077__auto___33133;
            var G__33136 = cljs.core.count.call(null, c__11077__auto___33133);
            var G__33137 = 0;
            seq__30880_33122 = G__33134;
            chunk__30881_33123 = G__33135;
            count__30882_33124 = G__33136;
            i__30883_33125 = G__33137;
            continue;
          } else {
            var arg__11709__auto___33138 = cljs.core.first.call(null, seq__30880_33132__$1);
            a__11708__auto__.push(arg__11709__auto___33138);
            var G__33139 = cljs.core.next.call(null, seq__30880_33132__$1);
            var G__33140 = null;
            var G__33141 = 0;
            var G__33142 = 0;
            seq__30880_33122 = G__33139;
            chunk__30881_33123 = G__33140;
            count__30882_33124 = G__33141;
            i__30883_33125 = G__33142;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sup.apply(null, a__11708__auto__);
  };
  var sup = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sup__delegate.call(this, args__11707__auto__);
  };
  sup.cljs$lang$maxFixedArity = 0;
  sup.cljs$lang$applyTo = function(arglist__33143) {
    var args__11707__auto__ = cljs.core.seq(arglist__33143);
    return sup__delegate(args__11707__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
quiescent.dom.table = function() {
  var table__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30888_33144 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30889_33145 = null;
    var count__30890_33146 = 0;
    var i__30891_33147 = 0;
    while (true) {
      if (i__30891_33147 < count__30890_33146) {
        var arg__11709__auto___33148 = cljs.core._nth.call(null, chunk__30889_33145, i__30891_33147);
        a__11708__auto__.push(arg__11709__auto___33148);
        var G__33149 = seq__30888_33144;
        var G__33150 = chunk__30889_33145;
        var G__33151 = count__30890_33146;
        var G__33152 = i__30891_33147 + 1;
        seq__30888_33144 = G__33149;
        chunk__30889_33145 = G__33150;
        count__30890_33146 = G__33151;
        i__30891_33147 = G__33152;
        continue;
      } else {
        var temp__4092__auto___33153 = cljs.core.seq.call(null, seq__30888_33144);
        if (temp__4092__auto___33153) {
          var seq__30888_33154__$1 = temp__4092__auto___33153;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30888_33154__$1)) {
            var c__11077__auto___33155 = cljs.core.chunk_first.call(null, seq__30888_33154__$1);
            var G__33156 = cljs.core.chunk_rest.call(null, seq__30888_33154__$1);
            var G__33157 = c__11077__auto___33155;
            var G__33158 = cljs.core.count.call(null, c__11077__auto___33155);
            var G__33159 = 0;
            seq__30888_33144 = G__33156;
            chunk__30889_33145 = G__33157;
            count__30890_33146 = G__33158;
            i__30891_33147 = G__33159;
            continue;
          } else {
            var arg__11709__auto___33160 = cljs.core.first.call(null, seq__30888_33154__$1);
            a__11708__auto__.push(arg__11709__auto___33160);
            var G__33161 = cljs.core.next.call(null, seq__30888_33154__$1);
            var G__33162 = null;
            var G__33163 = 0;
            var G__33164 = 0;
            seq__30888_33144 = G__33161;
            chunk__30889_33145 = G__33162;
            count__30890_33146 = G__33163;
            i__30891_33147 = G__33164;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.table.apply(null, a__11708__auto__);
  };
  var table = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return table__delegate.call(this, args__11707__auto__);
  };
  table.cljs$lang$maxFixedArity = 0;
  table.cljs$lang$applyTo = function(arglist__33165) {
    var args__11707__auto__ = cljs.core.seq(arglist__33165);
    return table__delegate(args__11707__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
quiescent.dom.tbody = function() {
  var tbody__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30896_33166 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30897_33167 = null;
    var count__30898_33168 = 0;
    var i__30899_33169 = 0;
    while (true) {
      if (i__30899_33169 < count__30898_33168) {
        var arg__11709__auto___33170 = cljs.core._nth.call(null, chunk__30897_33167, i__30899_33169);
        a__11708__auto__.push(arg__11709__auto___33170);
        var G__33171 = seq__30896_33166;
        var G__33172 = chunk__30897_33167;
        var G__33173 = count__30898_33168;
        var G__33174 = i__30899_33169 + 1;
        seq__30896_33166 = G__33171;
        chunk__30897_33167 = G__33172;
        count__30898_33168 = G__33173;
        i__30899_33169 = G__33174;
        continue;
      } else {
        var temp__4092__auto___33175 = cljs.core.seq.call(null, seq__30896_33166);
        if (temp__4092__auto___33175) {
          var seq__30896_33176__$1 = temp__4092__auto___33175;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30896_33176__$1)) {
            var c__11077__auto___33177 = cljs.core.chunk_first.call(null, seq__30896_33176__$1);
            var G__33178 = cljs.core.chunk_rest.call(null, seq__30896_33176__$1);
            var G__33179 = c__11077__auto___33177;
            var G__33180 = cljs.core.count.call(null, c__11077__auto___33177);
            var G__33181 = 0;
            seq__30896_33166 = G__33178;
            chunk__30897_33167 = G__33179;
            count__30898_33168 = G__33180;
            i__30899_33169 = G__33181;
            continue;
          } else {
            var arg__11709__auto___33182 = cljs.core.first.call(null, seq__30896_33176__$1);
            a__11708__auto__.push(arg__11709__auto___33182);
            var G__33183 = cljs.core.next.call(null, seq__30896_33176__$1);
            var G__33184 = null;
            var G__33185 = 0;
            var G__33186 = 0;
            seq__30896_33166 = G__33183;
            chunk__30897_33167 = G__33184;
            count__30898_33168 = G__33185;
            i__30899_33169 = G__33186;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tbody.apply(null, a__11708__auto__);
  };
  var tbody = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tbody__delegate.call(this, args__11707__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 0;
  tbody.cljs$lang$applyTo = function(arglist__33187) {
    var args__11707__auto__ = cljs.core.seq(arglist__33187);
    return tbody__delegate(args__11707__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
quiescent.dom.td = function() {
  var td__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30904_33188 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30905_33189 = null;
    var count__30906_33190 = 0;
    var i__30907_33191 = 0;
    while (true) {
      if (i__30907_33191 < count__30906_33190) {
        var arg__11709__auto___33192 = cljs.core._nth.call(null, chunk__30905_33189, i__30907_33191);
        a__11708__auto__.push(arg__11709__auto___33192);
        var G__33193 = seq__30904_33188;
        var G__33194 = chunk__30905_33189;
        var G__33195 = count__30906_33190;
        var G__33196 = i__30907_33191 + 1;
        seq__30904_33188 = G__33193;
        chunk__30905_33189 = G__33194;
        count__30906_33190 = G__33195;
        i__30907_33191 = G__33196;
        continue;
      } else {
        var temp__4092__auto___33197 = cljs.core.seq.call(null, seq__30904_33188);
        if (temp__4092__auto___33197) {
          var seq__30904_33198__$1 = temp__4092__auto___33197;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30904_33198__$1)) {
            var c__11077__auto___33199 = cljs.core.chunk_first.call(null, seq__30904_33198__$1);
            var G__33200 = cljs.core.chunk_rest.call(null, seq__30904_33198__$1);
            var G__33201 = c__11077__auto___33199;
            var G__33202 = cljs.core.count.call(null, c__11077__auto___33199);
            var G__33203 = 0;
            seq__30904_33188 = G__33200;
            chunk__30905_33189 = G__33201;
            count__30906_33190 = G__33202;
            i__30907_33191 = G__33203;
            continue;
          } else {
            var arg__11709__auto___33204 = cljs.core.first.call(null, seq__30904_33198__$1);
            a__11708__auto__.push(arg__11709__auto___33204);
            var G__33205 = cljs.core.next.call(null, seq__30904_33198__$1);
            var G__33206 = null;
            var G__33207 = 0;
            var G__33208 = 0;
            seq__30904_33188 = G__33205;
            chunk__30905_33189 = G__33206;
            count__30906_33190 = G__33207;
            i__30907_33191 = G__33208;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.td.apply(null, a__11708__auto__);
  };
  var td = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return td__delegate.call(this, args__11707__auto__);
  };
  td.cljs$lang$maxFixedArity = 0;
  td.cljs$lang$applyTo = function(arglist__33209) {
    var args__11707__auto__ = cljs.core.seq(arglist__33209);
    return td__delegate(args__11707__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
quiescent.dom.textarea = function() {
  var textarea__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30912_33210 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30913_33211 = null;
    var count__30914_33212 = 0;
    var i__30915_33213 = 0;
    while (true) {
      if (i__30915_33213 < count__30914_33212) {
        var arg__11709__auto___33214 = cljs.core._nth.call(null, chunk__30913_33211, i__30915_33213);
        a__11708__auto__.push(arg__11709__auto___33214);
        var G__33215 = seq__30912_33210;
        var G__33216 = chunk__30913_33211;
        var G__33217 = count__30914_33212;
        var G__33218 = i__30915_33213 + 1;
        seq__30912_33210 = G__33215;
        chunk__30913_33211 = G__33216;
        count__30914_33212 = G__33217;
        i__30915_33213 = G__33218;
        continue;
      } else {
        var temp__4092__auto___33219 = cljs.core.seq.call(null, seq__30912_33210);
        if (temp__4092__auto___33219) {
          var seq__30912_33220__$1 = temp__4092__auto___33219;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30912_33220__$1)) {
            var c__11077__auto___33221 = cljs.core.chunk_first.call(null, seq__30912_33220__$1);
            var G__33222 = cljs.core.chunk_rest.call(null, seq__30912_33220__$1);
            var G__33223 = c__11077__auto___33221;
            var G__33224 = cljs.core.count.call(null, c__11077__auto___33221);
            var G__33225 = 0;
            seq__30912_33210 = G__33222;
            chunk__30913_33211 = G__33223;
            count__30914_33212 = G__33224;
            i__30915_33213 = G__33225;
            continue;
          } else {
            var arg__11709__auto___33226 = cljs.core.first.call(null, seq__30912_33220__$1);
            a__11708__auto__.push(arg__11709__auto___33226);
            var G__33227 = cljs.core.next.call(null, seq__30912_33220__$1);
            var G__33228 = null;
            var G__33229 = 0;
            var G__33230 = 0;
            seq__30912_33210 = G__33227;
            chunk__30913_33211 = G__33228;
            count__30914_33212 = G__33229;
            i__30915_33213 = G__33230;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.textarea.apply(null, a__11708__auto__);
  };
  var textarea = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return textarea__delegate.call(this, args__11707__auto__);
  };
  textarea.cljs$lang$maxFixedArity = 0;
  textarea.cljs$lang$applyTo = function(arglist__33231) {
    var args__11707__auto__ = cljs.core.seq(arglist__33231);
    return textarea__delegate(args__11707__auto__);
  };
  textarea.cljs$core$IFn$_invoke$arity$variadic = textarea__delegate;
  return textarea;
}();
quiescent.dom.tfoot = function() {
  var tfoot__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30920_33232 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30921_33233 = null;
    var count__30922_33234 = 0;
    var i__30923_33235 = 0;
    while (true) {
      if (i__30923_33235 < count__30922_33234) {
        var arg__11709__auto___33236 = cljs.core._nth.call(null, chunk__30921_33233, i__30923_33235);
        a__11708__auto__.push(arg__11709__auto___33236);
        var G__33237 = seq__30920_33232;
        var G__33238 = chunk__30921_33233;
        var G__33239 = count__30922_33234;
        var G__33240 = i__30923_33235 + 1;
        seq__30920_33232 = G__33237;
        chunk__30921_33233 = G__33238;
        count__30922_33234 = G__33239;
        i__30923_33235 = G__33240;
        continue;
      } else {
        var temp__4092__auto___33241 = cljs.core.seq.call(null, seq__30920_33232);
        if (temp__4092__auto___33241) {
          var seq__30920_33242__$1 = temp__4092__auto___33241;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30920_33242__$1)) {
            var c__11077__auto___33243 = cljs.core.chunk_first.call(null, seq__30920_33242__$1);
            var G__33244 = cljs.core.chunk_rest.call(null, seq__30920_33242__$1);
            var G__33245 = c__11077__auto___33243;
            var G__33246 = cljs.core.count.call(null, c__11077__auto___33243);
            var G__33247 = 0;
            seq__30920_33232 = G__33244;
            chunk__30921_33233 = G__33245;
            count__30922_33234 = G__33246;
            i__30923_33235 = G__33247;
            continue;
          } else {
            var arg__11709__auto___33248 = cljs.core.first.call(null, seq__30920_33242__$1);
            a__11708__auto__.push(arg__11709__auto___33248);
            var G__33249 = cljs.core.next.call(null, seq__30920_33242__$1);
            var G__33250 = null;
            var G__33251 = 0;
            var G__33252 = 0;
            seq__30920_33232 = G__33249;
            chunk__30921_33233 = G__33250;
            count__30922_33234 = G__33251;
            i__30923_33235 = G__33252;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tfoot.apply(null, a__11708__auto__);
  };
  var tfoot = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tfoot__delegate.call(this, args__11707__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 0;
  tfoot.cljs$lang$applyTo = function(arglist__33253) {
    var args__11707__auto__ = cljs.core.seq(arglist__33253);
    return tfoot__delegate(args__11707__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
quiescent.dom.th = function() {
  var th__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30928_33254 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30929_33255 = null;
    var count__30930_33256 = 0;
    var i__30931_33257 = 0;
    while (true) {
      if (i__30931_33257 < count__30930_33256) {
        var arg__11709__auto___33258 = cljs.core._nth.call(null, chunk__30929_33255, i__30931_33257);
        a__11708__auto__.push(arg__11709__auto___33258);
        var G__33259 = seq__30928_33254;
        var G__33260 = chunk__30929_33255;
        var G__33261 = count__30930_33256;
        var G__33262 = i__30931_33257 + 1;
        seq__30928_33254 = G__33259;
        chunk__30929_33255 = G__33260;
        count__30930_33256 = G__33261;
        i__30931_33257 = G__33262;
        continue;
      } else {
        var temp__4092__auto___33263 = cljs.core.seq.call(null, seq__30928_33254);
        if (temp__4092__auto___33263) {
          var seq__30928_33264__$1 = temp__4092__auto___33263;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30928_33264__$1)) {
            var c__11077__auto___33265 = cljs.core.chunk_first.call(null, seq__30928_33264__$1);
            var G__33266 = cljs.core.chunk_rest.call(null, seq__30928_33264__$1);
            var G__33267 = c__11077__auto___33265;
            var G__33268 = cljs.core.count.call(null, c__11077__auto___33265);
            var G__33269 = 0;
            seq__30928_33254 = G__33266;
            chunk__30929_33255 = G__33267;
            count__30930_33256 = G__33268;
            i__30931_33257 = G__33269;
            continue;
          } else {
            var arg__11709__auto___33270 = cljs.core.first.call(null, seq__30928_33264__$1);
            a__11708__auto__.push(arg__11709__auto___33270);
            var G__33271 = cljs.core.next.call(null, seq__30928_33264__$1);
            var G__33272 = null;
            var G__33273 = 0;
            var G__33274 = 0;
            seq__30928_33254 = G__33271;
            chunk__30929_33255 = G__33272;
            count__30930_33256 = G__33273;
            i__30931_33257 = G__33274;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.th.apply(null, a__11708__auto__);
  };
  var th = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return th__delegate.call(this, args__11707__auto__);
  };
  th.cljs$lang$maxFixedArity = 0;
  th.cljs$lang$applyTo = function(arglist__33275) {
    var args__11707__auto__ = cljs.core.seq(arglist__33275);
    return th__delegate(args__11707__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
quiescent.dom.thead = function() {
  var thead__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30936_33276 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30937_33277 = null;
    var count__30938_33278 = 0;
    var i__30939_33279 = 0;
    while (true) {
      if (i__30939_33279 < count__30938_33278) {
        var arg__11709__auto___33280 = cljs.core._nth.call(null, chunk__30937_33277, i__30939_33279);
        a__11708__auto__.push(arg__11709__auto___33280);
        var G__33281 = seq__30936_33276;
        var G__33282 = chunk__30937_33277;
        var G__33283 = count__30938_33278;
        var G__33284 = i__30939_33279 + 1;
        seq__30936_33276 = G__33281;
        chunk__30937_33277 = G__33282;
        count__30938_33278 = G__33283;
        i__30939_33279 = G__33284;
        continue;
      } else {
        var temp__4092__auto___33285 = cljs.core.seq.call(null, seq__30936_33276);
        if (temp__4092__auto___33285) {
          var seq__30936_33286__$1 = temp__4092__auto___33285;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30936_33286__$1)) {
            var c__11077__auto___33287 = cljs.core.chunk_first.call(null, seq__30936_33286__$1);
            var G__33288 = cljs.core.chunk_rest.call(null, seq__30936_33286__$1);
            var G__33289 = c__11077__auto___33287;
            var G__33290 = cljs.core.count.call(null, c__11077__auto___33287);
            var G__33291 = 0;
            seq__30936_33276 = G__33288;
            chunk__30937_33277 = G__33289;
            count__30938_33278 = G__33290;
            i__30939_33279 = G__33291;
            continue;
          } else {
            var arg__11709__auto___33292 = cljs.core.first.call(null, seq__30936_33286__$1);
            a__11708__auto__.push(arg__11709__auto___33292);
            var G__33293 = cljs.core.next.call(null, seq__30936_33286__$1);
            var G__33294 = null;
            var G__33295 = 0;
            var G__33296 = 0;
            seq__30936_33276 = G__33293;
            chunk__30937_33277 = G__33294;
            count__30938_33278 = G__33295;
            i__30939_33279 = G__33296;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.thead.apply(null, a__11708__auto__);
  };
  var thead = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return thead__delegate.call(this, args__11707__auto__);
  };
  thead.cljs$lang$maxFixedArity = 0;
  thead.cljs$lang$applyTo = function(arglist__33297) {
    var args__11707__auto__ = cljs.core.seq(arglist__33297);
    return thead__delegate(args__11707__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
quiescent.dom.time = function() {
  var time__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30944_33298 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30945_33299 = null;
    var count__30946_33300 = 0;
    var i__30947_33301 = 0;
    while (true) {
      if (i__30947_33301 < count__30946_33300) {
        var arg__11709__auto___33302 = cljs.core._nth.call(null, chunk__30945_33299, i__30947_33301);
        a__11708__auto__.push(arg__11709__auto___33302);
        var G__33303 = seq__30944_33298;
        var G__33304 = chunk__30945_33299;
        var G__33305 = count__30946_33300;
        var G__33306 = i__30947_33301 + 1;
        seq__30944_33298 = G__33303;
        chunk__30945_33299 = G__33304;
        count__30946_33300 = G__33305;
        i__30947_33301 = G__33306;
        continue;
      } else {
        var temp__4092__auto___33307 = cljs.core.seq.call(null, seq__30944_33298);
        if (temp__4092__auto___33307) {
          var seq__30944_33308__$1 = temp__4092__auto___33307;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30944_33308__$1)) {
            var c__11077__auto___33309 = cljs.core.chunk_first.call(null, seq__30944_33308__$1);
            var G__33310 = cljs.core.chunk_rest.call(null, seq__30944_33308__$1);
            var G__33311 = c__11077__auto___33309;
            var G__33312 = cljs.core.count.call(null, c__11077__auto___33309);
            var G__33313 = 0;
            seq__30944_33298 = G__33310;
            chunk__30945_33299 = G__33311;
            count__30946_33300 = G__33312;
            i__30947_33301 = G__33313;
            continue;
          } else {
            var arg__11709__auto___33314 = cljs.core.first.call(null, seq__30944_33308__$1);
            a__11708__auto__.push(arg__11709__auto___33314);
            var G__33315 = cljs.core.next.call(null, seq__30944_33308__$1);
            var G__33316 = null;
            var G__33317 = 0;
            var G__33318 = 0;
            seq__30944_33298 = G__33315;
            chunk__30945_33299 = G__33316;
            count__30946_33300 = G__33317;
            i__30947_33301 = G__33318;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.time.apply(null, a__11708__auto__);
  };
  var time = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return time__delegate.call(this, args__11707__auto__);
  };
  time.cljs$lang$maxFixedArity = 0;
  time.cljs$lang$applyTo = function(arglist__33319) {
    var args__11707__auto__ = cljs.core.seq(arglist__33319);
    return time__delegate(args__11707__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
quiescent.dom.title = function() {
  var title__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30952_33320 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30953_33321 = null;
    var count__30954_33322 = 0;
    var i__30955_33323 = 0;
    while (true) {
      if (i__30955_33323 < count__30954_33322) {
        var arg__11709__auto___33324 = cljs.core._nth.call(null, chunk__30953_33321, i__30955_33323);
        a__11708__auto__.push(arg__11709__auto___33324);
        var G__33325 = seq__30952_33320;
        var G__33326 = chunk__30953_33321;
        var G__33327 = count__30954_33322;
        var G__33328 = i__30955_33323 + 1;
        seq__30952_33320 = G__33325;
        chunk__30953_33321 = G__33326;
        count__30954_33322 = G__33327;
        i__30955_33323 = G__33328;
        continue;
      } else {
        var temp__4092__auto___33329 = cljs.core.seq.call(null, seq__30952_33320);
        if (temp__4092__auto___33329) {
          var seq__30952_33330__$1 = temp__4092__auto___33329;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30952_33330__$1)) {
            var c__11077__auto___33331 = cljs.core.chunk_first.call(null, seq__30952_33330__$1);
            var G__33332 = cljs.core.chunk_rest.call(null, seq__30952_33330__$1);
            var G__33333 = c__11077__auto___33331;
            var G__33334 = cljs.core.count.call(null, c__11077__auto___33331);
            var G__33335 = 0;
            seq__30952_33320 = G__33332;
            chunk__30953_33321 = G__33333;
            count__30954_33322 = G__33334;
            i__30955_33323 = G__33335;
            continue;
          } else {
            var arg__11709__auto___33336 = cljs.core.first.call(null, seq__30952_33330__$1);
            a__11708__auto__.push(arg__11709__auto___33336);
            var G__33337 = cljs.core.next.call(null, seq__30952_33330__$1);
            var G__33338 = null;
            var G__33339 = 0;
            var G__33340 = 0;
            seq__30952_33320 = G__33337;
            chunk__30953_33321 = G__33338;
            count__30954_33322 = G__33339;
            i__30955_33323 = G__33340;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.title.apply(null, a__11708__auto__);
  };
  var title = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return title__delegate.call(this, args__11707__auto__);
  };
  title.cljs$lang$maxFixedArity = 0;
  title.cljs$lang$applyTo = function(arglist__33341) {
    var args__11707__auto__ = cljs.core.seq(arglist__33341);
    return title__delegate(args__11707__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
quiescent.dom.tr = function() {
  var tr__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30960_33342 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30961_33343 = null;
    var count__30962_33344 = 0;
    var i__30963_33345 = 0;
    while (true) {
      if (i__30963_33345 < count__30962_33344) {
        var arg__11709__auto___33346 = cljs.core._nth.call(null, chunk__30961_33343, i__30963_33345);
        a__11708__auto__.push(arg__11709__auto___33346);
        var G__33347 = seq__30960_33342;
        var G__33348 = chunk__30961_33343;
        var G__33349 = count__30962_33344;
        var G__33350 = i__30963_33345 + 1;
        seq__30960_33342 = G__33347;
        chunk__30961_33343 = G__33348;
        count__30962_33344 = G__33349;
        i__30963_33345 = G__33350;
        continue;
      } else {
        var temp__4092__auto___33351 = cljs.core.seq.call(null, seq__30960_33342);
        if (temp__4092__auto___33351) {
          var seq__30960_33352__$1 = temp__4092__auto___33351;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30960_33352__$1)) {
            var c__11077__auto___33353 = cljs.core.chunk_first.call(null, seq__30960_33352__$1);
            var G__33354 = cljs.core.chunk_rest.call(null, seq__30960_33352__$1);
            var G__33355 = c__11077__auto___33353;
            var G__33356 = cljs.core.count.call(null, c__11077__auto___33353);
            var G__33357 = 0;
            seq__30960_33342 = G__33354;
            chunk__30961_33343 = G__33355;
            count__30962_33344 = G__33356;
            i__30963_33345 = G__33357;
            continue;
          } else {
            var arg__11709__auto___33358 = cljs.core.first.call(null, seq__30960_33352__$1);
            a__11708__auto__.push(arg__11709__auto___33358);
            var G__33359 = cljs.core.next.call(null, seq__30960_33352__$1);
            var G__33360 = null;
            var G__33361 = 0;
            var G__33362 = 0;
            seq__30960_33342 = G__33359;
            chunk__30961_33343 = G__33360;
            count__30962_33344 = G__33361;
            i__30963_33345 = G__33362;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tr.apply(null, a__11708__auto__);
  };
  var tr = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tr__delegate.call(this, args__11707__auto__);
  };
  tr.cljs$lang$maxFixedArity = 0;
  tr.cljs$lang$applyTo = function(arglist__33363) {
    var args__11707__auto__ = cljs.core.seq(arglist__33363);
    return tr__delegate(args__11707__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
quiescent.dom.track = function() {
  var track__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30968_33364 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30969_33365 = null;
    var count__30970_33366 = 0;
    var i__30971_33367 = 0;
    while (true) {
      if (i__30971_33367 < count__30970_33366) {
        var arg__11709__auto___33368 = cljs.core._nth.call(null, chunk__30969_33365, i__30971_33367);
        a__11708__auto__.push(arg__11709__auto___33368);
        var G__33369 = seq__30968_33364;
        var G__33370 = chunk__30969_33365;
        var G__33371 = count__30970_33366;
        var G__33372 = i__30971_33367 + 1;
        seq__30968_33364 = G__33369;
        chunk__30969_33365 = G__33370;
        count__30970_33366 = G__33371;
        i__30971_33367 = G__33372;
        continue;
      } else {
        var temp__4092__auto___33373 = cljs.core.seq.call(null, seq__30968_33364);
        if (temp__4092__auto___33373) {
          var seq__30968_33374__$1 = temp__4092__auto___33373;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30968_33374__$1)) {
            var c__11077__auto___33375 = cljs.core.chunk_first.call(null, seq__30968_33374__$1);
            var G__33376 = cljs.core.chunk_rest.call(null, seq__30968_33374__$1);
            var G__33377 = c__11077__auto___33375;
            var G__33378 = cljs.core.count.call(null, c__11077__auto___33375);
            var G__33379 = 0;
            seq__30968_33364 = G__33376;
            chunk__30969_33365 = G__33377;
            count__30970_33366 = G__33378;
            i__30971_33367 = G__33379;
            continue;
          } else {
            var arg__11709__auto___33380 = cljs.core.first.call(null, seq__30968_33374__$1);
            a__11708__auto__.push(arg__11709__auto___33380);
            var G__33381 = cljs.core.next.call(null, seq__30968_33374__$1);
            var G__33382 = null;
            var G__33383 = 0;
            var G__33384 = 0;
            seq__30968_33364 = G__33381;
            chunk__30969_33365 = G__33382;
            count__30970_33366 = G__33383;
            i__30971_33367 = G__33384;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.track.apply(null, a__11708__auto__);
  };
  var track = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return track__delegate.call(this, args__11707__auto__);
  };
  track.cljs$lang$maxFixedArity = 0;
  track.cljs$lang$applyTo = function(arglist__33385) {
    var args__11707__auto__ = cljs.core.seq(arglist__33385);
    return track__delegate(args__11707__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
quiescent.dom.u = function() {
  var u__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30976_33386 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30977_33387 = null;
    var count__30978_33388 = 0;
    var i__30979_33389 = 0;
    while (true) {
      if (i__30979_33389 < count__30978_33388) {
        var arg__11709__auto___33390 = cljs.core._nth.call(null, chunk__30977_33387, i__30979_33389);
        a__11708__auto__.push(arg__11709__auto___33390);
        var G__33391 = seq__30976_33386;
        var G__33392 = chunk__30977_33387;
        var G__33393 = count__30978_33388;
        var G__33394 = i__30979_33389 + 1;
        seq__30976_33386 = G__33391;
        chunk__30977_33387 = G__33392;
        count__30978_33388 = G__33393;
        i__30979_33389 = G__33394;
        continue;
      } else {
        var temp__4092__auto___33395 = cljs.core.seq.call(null, seq__30976_33386);
        if (temp__4092__auto___33395) {
          var seq__30976_33396__$1 = temp__4092__auto___33395;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30976_33396__$1)) {
            var c__11077__auto___33397 = cljs.core.chunk_first.call(null, seq__30976_33396__$1);
            var G__33398 = cljs.core.chunk_rest.call(null, seq__30976_33396__$1);
            var G__33399 = c__11077__auto___33397;
            var G__33400 = cljs.core.count.call(null, c__11077__auto___33397);
            var G__33401 = 0;
            seq__30976_33386 = G__33398;
            chunk__30977_33387 = G__33399;
            count__30978_33388 = G__33400;
            i__30979_33389 = G__33401;
            continue;
          } else {
            var arg__11709__auto___33402 = cljs.core.first.call(null, seq__30976_33396__$1);
            a__11708__auto__.push(arg__11709__auto___33402);
            var G__33403 = cljs.core.next.call(null, seq__30976_33396__$1);
            var G__33404 = null;
            var G__33405 = 0;
            var G__33406 = 0;
            seq__30976_33386 = G__33403;
            chunk__30977_33387 = G__33404;
            count__30978_33388 = G__33405;
            i__30979_33389 = G__33406;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.u.apply(null, a__11708__auto__);
  };
  var u = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return u__delegate.call(this, args__11707__auto__);
  };
  u.cljs$lang$maxFixedArity = 0;
  u.cljs$lang$applyTo = function(arglist__33407) {
    var args__11707__auto__ = cljs.core.seq(arglist__33407);
    return u__delegate(args__11707__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
quiescent.dom.ul = function() {
  var ul__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30984_33408 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30985_33409 = null;
    var count__30986_33410 = 0;
    var i__30987_33411 = 0;
    while (true) {
      if (i__30987_33411 < count__30986_33410) {
        var arg__11709__auto___33412 = cljs.core._nth.call(null, chunk__30985_33409, i__30987_33411);
        a__11708__auto__.push(arg__11709__auto___33412);
        var G__33413 = seq__30984_33408;
        var G__33414 = chunk__30985_33409;
        var G__33415 = count__30986_33410;
        var G__33416 = i__30987_33411 + 1;
        seq__30984_33408 = G__33413;
        chunk__30985_33409 = G__33414;
        count__30986_33410 = G__33415;
        i__30987_33411 = G__33416;
        continue;
      } else {
        var temp__4092__auto___33417 = cljs.core.seq.call(null, seq__30984_33408);
        if (temp__4092__auto___33417) {
          var seq__30984_33418__$1 = temp__4092__auto___33417;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30984_33418__$1)) {
            var c__11077__auto___33419 = cljs.core.chunk_first.call(null, seq__30984_33418__$1);
            var G__33420 = cljs.core.chunk_rest.call(null, seq__30984_33418__$1);
            var G__33421 = c__11077__auto___33419;
            var G__33422 = cljs.core.count.call(null, c__11077__auto___33419);
            var G__33423 = 0;
            seq__30984_33408 = G__33420;
            chunk__30985_33409 = G__33421;
            count__30986_33410 = G__33422;
            i__30987_33411 = G__33423;
            continue;
          } else {
            var arg__11709__auto___33424 = cljs.core.first.call(null, seq__30984_33418__$1);
            a__11708__auto__.push(arg__11709__auto___33424);
            var G__33425 = cljs.core.next.call(null, seq__30984_33418__$1);
            var G__33426 = null;
            var G__33427 = 0;
            var G__33428 = 0;
            seq__30984_33408 = G__33425;
            chunk__30985_33409 = G__33426;
            count__30986_33410 = G__33427;
            i__30987_33411 = G__33428;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ul.apply(null, a__11708__auto__);
  };
  var ul = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ul__delegate.call(this, args__11707__auto__);
  };
  ul.cljs$lang$maxFixedArity = 0;
  ul.cljs$lang$applyTo = function(arglist__33429) {
    var args__11707__auto__ = cljs.core.seq(arglist__33429);
    return ul__delegate(args__11707__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
quiescent.dom.var$ = function() {
  var var$__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30992_33430 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30993_33431 = null;
    var count__30994_33432 = 0;
    var i__30995_33433 = 0;
    while (true) {
      if (i__30995_33433 < count__30994_33432) {
        var arg__11709__auto___33434 = cljs.core._nth.call(null, chunk__30993_33431, i__30995_33433);
        a__11708__auto__.push(arg__11709__auto___33434);
        var G__33435 = seq__30992_33430;
        var G__33436 = chunk__30993_33431;
        var G__33437 = count__30994_33432;
        var G__33438 = i__30995_33433 + 1;
        seq__30992_33430 = G__33435;
        chunk__30993_33431 = G__33436;
        count__30994_33432 = G__33437;
        i__30995_33433 = G__33438;
        continue;
      } else {
        var temp__4092__auto___33439 = cljs.core.seq.call(null, seq__30992_33430);
        if (temp__4092__auto___33439) {
          var seq__30992_33440__$1 = temp__4092__auto___33439;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30992_33440__$1)) {
            var c__11077__auto___33441 = cljs.core.chunk_first.call(null, seq__30992_33440__$1);
            var G__33442 = cljs.core.chunk_rest.call(null, seq__30992_33440__$1);
            var G__33443 = c__11077__auto___33441;
            var G__33444 = cljs.core.count.call(null, c__11077__auto___33441);
            var G__33445 = 0;
            seq__30992_33430 = G__33442;
            chunk__30993_33431 = G__33443;
            count__30994_33432 = G__33444;
            i__30995_33433 = G__33445;
            continue;
          } else {
            var arg__11709__auto___33446 = cljs.core.first.call(null, seq__30992_33440__$1);
            a__11708__auto__.push(arg__11709__auto___33446);
            var G__33447 = cljs.core.next.call(null, seq__30992_33440__$1);
            var G__33448 = null;
            var G__33449 = 0;
            var G__33450 = 0;
            seq__30992_33430 = G__33447;
            chunk__30993_33431 = G__33448;
            count__30994_33432 = G__33449;
            i__30995_33433 = G__33450;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.var$.apply(null, a__11708__auto__);
  };
  var var$ = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return var$__delegate.call(this, args__11707__auto__);
  };
  var$.cljs$lang$maxFixedArity = 0;
  var$.cljs$lang$applyTo = function(arglist__33451) {
    var args__11707__auto__ = cljs.core.seq(arglist__33451);
    return var$__delegate(args__11707__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
quiescent.dom.video = function() {
  var video__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31000_33452 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31001_33453 = null;
    var count__31002_33454 = 0;
    var i__31003_33455 = 0;
    while (true) {
      if (i__31003_33455 < count__31002_33454) {
        var arg__11709__auto___33456 = cljs.core._nth.call(null, chunk__31001_33453, i__31003_33455);
        a__11708__auto__.push(arg__11709__auto___33456);
        var G__33457 = seq__31000_33452;
        var G__33458 = chunk__31001_33453;
        var G__33459 = count__31002_33454;
        var G__33460 = i__31003_33455 + 1;
        seq__31000_33452 = G__33457;
        chunk__31001_33453 = G__33458;
        count__31002_33454 = G__33459;
        i__31003_33455 = G__33460;
        continue;
      } else {
        var temp__4092__auto___33461 = cljs.core.seq.call(null, seq__31000_33452);
        if (temp__4092__auto___33461) {
          var seq__31000_33462__$1 = temp__4092__auto___33461;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31000_33462__$1)) {
            var c__11077__auto___33463 = cljs.core.chunk_first.call(null, seq__31000_33462__$1);
            var G__33464 = cljs.core.chunk_rest.call(null, seq__31000_33462__$1);
            var G__33465 = c__11077__auto___33463;
            var G__33466 = cljs.core.count.call(null, c__11077__auto___33463);
            var G__33467 = 0;
            seq__31000_33452 = G__33464;
            chunk__31001_33453 = G__33465;
            count__31002_33454 = G__33466;
            i__31003_33455 = G__33467;
            continue;
          } else {
            var arg__11709__auto___33468 = cljs.core.first.call(null, seq__31000_33462__$1);
            a__11708__auto__.push(arg__11709__auto___33468);
            var G__33469 = cljs.core.next.call(null, seq__31000_33462__$1);
            var G__33470 = null;
            var G__33471 = 0;
            var G__33472 = 0;
            seq__31000_33452 = G__33469;
            chunk__31001_33453 = G__33470;
            count__31002_33454 = G__33471;
            i__31003_33455 = G__33472;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.video.apply(null, a__11708__auto__);
  };
  var video = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return video__delegate.call(this, args__11707__auto__);
  };
  video.cljs$lang$maxFixedArity = 0;
  video.cljs$lang$applyTo = function(arglist__33473) {
    var args__11707__auto__ = cljs.core.seq(arglist__33473);
    return video__delegate(args__11707__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
quiescent.dom.wbr = function() {
  var wbr__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31008_33474 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31009_33475 = null;
    var count__31010_33476 = 0;
    var i__31011_33477 = 0;
    while (true) {
      if (i__31011_33477 < count__31010_33476) {
        var arg__11709__auto___33478 = cljs.core._nth.call(null, chunk__31009_33475, i__31011_33477);
        a__11708__auto__.push(arg__11709__auto___33478);
        var G__33479 = seq__31008_33474;
        var G__33480 = chunk__31009_33475;
        var G__33481 = count__31010_33476;
        var G__33482 = i__31011_33477 + 1;
        seq__31008_33474 = G__33479;
        chunk__31009_33475 = G__33480;
        count__31010_33476 = G__33481;
        i__31011_33477 = G__33482;
        continue;
      } else {
        var temp__4092__auto___33483 = cljs.core.seq.call(null, seq__31008_33474);
        if (temp__4092__auto___33483) {
          var seq__31008_33484__$1 = temp__4092__auto___33483;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31008_33484__$1)) {
            var c__11077__auto___33485 = cljs.core.chunk_first.call(null, seq__31008_33484__$1);
            var G__33486 = cljs.core.chunk_rest.call(null, seq__31008_33484__$1);
            var G__33487 = c__11077__auto___33485;
            var G__33488 = cljs.core.count.call(null, c__11077__auto___33485);
            var G__33489 = 0;
            seq__31008_33474 = G__33486;
            chunk__31009_33475 = G__33487;
            count__31010_33476 = G__33488;
            i__31011_33477 = G__33489;
            continue;
          } else {
            var arg__11709__auto___33490 = cljs.core.first.call(null, seq__31008_33484__$1);
            a__11708__auto__.push(arg__11709__auto___33490);
            var G__33491 = cljs.core.next.call(null, seq__31008_33484__$1);
            var G__33492 = null;
            var G__33493 = 0;
            var G__33494 = 0;
            seq__31008_33474 = G__33491;
            chunk__31009_33475 = G__33492;
            count__31010_33476 = G__33493;
            i__31011_33477 = G__33494;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.wbr.apply(null, a__11708__auto__);
  };
  var wbr = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return wbr__delegate.call(this, args__11707__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 0;
  wbr.cljs$lang$applyTo = function(arglist__33495) {
    var args__11707__auto__ = cljs.core.seq(arglist__33495);
    return wbr__delegate(args__11707__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
quiescent.dom.circle = function() {
  var circle__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31016_33496 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31017_33497 = null;
    var count__31018_33498 = 0;
    var i__31019_33499 = 0;
    while (true) {
      if (i__31019_33499 < count__31018_33498) {
        var arg__11709__auto___33500 = cljs.core._nth.call(null, chunk__31017_33497, i__31019_33499);
        a__11708__auto__.push(arg__11709__auto___33500);
        var G__33501 = seq__31016_33496;
        var G__33502 = chunk__31017_33497;
        var G__33503 = count__31018_33498;
        var G__33504 = i__31019_33499 + 1;
        seq__31016_33496 = G__33501;
        chunk__31017_33497 = G__33502;
        count__31018_33498 = G__33503;
        i__31019_33499 = G__33504;
        continue;
      } else {
        var temp__4092__auto___33505 = cljs.core.seq.call(null, seq__31016_33496);
        if (temp__4092__auto___33505) {
          var seq__31016_33506__$1 = temp__4092__auto___33505;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31016_33506__$1)) {
            var c__11077__auto___33507 = cljs.core.chunk_first.call(null, seq__31016_33506__$1);
            var G__33508 = cljs.core.chunk_rest.call(null, seq__31016_33506__$1);
            var G__33509 = c__11077__auto___33507;
            var G__33510 = cljs.core.count.call(null, c__11077__auto___33507);
            var G__33511 = 0;
            seq__31016_33496 = G__33508;
            chunk__31017_33497 = G__33509;
            count__31018_33498 = G__33510;
            i__31019_33499 = G__33511;
            continue;
          } else {
            var arg__11709__auto___33512 = cljs.core.first.call(null, seq__31016_33506__$1);
            a__11708__auto__.push(arg__11709__auto___33512);
            var G__33513 = cljs.core.next.call(null, seq__31016_33506__$1);
            var G__33514 = null;
            var G__33515 = 0;
            var G__33516 = 0;
            seq__31016_33496 = G__33513;
            chunk__31017_33497 = G__33514;
            count__31018_33498 = G__33515;
            i__31019_33499 = G__33516;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.circle.apply(null, a__11708__auto__);
  };
  var circle = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return circle__delegate.call(this, args__11707__auto__);
  };
  circle.cljs$lang$maxFixedArity = 0;
  circle.cljs$lang$applyTo = function(arglist__33517) {
    var args__11707__auto__ = cljs.core.seq(arglist__33517);
    return circle__delegate(args__11707__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
quiescent.dom.g = function() {
  var g__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31024_33518 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31025_33519 = null;
    var count__31026_33520 = 0;
    var i__31027_33521 = 0;
    while (true) {
      if (i__31027_33521 < count__31026_33520) {
        var arg__11709__auto___33522 = cljs.core._nth.call(null, chunk__31025_33519, i__31027_33521);
        a__11708__auto__.push(arg__11709__auto___33522);
        var G__33523 = seq__31024_33518;
        var G__33524 = chunk__31025_33519;
        var G__33525 = count__31026_33520;
        var G__33526 = i__31027_33521 + 1;
        seq__31024_33518 = G__33523;
        chunk__31025_33519 = G__33524;
        count__31026_33520 = G__33525;
        i__31027_33521 = G__33526;
        continue;
      } else {
        var temp__4092__auto___33527 = cljs.core.seq.call(null, seq__31024_33518);
        if (temp__4092__auto___33527) {
          var seq__31024_33528__$1 = temp__4092__auto___33527;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31024_33528__$1)) {
            var c__11077__auto___33529 = cljs.core.chunk_first.call(null, seq__31024_33528__$1);
            var G__33530 = cljs.core.chunk_rest.call(null, seq__31024_33528__$1);
            var G__33531 = c__11077__auto___33529;
            var G__33532 = cljs.core.count.call(null, c__11077__auto___33529);
            var G__33533 = 0;
            seq__31024_33518 = G__33530;
            chunk__31025_33519 = G__33531;
            count__31026_33520 = G__33532;
            i__31027_33521 = G__33533;
            continue;
          } else {
            var arg__11709__auto___33534 = cljs.core.first.call(null, seq__31024_33528__$1);
            a__11708__auto__.push(arg__11709__auto___33534);
            var G__33535 = cljs.core.next.call(null, seq__31024_33528__$1);
            var G__33536 = null;
            var G__33537 = 0;
            var G__33538 = 0;
            seq__31024_33518 = G__33535;
            chunk__31025_33519 = G__33536;
            count__31026_33520 = G__33537;
            i__31027_33521 = G__33538;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.g.apply(null, a__11708__auto__);
  };
  var g = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return g__delegate.call(this, args__11707__auto__);
  };
  g.cljs$lang$maxFixedArity = 0;
  g.cljs$lang$applyTo = function(arglist__33539) {
    var args__11707__auto__ = cljs.core.seq(arglist__33539);
    return g__delegate(args__11707__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
quiescent.dom.line = function() {
  var line__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31032_33540 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31033_33541 = null;
    var count__31034_33542 = 0;
    var i__31035_33543 = 0;
    while (true) {
      if (i__31035_33543 < count__31034_33542) {
        var arg__11709__auto___33544 = cljs.core._nth.call(null, chunk__31033_33541, i__31035_33543);
        a__11708__auto__.push(arg__11709__auto___33544);
        var G__33545 = seq__31032_33540;
        var G__33546 = chunk__31033_33541;
        var G__33547 = count__31034_33542;
        var G__33548 = i__31035_33543 + 1;
        seq__31032_33540 = G__33545;
        chunk__31033_33541 = G__33546;
        count__31034_33542 = G__33547;
        i__31035_33543 = G__33548;
        continue;
      } else {
        var temp__4092__auto___33549 = cljs.core.seq.call(null, seq__31032_33540);
        if (temp__4092__auto___33549) {
          var seq__31032_33550__$1 = temp__4092__auto___33549;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31032_33550__$1)) {
            var c__11077__auto___33551 = cljs.core.chunk_first.call(null, seq__31032_33550__$1);
            var G__33552 = cljs.core.chunk_rest.call(null, seq__31032_33550__$1);
            var G__33553 = c__11077__auto___33551;
            var G__33554 = cljs.core.count.call(null, c__11077__auto___33551);
            var G__33555 = 0;
            seq__31032_33540 = G__33552;
            chunk__31033_33541 = G__33553;
            count__31034_33542 = G__33554;
            i__31035_33543 = G__33555;
            continue;
          } else {
            var arg__11709__auto___33556 = cljs.core.first.call(null, seq__31032_33550__$1);
            a__11708__auto__.push(arg__11709__auto___33556);
            var G__33557 = cljs.core.next.call(null, seq__31032_33550__$1);
            var G__33558 = null;
            var G__33559 = 0;
            var G__33560 = 0;
            seq__31032_33540 = G__33557;
            chunk__31033_33541 = G__33558;
            count__31034_33542 = G__33559;
            i__31035_33543 = G__33560;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.line.apply(null, a__11708__auto__);
  };
  var line = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return line__delegate.call(this, args__11707__auto__);
  };
  line.cljs$lang$maxFixedArity = 0;
  line.cljs$lang$applyTo = function(arglist__33561) {
    var args__11707__auto__ = cljs.core.seq(arglist__33561);
    return line__delegate(args__11707__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
quiescent.dom.path = function() {
  var path__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31040_33562 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31041_33563 = null;
    var count__31042_33564 = 0;
    var i__31043_33565 = 0;
    while (true) {
      if (i__31043_33565 < count__31042_33564) {
        var arg__11709__auto___33566 = cljs.core._nth.call(null, chunk__31041_33563, i__31043_33565);
        a__11708__auto__.push(arg__11709__auto___33566);
        var G__33567 = seq__31040_33562;
        var G__33568 = chunk__31041_33563;
        var G__33569 = count__31042_33564;
        var G__33570 = i__31043_33565 + 1;
        seq__31040_33562 = G__33567;
        chunk__31041_33563 = G__33568;
        count__31042_33564 = G__33569;
        i__31043_33565 = G__33570;
        continue;
      } else {
        var temp__4092__auto___33571 = cljs.core.seq.call(null, seq__31040_33562);
        if (temp__4092__auto___33571) {
          var seq__31040_33572__$1 = temp__4092__auto___33571;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31040_33572__$1)) {
            var c__11077__auto___33573 = cljs.core.chunk_first.call(null, seq__31040_33572__$1);
            var G__33574 = cljs.core.chunk_rest.call(null, seq__31040_33572__$1);
            var G__33575 = c__11077__auto___33573;
            var G__33576 = cljs.core.count.call(null, c__11077__auto___33573);
            var G__33577 = 0;
            seq__31040_33562 = G__33574;
            chunk__31041_33563 = G__33575;
            count__31042_33564 = G__33576;
            i__31043_33565 = G__33577;
            continue;
          } else {
            var arg__11709__auto___33578 = cljs.core.first.call(null, seq__31040_33572__$1);
            a__11708__auto__.push(arg__11709__auto___33578);
            var G__33579 = cljs.core.next.call(null, seq__31040_33572__$1);
            var G__33580 = null;
            var G__33581 = 0;
            var G__33582 = 0;
            seq__31040_33562 = G__33579;
            chunk__31041_33563 = G__33580;
            count__31042_33564 = G__33581;
            i__31043_33565 = G__33582;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.path.apply(null, a__11708__auto__);
  };
  var path = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return path__delegate.call(this, args__11707__auto__);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__33583) {
    var args__11707__auto__ = cljs.core.seq(arglist__33583);
    return path__delegate(args__11707__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
quiescent.dom.polygon = function() {
  var polygon__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31048_33584 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31049_33585 = null;
    var count__31050_33586 = 0;
    var i__31051_33587 = 0;
    while (true) {
      if (i__31051_33587 < count__31050_33586) {
        var arg__11709__auto___33588 = cljs.core._nth.call(null, chunk__31049_33585, i__31051_33587);
        a__11708__auto__.push(arg__11709__auto___33588);
        var G__33589 = seq__31048_33584;
        var G__33590 = chunk__31049_33585;
        var G__33591 = count__31050_33586;
        var G__33592 = i__31051_33587 + 1;
        seq__31048_33584 = G__33589;
        chunk__31049_33585 = G__33590;
        count__31050_33586 = G__33591;
        i__31051_33587 = G__33592;
        continue;
      } else {
        var temp__4092__auto___33593 = cljs.core.seq.call(null, seq__31048_33584);
        if (temp__4092__auto___33593) {
          var seq__31048_33594__$1 = temp__4092__auto___33593;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31048_33594__$1)) {
            var c__11077__auto___33595 = cljs.core.chunk_first.call(null, seq__31048_33594__$1);
            var G__33596 = cljs.core.chunk_rest.call(null, seq__31048_33594__$1);
            var G__33597 = c__11077__auto___33595;
            var G__33598 = cljs.core.count.call(null, c__11077__auto___33595);
            var G__33599 = 0;
            seq__31048_33584 = G__33596;
            chunk__31049_33585 = G__33597;
            count__31050_33586 = G__33598;
            i__31051_33587 = G__33599;
            continue;
          } else {
            var arg__11709__auto___33600 = cljs.core.first.call(null, seq__31048_33594__$1);
            a__11708__auto__.push(arg__11709__auto___33600);
            var G__33601 = cljs.core.next.call(null, seq__31048_33594__$1);
            var G__33602 = null;
            var G__33603 = 0;
            var G__33604 = 0;
            seq__31048_33584 = G__33601;
            chunk__31049_33585 = G__33602;
            count__31050_33586 = G__33603;
            i__31051_33587 = G__33604;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polygon.apply(null, a__11708__auto__);
  };
  var polygon = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polygon__delegate.call(this, args__11707__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 0;
  polygon.cljs$lang$applyTo = function(arglist__33605) {
    var args__11707__auto__ = cljs.core.seq(arglist__33605);
    return polygon__delegate(args__11707__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
quiescent.dom.polyline = function() {
  var polyline__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31056_33606 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31057_33607 = null;
    var count__31058_33608 = 0;
    var i__31059_33609 = 0;
    while (true) {
      if (i__31059_33609 < count__31058_33608) {
        var arg__11709__auto___33610 = cljs.core._nth.call(null, chunk__31057_33607, i__31059_33609);
        a__11708__auto__.push(arg__11709__auto___33610);
        var G__33611 = seq__31056_33606;
        var G__33612 = chunk__31057_33607;
        var G__33613 = count__31058_33608;
        var G__33614 = i__31059_33609 + 1;
        seq__31056_33606 = G__33611;
        chunk__31057_33607 = G__33612;
        count__31058_33608 = G__33613;
        i__31059_33609 = G__33614;
        continue;
      } else {
        var temp__4092__auto___33615 = cljs.core.seq.call(null, seq__31056_33606);
        if (temp__4092__auto___33615) {
          var seq__31056_33616__$1 = temp__4092__auto___33615;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31056_33616__$1)) {
            var c__11077__auto___33617 = cljs.core.chunk_first.call(null, seq__31056_33616__$1);
            var G__33618 = cljs.core.chunk_rest.call(null, seq__31056_33616__$1);
            var G__33619 = c__11077__auto___33617;
            var G__33620 = cljs.core.count.call(null, c__11077__auto___33617);
            var G__33621 = 0;
            seq__31056_33606 = G__33618;
            chunk__31057_33607 = G__33619;
            count__31058_33608 = G__33620;
            i__31059_33609 = G__33621;
            continue;
          } else {
            var arg__11709__auto___33622 = cljs.core.first.call(null, seq__31056_33616__$1);
            a__11708__auto__.push(arg__11709__auto___33622);
            var G__33623 = cljs.core.next.call(null, seq__31056_33616__$1);
            var G__33624 = null;
            var G__33625 = 0;
            var G__33626 = 0;
            seq__31056_33606 = G__33623;
            chunk__31057_33607 = G__33624;
            count__31058_33608 = G__33625;
            i__31059_33609 = G__33626;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polyline.apply(null, a__11708__auto__);
  };
  var polyline = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polyline__delegate.call(this, args__11707__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 0;
  polyline.cljs$lang$applyTo = function(arglist__33627) {
    var args__11707__auto__ = cljs.core.seq(arglist__33627);
    return polyline__delegate(args__11707__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
quiescent.dom.rect = function() {
  var rect__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31064_33628 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31065_33629 = null;
    var count__31066_33630 = 0;
    var i__31067_33631 = 0;
    while (true) {
      if (i__31067_33631 < count__31066_33630) {
        var arg__11709__auto___33632 = cljs.core._nth.call(null, chunk__31065_33629, i__31067_33631);
        a__11708__auto__.push(arg__11709__auto___33632);
        var G__33633 = seq__31064_33628;
        var G__33634 = chunk__31065_33629;
        var G__33635 = count__31066_33630;
        var G__33636 = i__31067_33631 + 1;
        seq__31064_33628 = G__33633;
        chunk__31065_33629 = G__33634;
        count__31066_33630 = G__33635;
        i__31067_33631 = G__33636;
        continue;
      } else {
        var temp__4092__auto___33637 = cljs.core.seq.call(null, seq__31064_33628);
        if (temp__4092__auto___33637) {
          var seq__31064_33638__$1 = temp__4092__auto___33637;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31064_33638__$1)) {
            var c__11077__auto___33639 = cljs.core.chunk_first.call(null, seq__31064_33638__$1);
            var G__33640 = cljs.core.chunk_rest.call(null, seq__31064_33638__$1);
            var G__33641 = c__11077__auto___33639;
            var G__33642 = cljs.core.count.call(null, c__11077__auto___33639);
            var G__33643 = 0;
            seq__31064_33628 = G__33640;
            chunk__31065_33629 = G__33641;
            count__31066_33630 = G__33642;
            i__31067_33631 = G__33643;
            continue;
          } else {
            var arg__11709__auto___33644 = cljs.core.first.call(null, seq__31064_33638__$1);
            a__11708__auto__.push(arg__11709__auto___33644);
            var G__33645 = cljs.core.next.call(null, seq__31064_33638__$1);
            var G__33646 = null;
            var G__33647 = 0;
            var G__33648 = 0;
            seq__31064_33628 = G__33645;
            chunk__31065_33629 = G__33646;
            count__31066_33630 = G__33647;
            i__31067_33631 = G__33648;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rect.apply(null, a__11708__auto__);
  };
  var rect = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rect__delegate.call(this, args__11707__auto__);
  };
  rect.cljs$lang$maxFixedArity = 0;
  rect.cljs$lang$applyTo = function(arglist__33649) {
    var args__11707__auto__ = cljs.core.seq(arglist__33649);
    return rect__delegate(args__11707__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
quiescent.dom.svg = function() {
  var svg__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__31072_33650 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__31073_33651 = null;
    var count__31074_33652 = 0;
    var i__31075_33653 = 0;
    while (true) {
      if (i__31075_33653 < count__31074_33652) {
        var arg__11709__auto___33654 = cljs.core._nth.call(null, chunk__31073_33651, i__31075_33653);
        a__11708__auto__.push(arg__11709__auto___33654);
        var G__33655 = seq__31072_33650;
        var G__33656 = chunk__31073_33651;
        var G__33657 = count__31074_33652;
        var G__33658 = i__31075_33653 + 1;
        seq__31072_33650 = G__33655;
        chunk__31073_33651 = G__33656;
        count__31074_33652 = G__33657;
        i__31075_33653 = G__33658;
        continue;
      } else {
        var temp__4092__auto___33659 = cljs.core.seq.call(null, seq__31072_33650);
        if (temp__4092__auto___33659) {
          var seq__31072_33660__$1 = temp__4092__auto___33659;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__31072_33660__$1)) {
            var c__11077__auto___33661 = cljs.core.chunk_first.call(null, seq__31072_33660__$1);
            var G__33662 = cljs.core.chunk_rest.call(null, seq__31072_33660__$1);
            var G__33663 = c__11077__auto___33661;
            var G__33664 = cljs.core.count.call(null, c__11077__auto___33661);
            var G__33665 = 0;
            seq__31072_33650 = G__33662;
            chunk__31073_33651 = G__33663;
            count__31074_33652 = G__33664;
            i__31075_33653 = G__33665;
            continue;
          } else {
            var arg__11709__auto___33666 = cljs.core.first.call(null, seq__31072_33660__$1);
            a__11708__auto__.push(arg__11709__auto___33666);
            var G__33667 = cljs.core.next.call(null, seq__31072_33660__$1);
            var G__33668 = null;
            var G__33669 = 0;
            var G__33670 = 0;
            seq__31072_33650 = G__33667;
            chunk__31073_33651 = G__33668;
            count__31074_33652 = G__33669;
            i__31075_33653 = G__33670;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.svg.apply(null, a__11708__auto__);
  };
  var svg = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return svg__delegate.call(this, args__11707__auto__);
  };
  svg.cljs$lang$maxFixedArity = 0;
  svg.cljs$lang$applyTo = function(arglist__33671) {
    var args__11707__auto__ = cljs.core.seq(arglist__33671);
    return svg__delegate(args__11707__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
quiescent.dom.text = function() {
  var text__delegate = function(args__11707__auto__) {
    var a__11708__auto__ = [];
    a__11708__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11707__auto__)));
    var seq__30384_33672 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11707__auto__));
    var chunk__30385_33673 = null;
    var count__30386_33674 = 0;
    var i__30387_33675 = 0;
    while (true) {
      if (i__30387_33675 < count__30386_33674) {
        var arg__11709__auto___33676 = cljs.core._nth.call(null, chunk__30385_33673, i__30387_33675);
        a__11708__auto__.push(arg__11709__auto___33676);
        var G__33677 = seq__30384_33672;
        var G__33678 = chunk__30385_33673;
        var G__33679 = count__30386_33674;
        var G__33680 = i__30387_33675 + 1;
        seq__30384_33672 = G__33677;
        chunk__30385_33673 = G__33678;
        count__30386_33674 = G__33679;
        i__30387_33675 = G__33680;
        continue;
      } else {
        var temp__4092__auto___33681 = cljs.core.seq.call(null, seq__30384_33672);
        if (temp__4092__auto___33681) {
          var seq__30384_33682__$1 = temp__4092__auto___33681;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__30384_33682__$1)) {
            var c__11077__auto___33683 = cljs.core.chunk_first.call(null, seq__30384_33682__$1);
            var G__33684 = cljs.core.chunk_rest.call(null, seq__30384_33682__$1);
            var G__33685 = c__11077__auto___33683;
            var G__33686 = cljs.core.count.call(null, c__11077__auto___33683);
            var G__33687 = 0;
            seq__30384_33672 = G__33684;
            chunk__30385_33673 = G__33685;
            count__30386_33674 = G__33686;
            i__30387_33675 = G__33687;
            continue;
          } else {
            var arg__11709__auto___33688 = cljs.core.first.call(null, seq__30384_33682__$1);
            a__11708__auto__.push(arg__11709__auto___33688);
            var G__33689 = cljs.core.next.call(null, seq__30384_33682__$1);
            var G__33690 = null;
            var G__33691 = 0;
            var G__33692 = 0;
            seq__30384_33672 = G__33689;
            chunk__30385_33673 = G__33690;
            count__30386_33674 = G__33691;
            i__30387_33675 = G__33692;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.text.apply(null, a__11708__auto__);
  };
  var text = function(var_args) {
    var args__11707__auto__ = null;
    if (arguments.length > 0) {
      args__11707__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return text__delegate.call(this, args__11707__auto__);
  };
  text.cljs$lang$maxFixedArity = 0;
  text.cljs$lang$applyTo = function(arglist__33693) {
    var args__11707__auto__ = cljs.core.seq(arglist__33693);
    return text__delegate(args__11707__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
goog.provide("todomvc.render");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("quiescent.dom");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("quiescent");
goog.require("cljs.core.async");
todomvc.render.enter_key_QMARK_ = function enter_key_QMARK_(evt) {
  return cljs.core._EQ_.call(null, 13, evt.keyCode);
};
todomvc.render.Header = quiescent.component.call(null, function(_, channel) {
  return quiescent.dom.header.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "header"], null), quiescent.dom.h1.call(null, cljs.core.PersistentArrayMap.EMPTY, "todos"), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", 1013907597), "new-todo", new cljs.core.Keyword(null, "placeholder", "placeholder", 1612151013), "What needs to be done?", new cljs.core.Keyword(null, "onKeyDown", 
  "onKeyDown", 1534256180), function(evt) {
    if (todomvc.render.enter_key_QMARK_.call(null, evt)) {
      var text = evt.target.value;
      cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "create-item", "create-item", 4768804022), text], null));
      return evt.target.value = "";
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "autoFocus", "autoFocus", 2651959259), true], null)));
});
todomvc.render.ItemFilter = quiescent.component.call(null, function(current_filter, this_filter, label, href, channel) {
  return quiescent.dom.li.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "className", "className", 1004015509), cljs.core._EQ_.call(null, current_filter, this_filter) ? "selected" : null, new cljs.core.Keyword(null, "href", "href", 1017115293), href, new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), function() {
    cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "set-filter", "set-filter", 2331384501), this_filter], null));
    return false;
  }], null), label));
});
todomvc.render.Filters = quiescent.component.call(null, function(current_filter, channel) {
  return quiescent.dom.ul.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "filters"], null), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, "all", "all", 1014000915), "All", "#/", channel), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, "active", "active", 3885920888), "Active", "#/active", channel), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, 
  "completed", "completed", 3905939901), "Completed", "#/completed", channel));
});
todomvc.render.Footer = quiescent.component.call(null, function(p__28028, channel) {
  var vec__28029 = p__28028;
  var current_filter = cljs.core.nth.call(null, vec__28029, 0, null);
  var items = cljs.core.nth.call(null, vec__28029, 1, null);
  var completed = cljs.core.count.call(null, cljs.core.filter.call(null, new cljs.core.Keyword(null, "completed", "completed", 3905939901), items));
  var left = cljs.core.count.call(null, items) - completed;
  return quiescent.dom.footer.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "footer"], null), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-count"], null), quiescent.dom.strong.call(null, cljs.core.PersistentArrayMap.EMPTY, [cljs.core.str(left), cljs.core.str(" item(s) left")].join(""))), todomvc.render.Filters.call(null, current_filter, channel), 0 < 
  completed ? quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "clear-completed", new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), function() {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "clear-completed", "clear-completed", 888981053)], null));
  }], null), [cljs.core.str("Clear completed ("), cljs.core.str(completed), cljs.core.str(")")].join("")) : null);
});
todomvc.render.class_name = function class_name(classes) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.map.call(null, cljs.core.identity, classes)));
};
todomvc.render.hidden_QMARK_ = function hidden_QMARK_(completed, current_filter) {
  var or__10329__auto__ = function() {
    var and__10317__auto__ = completed;
    if (cljs.core.truth_(and__10317__auto__)) {
      return cljs.core._EQ_.call(null, current_filter, new cljs.core.Keyword(null, "active", "active", 3885920888));
    } else {
      return and__10317__auto__;
    }
  }();
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    return cljs.core.not.call(null, completed) && cljs.core._EQ_.call(null, current_filter, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
  }
};
todomvc.render.Item = quiescent.component.call(null, function(p__28030, channel) {
  var vec__28031 = p__28030;
  var map__28032 = cljs.core.nth.call(null, vec__28031, 0, null);
  var map__28032__$1 = cljs.core.seq_QMARK_.call(null, map__28032) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28032) : map__28032;
  var commited = cljs.core.get.call(null, map__28032__$1, new cljs.core.Keyword(null, "commited", "commited", 4706580360));
  var editing = cljs.core.get.call(null, map__28032__$1, new cljs.core.Keyword(null, "editing", "editing", 3420907786));
  var completed = cljs.core.get.call(null, map__28032__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
  var text = cljs.core.get.call(null, map__28032__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
  var id = cljs.core.get.call(null, map__28032__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var current_filter = cljs.core.nth.call(null, vec__28031, 1, null);
  var completed__$1 = cljs.core.boolean$.call(null, completed);
  return quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "key", "key", 1014010321), id, new cljs.core.Keyword(null, "className", "className", 1004015509), todomvc.render.class_name.call(null, cljs.core.PersistentHashSet.fromArray([completed__$1 ? "completed" : null, cljs.core.truth_(todomvc.render.hidden_QMARK_.call(null, completed__$1, current_filter)) ? "hidden" : null, cljs.core.truth_(editing) ? "editing" : null], true)), new cljs.core.Keyword(null, 
  "onDoubleClick", "onDoubleClick", 4144140362), function(_) {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-edit", "start-edit", 3689098247), id], null));
  }], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", 1004015509), "view"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "className", "className", 1004015509), "toggle", new cljs.core.Keyword(null, "type", "type", 1017479852), "checkbox", new cljs.core.Keyword(null, "checked", "checked", 1756218137), completed__$1, new cljs.core.Keyword(null, "onChange", 
  "onChange", 2050678241), function(_) {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), id, !completed__$1], null));
  }], null)), quiescent.dom.label.call(null, cljs.core.PersistentArrayMap.EMPTY, text), quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", 1004015509), "destroy", new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), function(_) {
    if (cljs.core.truth_(commited)) {
      return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), id], null));
    } else {
      return null;
    }
  }], null))), quiescent.dom.input.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "className", "className", 1004015509), "edit", new cljs.core.Keyword(null, "defaultValue", "defaultValue", 4649746210), text, new cljs.core.Keyword(null, "onKeyDown", "onKeyDown", 1534256180), function(evt) {
    if (todomvc.render.enter_key_QMARK_.call(null, evt)) {
      return evt.target.blur();
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "onBlur", "onBlur", 4295401048), function(evt) {
    var text__$1 = evt.target.value;
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "complete-edit", "complete-edit", 1152265616), id, text__$1], null));
  }], null), cljs.core.truth_(editing) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "autoFocus", "autoFocus", 2651959259), true], null) : cljs.core.PersistentArrayMap.EMPTY)));
});
todomvc.render.TodoList = quiescent.component.call(null, function(p__28034, channel) {
  var vec__28035 = p__28034;
  var current_filter = cljs.core.nth.call(null, vec__28035, 0, null);
  var items = cljs.core.nth.call(null, vec__28035, 1, null);
  return cljs.core.apply.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-list"], null), cljs.core.map.call(null, function(p1__28033_SHARP_) {
    return todomvc.render.Item.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__28033_SHARP_, current_filter], null), channel);
  }, items));
});
todomvc.render.App = quiescent.component.call(null, function(p__28036, channel) {
  var map__28037 = p__28036;
  var map__28037__$1 = cljs.core.seq_QMARK_.call(null, map__28037) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28037) : map__28037;
  var error = cljs.core.get.call(null, map__28037__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
  var items = cljs.core.get.call(null, map__28037__$1, new cljs.core.Keyword(null, "items", "items", 1114430258));
  var current_filter = cljs.core.get.call(null, map__28037__$1, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582));
  var all_done_QMARK_ = cljs.core.get.call(null, map__28037__$1, new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259));
  return quiescent.dom.div.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.truth_(error) ? quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-error", new cljs.core.Keyword(null, "className", "className", 1004015509), "alert alert-info"], null), "Error occured, reloading page recommended.") : null, quiescent.dom.section.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 
  1013907597), "todoapp"], null), quiescent.dom.div.call(null, cljs.core.PersistentArrayMap.EMPTY, todomvc.render.Header.call(null, null, channel), quiescent.dom.section.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "main"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", 1013907597), "toggle-all", new cljs.core.Keyword(null, "type", "type", 1017479852), "checkbox", 
  new cljs.core.Keyword(null, "checked", "checked", 1756218137), all_done_QMARK_, new cljs.core.Keyword(null, "onChange", "onChange", 2050678241), function() {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "toggle-all", "toggle-all", 4455256858)], null));
  }], null)), quiescent.dom.label.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "htmlFor", "htmlFor", 2249940112), "toggle-all"], null), "Mark all as complete"), todomvc.render.TodoList.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [current_filter, items], null), channel)), todomvc.render.Footer.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [current_filter, items], null), 
  channel))));
});
todomvc.render.main = function main(p__28038) {
  var map__28040 = p__28038;
  var map__28040__$1 = cljs.core.seq_QMARK_.call(null, map__28040) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28040) : map__28040;
  var channel = cljs.core.get.call(null, map__28040__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var state = cljs.core.get.call(null, map__28040__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  var render_pending_QMARK_ = cljs.core.get.call(null, map__28040__$1, new cljs.core.Keyword(null, "render-pending?", "render-pending?", 2215462737));
  if (cljs.core.compare_and_set_BANG_.call(null, render_pending_QMARK_, false, true)) {
    return window.requestAnimationFrame(function() {
      quiescent.render.call(null, todomvc.render.App.call(null, cljs.core.deref.call(null, state), channel), document.getElementById("todopane"));
      return cljs.core.reset_BANG_.call(null, render_pending_QMARK_, false);
    });
  } else {
    return null;
  }
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length1;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return Math.sqrt(variance);
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  } else {
    if (parent.getElementsByClassName) {
      return parent.getElementsByClassName(className);
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || (goog.global || window);
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && (attributes && (attributes.name || attributes.type))) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes));
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement;
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(element, text) {
  if ("textContent" in element) {
    element.textContent = text;
  } else {
    if (element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while (element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild);
      }
      element.firstChild.data = text;
    } else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(String(text)));
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if (attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && (index >= 0 && index < 32768);
  }
  return false;
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || (goog.global.document || document);
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if (goog.isString(element)) {
    return this.document_.getElementById(element);
  } else {
    return element;
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("cljs_uuid_utils");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid_utils.uuid_string = function uuid_string(a_uuid) {
  return[cljs.core.str(a_uuid.uuid)].join("");
};
cljs_uuid_utils.make_random_uuid = function make_random_uuid() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16);
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16);
  };
  return new cljs.core.UUID((new goog.string.StringBuffer).append(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), 
  f.call(null)));
};
cljs_uuid_utils.uuid_regex = function() {
  var x = "[0-9a-fA-F]";
  return cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("-"), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("-"), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("-"), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("-"), 
  cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("$")].join(""));
}();
cljs_uuid_utils.valid_uuid_QMARK_ = function valid_uuid_QMARK_(maybe_uuid) {
  var maybe_uuid_str = cljs.core._EQ_.call(null, cljs.core.type.call(null, maybe_uuid), cljs.core.UUID) ? cljs_uuid_utils.uuid_string.call(null, maybe_uuid) : typeof maybe_uuid === "string" ? maybe_uuid : new cljs.core.Keyword(null, "true", "true", 1017473280) ? false : null;
  if (cljs.core.truth_(maybe_uuid_str)) {
    return cljs.core.re_find.call(null, cljs_uuid_utils.uuid_regex, maybe_uuid_str);
  } else {
    return null;
  }
};
cljs_uuid_utils.make_uuid_from = function make_uuid_from(maybe_uuid) {
  var temp__4092__auto__ = cljs_uuid_utils.valid_uuid_QMARK_.call(null, maybe_uuid);
  if (cljs.core.truth_(temp__4092__auto__)) {
    var uuid = temp__4092__auto__;
    if (cljs.core._EQ_.call(null, cljs.core.type.call(null, maybe_uuid), cljs.core.UUID)) {
      return maybe_uuid;
    } else {
      return new cljs.core.UUID(uuid);
    }
  } else {
    return null;
  }
};
goog.provide("todomvc.services");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("ajax.core");
goog.require("goog.dom");
goog.require("goog.dom");
goog.require("cljs_uuid_utils");
goog.require("cljs_uuid_utils");
goog.require("ajax.core");
goog.require("ajax.core");
goog.require("cljs.core.async");
todomvc.services.DELETE = function() {
  var DELETE__delegate = function(uri, p__28366) {
    var vec__28368 = p__28366;
    var opts = cljs.core.nth.call(null, vec__28368, 0, null);
    return ajax.core.ajax_request.call(null, uri, "DELETE", ajax.core.transform_opts.call(null, opts));
  };
  var DELETE = function(uri, var_args) {
    var p__28366 = null;
    if (arguments.length > 1) {
      p__28366 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return DELETE__delegate.call(this, uri, p__28366);
  };
  DELETE.cljs$lang$maxFixedArity = 1;
  DELETE.cljs$lang$applyTo = function(arglist__28369) {
    var uri = cljs.core.first(arglist__28369);
    var p__28366 = cljs.core.rest(arglist__28369);
    return DELETE__delegate(uri, p__28366);
  };
  DELETE.cljs$core$IFn$_invoke$arity$variadic = DELETE__delegate;
  return DELETE;
}();
todomvc.services.todos_url = function todos_url() {
  [cljs.core.str(document.URL)].join("");
  return[cljs.core.str(window.location.pathname), cljs.core.str("/todos")].join("");
};
todomvc.services.csrf_token = function csrf_token() {
  return goog.dom.getElement("csrf-token").getAttribute("value");
};
todomvc.services.error_handler = function error_handler(channel) {
  return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", 1110689146)], null));
};
todomvc.services.handle = function() {
  var method_table__11187__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__11188__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__11189__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__11190__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__11191__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("handle", function(app, action) {
    return cljs.core.first.call(null, action);
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__11191__auto__, method_table__11187__auto__, prefer_table__11188__auto__, method_cache__11189__auto__, cached_hierarchy__11190__auto__);
}();
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "create-item", "create-item", 4768804022), function(p__28370, p__28371) {
  var map__28372 = p__28370;
  var map__28372__$1 = cljs.core.seq_QMARK_.call(null, map__28372) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28372) : map__28372;
  var channel = cljs.core.get.call(null, map__28372__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var vec__28373 = p__28371;
  var _ = cljs.core.nth.call(null, vec__28373, 0, null);
  var text = cljs.core.nth.call(null, vec__28373, 1, null);
  var temp_id = cljs_uuid_utils.make_random_uuid.call(null);
  cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "add-item", "add-item", 4026553393), temp_id, text], null));
  return ajax.core.POST.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), temp_id, new cljs.core.Keyword(null, "text", "text", 1017460895), text], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
    var id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(res);
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "commit-item", "commit-item", 2479329627), temp_id, id], null));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    console.log([cljs.core.str("FAil res: "), cljs.core.str(res)].join(""));
    return todomvc.services.error_handler.call(null, channel);
  }, new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "complete-edit", "complete-edit", 1152265616), function(p__28374, p__28375) {
  var map__28376 = p__28374;
  var map__28376__$1 = cljs.core.seq_QMARK_.call(null, map__28376) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28376) : map__28376;
  var channel = cljs.core.get.call(null, map__28376__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var vec__28377 = p__28375;
  var _ = cljs.core.nth.call(null, vec__28377, 0, null);
  var id = cljs.core.nth.call(null, vec__28377, 1, null);
  var text = cljs.core.nth.call(null, vec__28377, 2, null);
  return ajax.core.PUT.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "text", "text", 1017460895), text], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    return console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    console.log([cljs.core.str("Fail res: "), cljs.core.str(res)].join(""));
    return todomvc.services.error_handler.call(null, channel);
  }, new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(res) {
    var res_text = res.getResponseText();
    if (cljs.core.count.call(null, res_text) > 0) {
      throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), function(p__28378, p__28379) {
  var map__28380 = p__28378;
  var map__28380__$1 = cljs.core.seq_QMARK_.call(null, map__28380) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28380) : map__28380;
  var channel = cljs.core.get.call(null, map__28380__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var vec__28381 = p__28379;
  var _ = cljs.core.nth.call(null, vec__28381, 0, null);
  var id = cljs.core.nth.call(null, vec__28381, 1, null);
  var completed = cljs.core.nth.call(null, vec__28381, 2, null);
  return ajax.core.PUT.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "completed", "completed", 3905939901), completed], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    return console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    console.log([cljs.core.str("Fail res: "), cljs.core.str(res)].join(""));
    return todomvc.services.error_handler.call(null, channel);
  }, new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(res) {
    var res_text = res.getResponseText();
    if (cljs.core.count.call(null, res_text) > 0) {
      throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), function(p__28382, p__28383) {
  var map__28384 = p__28382;
  var map__28384__$1 = cljs.core.seq_QMARK_.call(null, map__28384) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28384) : map__28384;
  var channel = cljs.core.get.call(null, map__28384__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var vec__28385 = p__28383;
  var _ = cljs.core.nth.call(null, vec__28385, 0, null);
  var id = cljs.core.nth.call(null, vec__28385, 1, null);
  return todomvc.services.DELETE.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), id], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    return console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    console.log([cljs.core.str("Fail res: "), cljs.core.str(res)].join(""));
    return todomvc.services.error_handler.call(null, channel);
  }, new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(res) {
    var res_text = res.getResponseText();
    if (cljs.core.count.call(null, res_text) > 0) {
      throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "clear-completed", "clear-completed", 888981053), function(p__28386, _) {
  var map__28387 = p__28386;
  var map__28387__$1 = cljs.core.seq_QMARK_.call(null, map__28387) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28387) : map__28387;
  var channel = cljs.core.get.call(null, map__28387__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var state = cljs.core.get.call(null, map__28387__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  var seq__28388 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "items", "items", 1114430258)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state)));
  var chunk__28390 = null;
  var count__28391 = 0;
  var i__28392 = 0;
  while (true) {
    if (i__28392 < count__28391) {
      var map__28394 = cljs.core._nth.call(null, chunk__28390, i__28392);
      var map__28394__$1 = cljs.core.seq_QMARK_.call(null, map__28394) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28394) : map__28394;
      var item = map__28394__$1;
      var completed = cljs.core.get.call(null, map__28394__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
      var id = cljs.core.get.call(null, map__28394__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
      if (cljs.core.truth_(completed)) {
        cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), id], null));
        var G__28396 = seq__28388;
        var G__28397 = chunk__28390;
        var G__28398 = count__28391;
        var G__28399 = i__28392 + 1;
        seq__28388 = G__28396;
        chunk__28390 = G__28397;
        count__28391 = G__28398;
        i__28392 = G__28399;
        continue;
      } else {
        var G__28400 = seq__28388;
        var G__28401 = chunk__28390;
        var G__28402 = count__28391;
        var G__28403 = i__28392 + 1;
        seq__28388 = G__28400;
        chunk__28390 = G__28401;
        count__28391 = G__28402;
        i__28392 = G__28403;
        continue;
      }
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__28388);
      if (temp__4092__auto__) {
        var seq__28388__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28388__$1)) {
          var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__28388__$1);
          var G__28404 = cljs.core.chunk_rest.call(null, seq__28388__$1);
          var G__28405 = c__11077__auto__;
          var G__28406 = cljs.core.count.call(null, c__11077__auto__);
          var G__28407 = 0;
          seq__28388 = G__28404;
          chunk__28390 = G__28405;
          count__28391 = G__28406;
          i__28392 = G__28407;
          continue;
        } else {
          var map__28395 = cljs.core.first.call(null, seq__28388__$1);
          var map__28395__$1 = cljs.core.seq_QMARK_.call(null, map__28395) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28395) : map__28395;
          var item = map__28395__$1;
          var completed = cljs.core.get.call(null, map__28395__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
          var id = cljs.core.get.call(null, map__28395__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
          if (cljs.core.truth_(completed)) {
            cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), id], null));
            var G__28408 = cljs.core.next.call(null, seq__28388__$1);
            var G__28409 = null;
            var G__28410 = 0;
            var G__28411 = 0;
            seq__28388 = G__28408;
            chunk__28390 = G__28409;
            count__28391 = G__28410;
            i__28392 = G__28411;
            continue;
          } else {
            var G__28412 = cljs.core.next.call(null, seq__28388__$1);
            var G__28413 = null;
            var G__28414 = 0;
            var G__28415 = 0;
            seq__28388 = G__28412;
            chunk__28390 = G__28413;
            count__28391 = G__28414;
            i__28392 = G__28415;
            continue;
          }
        }
      } else {
        return null;
      }
    }
    break;
  }
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "toggle-all", "toggle-all", 4455256858), function(p__28416, _) {
  var map__28417 = p__28416;
  var map__28417__$1 = cljs.core.seq_QMARK_.call(null, map__28417) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28417) : map__28417;
  var channel = cljs.core.get.call(null, map__28417__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var state = cljs.core.get.call(null, map__28417__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  var items = (new cljs.core.Keyword(null, "items", "items", 1114430258)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, state));
  var target = !cljs.core.every_QMARK_.call(null, new cljs.core.Keyword(null, "completed", "completed", 3905939901), items);
  var seq__28418 = cljs.core.seq.call(null, items);
  var chunk__28420 = null;
  var count__28421 = 0;
  var i__28422 = 0;
  while (true) {
    if (i__28422 < count__28421) {
      var map__28424 = cljs.core._nth.call(null, chunk__28420, i__28422);
      var map__28424__$1 = cljs.core.seq_QMARK_.call(null, map__28424) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28424) : map__28424;
      var item = map__28424__$1;
      var completed = cljs.core.get.call(null, map__28424__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
      var id = cljs.core.get.call(null, map__28424__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
      if (cljs.core._EQ_.call(null, completed, !target)) {
        cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), id, target], null));
        var G__28426 = seq__28418;
        var G__28427 = chunk__28420;
        var G__28428 = count__28421;
        var G__28429 = i__28422 + 1;
        seq__28418 = G__28426;
        chunk__28420 = G__28427;
        count__28421 = G__28428;
        i__28422 = G__28429;
        continue;
      } else {
        var G__28430 = seq__28418;
        var G__28431 = chunk__28420;
        var G__28432 = count__28421;
        var G__28433 = i__28422 + 1;
        seq__28418 = G__28430;
        chunk__28420 = G__28431;
        count__28421 = G__28432;
        i__28422 = G__28433;
        continue;
      }
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__28418);
      if (temp__4092__auto__) {
        var seq__28418__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__28418__$1)) {
          var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__28418__$1);
          var G__28434 = cljs.core.chunk_rest.call(null, seq__28418__$1);
          var G__28435 = c__11077__auto__;
          var G__28436 = cljs.core.count.call(null, c__11077__auto__);
          var G__28437 = 0;
          seq__28418 = G__28434;
          chunk__28420 = G__28435;
          count__28421 = G__28436;
          i__28422 = G__28437;
          continue;
        } else {
          var map__28425 = cljs.core.first.call(null, seq__28418__$1);
          var map__28425__$1 = cljs.core.seq_QMARK_.call(null, map__28425) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28425) : map__28425;
          var item = map__28425__$1;
          var completed = cljs.core.get.call(null, map__28425__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
          var id = cljs.core.get.call(null, map__28425__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
          if (cljs.core._EQ_.call(null, completed, !target)) {
            cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), id, target], null));
            var G__28438 = cljs.core.next.call(null, seq__28418__$1);
            var G__28439 = null;
            var G__28440 = 0;
            var G__28441 = 0;
            seq__28418 = G__28438;
            chunk__28420 = G__28439;
            count__28421 = G__28440;
            i__28422 = G__28441;
            continue;
          } else {
            var G__28442 = cljs.core.next.call(null, seq__28418__$1);
            var G__28443 = null;
            var G__28444 = 0;
            var G__28445 = 0;
            seq__28418 = G__28442;
            chunk__28420 = G__28443;
            count__28421 = G__28444;
            i__28422 = G__28445;
            continue;
          }
        }
      } else {
        return null;
      }
    }
    break;
  }
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "default", "default", 2558708147), function(_, ___$1) {
  return null;
});
todomvc.services.start_services = function start_services(app) {
  console.log([cljs.core.str("Url is: "), cljs.core.str(document.URL)].join(""));
  var map__28483 = app;
  var map__28483__$1 = cljs.core.seq_QMARK_.call(null, map__28483) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28483) : map__28483;
  var emit = cljs.core.get.call(null, map__28483__$1, new cljs.core.Keyword(null, "emit", "emit", 1017021253));
  var channel = cljs.core.get.call(null, map__28483__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var c__13953__auto___28520 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13954__auto__ = function() {
      var switch__13883__auto__ = function(state_28498) {
        var state_val_28499 = state_28498[1];
        if (state_val_28499 === 7) {
          var inst_28487 = state_28498[2];
          var inst_28488 = [cljs.core.str("service: "), cljs.core.str(inst_28487)].join("");
          var inst_28489 = console.log(inst_28488);
          var inst_28490 = todomvc.services.handle.call(null, app, inst_28487);
          var state_28498__$1 = function() {
            var statearr_28500 = state_28498;
            statearr_28500[7] = inst_28489;
            statearr_28500[8] = inst_28490;
            return statearr_28500;
          }();
          var statearr_28501_28521 = state_28498__$1;
          statearr_28501_28521[2] = null;
          statearr_28501_28521[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_28499 === 6) {
            var inst_28494 = state_28498[2];
            var state_28498__$1 = state_28498;
            var statearr_28502_28522 = state_28498__$1;
            statearr_28502_28522[2] = inst_28494;
            statearr_28502_28522[1] = 3;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_28499 === 5) {
              var state_28498__$1 = state_28498;
              var statearr_28503_28523 = state_28498__$1;
              statearr_28503_28523[2] = null;
              statearr_28503_28523[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_28499 === 4) {
                var state_28498__$1 = state_28498;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_28498__$1, 7, emit);
              } else {
                if (state_val_28499 === 3) {
                  var inst_28496 = state_28498[2];
                  var state_28498__$1 = state_28498;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28498__$1, inst_28496);
                } else {
                  if (state_val_28499 === 2) {
                    var state_28498__$1 = state_28498;
                    if (true) {
                      var statearr_28504_28524 = state_28498__$1;
                      statearr_28504_28524[1] = 4;
                    } else {
                      var statearr_28505_28525 = state_28498__$1;
                      statearr_28505_28525[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_28499 === 1) {
                      var state_28498__$1 = state_28498;
                      var statearr_28506_28526 = state_28498__$1;
                      statearr_28506_28526[2] = null;
                      statearr_28506_28526[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13883__auto__) {
        return function() {
          var state_machine__13884__auto__ = null;
          var state_machine__13884__auto____0 = function() {
            var statearr_28510 = [null, null, null, null, null, null, null, null, null];
            statearr_28510[0] = state_machine__13884__auto__;
            statearr_28510[1] = 1;
            return statearr_28510;
          };
          var state_machine__13884__auto____1 = function(state_28498) {
            while (true) {
              var ret_value__13885__auto__ = function() {
                try {
                  while (true) {
                    var result__13886__auto__ = switch__13883__auto__.call(null, state_28498);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13886__auto__;
                    }
                    break;
                  }
                } catch (e28511) {
                  if (e28511 instanceof Object) {
                    var ex__13887__auto__ = e28511;
                    var statearr_28512_28527 = state_28498;
                    statearr_28512_28527[5] = ex__13887__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28498);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e28511;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__28528 = state_28498;
                state_28498 = G__28528;
                continue;
              } else {
                return ret_value__13885__auto__;
              }
              break;
            }
          };
          state_machine__13884__auto__ = function(state_28498) {
            switch(arguments.length) {
              case 0:
                return state_machine__13884__auto____0.call(this);
              case 1:
                return state_machine__13884__auto____1.call(this, state_28498);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
          return state_machine__13884__auto__;
        }();
      }(switch__13883__auto__);
    }();
    var state__13955__auto__ = function() {
      var statearr_28513 = f__13954__auto__.call(null);
      statearr_28513[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto___28520;
      return statearr_28513;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
  });
  return ajax.core.GET.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    var seq__28514 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "todos", "todos", 1124439135)).cljs$core$IFn$_invoke$arity$1(res));
    var chunk__28515 = null;
    var count__28516 = 0;
    var i__28517 = 0;
    while (true) {
      if (i__28517 < count__28516) {
        var map__28518 = cljs.core._nth.call(null, chunk__28515, i__28517);
        var map__28518__$1 = cljs.core.seq_QMARK_.call(null, map__28518) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28518) : map__28518;
        var todo = map__28518__$1;
        var completed = cljs.core.get.call(null, map__28518__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
        var text = cljs.core.get.call(null, map__28518__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
        var id = cljs.core.get.call(null, map__28518__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
        cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seed-item", "seed-item", 1596530785), id, text, completed], null));
        var G__28529 = seq__28514;
        var G__28530 = chunk__28515;
        var G__28531 = count__28516;
        var G__28532 = i__28517 + 1;
        seq__28514 = G__28529;
        chunk__28515 = G__28530;
        count__28516 = G__28531;
        i__28517 = G__28532;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__28514);
        if (temp__4092__auto__) {
          var seq__28514__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__28514__$1)) {
            var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__28514__$1);
            var G__28533 = cljs.core.chunk_rest.call(null, seq__28514__$1);
            var G__28534 = c__11077__auto__;
            var G__28535 = cljs.core.count.call(null, c__11077__auto__);
            var G__28536 = 0;
            seq__28514 = G__28533;
            chunk__28515 = G__28534;
            count__28516 = G__28535;
            i__28517 = G__28536;
            continue;
          } else {
            var map__28519 = cljs.core.first.call(null, seq__28514__$1);
            var map__28519__$1 = cljs.core.seq_QMARK_.call(null, map__28519) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28519) : map__28519;
            var todo = map__28519__$1;
            var completed = cljs.core.get.call(null, map__28519__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
            var text = cljs.core.get.call(null, map__28519__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
            var id = cljs.core.get.call(null, map__28519__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
            cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "seed-item", "seed-item", 1596530785), id, text, completed], null));
            var G__28537 = cljs.core.next.call(null, seq__28514__$1);
            var G__28538 = null;
            var G__28539 = 0;
            var G__28540 = 0;
            seq__28514 = G__28537;
            chunk__28515 = G__28538;
            count__28516 = G__28539;
            i__28517 = G__28540;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    return todomvc.services.error_handler.call(null, channel);
  }], null));
};
goog.provide("todomvc.application");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("todomvc.services");
goog.require("todomvc.services");
goog.require("todomvc.transact");
goog.require("todomvc.transact");
goog.require("todomvc.render");
goog.require("todomvc.render");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.events");
todomvc.application.state_to_string = function state_to_string(p__28280) {
  var map__28282 = p__28280;
  var map__28282__$1 = cljs.core.seq_QMARK_.call(null, map__28282) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28282) : map__28282;
  var error = cljs.core.get.call(null, map__28282__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
  var items = cljs.core.get.call(null, map__28282__$1, new cljs.core.Keyword(null, "items", "items", 1114430258));
  var current_filter = cljs.core.get.call(null, map__28282__$1, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582));
  var all_done_QMARK_ = cljs.core.get.call(null, map__28282__$1, new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259));
  return[cljs.core.str("{:all-done? "), cljs.core.str(all_done_QMARK_), cljs.core.str("\n"), cljs.core.str(" :current-filter "), cljs.core.str(current_filter), cljs.core.str("\n"), cljs.core.str(" :items ["), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, "\n         ", items))), cljs.core.str("]\n"), cljs.core.str(cljs.core.truth_(error) ? [cljs.core.str(" :error "), cljs.core.str(error), cljs.core.str("\n")].join("") : null), cljs.core.str("}")].join("");
};
todomvc.application.pp_state = function pp_state(state) {
  return console.log(todomvc.application.state_to_string.call(null, state));
};
todomvc.application.pp_transaction = function pp_transaction(transaction) {
  return console.log([cljs.core.str("\n(transact state "), cljs.core.str(transaction), cljs.core.str(") \x3d\x3e")].join(""));
};
todomvc.application.load_app = function load_app() {
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "state", "state", 1123661827), cljs.core.atom.call(null, todomvc.transact.initial_state.call(null)), new cljs.core.Keyword(null, "channel", "channel", 1752854645), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "emit", "emit", 1017021253), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "transact", "transact", 2294782044), todomvc.transact.main, new cljs.core.Keyword(null, "render-pending?", 
  "render-pending?", 2215462737), cljs.core.atom.call(null, false), new cljs.core.Keyword(null, "render", "render", 4374279432), todomvc.render.main], null);
};
todomvc.application.init_updates = function init_updates(p__28283) {
  var map__28320 = p__28283;
  var map__28320__$1 = cljs.core.seq_QMARK_.call(null, map__28320) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28320) : map__28320;
  var app = map__28320__$1;
  var render = cljs.core.get.call(null, map__28320__$1, new cljs.core.Keyword(null, "render", "render", 4374279432));
  var transact = cljs.core.get.call(null, map__28320__$1, new cljs.core.Keyword(null, "transact", "transact", 2294782044));
  var emit = cljs.core.get.call(null, map__28320__$1, new cljs.core.Keyword(null, "emit", "emit", 1017021253));
  var channel = cljs.core.get.call(null, map__28320__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var state = cljs.core.get.call(null, map__28320__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  var c__13953__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13954__auto__ = function() {
      var switch__13883__auto__ = function(state_28339) {
        var state_val_28340 = state_28339[1];
        if (state_val_28340 === 8) {
          var inst_28324 = state_28339[7];
          var inst_28326 = state_28339[2];
          var inst_28327 = cljs.core.swap_BANG_.call(null, state, transact, inst_28324);
          var inst_28328 = todomvc.application.pp_transaction.call(null, inst_28324);
          var inst_28329 = cljs.core.deref.call(null, state);
          var inst_28330 = todomvc.application.pp_state.call(null, inst_28329);
          var inst_28331 = render.call(null, app);
          var state_28339__$1 = function() {
            var statearr_28341 = state_28339;
            statearr_28341[8] = inst_28330;
            statearr_28341[9] = inst_28328;
            statearr_28341[10] = inst_28327;
            statearr_28341[11] = inst_28326;
            statearr_28341[12] = inst_28331;
            return statearr_28341;
          }();
          var statearr_28342_28356 = state_28339__$1;
          statearr_28342_28356[2] = null;
          statearr_28342_28356[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_28340 === 7) {
            var inst_28324 = state_28339[7];
            var inst_28324__$1 = state_28339[2];
            var state_28339__$1 = function() {
              var statearr_28343 = state_28339;
              statearr_28343[7] = inst_28324__$1;
              return statearr_28343;
            }();
            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28339__$1, 8, emit, inst_28324__$1);
          } else {
            if (state_val_28340 === 6) {
              var inst_28335 = state_28339[2];
              var state_28339__$1 = state_28339;
              var statearr_28344_28357 = state_28339__$1;
              statearr_28344_28357[2] = inst_28335;
              statearr_28344_28357[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_28340 === 5) {
                var state_28339__$1 = state_28339;
                var statearr_28345_28358 = state_28339__$1;
                statearr_28345_28358[2] = null;
                statearr_28345_28358[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_28340 === 4) {
                  var state_28339__$1 = state_28339;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_28339__$1, 7, channel);
                } else {
                  if (state_val_28340 === 3) {
                    var inst_28337 = state_28339[2];
                    var state_28339__$1 = state_28339;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28339__$1, inst_28337);
                  } else {
                    if (state_val_28340 === 2) {
                      var state_28339__$1 = state_28339;
                      if (true) {
                        var statearr_28346_28359 = state_28339__$1;
                        statearr_28346_28359[1] = 4;
                      } else {
                        var statearr_28347_28360 = state_28339__$1;
                        statearr_28347_28360[1] = 5;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_28340 === 1) {
                        var state_28339__$1 = state_28339;
                        var statearr_28348_28361 = state_28339__$1;
                        statearr_28348_28361[2] = null;
                        statearr_28348_28361[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13883__auto__) {
        return function() {
          var state_machine__13884__auto__ = null;
          var state_machine__13884__auto____0 = function() {
            var statearr_28352 = [null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_28352[0] = state_machine__13884__auto__;
            statearr_28352[1] = 1;
            return statearr_28352;
          };
          var state_machine__13884__auto____1 = function(state_28339) {
            while (true) {
              var ret_value__13885__auto__ = function() {
                try {
                  while (true) {
                    var result__13886__auto__ = switch__13883__auto__.call(null, state_28339);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13886__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13886__auto__;
                    }
                    break;
                  }
                } catch (e28353) {
                  if (e28353 instanceof Object) {
                    var ex__13887__auto__ = e28353;
                    var statearr_28354_28362 = state_28339;
                    statearr_28354_28362[5] = ex__13887__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28339);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e28353;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13885__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__28363 = state_28339;
                state_28339 = G__28363;
                continue;
              } else {
                return ret_value__13885__auto__;
              }
              break;
            }
          };
          state_machine__13884__auto__ = function(state_28339) {
            switch(arguments.length) {
              case 0:
                return state_machine__13884__auto____0.call(this);
              case 1:
                return state_machine__13884__auto____1.call(this, state_28339);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13884__auto____0;
          state_machine__13884__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13884__auto____1;
          return state_machine__13884__auto__;
        }();
      }(switch__13883__auto__);
    }();
    var state__13955__auto__ = function() {
      var statearr_28355 = f__13954__auto__.call(null);
      statearr_28355[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13953__auto__;
      return statearr_28355;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13955__auto__);
  });
  return c__13953__auto__;
};
todomvc.application.main = function main() {
  var map__28365 = todomvc.application.load_app.call(null);
  var map__28365__$1 = cljs.core.seq_QMARK_.call(null, map__28365) ? cljs.core.apply.call(null, cljs.core.hash_map, map__28365) : map__28365;
  var app = map__28365__$1;
  var render = cljs.core.get.call(null, map__28365__$1, new cljs.core.Keyword(null, "render", "render", 4374279432));
  var state = cljs.core.get.call(null, map__28365__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  todomvc.application.init_updates.call(null, app);
  todomvc.services.start_services.call(null, app);
  todomvc.application.pp_state.call(null, cljs.core.deref.call(null, state));
  render.call(null, app);
  todomvc.application.app_hook = app;
};
goog.exportSymbol("todomvc.application.main", todomvc.application.main);
