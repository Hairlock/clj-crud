var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2173";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__13448__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__13448 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__13448__delegate.call(this, args);
    };
    G__13448.cljs$lang$maxFixedArity = 0;
    G__13448.cljs$lang$applyTo = function(arglist__13449) {
      var args = cljs.core.seq(arglist__13449);
      return G__13448__delegate(args);
    };
    G__13448.cljs$core$IFn$_invoke$arity$variadic = G__13448__delegate;
    return G__13448;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__10317__auto__ = ty;
    if (cljs.core.truth_(and__10317__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__10317__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__11177__auto___13450 = len;
  var i_13451 = 0;
  while (true) {
    if (i_13451 < n__11177__auto___13450) {
      new_arr[i_13451] = arr[i_13451];
      var G__13452 = i_13451 + 1;
      i_13451 = G__13452;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__13453__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__13453 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13453__delegate.call(this, array, i, idxs);
    };
    G__13453.cljs$lang$maxFixedArity = 2;
    G__13453.cljs$lang$applyTo = function(arglist__13454) {
      var array = cljs.core.first(arglist__13454);
      arglist__13454 = cljs.core.next(arglist__13454);
      var i = cljs.core.first(arglist__13454);
      var idxs = cljs.core.rest(arglist__13454);
      return G__13453__delegate(array, i, idxs);
    };
    G__13453.cljs$core$IFn$_invoke$arity$variadic = G__13453__delegate;
    return G__13453;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__13455__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__13455 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13455__delegate.call(this, array, idx, idx2, idxv);
    };
    G__13455.cljs$lang$maxFixedArity = 3;
    G__13455.cljs$lang$applyTo = function(arglist__13456) {
      var array = cljs.core.first(arglist__13456);
      arglist__13456 = cljs.core.next(arglist__13456);
      var idx = cljs.core.first(arglist__13456);
      arglist__13456 = cljs.core.next(arglist__13456);
      var idx2 = cljs.core.first(arglist__13456);
      var idxv = cljs.core.rest(arglist__13456);
      return G__13455__delegate(array, idx, idx2, idxv);
    };
    G__13455.cljs$core$IFn$_invoke$arity$variadic = G__13455__delegate;
    return G__13455;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj13458 = {};
  return obj13458;
}();
cljs.core.IFn = function() {
  var obj13460 = {};
  return obj13460;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__10317__auto__ = this$;
      if (and__10317__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__10956__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10329__auto__ = cljs.core._invoke[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._invoke["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj13462 = {};
  return obj13462;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__10317__auto__ = value;
    if (and__10317__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__10956__auto__ = value == null ? null : value;
    return function() {
      var or__10329__auto__ = cljs.core._clone[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._clone["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj13464 = {};
  return obj13464;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._count[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._count["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj13466 = {};
  return obj13466;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._empty[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._empty["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj13468 = {};
  return obj13468;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._conj[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._conj["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj13470 = {};
  return obj13470;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__10317__auto__ = coll;
      if (and__10317__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__10956__auto__ = coll == null ? null : coll;
      return function() {
        var or__10329__auto__ = cljs.core._nth[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._nth["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__10317__auto__ = coll;
      if (and__10317__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__10956__auto__ = coll == null ? null : coll;
      return function() {
        var or__10329__auto__ = cljs.core._nth[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._nth["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj13472 = {};
  return obj13472;
}();
cljs.core.ISeq = function() {
  var obj13474 = {};
  return obj13474;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._first[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._first["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._rest[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._rest["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj13476 = {};
  return obj13476;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._next[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._next["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj13478 = {};
  return obj13478;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._lookup[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._lookup["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._lookup[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._lookup["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj13480 = {};
  return obj13480;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._assoc[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._assoc["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj13482 = {};
  return obj13482;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._dissoc[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._dissoc["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj13484 = {};
  return obj13484;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._key[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._key["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._val[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._val["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj13486 = {};
  return obj13486;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._disjoin[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._disjoin["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj13488 = {};
  return obj13488;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._peek[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._peek["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._pop[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._pop["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj13490 = {};
  return obj13490;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._assoc_n[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._assoc_n["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj13492 = {};
  return obj13492;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._deref[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._deref["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj13494 = {};
  return obj13494;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj13496 = {};
  return obj13496;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._meta[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._meta["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj13498 = {};
  return obj13498;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._with_meta[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._with_meta["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj13500 = {};
  return obj13500;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__10317__auto__ = coll;
      if (and__10317__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__10956__auto__ = coll == null ? null : coll;
      return function() {
        var or__10329__auto__ = cljs.core._reduce[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._reduce["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__10317__auto__ = coll;
      if (and__10317__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__10956__auto__ = coll == null ? null : coll;
      return function() {
        var or__10329__auto__ = cljs.core._reduce[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._reduce["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj13502 = {};
  return obj13502;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._kv_reduce[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj13504 = {};
  return obj13504;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._equiv[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._equiv["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj13506 = {};
  return obj13506;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._hash[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._hash["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj13508 = {};
  return obj13508;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._seq[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._seq["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj13510 = {};
  return obj13510;
}();
cljs.core.IList = function() {
  var obj13512 = {};
  return obj13512;
}();
cljs.core.IRecord = function() {
  var obj13514 = {};
  return obj13514;
}();
cljs.core.IReversible = function() {
  var obj13516 = {};
  return obj13516;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._rseq[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._rseq["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj13518 = {};
  return obj13518;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._sorted_seq[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._entry_key[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._entry_key["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._comparator[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._comparator["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj13520 = {};
  return obj13520;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__10317__auto__ = writer;
    if (and__10317__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__10956__auto__ = writer == null ? null : writer;
    return function() {
      var or__10329__auto__ = cljs.core._write[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._write["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__10317__auto__ = writer;
    if (and__10317__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__10956__auto__ = writer == null ? null : writer;
    return function() {
      var or__10329__auto__ = cljs.core._flush[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._flush["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj13522 = {};
  return obj13522;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._pr_writer[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._pr_writer["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj13524 = {};
  return obj13524;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__10317__auto__ = d;
    if (and__10317__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__10956__auto__ = d == null ? null : d;
    return function() {
      var or__10329__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj13526 = {};
  return obj13526;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__10317__auto__ = this$;
    if (and__10317__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__10956__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10329__auto__ = cljs.core._notify_watches[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._notify_watches["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__10317__auto__ = this$;
    if (and__10317__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__10956__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10329__auto__ = cljs.core._add_watch[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._add_watch["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__10317__auto__ = this$;
    if (and__10317__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__10956__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10329__auto__ = cljs.core._remove_watch[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._remove_watch["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj13528 = {};
  return obj13528;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._as_transient[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._as_transient["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj13530 = {};
  return obj13530;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj13532 = {};
  return obj13532;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj13534 = {};
  return obj13534;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj13536 = {};
  return obj13536;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj13538 = {};
  return obj13538;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__10317__auto__ = tcoll;
    if (and__10317__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__10956__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10329__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj13540 = {};
  return obj13540;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._compare[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._compare["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj13542 = {};
  return obj13542;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._drop_first[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._drop_first["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj13544 = {};
  return obj13544;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._chunked_first[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._chunked_first["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._chunked_rest[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj13546 = {};
  return obj13546;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__10317__auto__ = coll;
    if (and__10317__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__10956__auto__ = coll == null ? null : coll;
    return function() {
      var or__10329__auto__ = cljs.core._chunked_next[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._chunked_next["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj13548 = {};
  return obj13548;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._name[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._name["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._namespace[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._namespace["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__10317__auto__ = cljs.core.not.call(null, a.ns);
      if (and__10317__auto__) {
        return b.ns;
      } else {
        return and__10317__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__10740__auto__ = self__._hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__13550 = null;
  var G__13550__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__13550__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__13550 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__13550__2.call(this, self__, coll);
      case 3:
        return G__13550__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__13550;
}();
cljs.core.Symbol.prototype.apply = function(self__, args13549) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13549)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__13552 = value;
  if (G__13552) {
    var bit__10979__auto__ = G__13552.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__10979__auto__ || G__13552.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__13552.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__13552);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__13552);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__13554 = coll;
      if (G__13554) {
        var bit__10972__auto__ = G__13554.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__10972__auto__ || G__13554.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__13556 = coll;
      if (G__13556) {
        var bit__10972__auto__ = G__13556.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10972__auto__ || G__13556.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__13558 = coll;
      if (G__13558) {
        var bit__10972__auto__ = G__13558.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10972__auto__ || G__13558.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__13560 = coll;
      if (G__13560) {
        var bit__10972__auto__ = G__13560.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__10972__auto__ || G__13560.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__13561__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__13562 = y;
            var G__13563 = cljs.core.first.call(null, more);
            var G__13564 = cljs.core.next.call(null, more);
            x = G__13562;
            y = G__13563;
            more = G__13564;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13561 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13561__delegate.call(this, x, y, more);
    };
    G__13561.cljs$lang$maxFixedArity = 2;
    G__13561.cljs$lang$applyTo = function(arglist__13565) {
      var x = cljs.core.first(arglist__13565);
      arglist__13565 = cljs.core.next(arglist__13565);
      var y = cljs.core.first(arglist__13565);
      var more = cljs.core.rest(arglist__13565);
      return G__13561__delegate(x, y, more);
    };
    G__13561.cljs$core$IFn$_invoke$arity$variadic = G__13561__delegate;
    return G__13561;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__13566 = nval;
            var G__13567 = n + 1;
            val = G__13566;
            n = G__13567;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13568 = nval;
          var G__13569 = n + 1;
          val__$1 = G__13568;
          n = G__13569;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13570 = nval;
          var G__13571 = n + 1;
          val__$1 = G__13570;
          n = G__13571;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__13572 = nval;
            var G__13573 = n + 1;
            val = G__13572;
            n = G__13573;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13574 = nval;
          var G__13575 = n + 1;
          val__$1 = G__13574;
          n = G__13575;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13576 = nval;
          var G__13577 = n + 1;
          val__$1 = G__13576;
          n = G__13577;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__13579 = x;
  if (G__13579) {
    var bit__10979__auto__ = G__13579.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__10979__auto__ || G__13579.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__13579.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__13579);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__13579);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__13581 = x;
  if (G__13581) {
    var bit__10979__auto__ = G__13581.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__10979__auto__ || G__13581.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__13581.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__13581);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__13581);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__13582 = sn;
      s = G__13582;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__13583__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__13584 = conj.call(null, coll, x);
          var G__13585 = cljs.core.first.call(null, xs);
          var G__13586 = cljs.core.next.call(null, xs);
          coll = G__13584;
          x = G__13585;
          xs = G__13586;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__13583 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13583__delegate.call(this, coll, x, xs);
    };
    G__13583.cljs$lang$maxFixedArity = 2;
    G__13583.cljs$lang$applyTo = function(arglist__13587) {
      var coll = cljs.core.first(arglist__13587);
      arglist__13587 = cljs.core.next(arglist__13587);
      var x = cljs.core.first(arglist__13587);
      var xs = cljs.core.rest(arglist__13587);
      return G__13583__delegate(coll, x, xs);
    };
    G__13583.cljs$core$IFn$_invoke$arity$variadic = G__13583__delegate;
    return G__13583;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__13588 = cljs.core.next.call(null, s);
      var G__13589 = acc + 1;
      s = G__13588;
      acc = G__13589;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__13591 = coll;
      if (G__13591) {
        var bit__10972__auto__ = G__13591.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__10972__auto__ || G__13591.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__13592 = cljs.core.next.call(null, coll);
              var G__13593 = n - 1;
              coll = G__13592;
              n = G__13593;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__13594 = cljs.core.next.call(null, coll);
              var G__13595 = n - 1;
              var G__13596 = not_found;
              coll = G__13594;
              n = G__13595;
              not_found = G__13596;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__13601 = coll;
        if (G__13601) {
          var bit__10972__auto__ = G__13601.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__10972__auto__ || G__13601.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__13602 = coll;
                  if (G__13602) {
                    var bit__10979__auto__ = G__13602.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__10979__auto__ || G__13602.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__13602.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13602);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13602);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__13603 = coll;
        if (G__13603) {
          var bit__10972__auto__ = G__13603.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__10972__auto__ || G__13603.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__13604 = coll;
                  if (G__13604) {
                    var bit__10979__auto__ = G__13604.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__10979__auto__ || G__13604.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__13604.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13604);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13604);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__13607 = o;
        if (G__13607) {
          var bit__10972__auto__ = G__13607.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__10972__auto__ || G__13607.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__13608 = o;
        if (G__13608) {
          var bit__10972__auto__ = G__13608.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__10972__auto__ || G__13608.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__13609__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__13610 = ret;
          var G__13611 = cljs.core.first.call(null, kvs);
          var G__13612 = cljs.core.second.call(null, kvs);
          var G__13613 = cljs.core.nnext.call(null, kvs);
          coll = G__13610;
          k = G__13611;
          v = G__13612;
          kvs = G__13613;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__13609 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13609__delegate.call(this, coll, k, v, kvs);
    };
    G__13609.cljs$lang$maxFixedArity = 3;
    G__13609.cljs$lang$applyTo = function(arglist__13614) {
      var coll = cljs.core.first(arglist__13614);
      arglist__13614 = cljs.core.next(arglist__13614);
      var k = cljs.core.first(arglist__13614);
      arglist__13614 = cljs.core.next(arglist__13614);
      var v = cljs.core.first(arglist__13614);
      var kvs = cljs.core.rest(arglist__13614);
      return G__13609__delegate(coll, k, v, kvs);
    };
    G__13609.cljs$core$IFn$_invoke$arity$variadic = G__13609__delegate;
    return G__13609;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__13615__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__13616 = ret;
            var G__13617 = cljs.core.first.call(null, ks);
            var G__13618 = cljs.core.next.call(null, ks);
            coll = G__13616;
            k = G__13617;
            ks = G__13618;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__13615 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13615__delegate.call(this, coll, k, ks);
    };
    G__13615.cljs$lang$maxFixedArity = 2;
    G__13615.cljs$lang$applyTo = function(arglist__13619) {
      var coll = cljs.core.first(arglist__13619);
      arglist__13619 = cljs.core.next(arglist__13619);
      var k = cljs.core.first(arglist__13619);
      var ks = cljs.core.rest(arglist__13619);
      return G__13615__delegate(coll, k, ks);
    };
    G__13615.cljs$core$IFn$_invoke$arity$variadic = G__13615__delegate;
    return G__13615;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__10329__auto__ = goog.isFunction(f);
  if (or__10329__auto__) {
    return or__10329__auto__;
  } else {
    var G__13623 = f;
    if (G__13623) {
      var bit__10979__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__10329__auto____$1 = bit__10979__auto__;
        if (cljs.core.truth_(or__10329__auto____$1)) {
          return or__10329__auto____$1;
        } else {
          return G__13623.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__13623.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__13623);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__13623);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__13631 = o;
    if (G__13631) {
      var bit__10979__auto__ = G__13631.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__10979__auto__ || G__13631.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__13631.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__13631);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__13631);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t13632 !== "undefined") {
      } else {
        cljs.core.t13632 = function(meta, o, with_meta, meta13633) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta13633 = meta13633;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t13632.cljs$lang$type = true;
        cljs.core.t13632.cljs$lang$ctorStr = "cljs.core/t13632";
        cljs.core.t13632.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
          return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/t13632");
        };
        cljs.core.t13632.prototype.call = function() {
          var G__13636__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__13636 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__13636__delegate.call(this, self__, args);
          };
          G__13636.cljs$lang$maxFixedArity = 1;
          G__13636.cljs$lang$applyTo = function(arglist__13637) {
            var self__ = cljs.core.first(arglist__13637);
            var args = cljs.core.rest(arglist__13637);
            return G__13636__delegate(self__, args);
          };
          G__13636.cljs$core$IFn$_invoke$arity$variadic = G__13636__delegate;
          return G__13636;
        }();
        cljs.core.t13632.prototype.apply = function(self__, args13635) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13635)));
        };
        cljs.core.t13632.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__13638__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__13638 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__13638__delegate.call(this, args);
          };
          G__13638.cljs$lang$maxFixedArity = 0;
          G__13638.cljs$lang$applyTo = function(arglist__13639) {
            var args = cljs.core.seq(arglist__13639);
            return G__13638__delegate(args);
          };
          G__13638.cljs$core$IFn$_invoke$arity$variadic = G__13638__delegate;
          return G__13638;
        }();
        cljs.core.t13632.prototype.cljs$core$Fn$ = true;
        cljs.core.t13632.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13634) {
          var self__ = this;
          var _13634__$1 = this;
          return self__.meta13633;
        };
        cljs.core.t13632.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13634, meta13633__$1) {
          var self__ = this;
          var _13634__$1 = this;
          return new cljs.core.t13632(self__.meta, self__.o, self__.with_meta, meta13633__$1);
        };
        cljs.core.__GT_t13632 = function __GT_t13632(meta__$1, o__$1, with_meta__$1, meta13633) {
          return new cljs.core.t13632(meta__$1, o__$1, with_meta__$1, meta13633);
        };
      }
      return new cljs.core.t13632(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__10317__auto__ = !(o == null);
    if (and__10317__auto__) {
      var G__13643 = o;
      if (G__13643) {
        var bit__10979__auto__ = G__13643.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__10979__auto__ || G__13643.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__13643.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__13643);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__13643);
      }
    } else {
      return and__10317__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__13644__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__13645 = ret;
            var G__13646 = cljs.core.first.call(null, ks);
            var G__13647 = cljs.core.next.call(null, ks);
            coll = G__13645;
            k = G__13646;
            ks = G__13647;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__13644 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13644__delegate.call(this, coll, k, ks);
    };
    G__13644.cljs$lang$maxFixedArity = 2;
    G__13644.cljs$lang$applyTo = function(arglist__13648) {
      var coll = cljs.core.first(arglist__13648);
      arglist__13648 = cljs.core.next(arglist__13648);
      var k = cljs.core.first(arglist__13648);
      var ks = cljs.core.rest(arglist__13648);
      return G__13644__delegate(coll, k, ks);
    };
    G__13644.cljs$core$IFn$_invoke$arity$variadic = G__13644__delegate;
    return G__13644;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj13650 = {};
  return obj13650;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj13654 = {};
      return obj13654;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__13656 = o;
    if (G__13656) {
      var bit__10972__auto__ = G__13656.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__10972__auto__ || G__13656.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13658 = x;
    if (G__13658) {
      var bit__10979__auto__ = G__13658.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__10979__auto__ || G__13658.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__13658.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__13658);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__13658);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13660 = x;
    if (G__13660) {
      var bit__10979__auto__ = G__13660.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__10979__auto__ || G__13660.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__13660.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__13660);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__13660);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__13662 = x;
  if (G__13662) {
    var bit__10979__auto__ = G__13662.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__10979__auto__ || G__13662.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__13662.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__13662);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__13662);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__13664 = x;
  if (G__13664) {
    var bit__10979__auto__ = G__13664.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__10979__auto__ || G__13664.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__13664.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__13664);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__13664);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__13666 = x;
  if (G__13666) {
    var bit__10979__auto__ = G__13666.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__10979__auto__ || G__13666.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__13666.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__13666);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__13666);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__13668 = x;
  if (G__13668) {
    var bit__10979__auto__ = G__13668.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__10979__auto__ || G__13668.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__13668.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__13668);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__13668);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__13670 = x;
    if (G__13670) {
      var bit__10979__auto__ = G__13670.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__10979__auto__ || G__13670.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__13670.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__13670);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__13670);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__13672 = x;
  if (G__13672) {
    var bit__10979__auto__ = G__13672.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__10979__auto__ || G__13672.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__13672.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__13672);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__13672);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__13674 = x;
  if (G__13674) {
    var bit__10972__auto__ = G__13674.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__10972__auto__ || G__13674.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj13678 = {};
    return obj13678;
  };
  var js_obj__1 = function() {
    var G__13679__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__13679 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__13679__delegate.call(this, keyvals);
    };
    G__13679.cljs$lang$maxFixedArity = 0;
    G__13679.cljs$lang$applyTo = function(arglist__13680) {
      var keyvals = cljs.core.seq(arglist__13680);
      return G__13679__delegate(keyvals);
    };
    G__13679.cljs$core$IFn$_invoke$arity$variadic = G__13679__delegate;
    return G__13679;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__13681 = i__$1 + 1;
      var G__13682 = j__$1 + 1;
      var G__13683 = len__$1 - 1;
      i__$1 = G__13681;
      j__$1 = G__13682;
      len__$1 = G__13683;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__13684 = i__$1 - 1;
      var G__13685 = j__$1 - 1;
      var G__13686 = len__$1 - 1;
      i__$1 = G__13684;
      j__$1 = G__13685;
      len__$1 = G__13686;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj13688 = {};
  return obj13688;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__13690 = s;
    if (G__13690) {
      var bit__10979__auto__ = G__13690.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__10979__auto__ || G__13690.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__13690.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13690);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__13690);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__13692 = s;
  if (G__13692) {
    var bit__10979__auto__ = G__13692.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__10979__auto__ || G__13692.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__13692.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__13692);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__13692);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__10329__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__10329__auto__) {
    return or__10329__auto__;
  } else {
    var G__13696 = f;
    if (G__13696) {
      var bit__10979__auto__ = G__13696.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__10979__auto__ || G__13696.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__13696.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__13696);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__13696);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__13697__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__13698 = cljs.core.conj.call(null, s, x__$1);
              var G__13699 = etc;
              s = G__13698;
              xs = G__13699;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__13697 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13697__delegate.call(this, x, y, more);
    };
    G__13697.cljs$lang$maxFixedArity = 2;
    G__13697.cljs$lang$applyTo = function(arglist__13700) {
      var x = cljs.core.first(arglist__13700);
      arglist__13700 = cljs.core.next(arglist__13700);
      var y = cljs.core.first(arglist__13700);
      var more = cljs.core.rest(arglist__13700);
      return G__13697__delegate(x, y, more);
    };
    G__13697.cljs$core$IFn$_invoke$arity$variadic = G__13697__delegate;
    return G__13697;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__10329__auto__ = cljs.core.seq.call(null, coll);
    if (or__10329__auto__) {
      return or__10329__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__13702 = x;
            if (G__13702) {
              var bit__10972__auto__ = G__13702.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__10972__auto__ || G__13702.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__13703 = xs;
        var G__13704 = ys;
        var G__13705 = len;
        var G__13706 = n + 1;
        xs = G__13703;
        ys = G__13704;
        len = G__13705;
        n = G__13706;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__13707 = nval;
          var G__13708 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__13707;
          coll__$1 = G__13708;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__13711 = coll;
      if (G__13711) {
        var bit__10972__auto__ = G__13711.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__10972__auto__ || G__13711.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__13712 = coll;
      if (G__13712) {
        var bit__10972__auto__ = G__13712.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__10972__auto__ || G__13712.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__13713__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__13713 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13713__delegate.call(this, x, y, more);
    };
    G__13713.cljs$lang$maxFixedArity = 2;
    G__13713.cljs$lang$applyTo = function(arglist__13714) {
      var x = cljs.core.first(arglist__13714);
      arglist__13714 = cljs.core.next(arglist__13714);
      var y = cljs.core.first(arglist__13714);
      var more = cljs.core.rest(arglist__13714);
      return G__13713__delegate(x, y, more);
    };
    G__13713.cljs$core$IFn$_invoke$arity$variadic = G__13713__delegate;
    return G__13713;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__13715__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__13715 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13715__delegate.call(this, x, y, more);
    };
    G__13715.cljs$lang$maxFixedArity = 2;
    G__13715.cljs$lang$applyTo = function(arglist__13716) {
      var x = cljs.core.first(arglist__13716);
      arglist__13716 = cljs.core.next(arglist__13716);
      var y = cljs.core.first(arglist__13716);
      var more = cljs.core.rest(arglist__13716);
      return G__13715__delegate(x, y, more);
    };
    G__13715.cljs$core$IFn$_invoke$arity$variadic = G__13715__delegate;
    return G__13715;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__13717__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__13717 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13717__delegate.call(this, x, y, more);
    };
    G__13717.cljs$lang$maxFixedArity = 2;
    G__13717.cljs$lang$applyTo = function(arglist__13718) {
      var x = cljs.core.first(arglist__13718);
      arglist__13718 = cljs.core.next(arglist__13718);
      var y = cljs.core.first(arglist__13718);
      var more = cljs.core.rest(arglist__13718);
      return G__13717__delegate(x, y, more);
    };
    G__13717.cljs$core$IFn$_invoke$arity$variadic = G__13717__delegate;
    return G__13717;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__13719__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__13719 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13719__delegate.call(this, x, y, more);
    };
    G__13719.cljs$lang$maxFixedArity = 2;
    G__13719.cljs$lang$applyTo = function(arglist__13720) {
      var x = cljs.core.first(arglist__13720);
      arglist__13720 = cljs.core.next(arglist__13720);
      var y = cljs.core.first(arglist__13720);
      var more = cljs.core.rest(arglist__13720);
      return G__13719__delegate(x, y, more);
    };
    G__13719.cljs$core$IFn$_invoke$arity$variadic = G__13719__delegate;
    return G__13719;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__13721__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__13722 = y;
            var G__13723 = cljs.core.first.call(null, more);
            var G__13724 = cljs.core.next.call(null, more);
            x = G__13722;
            y = G__13723;
            more = G__13724;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13721 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13721__delegate.call(this, x, y, more);
    };
    G__13721.cljs$lang$maxFixedArity = 2;
    G__13721.cljs$lang$applyTo = function(arglist__13725) {
      var x = cljs.core.first(arglist__13725);
      arglist__13725 = cljs.core.next(arglist__13725);
      var y = cljs.core.first(arglist__13725);
      var more = cljs.core.rest(arglist__13725);
      return G__13721__delegate(x, y, more);
    };
    G__13721.cljs$core$IFn$_invoke$arity$variadic = G__13721__delegate;
    return G__13721;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__13726__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__13727 = y;
            var G__13728 = cljs.core.first.call(null, more);
            var G__13729 = cljs.core.next.call(null, more);
            x = G__13727;
            y = G__13728;
            more = G__13729;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13726 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13726__delegate.call(this, x, y, more);
    };
    G__13726.cljs$lang$maxFixedArity = 2;
    G__13726.cljs$lang$applyTo = function(arglist__13730) {
      var x = cljs.core.first(arglist__13730);
      arglist__13730 = cljs.core.next(arglist__13730);
      var y = cljs.core.first(arglist__13730);
      var more = cljs.core.rest(arglist__13730);
      return G__13726__delegate(x, y, more);
    };
    G__13726.cljs$core$IFn$_invoke$arity$variadic = G__13726__delegate;
    return G__13726;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__13731__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__13732 = y;
            var G__13733 = cljs.core.first.call(null, more);
            var G__13734 = cljs.core.next.call(null, more);
            x = G__13732;
            y = G__13733;
            more = G__13734;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13731 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13731__delegate.call(this, x, y, more);
    };
    G__13731.cljs$lang$maxFixedArity = 2;
    G__13731.cljs$lang$applyTo = function(arglist__13735) {
      var x = cljs.core.first(arglist__13735);
      arglist__13735 = cljs.core.next(arglist__13735);
      var y = cljs.core.first(arglist__13735);
      var more = cljs.core.rest(arglist__13735);
      return G__13731__delegate(x, y, more);
    };
    G__13731.cljs$core$IFn$_invoke$arity$variadic = G__13731__delegate;
    return G__13731;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__13736__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__13737 = y;
            var G__13738 = cljs.core.first.call(null, more);
            var G__13739 = cljs.core.next.call(null, more);
            x = G__13737;
            y = G__13738;
            more = G__13739;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13736 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13736__delegate.call(this, x, y, more);
    };
    G__13736.cljs$lang$maxFixedArity = 2;
    G__13736.cljs$lang$applyTo = function(arglist__13740) {
      var x = cljs.core.first(arglist__13740);
      arglist__13740 = cljs.core.next(arglist__13740);
      var y = cljs.core.first(arglist__13740);
      var more = cljs.core.rest(arglist__13740);
      return G__13736__delegate(x, y, more);
    };
    G__13736.cljs$core$IFn$_invoke$arity$variadic = G__13736__delegate;
    return G__13736;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__10636__auto__ = x;
    var y__10637__auto__ = y;
    return x__10636__auto__ > y__10637__auto__ ? x__10636__auto__ : y__10637__auto__;
  };
  var max__3 = function() {
    var G__13741__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__10636__auto__ = x;
        var y__10637__auto__ = y;
        return x__10636__auto__ > y__10637__auto__ ? x__10636__auto__ : y__10637__auto__;
      }(), more);
    };
    var G__13741 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13741__delegate.call(this, x, y, more);
    };
    G__13741.cljs$lang$maxFixedArity = 2;
    G__13741.cljs$lang$applyTo = function(arglist__13742) {
      var x = cljs.core.first(arglist__13742);
      arglist__13742 = cljs.core.next(arglist__13742);
      var y = cljs.core.first(arglist__13742);
      var more = cljs.core.rest(arglist__13742);
      return G__13741__delegate(x, y, more);
    };
    G__13741.cljs$core$IFn$_invoke$arity$variadic = G__13741__delegate;
    return G__13741;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__10643__auto__ = x;
    var y__10644__auto__ = y;
    return x__10643__auto__ < y__10644__auto__ ? x__10643__auto__ : y__10644__auto__;
  };
  var min__3 = function() {
    var G__13743__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__10643__auto__ = x;
        var y__10644__auto__ = y;
        return x__10643__auto__ < y__10644__auto__ ? x__10643__auto__ : y__10644__auto__;
      }(), more);
    };
    var G__13743 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13743__delegate.call(this, x, y, more);
    };
    G__13743.cljs$lang$maxFixedArity = 2;
    G__13743.cljs$lang$applyTo = function(arglist__13744) {
      var x = cljs.core.first(arglist__13744);
      arglist__13744 = cljs.core.next(arglist__13744);
      var y = cljs.core.first(arglist__13744);
      var more = cljs.core.rest(arglist__13744);
      return G__13743__delegate(x, y, more);
    };
    G__13743.cljs$core$IFn$_invoke$arity$variadic = G__13743__delegate;
    return G__13743;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__13745__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__13745 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13745__delegate.call(this, x, y, more);
    };
    G__13745.cljs$lang$maxFixedArity = 2;
    G__13745.cljs$lang$applyTo = function(arglist__13746) {
      var x = cljs.core.first(arglist__13746);
      arglist__13746 = cljs.core.next(arglist__13746);
      var y = cljs.core.first(arglist__13746);
      var more = cljs.core.rest(arglist__13746);
      return G__13745__delegate(x, y, more);
    };
    G__13745.cljs$core$IFn$_invoke$arity$variadic = G__13745__delegate;
    return G__13745;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__13747__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__13747 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13747__delegate.call(this, x, y, more);
    };
    G__13747.cljs$lang$maxFixedArity = 2;
    G__13747.cljs$lang$applyTo = function(arglist__13748) {
      var x = cljs.core.first(arglist__13748);
      arglist__13748 = cljs.core.next(arglist__13748);
      var y = cljs.core.first(arglist__13748);
      var more = cljs.core.rest(arglist__13748);
      return G__13747__delegate(x, y, more);
    };
    G__13747.cljs$core$IFn$_invoke$arity$variadic = G__13747__delegate;
    return G__13747;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__13749__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__13749 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13749__delegate.call(this, x, y, more);
    };
    G__13749.cljs$lang$maxFixedArity = 2;
    G__13749.cljs$lang$applyTo = function(arglist__13750) {
      var x = cljs.core.first(arglist__13750);
      arglist__13750 = cljs.core.next(arglist__13750);
      var y = cljs.core.first(arglist__13750);
      var more = cljs.core.rest(arglist__13750);
      return G__13749__delegate(x, y, more);
    };
    G__13749.cljs$core$IFn$_invoke$arity$variadic = G__13749__delegate;
    return G__13749;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__13751__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__13751 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13751__delegate.call(this, x, y, more);
    };
    G__13751.cljs$lang$maxFixedArity = 2;
    G__13751.cljs$lang$applyTo = function(arglist__13752) {
      var x = cljs.core.first(arglist__13752);
      arglist__13752 = cljs.core.next(arglist__13752);
      var y = cljs.core.first(arglist__13752);
      var more = cljs.core.rest(arglist__13752);
      return G__13751__delegate(x, y, more);
    };
    G__13751.cljs$core$IFn$_invoke$arity$variadic = G__13751__delegate;
    return G__13751;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__13753__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__13753 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13753__delegate.call(this, x, y, more);
    };
    G__13753.cljs$lang$maxFixedArity = 2;
    G__13753.cljs$lang$applyTo = function(arglist__13754) {
      var x = cljs.core.first(arglist__13754);
      arglist__13754 = cljs.core.next(arglist__13754);
      var y = cljs.core.first(arglist__13754);
      var more = cljs.core.rest(arglist__13754);
      return G__13753__delegate(x, y, more);
    };
    G__13753.cljs$core$IFn$_invoke$arity$variadic = G__13753__delegate;
    return G__13753;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__13755__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__13755 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13755__delegate.call(this, x, y, more);
    };
    G__13755.cljs$lang$maxFixedArity = 2;
    G__13755.cljs$lang$applyTo = function(arglist__13756) {
      var x = cljs.core.first(arglist__13756);
      arglist__13756 = cljs.core.next(arglist__13756);
      var y = cljs.core.first(arglist__13756);
      var more = cljs.core.rest(arglist__13756);
      return G__13755__delegate(x, y, more);
    };
    G__13755.cljs$core$IFn$_invoke$arity$variadic = G__13755__delegate;
    return G__13755;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__13757__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__13757 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13757__delegate.call(this, x, y, more);
    };
    G__13757.cljs$lang$maxFixedArity = 2;
    G__13757.cljs$lang$applyTo = function(arglist__13758) {
      var x = cljs.core.first(arglist__13758);
      arglist__13758 = cljs.core.next(arglist__13758);
      var y = cljs.core.first(arglist__13758);
      var more = cljs.core.rest(arglist__13758);
      return G__13757__delegate(x, y, more);
    };
    G__13757.cljs$core$IFn$_invoke$arity$variadic = G__13757__delegate;
    return G__13757;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__13759__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__13760 = y;
            var G__13761 = cljs.core.first.call(null, more);
            var G__13762 = cljs.core.next.call(null, more);
            x = G__13760;
            y = G__13761;
            more = G__13762;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__13759 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13759__delegate.call(this, x, y, more);
    };
    G__13759.cljs$lang$maxFixedArity = 2;
    G__13759.cljs$lang$applyTo = function(arglist__13763) {
      var x = cljs.core.first(arglist__13763);
      arglist__13763 = cljs.core.next(arglist__13763);
      var y = cljs.core.first(arglist__13763);
      var more = cljs.core.rest(arglist__13763);
      return G__13759__delegate(x, y, more);
    };
    G__13759.cljs$core$IFn$_invoke$arity$variadic = G__13759__delegate;
    return G__13759;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__13764 = n__$1 - 1;
      var G__13765 = cljs.core.next.call(null, xs);
      n__$1 = G__13764;
      xs = G__13765;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__13766__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__13767 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__13768 = cljs.core.next.call(null, more);
          sb = G__13767;
          more = G__13768;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__13766 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__13766__delegate.call(this, x, ys);
    };
    G__13766.cljs$lang$maxFixedArity = 1;
    G__13766.cljs$lang$applyTo = function(arglist__13769) {
      var x = cljs.core.first(arglist__13769);
      var ys = cljs.core.rest(arglist__13769);
      return G__13766__delegate(x, ys);
    };
    G__13766.cljs$core$IFn$_invoke$arity$variadic = G__13766__delegate;
    return G__13766;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__13770 = cljs.core.next.call(null, xs);
            var G__13771 = cljs.core.next.call(null, ys);
            xs = G__13770;
            ys = G__13771;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__13772 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__13773 = cljs.core.next.call(null, s);
        res = G__13772;
        s = G__13773;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__13774 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__13775 = cljs.core.next.call(null, s);
      h = G__13774;
      s = G__13775;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__13776 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__13777 = cljs.core.next.call(null, s__$1);
      h = G__13776;
      s__$1 = G__13777;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__13784_13790 = cljs.core.seq.call(null, fn_map);
  var chunk__13785_13791 = null;
  var count__13786_13792 = 0;
  var i__13787_13793 = 0;
  while (true) {
    if (i__13787_13793 < count__13786_13792) {
      var vec__13788_13794 = cljs.core._nth.call(null, chunk__13785_13791, i__13787_13793);
      var key_name_13795 = cljs.core.nth.call(null, vec__13788_13794, 0, null);
      var f_13796 = cljs.core.nth.call(null, vec__13788_13794, 1, null);
      var str_name_13797 = cljs.core.name.call(null, key_name_13795);
      obj[str_name_13797] = f_13796;
      var G__13798 = seq__13784_13790;
      var G__13799 = chunk__13785_13791;
      var G__13800 = count__13786_13792;
      var G__13801 = i__13787_13793 + 1;
      seq__13784_13790 = G__13798;
      chunk__13785_13791 = G__13799;
      count__13786_13792 = G__13800;
      i__13787_13793 = G__13801;
      continue;
    } else {
      var temp__4092__auto___13802 = cljs.core.seq.call(null, seq__13784_13790);
      if (temp__4092__auto___13802) {
        var seq__13784_13803__$1 = temp__4092__auto___13802;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13784_13803__$1)) {
          var c__11077__auto___13804 = cljs.core.chunk_first.call(null, seq__13784_13803__$1);
          var G__13805 = cljs.core.chunk_rest.call(null, seq__13784_13803__$1);
          var G__13806 = c__11077__auto___13804;
          var G__13807 = cljs.core.count.call(null, c__11077__auto___13804);
          var G__13808 = 0;
          seq__13784_13790 = G__13805;
          chunk__13785_13791 = G__13806;
          count__13786_13792 = G__13807;
          i__13787_13793 = G__13808;
          continue;
        } else {
          var vec__13789_13809 = cljs.core.first.call(null, seq__13784_13803__$1);
          var key_name_13810 = cljs.core.nth.call(null, vec__13789_13809, 0, null);
          var f_13811 = cljs.core.nth.call(null, vec__13789_13809, 1, null);
          var str_name_13812 = cljs.core.name.call(null, key_name_13810);
          obj[str_name_13812] = f_13811;
          var G__13813 = cljs.core.next.call(null, seq__13784_13803__$1);
          var G__13814 = null;
          var G__13815 = 0;
          var G__13816 = 0;
          seq__13784_13790 = G__13813;
          chunk__13785_13791 = G__13814;
          count__13786_13792 = G__13815;
          i__13787_13793 = G__13816;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__13818 = coll;
  if (G__13818) {
    var bit__10979__auto__ = G__13818.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__10979__auto__ || G__13818.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__13818.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__13818);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__13818);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__13819 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__13819;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__13820 = i - 1;
        var G__13821 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__13820;
        r = G__13821;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__13822) {
    var xs = cljs.core.seq(arglist__13822);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__10329__auto__ = coll == null;
    if (or__10329__auto__) {
      return or__10329__auto__;
    } else {
      var G__13826 = coll;
      if (G__13826) {
        var bit__10972__auto__ = G__13826.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10972__auto__ || G__13826.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__13828 = x;
  if (G__13828) {
    var bit__10979__auto__ = G__13828.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__10979__auto__ || G__13828.cljs$core$IList$) {
      return true;
    } else {
      if (!G__13828.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__13828);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__13828);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__13830 = null;
  var G__13830__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__13830__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__13830 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__13830__2.call(this, self__, coll);
      case 3:
        return G__13830__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__13830;
}();
cljs.core.Keyword.prototype.apply = function(self__, args13829) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13829)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__13832 = x;
    if (G__13832) {
      var bit__10972__auto__ = G__13832.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__10972__auto__ || G__13832.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__13833 = ls.sval();
        ls = G__13833;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__13835 = s;
    if (G__13835) {
      var bit__10972__auto__ = G__13835.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__10972__auto__ || G__13835.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__13836 = cljs.core.next.call(null, s__$1);
      s__$1 = G__13836;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_13837 = 0;
  var xs_13838 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_13838) {
      ret[i_13837] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_13838));
      var G__13839 = i_13837 + 1;
      var G__13840 = cljs.core.next.call(null, xs_13838);
      i_13837 = G__13839;
      xs_13838 = G__13840;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__13841 = i + 1;
          var G__13842 = cljs.core.next.call(null, s__$1);
          i = G__13841;
          s__$1 = G__13842;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11177__auto___13843 = size;
      var i_13844 = 0;
      while (true) {
        if (i_13844 < n__11177__auto___13843) {
          a[i_13844] = init_val_or_seq;
          var G__13845 = i_13844 + 1;
          i_13844 = G__13845;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__13846 = i + 1;
          var G__13847 = cljs.core.next.call(null, s__$1);
          i = G__13846;
          s__$1 = G__13847;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11177__auto___13848 = size;
      var i_13849 = 0;
      while (true) {
        if (i_13849 < n__11177__auto___13848) {
          a[i_13849] = init_val_or_seq;
          var G__13850 = i_13849 + 1;
          i_13849 = G__13850;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__13851 = i + 1;
          var G__13852 = cljs.core.next.call(null, s__$1);
          i = G__13851;
          s__$1 = G__13852;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11177__auto___13853 = size;
      var i_13854 = 0;
      while (true) {
        if (i_13854 < n__11177__auto___13853) {
          a[i_13854] = init_val_or_seq;
          var G__13855 = i_13854 + 1;
          i_13854 = G__13855;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__13856 = i + 1;
          var G__13857 = cljs.core.next.call(null, s__$1);
          i = G__13856;
          s__$1 = G__13857;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11177__auto___13858 = size;
      var i_13859 = 0;
      while (true) {
        if (i_13859 < n__11177__auto___13858) {
          a[i_13859] = init_val_or_seq;
          var G__13860 = i_13859 + 1;
          i_13859 = G__13860;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__13861 = cljs.core.next.call(null, s__$1);
        var G__13862 = i - 1;
        var G__13863 = sum + 1;
        s__$1 = G__13861;
        i = G__13862;
        sum = G__13863;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__13864__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__13864 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13864__delegate.call(this, x, y, zs);
    };
    G__13864.cljs$lang$maxFixedArity = 2;
    G__13864.cljs$lang$applyTo = function(arglist__13865) {
      var x = cljs.core.first(arglist__13865);
      arglist__13865 = cljs.core.next(arglist__13865);
      var y = cljs.core.first(arglist__13865);
      var zs = cljs.core.rest(arglist__13865);
      return G__13864__delegate(x, y, zs);
    };
    G__13864.cljs$core$IFn$_invoke$arity$variadic = G__13864__delegate;
    return G__13864;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__13866__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__13866 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__13866__delegate.call(this, a, b, c, d, more);
    };
    G__13866.cljs$lang$maxFixedArity = 4;
    G__13866.cljs$lang$applyTo = function(arglist__13867) {
      var a = cljs.core.first(arglist__13867);
      arglist__13867 = cljs.core.next(arglist__13867);
      var b = cljs.core.first(arglist__13867);
      arglist__13867 = cljs.core.next(arglist__13867);
      var c = cljs.core.first(arglist__13867);
      arglist__13867 = cljs.core.next(arglist__13867);
      var d = cljs.core.first(arglist__13867);
      var more = cljs.core.rest(arglist__13867);
      return G__13866__delegate(a, b, c, d, more);
    };
    G__13866.cljs$core$IFn$_invoke$arity$variadic = G__13866__delegate;
    return G__13866;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__13868__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__13869 = ntcoll;
          var G__13870 = cljs.core.first.call(null, vals);
          var G__13871 = cljs.core.next.call(null, vals);
          tcoll = G__13869;
          val = G__13870;
          vals = G__13871;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13868 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13868__delegate.call(this, tcoll, val, vals);
    };
    G__13868.cljs$lang$maxFixedArity = 2;
    G__13868.cljs$lang$applyTo = function(arglist__13872) {
      var tcoll = cljs.core.first(arglist__13872);
      arglist__13872 = cljs.core.next(arglist__13872);
      var val = cljs.core.first(arglist__13872);
      var vals = cljs.core.rest(arglist__13872);
      return G__13868__delegate(tcoll, val, vals);
    };
    G__13868.cljs$core$IFn$_invoke$arity$variadic = G__13868__delegate;
    return G__13868;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__13873__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__13874 = ntcoll;
          var G__13875 = cljs.core.first.call(null, kvs);
          var G__13876 = cljs.core.second.call(null, kvs);
          var G__13877 = cljs.core.nnext.call(null, kvs);
          tcoll = G__13874;
          key = G__13875;
          val = G__13876;
          kvs = G__13877;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13873 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13873__delegate.call(this, tcoll, key, val, kvs);
    };
    G__13873.cljs$lang$maxFixedArity = 3;
    G__13873.cljs$lang$applyTo = function(arglist__13878) {
      var tcoll = cljs.core.first(arglist__13878);
      arglist__13878 = cljs.core.next(arglist__13878);
      var key = cljs.core.first(arglist__13878);
      arglist__13878 = cljs.core.next(arglist__13878);
      var val = cljs.core.first(arglist__13878);
      var kvs = cljs.core.rest(arglist__13878);
      return G__13873__delegate(tcoll, key, val, kvs);
    };
    G__13873.cljs$core$IFn$_invoke$arity$variadic = G__13873__delegate;
    return G__13873;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__13879__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__13880 = ntcoll;
          var G__13881 = cljs.core.first.call(null, ks);
          var G__13882 = cljs.core.next.call(null, ks);
          tcoll = G__13880;
          key = G__13881;
          ks = G__13882;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13879 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13879__delegate.call(this, tcoll, key, ks);
    };
    G__13879.cljs$lang$maxFixedArity = 2;
    G__13879.cljs$lang$applyTo = function(arglist__13883) {
      var tcoll = cljs.core.first(arglist__13883);
      arglist__13883 = cljs.core.next(arglist__13883);
      var key = cljs.core.first(arglist__13883);
      var ks = cljs.core.rest(arglist__13883);
      return G__13879__delegate(tcoll, key, ks);
    };
    G__13879.cljs$core$IFn$_invoke$arity$variadic = G__13879__delegate;
    return G__13879;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__13884__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__13885 = ntcoll;
          var G__13886 = cljs.core.first.call(null, vals);
          var G__13887 = cljs.core.next.call(null, vals);
          tcoll = G__13885;
          val = G__13886;
          vals = G__13887;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__13884 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13884__delegate.call(this, tcoll, val, vals);
    };
    G__13884.cljs$lang$maxFixedArity = 2;
    G__13884.cljs$lang$applyTo = function(arglist__13888) {
      var tcoll = cljs.core.first(arglist__13888);
      arglist__13888 = cljs.core.next(arglist__13888);
      var val = cljs.core.first(arglist__13888);
      var vals = cljs.core.rest(arglist__13888);
      return G__13884__delegate(tcoll, val, vals);
    };
    G__13884.cljs$core$IFn$_invoke$arity$variadic = G__13884__delegate;
    return G__13884;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__13889__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__13889 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__13889__delegate.call(this, f, a, b, c, d, args);
    };
    G__13889.cljs$lang$maxFixedArity = 5;
    G__13889.cljs$lang$applyTo = function(arglist__13890) {
      var f = cljs.core.first(arglist__13890);
      arglist__13890 = cljs.core.next(arglist__13890);
      var a = cljs.core.first(arglist__13890);
      arglist__13890 = cljs.core.next(arglist__13890);
      var b = cljs.core.first(arglist__13890);
      arglist__13890 = cljs.core.next(arglist__13890);
      var c = cljs.core.first(arglist__13890);
      arglist__13890 = cljs.core.next(arglist__13890);
      var d = cljs.core.first(arglist__13890);
      var args = cljs.core.rest(arglist__13890);
      return G__13889__delegate(f, a, b, c, d, args);
    };
    G__13889.cljs$core$IFn$_invoke$arity$variadic = G__13889__delegate;
    return G__13889;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__13891__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__13891 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__13891__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__13891.cljs$lang$maxFixedArity = 6;
    G__13891.cljs$lang$applyTo = function(arglist__13892) {
      var obj = cljs.core.first(arglist__13892);
      arglist__13892 = cljs.core.next(arglist__13892);
      var f = cljs.core.first(arglist__13892);
      arglist__13892 = cljs.core.next(arglist__13892);
      var a = cljs.core.first(arglist__13892);
      arglist__13892 = cljs.core.next(arglist__13892);
      var b = cljs.core.first(arglist__13892);
      arglist__13892 = cljs.core.next(arglist__13892);
      var c = cljs.core.first(arglist__13892);
      arglist__13892 = cljs.core.next(arglist__13892);
      var d = cljs.core.first(arglist__13892);
      var args = cljs.core.rest(arglist__13892);
      return G__13891__delegate(obj, f, a, b, c, d, args);
    };
    G__13891.cljs$core$IFn$_invoke$arity$variadic = G__13891__delegate;
    return G__13891;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__13893__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__13893 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13893__delegate.call(this, x, y, more);
    };
    G__13893.cljs$lang$maxFixedArity = 2;
    G__13893.cljs$lang$applyTo = function(arglist__13894) {
      var x = cljs.core.first(arglist__13894);
      arglist__13894 = cljs.core.next(arglist__13894);
      var y = cljs.core.first(arglist__13894);
      var more = cljs.core.rest(arglist__13894);
      return G__13893__delegate(x, y, more);
    };
    G__13893.cljs$core$IFn$_invoke$arity$variadic = G__13893__delegate;
    return G__13893;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__13895 = pred;
        var G__13896 = cljs.core.next.call(null, coll);
        pred = G__13895;
        coll = G__13896;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__10329__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        var G__13897 = pred;
        var G__13898 = cljs.core.next.call(null, coll);
        pred = G__13897;
        coll = G__13898;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__13899 = null;
    var G__13899__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__13899__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__13899__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__13899__3 = function() {
      var G__13900__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__13900 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__13900__delegate.call(this, x, y, zs);
      };
      G__13900.cljs$lang$maxFixedArity = 2;
      G__13900.cljs$lang$applyTo = function(arglist__13901) {
        var x = cljs.core.first(arglist__13901);
        arglist__13901 = cljs.core.next(arglist__13901);
        var y = cljs.core.first(arglist__13901);
        var zs = cljs.core.rest(arglist__13901);
        return G__13900__delegate(x, y, zs);
      };
      G__13900.cljs$core$IFn$_invoke$arity$variadic = G__13900__delegate;
      return G__13900;
    }();
    G__13899 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__13899__0.call(this);
        case 1:
          return G__13899__1.call(this, x);
        case 2:
          return G__13899__2.call(this, x, y);
        default:
          return G__13899__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__13899.cljs$lang$maxFixedArity = 2;
    G__13899.cljs$lang$applyTo = G__13899__3.cljs$lang$applyTo;
    return G__13899;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__13902__delegate = function(args) {
      return x;
    };
    var G__13902 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__13902__delegate.call(this, args);
    };
    G__13902.cljs$lang$maxFixedArity = 0;
    G__13902.cljs$lang$applyTo = function(arglist__13903) {
      var args = cljs.core.seq(arglist__13903);
      return G__13902__delegate(args);
    };
    G__13902.cljs$core$IFn$_invoke$arity$variadic = G__13902__delegate;
    return G__13902;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__13904 = null;
      var G__13904__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__13904__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__13904__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__13904__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__13904__4 = function() {
        var G__13905__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__13905 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13905__delegate.call(this, x, y, z, args);
        };
        G__13905.cljs$lang$maxFixedArity = 3;
        G__13905.cljs$lang$applyTo = function(arglist__13906) {
          var x = cljs.core.first(arglist__13906);
          arglist__13906 = cljs.core.next(arglist__13906);
          var y = cljs.core.first(arglist__13906);
          arglist__13906 = cljs.core.next(arglist__13906);
          var z = cljs.core.first(arglist__13906);
          var args = cljs.core.rest(arglist__13906);
          return G__13905__delegate(x, y, z, args);
        };
        G__13905.cljs$core$IFn$_invoke$arity$variadic = G__13905__delegate;
        return G__13905;
      }();
      G__13904 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13904__0.call(this);
          case 1:
            return G__13904__1.call(this, x);
          case 2:
            return G__13904__2.call(this, x, y);
          case 3:
            return G__13904__3.call(this, x, y, z);
          default:
            return G__13904__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13904.cljs$lang$maxFixedArity = 3;
      G__13904.cljs$lang$applyTo = G__13904__4.cljs$lang$applyTo;
      return G__13904;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__13907 = null;
      var G__13907__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__13907__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__13907__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__13907__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__13907__4 = function() {
        var G__13908__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__13908 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13908__delegate.call(this, x, y, z, args);
        };
        G__13908.cljs$lang$maxFixedArity = 3;
        G__13908.cljs$lang$applyTo = function(arglist__13909) {
          var x = cljs.core.first(arglist__13909);
          arglist__13909 = cljs.core.next(arglist__13909);
          var y = cljs.core.first(arglist__13909);
          arglist__13909 = cljs.core.next(arglist__13909);
          var z = cljs.core.first(arglist__13909);
          var args = cljs.core.rest(arglist__13909);
          return G__13908__delegate(x, y, z, args);
        };
        G__13908.cljs$core$IFn$_invoke$arity$variadic = G__13908__delegate;
        return G__13908;
      }();
      G__13907 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__13907__0.call(this);
          case 1:
            return G__13907__1.call(this, x);
          case 2:
            return G__13907__2.call(this, x, y);
          case 3:
            return G__13907__3.call(this, x, y, z);
          default:
            return G__13907__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13907.cljs$lang$maxFixedArity = 3;
      G__13907.cljs$lang$applyTo = G__13907__4.cljs$lang$applyTo;
      return G__13907;
    }();
  };
  var comp__4 = function() {
    var G__13910__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__13911__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__13912 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__13913 = cljs.core.next.call(null, fs__$2);
              ret = G__13912;
              fs__$2 = G__13913;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__13911 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__13911__delegate.call(this, args);
        };
        G__13911.cljs$lang$maxFixedArity = 0;
        G__13911.cljs$lang$applyTo = function(arglist__13914) {
          var args = cljs.core.seq(arglist__13914);
          return G__13911__delegate(args);
        };
        G__13911.cljs$core$IFn$_invoke$arity$variadic = G__13911__delegate;
        return G__13911;
      }();
    };
    var G__13910 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13910__delegate.call(this, f1, f2, f3, fs);
    };
    G__13910.cljs$lang$maxFixedArity = 3;
    G__13910.cljs$lang$applyTo = function(arglist__13915) {
      var f1 = cljs.core.first(arglist__13915);
      arglist__13915 = cljs.core.next(arglist__13915);
      var f2 = cljs.core.first(arglist__13915);
      arglist__13915 = cljs.core.next(arglist__13915);
      var f3 = cljs.core.first(arglist__13915);
      var fs = cljs.core.rest(arglist__13915);
      return G__13910__delegate(f1, f2, f3, fs);
    };
    G__13910.cljs$core$IFn$_invoke$arity$variadic = G__13910__delegate;
    return G__13910;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__13916__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__13916 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__13916__delegate.call(this, args);
      };
      G__13916.cljs$lang$maxFixedArity = 0;
      G__13916.cljs$lang$applyTo = function(arglist__13917) {
        var args = cljs.core.seq(arglist__13917);
        return G__13916__delegate(args);
      };
      G__13916.cljs$core$IFn$_invoke$arity$variadic = G__13916__delegate;
      return G__13916;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__13918__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__13918 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__13918__delegate.call(this, args);
      };
      G__13918.cljs$lang$maxFixedArity = 0;
      G__13918.cljs$lang$applyTo = function(arglist__13919) {
        var args = cljs.core.seq(arglist__13919);
        return G__13918__delegate(args);
      };
      G__13918.cljs$core$IFn$_invoke$arity$variadic = G__13918__delegate;
      return G__13918;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__13920__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__13920 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__13920__delegate.call(this, args);
      };
      G__13920.cljs$lang$maxFixedArity = 0;
      G__13920.cljs$lang$applyTo = function(arglist__13921) {
        var args = cljs.core.seq(arglist__13921);
        return G__13920__delegate(args);
      };
      G__13920.cljs$core$IFn$_invoke$arity$variadic = G__13920__delegate;
      return G__13920;
    }();
  };
  var partial__5 = function() {
    var G__13922__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__13923__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__13923 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__13923__delegate.call(this, args);
        };
        G__13923.cljs$lang$maxFixedArity = 0;
        G__13923.cljs$lang$applyTo = function(arglist__13924) {
          var args = cljs.core.seq(arglist__13924);
          return G__13923__delegate(args);
        };
        G__13923.cljs$core$IFn$_invoke$arity$variadic = G__13923__delegate;
        return G__13923;
      }();
    };
    var G__13922 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__13922__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__13922.cljs$lang$maxFixedArity = 4;
    G__13922.cljs$lang$applyTo = function(arglist__13925) {
      var f = cljs.core.first(arglist__13925);
      arglist__13925 = cljs.core.next(arglist__13925);
      var arg1 = cljs.core.first(arglist__13925);
      arglist__13925 = cljs.core.next(arglist__13925);
      var arg2 = cljs.core.first(arglist__13925);
      arglist__13925 = cljs.core.next(arglist__13925);
      var arg3 = cljs.core.first(arglist__13925);
      var more = cljs.core.rest(arglist__13925);
      return G__13922__delegate(f, arg1, arg2, arg3, more);
    };
    G__13922.cljs$core$IFn$_invoke$arity$variadic = G__13922__delegate;
    return G__13922;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__13926 = null;
      var G__13926__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__13926__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__13926__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__13926__4 = function() {
        var G__13927__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__13927 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13927__delegate.call(this, a, b, c, ds);
        };
        G__13927.cljs$lang$maxFixedArity = 3;
        G__13927.cljs$lang$applyTo = function(arglist__13928) {
          var a = cljs.core.first(arglist__13928);
          arglist__13928 = cljs.core.next(arglist__13928);
          var b = cljs.core.first(arglist__13928);
          arglist__13928 = cljs.core.next(arglist__13928);
          var c = cljs.core.first(arglist__13928);
          var ds = cljs.core.rest(arglist__13928);
          return G__13927__delegate(a, b, c, ds);
        };
        G__13927.cljs$core$IFn$_invoke$arity$variadic = G__13927__delegate;
        return G__13927;
      }();
      G__13926 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__13926__1.call(this, a);
          case 2:
            return G__13926__2.call(this, a, b);
          case 3:
            return G__13926__3.call(this, a, b, c);
          default:
            return G__13926__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13926.cljs$lang$maxFixedArity = 3;
      G__13926.cljs$lang$applyTo = G__13926__4.cljs$lang$applyTo;
      return G__13926;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__13929 = null;
      var G__13929__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__13929__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__13929__4 = function() {
        var G__13930__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__13930 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13930__delegate.call(this, a, b, c, ds);
        };
        G__13930.cljs$lang$maxFixedArity = 3;
        G__13930.cljs$lang$applyTo = function(arglist__13931) {
          var a = cljs.core.first(arglist__13931);
          arglist__13931 = cljs.core.next(arglist__13931);
          var b = cljs.core.first(arglist__13931);
          arglist__13931 = cljs.core.next(arglist__13931);
          var c = cljs.core.first(arglist__13931);
          var ds = cljs.core.rest(arglist__13931);
          return G__13930__delegate(a, b, c, ds);
        };
        G__13930.cljs$core$IFn$_invoke$arity$variadic = G__13930__delegate;
        return G__13930;
      }();
      G__13929 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__13929__2.call(this, a, b);
          case 3:
            return G__13929__3.call(this, a, b, c);
          default:
            return G__13929__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13929.cljs$lang$maxFixedArity = 3;
      G__13929.cljs$lang$applyTo = G__13929__4.cljs$lang$applyTo;
      return G__13929;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__13932 = null;
      var G__13932__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__13932__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__13932__4 = function() {
        var G__13933__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__13933 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13933__delegate.call(this, a, b, c, ds);
        };
        G__13933.cljs$lang$maxFixedArity = 3;
        G__13933.cljs$lang$applyTo = function(arglist__13934) {
          var a = cljs.core.first(arglist__13934);
          arglist__13934 = cljs.core.next(arglist__13934);
          var b = cljs.core.first(arglist__13934);
          arglist__13934 = cljs.core.next(arglist__13934);
          var c = cljs.core.first(arglist__13934);
          var ds = cljs.core.rest(arglist__13934);
          return G__13933__delegate(a, b, c, ds);
        };
        G__13933.cljs$core$IFn$_invoke$arity$variadic = G__13933__delegate;
        return G__13933;
      }();
      G__13932 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__13932__2.call(this, a, b);
          case 3:
            return G__13932__3.call(this, a, b, c);
          default:
            return G__13932__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__13932.cljs$lang$maxFixedArity = 3;
      G__13932.cljs$lang$applyTo = G__13932__4.cljs$lang$applyTo;
      return G__13932;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11177__auto___13935 = size;
          var i_13936 = 0;
          while (true) {
            if (i_13936 < n__11177__auto___13935) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_13936, cljs.core._nth.call(null, c, i_13936)));
              var G__13937 = i_13936 + 1;
              i_13936 = G__13937;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__11177__auto___13938 = size;
        var i_13939 = 0;
        while (true) {
          if (i_13939 < n__11177__auto___13938) {
            var x_13940 = f.call(null, cljs.core._nth.call(null, c, i_13939));
            if (x_13940 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_13940);
            }
            var G__13941 = i_13939 + 1;
            i_13939 = G__13941;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11177__auto___13942 = size;
          var i_13943 = 0;
          while (true) {
            if (i_13943 < n__11177__auto___13942) {
              var x_13944 = f.call(null, idx + i_13943, cljs.core._nth.call(null, c, i_13943));
              if (x_13944 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_13944);
              }
              var G__13945 = i_13943 + 1;
              i_13943 = G__13945;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            return p.call(null, y);
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__13952__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__13952 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13952__delegate.call(this, x, y, z, args);
        };
        G__13952.cljs$lang$maxFixedArity = 3;
        G__13952.cljs$lang$applyTo = function(arglist__13953) {
          var x = cljs.core.first(arglist__13953);
          arglist__13953 = cljs.core.next(arglist__13953);
          var y = cljs.core.first(arglist__13953);
          arglist__13953 = cljs.core.next(arglist__13953);
          var z = cljs.core.first(arglist__13953);
          var args = cljs.core.rest(arglist__13953);
          return G__13952__delegate(x, y, z, args);
        };
        G__13952.cljs$core$IFn$_invoke$arity$variadic = G__13952__delegate;
        return G__13952;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            return p2.call(null, x);
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              var and__10317__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__10317__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__10317__auto____$2;
              }
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              var and__10317__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__10317__auto____$2)) {
                var and__10317__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__10317__auto____$3)) {
                  var and__10317__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10317__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__10317__auto____$4;
                  }
                } else {
                  return and__10317__auto____$3;
                }
              } else {
                return and__10317__auto____$2;
              }
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__13954__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__13946_SHARP_) {
            var and__10317__auto__ = p1.call(null, p1__13946_SHARP_);
            if (cljs.core.truth_(and__10317__auto__)) {
              return p2.call(null, p1__13946_SHARP_);
            } else {
              return and__10317__auto__;
            }
          }, args));
        };
        var G__13954 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13954__delegate.call(this, x, y, z, args);
        };
        G__13954.cljs$lang$maxFixedArity = 3;
        G__13954.cljs$lang$applyTo = function(arglist__13955) {
          var x = cljs.core.first(arglist__13955);
          arglist__13955 = cljs.core.next(arglist__13955);
          var y = cljs.core.first(arglist__13955);
          arglist__13955 = cljs.core.next(arglist__13955);
          var z = cljs.core.first(arglist__13955);
          var args = cljs.core.rest(arglist__13955);
          return G__13954__delegate(x, y, z, args);
        };
        G__13954.cljs$core$IFn$_invoke$arity$variadic = G__13954__delegate;
        return G__13954;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              var and__10317__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__10317__auto____$2)) {
                var and__10317__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__10317__auto____$3)) {
                  var and__10317__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10317__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__10317__auto____$4;
                  }
                } else {
                  return and__10317__auto____$3;
                }
              } else {
                return and__10317__auto____$2;
              }
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10317__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10317__auto____$1)) {
              var and__10317__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__10317__auto____$2)) {
                var and__10317__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__10317__auto____$3)) {
                  var and__10317__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10317__auto____$4)) {
                    var and__10317__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__10317__auto____$5)) {
                      var and__10317__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__10317__auto____$6)) {
                        var and__10317__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__10317__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__10317__auto____$7;
                        }
                      } else {
                        return and__10317__auto____$6;
                      }
                    } else {
                      return and__10317__auto____$5;
                    }
                  } else {
                    return and__10317__auto____$4;
                  }
                } else {
                  return and__10317__auto____$3;
                }
              } else {
                return and__10317__auto____$2;
              }
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__13956__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__13947_SHARP_) {
            var and__10317__auto__ = p1.call(null, p1__13947_SHARP_);
            if (cljs.core.truth_(and__10317__auto__)) {
              var and__10317__auto____$1 = p2.call(null, p1__13947_SHARP_);
              if (cljs.core.truth_(and__10317__auto____$1)) {
                return p3.call(null, p1__13947_SHARP_);
              } else {
                return and__10317__auto____$1;
              }
            } else {
              return and__10317__auto__;
            }
          }, args));
        };
        var G__13956 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13956__delegate.call(this, x, y, z, args);
        };
        G__13956.cljs$lang$maxFixedArity = 3;
        G__13956.cljs$lang$applyTo = function(arglist__13957) {
          var x = cljs.core.first(arglist__13957);
          arglist__13957 = cljs.core.next(arglist__13957);
          var y = cljs.core.first(arglist__13957);
          arglist__13957 = cljs.core.next(arglist__13957);
          var z = cljs.core.first(arglist__13957);
          var args = cljs.core.rest(arglist__13957);
          return G__13956__delegate(x, y, z, args);
        };
        G__13956.cljs$core$IFn$_invoke$arity$variadic = G__13956__delegate;
        return G__13956;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__13958__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__13948_SHARP_) {
            return p1__13948_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__13949_SHARP_) {
            var and__10317__auto__ = p1__13949_SHARP_.call(null, x);
            if (cljs.core.truth_(and__10317__auto__)) {
              return p1__13949_SHARP_.call(null, y);
            } else {
              return and__10317__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__13950_SHARP_) {
            var and__10317__auto__ = p1__13950_SHARP_.call(null, x);
            if (cljs.core.truth_(and__10317__auto__)) {
              var and__10317__auto____$1 = p1__13950_SHARP_.call(null, y);
              if (cljs.core.truth_(and__10317__auto____$1)) {
                return p1__13950_SHARP_.call(null, z);
              } else {
                return and__10317__auto____$1;
              }
            } else {
              return and__10317__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__13959__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__13951_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__13951_SHARP_, args);
            }, ps__$1));
          };
          var G__13959 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__13959__delegate.call(this, x, y, z, args);
          };
          G__13959.cljs$lang$maxFixedArity = 3;
          G__13959.cljs$lang$applyTo = function(arglist__13960) {
            var x = cljs.core.first(arglist__13960);
            arglist__13960 = cljs.core.next(arglist__13960);
            var y = cljs.core.first(arglist__13960);
            arglist__13960 = cljs.core.next(arglist__13960);
            var z = cljs.core.first(arglist__13960);
            var args = cljs.core.rest(arglist__13960);
            return G__13959__delegate(x, y, z, args);
          };
          G__13959.cljs$core$IFn$_invoke$arity$variadic = G__13959__delegate;
          return G__13959;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__13958 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13958__delegate.call(this, p1, p2, p3, ps);
    };
    G__13958.cljs$lang$maxFixedArity = 3;
    G__13958.cljs$lang$applyTo = function(arglist__13961) {
      var p1 = cljs.core.first(arglist__13961);
      arglist__13961 = cljs.core.next(arglist__13961);
      var p2 = cljs.core.first(arglist__13961);
      arglist__13961 = cljs.core.next(arglist__13961);
      var p3 = cljs.core.first(arglist__13961);
      var ps = cljs.core.rest(arglist__13961);
      return G__13958__delegate(p1, p2, p3, ps);
    };
    G__13958.cljs$core$IFn$_invoke$arity$variadic = G__13958__delegate;
    return G__13958;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__10329__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__10329__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__13968__delegate = function(x, y, z, args) {
          var or__10329__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__13968 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13968__delegate.call(this, x, y, z, args);
        };
        G__13968.cljs$lang$maxFixedArity = 3;
        G__13968.cljs$lang$applyTo = function(arglist__13969) {
          var x = cljs.core.first(arglist__13969);
          arglist__13969 = cljs.core.next(arglist__13969);
          var y = cljs.core.first(arglist__13969);
          arglist__13969 = cljs.core.next(arglist__13969);
          var z = cljs.core.first(arglist__13969);
          var args = cljs.core.rest(arglist__13969);
          return G__13968__delegate(x, y, z, args);
        };
        G__13968.cljs$core$IFn$_invoke$arity$variadic = G__13968__delegate;
        return G__13968;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            var or__10329__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__10329__auto____$2)) {
              return or__10329__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            var or__10329__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__10329__auto____$2)) {
              return or__10329__auto____$2;
            } else {
              var or__10329__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__10329__auto____$3)) {
                return or__10329__auto____$3;
              } else {
                var or__10329__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10329__auto____$4)) {
                  return or__10329__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__13970__delegate = function(x, y, z, args) {
          var or__10329__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__13962_SHARP_) {
              var or__10329__auto____$1 = p1.call(null, p1__13962_SHARP_);
              if (cljs.core.truth_(or__10329__auto____$1)) {
                return or__10329__auto____$1;
              } else {
                return p2.call(null, p1__13962_SHARP_);
              }
            }, args);
          }
        };
        var G__13970 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13970__delegate.call(this, x, y, z, args);
        };
        G__13970.cljs$lang$maxFixedArity = 3;
        G__13970.cljs$lang$applyTo = function(arglist__13971) {
          var x = cljs.core.first(arglist__13971);
          arglist__13971 = cljs.core.next(arglist__13971);
          var y = cljs.core.first(arglist__13971);
          arglist__13971 = cljs.core.next(arglist__13971);
          var z = cljs.core.first(arglist__13971);
          var args = cljs.core.rest(arglist__13971);
          return G__13970__delegate(x, y, z, args);
        };
        G__13970.cljs$core$IFn$_invoke$arity$variadic = G__13970__delegate;
        return G__13970;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            var or__10329__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__10329__auto____$2)) {
              return or__10329__auto____$2;
            } else {
              var or__10329__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__10329__auto____$3)) {
                return or__10329__auto____$3;
              } else {
                var or__10329__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10329__auto____$4)) {
                  return or__10329__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__10329__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10329__auto____$1)) {
            return or__10329__auto____$1;
          } else {
            var or__10329__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__10329__auto____$2)) {
              return or__10329__auto____$2;
            } else {
              var or__10329__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__10329__auto____$3)) {
                return or__10329__auto____$3;
              } else {
                var or__10329__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10329__auto____$4)) {
                  return or__10329__auto____$4;
                } else {
                  var or__10329__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__10329__auto____$5)) {
                    return or__10329__auto____$5;
                  } else {
                    var or__10329__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__10329__auto____$6)) {
                      return or__10329__auto____$6;
                    } else {
                      var or__10329__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__10329__auto____$7)) {
                        return or__10329__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__13972__delegate = function(x, y, z, args) {
          var or__10329__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__13963_SHARP_) {
              var or__10329__auto____$1 = p1.call(null, p1__13963_SHARP_);
              if (cljs.core.truth_(or__10329__auto____$1)) {
                return or__10329__auto____$1;
              } else {
                var or__10329__auto____$2 = p2.call(null, p1__13963_SHARP_);
                if (cljs.core.truth_(or__10329__auto____$2)) {
                  return or__10329__auto____$2;
                } else {
                  return p3.call(null, p1__13963_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__13972 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__13972__delegate.call(this, x, y, z, args);
        };
        G__13972.cljs$lang$maxFixedArity = 3;
        G__13972.cljs$lang$applyTo = function(arglist__13973) {
          var x = cljs.core.first(arglist__13973);
          arglist__13973 = cljs.core.next(arglist__13973);
          var y = cljs.core.first(arglist__13973);
          arglist__13973 = cljs.core.next(arglist__13973);
          var z = cljs.core.first(arglist__13973);
          var args = cljs.core.rest(arglist__13973);
          return G__13972__delegate(x, y, z, args);
        };
        G__13972.cljs$core$IFn$_invoke$arity$variadic = G__13972__delegate;
        return G__13972;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__13974__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__13964_SHARP_) {
            return p1__13964_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__13965_SHARP_) {
            var or__10329__auto__ = p1__13965_SHARP_.call(null, x);
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return p1__13965_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__13966_SHARP_) {
            var or__10329__auto__ = p1__13966_SHARP_.call(null, x);
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              var or__10329__auto____$1 = p1__13966_SHARP_.call(null, y);
              if (cljs.core.truth_(or__10329__auto____$1)) {
                return or__10329__auto____$1;
              } else {
                return p1__13966_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__13975__delegate = function(x, y, z, args) {
            var or__10329__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__13967_SHARP_) {
                return cljs.core.some.call(null, p1__13967_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__13975 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__13975__delegate.call(this, x, y, z, args);
          };
          G__13975.cljs$lang$maxFixedArity = 3;
          G__13975.cljs$lang$applyTo = function(arglist__13976) {
            var x = cljs.core.first(arglist__13976);
            arglist__13976 = cljs.core.next(arglist__13976);
            var y = cljs.core.first(arglist__13976);
            arglist__13976 = cljs.core.next(arglist__13976);
            var z = cljs.core.first(arglist__13976);
            var args = cljs.core.rest(arglist__13976);
            return G__13975__delegate(x, y, z, args);
          };
          G__13975.cljs$core$IFn$_invoke$arity$variadic = G__13975__delegate;
          return G__13975;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__13974 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__13974__delegate.call(this, p1, p2, p3, ps);
    };
    G__13974.cljs$lang$maxFixedArity = 3;
    G__13974.cljs$lang$applyTo = function(arglist__13977) {
      var p1 = cljs.core.first(arglist__13977);
      arglist__13977 = cljs.core.next(arglist__13977);
      var p2 = cljs.core.first(arglist__13977);
      arglist__13977 = cljs.core.next(arglist__13977);
      var p3 = cljs.core.first(arglist__13977);
      var ps = cljs.core.rest(arglist__13977);
      return G__13974__delegate(p1, p2, p3, ps);
    };
    G__13974.cljs$core$IFn$_invoke$arity$variadic = G__13974__delegate;
    return G__13974;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11177__auto___13979 = size;
          var i_13980 = 0;
          while (true) {
            if (i_13980 < n__11177__auto___13979) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_13980)));
              var G__13981 = i_13980 + 1;
              i_13980 = G__13981;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__13982__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__13978_SHARP_) {
        return cljs.core.apply.call(null, f, p1__13978_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__13982 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__13982__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__13982.cljs$lang$maxFixedArity = 4;
    G__13982.cljs$lang$applyTo = function(arglist__13983) {
      var f = cljs.core.first(arglist__13983);
      arglist__13983 = cljs.core.next(arglist__13983);
      var c1 = cljs.core.first(arglist__13983);
      arglist__13983 = cljs.core.next(arglist__13983);
      var c2 = cljs.core.first(arglist__13983);
      arglist__13983 = cljs.core.next(arglist__13983);
      var c3 = cljs.core.first(arglist__13983);
      var colls = cljs.core.rest(arglist__13983);
      return G__13982__delegate(f, c1, c2, c3, colls);
    };
    G__13982.cljs$core$IFn$_invoke$arity$variadic = G__13982__delegate;
    return G__13982;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__13984 = n__$1 - 1;
        var G__13985 = cljs.core.rest.call(null, s);
        n__$1 = G__13984;
        coll__$1 = G__13985;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__13986 = cljs.core.next.call(null, s);
      var G__13987 = cljs.core.next.call(null, lead);
      s = G__13986;
      lead = G__13987;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__10317__auto__ = s;
        if (and__10317__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__10317__auto__;
        }
      }())) {
        var G__13988 = pred__$1;
        var G__13989 = cljs.core.rest.call(null, s);
        pred__$1 = G__13988;
        coll__$1 = G__13989;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__13990__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__13990 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13990__delegate.call(this, c1, c2, colls);
    };
    G__13990.cljs$lang$maxFixedArity = 2;
    G__13990.cljs$lang$applyTo = function(arglist__13991) {
      var c1 = cljs.core.first(arglist__13991);
      arglist__13991 = cljs.core.next(arglist__13991);
      var c2 = cljs.core.first(arglist__13991);
      var colls = cljs.core.rest(arglist__13991);
      return G__13990__delegate(c1, c2, colls);
    };
    G__13990.cljs$core$IFn$_invoke$arity$variadic = G__13990__delegate;
    return G__13990;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__13992__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__13992 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13992__delegate.call(this, f, coll, colls);
    };
    G__13992.cljs$lang$maxFixedArity = 2;
    G__13992.cljs$lang$applyTo = function(arglist__13993) {
      var f = cljs.core.first(arglist__13993);
      arglist__13993 = cljs.core.next(arglist__13993);
      var coll = cljs.core.first(arglist__13993);
      var colls = cljs.core.rest(arglist__13993);
      return G__13992__delegate(f, coll, colls);
    };
    G__13992.cljs$core$IFn$_invoke$arity$variadic = G__13992__delegate;
    return G__13992;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__11177__auto___13994 = size;
        var i_13995 = 0;
        while (true) {
          if (i_13995 < n__11177__auto___13994) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_13995)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_13995));
            } else {
            }
            var G__13996 = i_13995 + 1;
            i_13995 = G__13996;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__13997_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__13997_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__13999 = to;
      if (G__13999) {
        var bit__10972__auto__ = G__13999.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__10972__auto__ || G__13999.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__14000__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__14000 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__14000__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__14000.cljs$lang$maxFixedArity = 4;
    G__14000.cljs$lang$applyTo = function(arglist__14001) {
      var f = cljs.core.first(arglist__14001);
      arglist__14001 = cljs.core.next(arglist__14001);
      var c1 = cljs.core.first(arglist__14001);
      arglist__14001 = cljs.core.next(arglist__14001);
      var c2 = cljs.core.first(arglist__14001);
      arglist__14001 = cljs.core.next(arglist__14001);
      var c3 = cljs.core.first(arglist__14001);
      var colls = cljs.core.rest(arglist__14001);
      return G__14000__delegate(f, c1, c2, c3, colls);
    };
    G__14000.cljs$core$IFn$_invoke$arity$variadic = G__14000__delegate;
    return G__14000;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__14003 = m__$1;
          if (G__14003) {
            var bit__10979__auto__ = G__14003.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__10979__auto__ || G__14003.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__14003.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__14003);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__14003);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__14004 = sentinel;
            var G__14005 = m__$2;
            var G__14006 = cljs.core.next.call(null, ks__$1);
            sentinel = G__14004;
            m__$1 = G__14005;
            ks__$1 = G__14006;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__14007, v) {
  var vec__14009 = p__14007;
  var k = cljs.core.nth.call(null, vec__14009, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__14009, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__14010, f) {
    var vec__14020 = p__14010;
    var k = cljs.core.nth.call(null, vec__14020, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__14020, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__14011, f, a) {
    var vec__14021 = p__14011;
    var k = cljs.core.nth.call(null, vec__14021, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__14021, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__14012, f, a, b) {
    var vec__14022 = p__14012;
    var k = cljs.core.nth.call(null, vec__14022, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__14022, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__14013, f, a, b, c) {
    var vec__14023 = p__14013;
    var k = cljs.core.nth.call(null, vec__14023, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__14023, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__14025__delegate = function(m, p__14014, f, a, b, c, args) {
      var vec__14024 = p__14014;
      var k = cljs.core.nth.call(null, vec__14024, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__14024, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__14025 = function(m, p__14014, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__14025__delegate.call(this, m, p__14014, f, a, b, c, args);
    };
    G__14025.cljs$lang$maxFixedArity = 6;
    G__14025.cljs$lang$applyTo = function(arglist__14026) {
      var m = cljs.core.first(arglist__14026);
      arglist__14026 = cljs.core.next(arglist__14026);
      var p__14014 = cljs.core.first(arglist__14026);
      arglist__14026 = cljs.core.next(arglist__14026);
      var f = cljs.core.first(arglist__14026);
      arglist__14026 = cljs.core.next(arglist__14026);
      var a = cljs.core.first(arglist__14026);
      arglist__14026 = cljs.core.next(arglist__14026);
      var b = cljs.core.first(arglist__14026);
      arglist__14026 = cljs.core.next(arglist__14026);
      var c = cljs.core.first(arglist__14026);
      var args = cljs.core.rest(arglist__14026);
      return G__14025__delegate(m, p__14014, f, a, b, c, args);
    };
    G__14025.cljs$core$IFn$_invoke$arity$variadic = G__14025__delegate;
    return G__14025;
  }();
  update_in = function(m, p__14014, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__14014, f);
      case 4:
        return update_in__4.call(this, m, p__14014, f, a);
      case 5:
        return update_in__5.call(this, m, p__14014, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__14014, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__14014, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__10899__auto__, writer__10900__auto__, opts__10901__auto__) {
  return cljs.core._write.call(null, writer__10900__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__14027 = ll - 5;
      var G__14028 = r;
      ll = G__14027;
      ret = G__14028;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__14029 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__14030 = level - 5;
          node = G__14029;
          level = G__14030;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__14032 = null;
  var G__14032__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__14032__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__14032 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14032__2.call(this, self__, k);
      case 3:
        return G__14032__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14032;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args14031) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14031)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__14033 = j + 1;
              var G__14034 = init__$2;
              j = G__14033;
              init__$1 = G__14034;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__14035 = i + step_init[0];
        i = G__14035;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__11177__auto___14036 = len;
    var i_14037 = 0;
    while (true) {
      if (i_14037 < n__11177__auto___14036) {
        new_tail[i_14037] = self__.tail[i_14037];
        var G__14038 = i_14037 + 1;
        i_14037 = G__14038;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__14039 = i + 1;
        var G__14040 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__14039;
        out = G__14040;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__14041) {
    var args = cljs.core.seq(arglist__14041);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.call = function() {
  var G__14043 = null;
  var G__14043__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__14043__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__14043 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14043__2.call(this, self__, k);
      case 3:
        return G__14043__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14043;
}();
cljs.core.Subvec.prototype.apply = function(self__, args14042) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14042)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__10636__auto__ = self__.end;
    var y__10637__auto__ = v_pos + 1;
    return x__10636__auto__ > y__10637__auto__ ? x__10636__auto__ : y__10637__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__14044 = meta;
      var G__14045 = v.v;
      var G__14046 = v.start + start;
      var G__14047 = v.start + end;
      var G__14048 = __hash;
      meta = G__14044;
      v = G__14045;
      start = G__14046;
      end = G__14047;
      __hash = G__14048;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj14052 = {};
    return obj14052;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__14053 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__14054 = level - 5;
          node = G__14053;
          level = G__14054;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__14056 = null;
  var G__14056__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14056__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14056 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14056__2.call(this, self__, k);
      case 3:
        return G__14056__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14056;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args14055) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14055)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__10329__auto__ = self__.rear;
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__10329__auto__ = self__.front;
    if (cljs.core.truth_(or__10329__auto__)) {
      return or__10329__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__14057 = i + incr;
        i = G__14057;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__14058 = i + 1;
      var G__14059 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__14058;
      out = G__14059;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj14063 = {};
    return obj14063;
  }();
  var l = ks.length;
  var i_14064 = 0;
  while (true) {
    if (i_14064 < l) {
      var k_14065 = ks[i_14064];
      new_obj[k_14065] = obj[k_14065];
      var G__14066 = i_14064 + 1;
      i_14064 = G__14066;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__14069 = null;
  var G__14069__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14069__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14069 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14069__2.call(this, self__, k);
      case 3:
        return G__14069__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14069;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args14068) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14068)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__14070 = cljs.core.rest.call(null, keys__$1);
        var G__14071 = init__$2;
        keys__$1 = G__14070;
        init__$1 = G__14071;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__14067_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__14067_SHARP_, self__.strobj[p1__14067_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj14073 = {};
  return obj14073;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__14074 = i + 2;
          i = G__14074;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__14075 = i + 2;
          i = G__14075;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__14076 = i + 2;
          i = G__14076;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__14077 = i + 2;
          i = G__14077;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__14078 = i + 2;
          i = G__14078;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_14079 = 0;
  while (true) {
    if (i_14079 < l) {
      narr[i_14079] = arr[i_14079];
      var G__14080 = i_14079 + 1;
      i_14079 = G__14080;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj14083 = {};
    return obj14083;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__14084 = cljs.core.aclone.call(null, self__.arr);
          G__14084[idx + 1] = v;
          return G__14084;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__14085 = null;
  var G__14085__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14085__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14085 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14085__2.call(this, self__, k);
      case 3:
        return G__14085__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14085;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args14081) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14081)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__14086 = i + 2;
        var G__14087 = init__$2;
        i = G__14086;
        init__$1 = G__14087;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__14088 = s + 2;
            var G__14089 = d;
            s = G__14088;
            d = G__14089;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__14090 = s + 2;
              var G__14091 = d + 2;
              s = G__14090;
              d = G__14091;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__14092 = i + 2;
        var G__14093 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__14092;
        ret = G__14093;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__14094_14096 = self__.arr;
      G__14094_14096.pop();
      G__14094_14096.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__14095 = o;
      if (G__14095) {
        var bit__10979__auto__ = G__14095.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__10979__auto__ || G__14095.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__14095.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__14095);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__14095);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__14097 = cljs.core.next.call(null, es);
          var G__14098 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__14097;
          tcoll__$2 = G__14098;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__14099 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__14100 = i + 2;
      out = G__14099;
      i = G__14100;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__10899__auto__, writer__10900__auto__, opts__10901__auto__) {
  return cljs.core._write.call(null, writer__10900__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__14103 = cljs.core.aclone.call(null, arr);
    G__14103[i] = a;
    return G__14103;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__14104 = cljs.core.aclone.call(null, arr);
    G__14104[i] = a;
    G__14104[j] = b;
    return G__14104;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__14105 = i + 2;
        var G__14106 = init__$2;
        i = G__14105;
        init__$1 = G__14106;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_14107 = 0;
        var j_14108 = 0;
        while (true) {
          if (i_14107 < 32) {
            if ((self__.bitmap >>> i_14107 & 1) === 0) {
              var G__14109 = i_14107 + 1;
              var G__14110 = j_14108;
              i_14107 = G__14109;
              j_14108 = G__14110;
              continue;
            } else {
              nodes[i_14107] = !(self__.arr[j_14108] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_14108]), self__.arr[j_14108], self__.arr[j_14108 + 1], added_leaf_QMARK_) : self__.arr[j_14108 + 1];
              var G__14111 = i_14107 + 1;
              var G__14112 = j_14108 + 2;
              i_14107 = G__14111;
              j_14108 = G__14112;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_14113 = 0;
      var j_14114 = 0;
      while (true) {
        if (i_14113 < 32) {
          if ((self__.bitmap >>> i_14113 & 1) === 0) {
            var G__14115 = i_14113 + 1;
            var G__14116 = j_14114;
            i_14113 = G__14115;
            j_14114 = G__14116;
            continue;
          } else {
            nodes[i_14113] = !(self__.arr[j_14114] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_14114]), self__.arr[j_14114], self__.arr[j_14114 + 1], added_leaf_QMARK_) : self__.arr[j_14114 + 1];
            var G__14117 = i_14113 + 1;
            var G__14118 = j_14114 + 2;
            i_14113 = G__14117;
            j_14114 = G__14118;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__14119 = i + 1;
        var G__14120 = j + 2;
        var G__14121 = bitmap | 1 << i;
        i = G__14119;
        j = G__14120;
        bitmap = G__14121;
        continue;
      } else {
        var G__14122 = i + 1;
        var G__14123 = j;
        var G__14124 = bitmap;
        i = G__14122;
        j = G__14123;
        bitmap = G__14124;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__14125 = i + 1;
          var G__14126 = init__$2;
          i = G__14125;
          init__$1 = G__14126;
          continue;
        }
      } else {
        var G__14127 = i + 1;
        var G__14128 = init__$1;
        i = G__14127;
        init__$1 = G__14128;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__14129 = i + 2;
        i = G__14129;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__14130 = j + 2;
                j = G__14130;
                continue;
              }
            } else {
              var G__14131 = j + 2;
              j = G__14131;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__14132 = j + 1;
              j = G__14132;
              continue;
            }
          } else {
            var G__14133 = j + 1;
            j = G__14133;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj14136 = {};
    return obj14136;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__14137 = null;
  var G__14137__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14137__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14137 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14137__2.call(this, self__, k);
      case 3:
        return G__14137__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14137;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args14134) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14134)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__14138 = i + 1;
      var G__14139 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__14138;
      out = G__14139;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__14140 = o;
      if (G__14140) {
        var bit__10979__auto__ = G__14140.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__10979__auto__ || G__14140.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__14140.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__14140);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__14140);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__14141 = cljs.core.next.call(null, es);
          var G__14142 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__14141;
          tcoll__$1 = G__14142;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__14143 = ascending_QMARK_ ? t.left : t.right;
      var G__14144 = cljs.core.conj.call(null, stack__$1, t);
      t = G__14143;
      stack__$1 = G__14144;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__14146 = null;
  var G__14146__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14146__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14146 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14146__2.call(this, self__, k);
      case 3:
        return G__14146__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14146;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args14145) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14145)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__14148 = null;
  var G__14148__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14148__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14148 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14148__2.call(this, self__, k);
      case 3:
        return G__14148__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14148;
}();
cljs.core.RedNode.prototype.apply = function(self__, args14147) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14147)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__14150 = null;
  var G__14150__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14150__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14150 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14150__2.call(this, self__, k);
      case 3:
        return G__14150__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14150;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args14149) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14149)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__14151 = t.left;
          t = G__14151;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__14152 = t.right;
            t = G__14152;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__14153 = cljs.core.conj.call(null, stack, t);
              var G__14154 = t.left;
              stack = G__14153;
              t = G__14154;
              continue;
            } else {
              var G__14155 = stack;
              var G__14156 = t.right;
              stack = G__14155;
              t = G__14156;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__14157 = cljs.core.conj.call(null, stack, t);
                var G__14158 = t.right;
                stack = G__14157;
                t = G__14158;
                continue;
              } else {
                var G__14159 = stack;
                var G__14160 = t.left;
                stack = G__14159;
                t = G__14160;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__14161 = cljs.core.nnext.call(null, in$);
        var G__14162 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__14161;
        out = G__14162;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__14163) {
    var keyvals = cljs.core.seq(arglist__14163);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__14164) {
    var keyvals = cljs.core.seq(arglist__14164);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj14168 = {};
      return obj14168;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__14169 = cljs.core.nnext.call(null, kvs);
        kvs = G__14169;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__14170) {
    var keyvals = cljs.core.seq(arglist__14170);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__14171 = cljs.core.nnext.call(null, in$);
        var G__14172 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__14171;
        out = G__14172;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__14173) {
    var keyvals = cljs.core.seq(arglist__14173);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__14174 = cljs.core.nnext.call(null, in$);
        var G__14175 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__14174;
        out = G__14175;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__14176) {
    var comparator = cljs.core.first(arglist__14176);
    var keyvals = cljs.core.rest(arglist__14176);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__14177 = self__.mseq;
    if (G__14177) {
      var bit__10979__auto__ = G__14177.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10979__auto__ || G__14177.cljs$core$INext$) {
        return true;
      } else {
        if (!G__14177.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14177);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14177);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__14178 = self__.mseq;
    if (G__14178) {
      var bit__10979__auto__ = G__14178.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10979__auto__ || G__14178.cljs$core$INext$) {
        return true;
      } else {
        if (!G__14178.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14178);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14178);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__14179 = self__.mseq;
    if (G__14179) {
      var bit__10979__auto__ = G__14179.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10979__auto__ || G__14179.cljs$core$INext$) {
        return true;
      } else {
        if (!G__14179.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14179);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14179);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__14180 = self__.mseq;
    if (G__14180) {
      var bit__10979__auto__ = G__14180.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10979__auto__ || G__14180.cljs$core$INext$) {
        return true;
      } else {
        if (!G__14180.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14180);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__14180);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__14181_SHARP_, p2__14182_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__10329__auto__ = p1__14181_SHARP_;
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__14182_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__14183) {
    var maps = cljs.core.seq(arglist__14183);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__10329__auto__ = m1;
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__14184) {
    var f = cljs.core.first(arglist__14184);
    var maps = cljs.core.rest(arglist__14184);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__14185 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__14186 = cljs.core.next.call(null, keys);
      ret = G__14185;
      keys = G__14186;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__14189 = null;
  var G__14189__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14189__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14189 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14189__2.call(this, self__, k);
      case 3:
        return G__14189__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14189;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args14188) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14188)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__14187_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__14187_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__14190 = i + 1;
        var G__14191 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__14190;
        out = G__14191;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__14192 = i + 1;
        var G__14193 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__14192;
        out = G__14193;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__14195 = null;
  var G__14195__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__14195__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__14195 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14195__2.call(this, self__, k);
      case 3:
        return G__14195__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14195;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args14194) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14194)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__14198 = null;
  var G__14198__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__14198__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__14198 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14198__2.call(this, self__, k);
      case 3:
        return G__14198__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__14198;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args14197) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14197)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__14196_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__14196_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__11171__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__11171__auto__.length) {
        var G__14199 = i + 1;
        var G__14200 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__14199;
        res = G__14200;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__14201 = cljs.core._next.call(null, in$__$1);
            var G__14202 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__14201;
            out = G__14202;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__14203__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__14203 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__14203__delegate.call(this, keys);
    };
    G__14203.cljs$lang$maxFixedArity = 0;
    G__14203.cljs$lang$applyTo = function(arglist__14204) {
      var keys = cljs.core.seq(arglist__14204);
      return G__14203__delegate(keys);
    };
    G__14203.cljs$core$IFn$_invoke$arity$variadic = G__14203__delegate;
    return G__14203;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__14205) {
    var keys = cljs.core.seq(arglist__14205);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__14206) {
    var comparator = cljs.core.first(arglist__14206);
    var keys = cljs.core.rest(arglist__14206);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__14207_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__14207_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__14207_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__14214, seen__$1) {
        while (true) {
          var vec__14215 = p__14214;
          var f = cljs.core.nth.call(null, vec__14215, 0, null);
          var xs__$1 = vec__14215;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__14216 = cljs.core.rest.call(null, s);
              var G__14217 = seen__$1;
              p__14214 = G__14216;
              seen__$1 = G__14217;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__14218 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__14219 = cljs.core.next.call(null, s__$1);
      ret = G__14218;
      s__$1 = G__14219;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__14221 = x;
    if (G__14221) {
      var bit__10972__auto__ = G__14221.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__10972__auto__ || G__14221.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__14222 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__14223 = cljs.core.next.call(null, ks);
      var G__14224 = cljs.core.next.call(null, vs);
      map = G__14222;
      ks = G__14223;
      vs = G__14224;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__14227__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__14225_SHARP_, p2__14226_SHARP_) {
        return max_key.call(null, k, p1__14225_SHARP_, p2__14226_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__14227 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14227__delegate.call(this, k, x, y, more);
    };
    G__14227.cljs$lang$maxFixedArity = 3;
    G__14227.cljs$lang$applyTo = function(arglist__14228) {
      var k = cljs.core.first(arglist__14228);
      arglist__14228 = cljs.core.next(arglist__14228);
      var x = cljs.core.first(arglist__14228);
      arglist__14228 = cljs.core.next(arglist__14228);
      var y = cljs.core.first(arglist__14228);
      var more = cljs.core.rest(arglist__14228);
      return G__14227__delegate(k, x, y, more);
    };
    G__14227.cljs$core$IFn$_invoke$arity$variadic = G__14227__delegate;
    return G__14227;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__14231__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__14229_SHARP_, p2__14230_SHARP_) {
        return min_key.call(null, k, p1__14229_SHARP_, p2__14230_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__14231 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14231__delegate.call(this, k, x, y, more);
    };
    G__14231.cljs$lang$maxFixedArity = 3;
    G__14231.cljs$lang$applyTo = function(arglist__14232) {
      var k = cljs.core.first(arglist__14232);
      arglist__14232 = cljs.core.next(arglist__14232);
      var x = cljs.core.first(arglist__14232);
      arglist__14232 = cljs.core.next(arglist__14232);
      var y = cljs.core.first(arglist__14232);
      var more = cljs.core.rest(arglist__14232);
      return G__14231__delegate(k, x, y, more);
    };
    G__14231.cljs$core$IFn$_invoke$arity$variadic = G__14231__delegate;
    return G__14231;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__14235 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__14235, 0, null);
        var s = vec__14235;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__14236 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__14236, 0, null);
      var s = vec__14236;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__14239 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__14239, 0, null);
        var s = vec__14239;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__14240 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__14240, 0, null);
      var s = vec__14240;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__14241_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__14241_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__14252 = null;
      var G__14252__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__14252__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__14252__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__14252__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__14252__4 = function() {
        var G__14253__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__14253 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__14253__delegate.call(this, x, y, z, args);
        };
        G__14253.cljs$lang$maxFixedArity = 3;
        G__14253.cljs$lang$applyTo = function(arglist__14254) {
          var x = cljs.core.first(arglist__14254);
          arglist__14254 = cljs.core.next(arglist__14254);
          var y = cljs.core.first(arglist__14254);
          arglist__14254 = cljs.core.next(arglist__14254);
          var z = cljs.core.first(arglist__14254);
          var args = cljs.core.rest(arglist__14254);
          return G__14253__delegate(x, y, z, args);
        };
        G__14253.cljs$core$IFn$_invoke$arity$variadic = G__14253__delegate;
        return G__14253;
      }();
      G__14252 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14252__0.call(this);
          case 1:
            return G__14252__1.call(this, x);
          case 2:
            return G__14252__2.call(this, x, y);
          case 3:
            return G__14252__3.call(this, x, y, z);
          default:
            return G__14252__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14252.cljs$lang$maxFixedArity = 3;
      G__14252.cljs$lang$applyTo = G__14252__4.cljs$lang$applyTo;
      return G__14252;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__14255 = null;
      var G__14255__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__14255__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__14255__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__14255__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__14255__4 = function() {
        var G__14256__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__14256 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__14256__delegate.call(this, x, y, z, args);
        };
        G__14256.cljs$lang$maxFixedArity = 3;
        G__14256.cljs$lang$applyTo = function(arglist__14257) {
          var x = cljs.core.first(arglist__14257);
          arglist__14257 = cljs.core.next(arglist__14257);
          var y = cljs.core.first(arglist__14257);
          arglist__14257 = cljs.core.next(arglist__14257);
          var z = cljs.core.first(arglist__14257);
          var args = cljs.core.rest(arglist__14257);
          return G__14256__delegate(x, y, z, args);
        };
        G__14256.cljs$core$IFn$_invoke$arity$variadic = G__14256__delegate;
        return G__14256;
      }();
      G__14255 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14255__0.call(this);
          case 1:
            return G__14255__1.call(this, x);
          case 2:
            return G__14255__2.call(this, x, y);
          case 3:
            return G__14255__3.call(this, x, y, z);
          default:
            return G__14255__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14255.cljs$lang$maxFixedArity = 3;
      G__14255.cljs$lang$applyTo = G__14255__4.cljs$lang$applyTo;
      return G__14255;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__14258 = null;
      var G__14258__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__14258__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__14258__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__14258__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__14258__4 = function() {
        var G__14259__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__14259 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__14259__delegate.call(this, x, y, z, args);
        };
        G__14259.cljs$lang$maxFixedArity = 3;
        G__14259.cljs$lang$applyTo = function(arglist__14260) {
          var x = cljs.core.first(arglist__14260);
          arglist__14260 = cljs.core.next(arglist__14260);
          var y = cljs.core.first(arglist__14260);
          arglist__14260 = cljs.core.next(arglist__14260);
          var z = cljs.core.first(arglist__14260);
          var args = cljs.core.rest(arglist__14260);
          return G__14259__delegate(x, y, z, args);
        };
        G__14259.cljs$core$IFn$_invoke$arity$variadic = G__14259__delegate;
        return G__14259;
      }();
      G__14258 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__14258__0.call(this);
          case 1:
            return G__14258__1.call(this, x);
          case 2:
            return G__14258__2.call(this, x, y);
          case 3:
            return G__14258__3.call(this, x, y, z);
          default:
            return G__14258__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__14258.cljs$lang$maxFixedArity = 3;
      G__14258.cljs$lang$applyTo = G__14258__4.cljs$lang$applyTo;
      return G__14258;
    }();
  };
  var juxt__4 = function() {
    var G__14261__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__14262 = null;
        var G__14262__0 = function() {
          return cljs.core.reduce.call(null, function(p1__14242_SHARP_, p2__14243_SHARP_) {
            return cljs.core.conj.call(null, p1__14242_SHARP_, p2__14243_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__14262__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__14244_SHARP_, p2__14245_SHARP_) {
            return cljs.core.conj.call(null, p1__14244_SHARP_, p2__14245_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__14262__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__14246_SHARP_, p2__14247_SHARP_) {
            return cljs.core.conj.call(null, p1__14246_SHARP_, p2__14247_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__14262__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__14248_SHARP_, p2__14249_SHARP_) {
            return cljs.core.conj.call(null, p1__14248_SHARP_, p2__14249_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__14262__4 = function() {
          var G__14263__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__14250_SHARP_, p2__14251_SHARP_) {
              return cljs.core.conj.call(null, p1__14250_SHARP_, cljs.core.apply.call(null, p2__14251_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__14263 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__14263__delegate.call(this, x, y, z, args);
          };
          G__14263.cljs$lang$maxFixedArity = 3;
          G__14263.cljs$lang$applyTo = function(arglist__14264) {
            var x = cljs.core.first(arglist__14264);
            arglist__14264 = cljs.core.next(arglist__14264);
            var y = cljs.core.first(arglist__14264);
            arglist__14264 = cljs.core.next(arglist__14264);
            var z = cljs.core.first(arglist__14264);
            var args = cljs.core.rest(arglist__14264);
            return G__14263__delegate(x, y, z, args);
          };
          G__14263.cljs$core$IFn$_invoke$arity$variadic = G__14263__delegate;
          return G__14263;
        }();
        G__14262 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__14262__0.call(this);
            case 1:
              return G__14262__1.call(this, x);
            case 2:
              return G__14262__2.call(this, x, y);
            case 3:
              return G__14262__3.call(this, x, y, z);
            default:
              return G__14262__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14262.cljs$lang$maxFixedArity = 3;
        G__14262.cljs$lang$applyTo = G__14262__4.cljs$lang$applyTo;
        return G__14262;
      }();
    };
    var G__14261 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__14261__delegate.call(this, f, g, h, fs);
    };
    G__14261.cljs$lang$maxFixedArity = 3;
    G__14261.cljs$lang$applyTo = function(arglist__14265) {
      var f = cljs.core.first(arglist__14265);
      arglist__14265 = cljs.core.next(arglist__14265);
      var g = cljs.core.first(arglist__14265);
      arglist__14265 = cljs.core.next(arglist__14265);
      var h = cljs.core.first(arglist__14265);
      var fs = cljs.core.rest(arglist__14265);
      return G__14261__delegate(f, g, h, fs);
    };
    G__14261.cljs$core$IFn$_invoke$arity$variadic = G__14261__delegate;
    return G__14261;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__14266 = cljs.core.next.call(null, coll);
        coll = G__14266;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__14267 = n - 1;
        var G__14268 = cljs.core.next.call(null, coll);
        n = G__14267;
        coll = G__14268;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__14270 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__14270, 0, null);
  var flags = cljs.core.nth.call(null, vec__14270, 1, null);
  var pattern = cljs.core.nth.call(null, vec__14270, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_14272 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_14273__$1 = cljs.core.next.call(null, coll);
      var n_14274 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_14273__$1 && (n_14274 == null || !(n_14274 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_14273__$1), writer, opts);
          var G__14275 = cljs.core.next.call(null, coll_14273__$1);
          var G__14276 = n_14274 - 1;
          coll_14273__$1 = G__14275;
          n_14274 = G__14276;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_14272;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__14281 = cljs.core.seq.call(null, ss);
    var chunk__14282 = null;
    var count__14283 = 0;
    var i__14284 = 0;
    while (true) {
      if (i__14284 < count__14283) {
        var s = cljs.core._nth.call(null, chunk__14282, i__14284);
        cljs.core._write.call(null, writer, s);
        var G__14285 = seq__14281;
        var G__14286 = chunk__14282;
        var G__14287 = count__14283;
        var G__14288 = i__14284 + 1;
        seq__14281 = G__14285;
        chunk__14282 = G__14286;
        count__14283 = G__14287;
        i__14284 = G__14288;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__14281);
        if (temp__4092__auto__) {
          var seq__14281__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14281__$1)) {
            var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__14281__$1);
            var G__14289 = cljs.core.chunk_rest.call(null, seq__14281__$1);
            var G__14290 = c__11077__auto__;
            var G__14291 = cljs.core.count.call(null, c__11077__auto__);
            var G__14292 = 0;
            seq__14281 = G__14289;
            chunk__14282 = G__14290;
            count__14283 = G__14291;
            i__14284 = G__14292;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__14281__$1);
            cljs.core._write.call(null, writer, s);
            var G__14293 = cljs.core.next.call(null, seq__14281__$1);
            var G__14294 = null;
            var G__14295 = 0;
            var G__14296 = 0;
            seq__14281 = G__14293;
            chunk__14282 = G__14294;
            count__14283 = G__14295;
            i__14284 = G__14296;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__14297) {
    var writer = cljs.core.first(arglist__14297);
    var ss = cljs.core.rest(arglist__14297);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj14299 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj14299;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__10317__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__10317__auto__)) {
            var and__10317__auto____$1 = function() {
              var G__14305 = obj;
              if (G__14305) {
                var bit__10979__auto__ = G__14305.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__10979__auto__ || G__14305.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__14305.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__14305);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__14305);
              }
            }();
            if (and__10317__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__10317__auto____$1;
            }
          } else {
            return and__10317__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__14306 = obj;
              if (G__14306) {
                var bit__10972__auto__ = G__14306.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__10972__auto__ || G__14306.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__14308 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__14308;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__14307 = obj;
                              if (G__14307) {
                                var bit__10979__auto__ = G__14307.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__10979__auto__ || G__14307.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__14307.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__14307);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__14307);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__14313 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__14314 = null;
  var count__14315 = 0;
  var i__14316 = 0;
  while (true) {
    if (i__14316 < count__14315) {
      var obj = cljs.core._nth.call(null, chunk__14314, i__14316);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__14317 = seq__14313;
      var G__14318 = chunk__14314;
      var G__14319 = count__14315;
      var G__14320 = i__14316 + 1;
      seq__14313 = G__14317;
      chunk__14314 = G__14318;
      count__14315 = G__14319;
      i__14316 = G__14320;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__14313);
      if (temp__4092__auto__) {
        var seq__14313__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14313__$1)) {
          var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__14313__$1);
          var G__14321 = cljs.core.chunk_rest.call(null, seq__14313__$1);
          var G__14322 = c__11077__auto__;
          var G__14323 = cljs.core.count.call(null, c__11077__auto__);
          var G__14324 = 0;
          seq__14313 = G__14321;
          chunk__14314 = G__14322;
          count__14315 = G__14323;
          i__14316 = G__14324;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__14313__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__14325 = cljs.core.next.call(null, seq__14313__$1);
          var G__14326 = null;
          var G__14327 = 0;
          var G__14328 = 0;
          seq__14313 = G__14325;
          chunk__14314 = G__14326;
          count__14315 = G__14327;
          i__14316 = G__14328;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__14329) {
    var objs = cljs.core.seq(arglist__14329);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__14330) {
    var objs = cljs.core.seq(arglist__14330);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__14331) {
    var objs = cljs.core.seq(arglist__14331);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__14332) {
    var objs = cljs.core.seq(arglist__14332);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__14333) {
    var objs = cljs.core.seq(arglist__14333);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__14334) {
    var objs = cljs.core.seq(arglist__14334);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__14335) {
    var objs = cljs.core.seq(arglist__14335);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__14336) {
    var objs = cljs.core.seq(arglist__14336);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj14338 = {};
  return obj14338;
}();
cljs.core.IReset = function() {
  var obj14340 = {};
  return obj14340;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__10317__auto__ = o;
    if (and__10317__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__10956__auto__ = o == null ? null : o;
    return function() {
      var or__10329__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj14342 = {};
  return obj14342;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__10317__auto__ = o;
      if (and__10317__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__10317__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__10956__auto__ = o == null ? null : o;
      return function() {
        var or__10329__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10956__auto__)];
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          var or__10329__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10329__auto____$1) {
            return or__10329__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__14343 = cljs.core.seq.call(null, self__.watches);
  var chunk__14344 = null;
  var count__14345 = 0;
  var i__14346 = 0;
  while (true) {
    if (i__14346 < count__14345) {
      var vec__14347 = cljs.core._nth.call(null, chunk__14344, i__14346);
      var key = cljs.core.nth.call(null, vec__14347, 0, null);
      var f = cljs.core.nth.call(null, vec__14347, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__14349 = seq__14343;
      var G__14350 = chunk__14344;
      var G__14351 = count__14345;
      var G__14352 = i__14346 + 1;
      seq__14343 = G__14349;
      chunk__14344 = G__14350;
      count__14345 = G__14351;
      i__14346 = G__14352;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__14343);
      if (temp__4092__auto__) {
        var seq__14343__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14343__$1)) {
          var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__14343__$1);
          var G__14353 = cljs.core.chunk_rest.call(null, seq__14343__$1);
          var G__14354 = c__11077__auto__;
          var G__14355 = cljs.core.count.call(null, c__11077__auto__);
          var G__14356 = 0;
          seq__14343 = G__14353;
          chunk__14344 = G__14354;
          count__14345 = G__14355;
          i__14346 = G__14356;
          continue;
        } else {
          var vec__14348 = cljs.core.first.call(null, seq__14343__$1);
          var key = cljs.core.nth.call(null, vec__14348, 0, null);
          var f = cljs.core.nth.call(null, vec__14348, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__14357 = cljs.core.next.call(null, seq__14343__$1);
          var G__14358 = null;
          var G__14359 = 0;
          var G__14360 = 0;
          seq__14343 = G__14357;
          chunk__14344 = G__14358;
          count__14345 = G__14359;
          i__14346 = G__14360;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__14364__delegate = function(x, p__14361) {
      var map__14363 = p__14361;
      var map__14363__$1 = cljs.core.seq_QMARK_.call(null, map__14363) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14363) : map__14363;
      var validator = cljs.core.get.call(null, map__14363__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__14363__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__14364 = function(x, var_args) {
      var p__14361 = null;
      if (arguments.length > 1) {
        p__14361 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__14364__delegate.call(this, x, p__14361);
    };
    G__14364.cljs$lang$maxFixedArity = 1;
    G__14364.cljs$lang$applyTo = function(arglist__14365) {
      var x = cljs.core.first(arglist__14365);
      var p__14361 = cljs.core.rest(arglist__14365);
      return G__14364__delegate(x, p__14361);
    };
    G__14364.cljs$core$IFn$_invoke$arity$variadic = G__14364__delegate;
    return G__14364;
  }();
  atom = function(x, var_args) {
    var p__14361 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__14366__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__14366 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__14366__delegate.call(this, a, f, x, y, more);
    };
    G__14366.cljs$lang$maxFixedArity = 4;
    G__14366.cljs$lang$applyTo = function(arglist__14367) {
      var a = cljs.core.first(arglist__14367);
      arglist__14367 = cljs.core.next(arglist__14367);
      var f = cljs.core.first(arglist__14367);
      arglist__14367 = cljs.core.next(arglist__14367);
      var x = cljs.core.first(arglist__14367);
      arglist__14367 = cljs.core.next(arglist__14367);
      var y = cljs.core.first(arglist__14367);
      var more = cljs.core.rest(arglist__14367);
      return G__14366__delegate(a, f, x, y, more);
    };
    G__14366.cljs$core$IFn$_invoke$arity$variadic = G__14366__delegate;
    return G__14366;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__14368) {
    var iref = cljs.core.first(arglist__14368);
    arglist__14368 = cljs.core.next(arglist__14368);
    var f = cljs.core.first(arglist__14368);
    var args = cljs.core.rest(arglist__14368);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__14369) {
    var map__14370 = p__14369;
    var map__14370__$1 = cljs.core.seq_QMARK_.call(null, map__14370) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14370) : map__14370;
    var curr_state = map__14370__$1;
    var done = cljs.core.get.call(null, map__14370__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj14372 = {};
  return obj14372;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._key__GT_js[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__14374 = k;
    if (G__14374) {
      var bit__10979__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__10329__auto__ = bit__10979__auto__;
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return G__14374.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__14374.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__14374);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__14374);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__14388 = x;
      if (G__14388) {
        var bit__10979__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__10329__auto__ = bit__10979__auto__;
          if (cljs.core.truth_(or__10329__auto__)) {
            return or__10329__auto__;
          } else {
            return G__14388.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__14388.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__14388);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__14388);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj14390 = {};
              return obj14390;
            }();
            var seq__14391_14401 = cljs.core.seq.call(null, x);
            var chunk__14392_14402 = null;
            var count__14393_14403 = 0;
            var i__14394_14404 = 0;
            while (true) {
              if (i__14394_14404 < count__14393_14403) {
                var vec__14395_14405 = cljs.core._nth.call(null, chunk__14392_14402, i__14394_14404);
                var k_14406 = cljs.core.nth.call(null, vec__14395_14405, 0, null);
                var v_14407 = cljs.core.nth.call(null, vec__14395_14405, 1, null);
                m[cljs.core.key__GT_js.call(null, k_14406)] = clj__GT_js.call(null, v_14407);
                var G__14408 = seq__14391_14401;
                var G__14409 = chunk__14392_14402;
                var G__14410 = count__14393_14403;
                var G__14411 = i__14394_14404 + 1;
                seq__14391_14401 = G__14408;
                chunk__14392_14402 = G__14409;
                count__14393_14403 = G__14410;
                i__14394_14404 = G__14411;
                continue;
              } else {
                var temp__4092__auto___14412 = cljs.core.seq.call(null, seq__14391_14401);
                if (temp__4092__auto___14412) {
                  var seq__14391_14413__$1 = temp__4092__auto___14412;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__14391_14413__$1)) {
                    var c__11077__auto___14414 = cljs.core.chunk_first.call(null, seq__14391_14413__$1);
                    var G__14415 = cljs.core.chunk_rest.call(null, seq__14391_14413__$1);
                    var G__14416 = c__11077__auto___14414;
                    var G__14417 = cljs.core.count.call(null, c__11077__auto___14414);
                    var G__14418 = 0;
                    seq__14391_14401 = G__14415;
                    chunk__14392_14402 = G__14416;
                    count__14393_14403 = G__14417;
                    i__14394_14404 = G__14418;
                    continue;
                  } else {
                    var vec__14396_14419 = cljs.core.first.call(null, seq__14391_14413__$1);
                    var k_14420 = cljs.core.nth.call(null, vec__14396_14419, 0, null);
                    var v_14421 = cljs.core.nth.call(null, vec__14396_14419, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_14420)] = clj__GT_js.call(null, v_14421);
                    var G__14422 = cljs.core.next.call(null, seq__14391_14413__$1);
                    var G__14423 = null;
                    var G__14424 = 0;
                    var G__14425 = 0;
                    seq__14391_14401 = G__14422;
                    chunk__14392_14402 = G__14423;
                    count__14393_14403 = G__14424;
                    i__14394_14404 = G__14425;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__14397_14426 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__14398_14427 = null;
              var count__14399_14428 = 0;
              var i__14400_14429 = 0;
              while (true) {
                if (i__14400_14429 < count__14399_14428) {
                  var x_14430__$1 = cljs.core._nth.call(null, chunk__14398_14427, i__14400_14429);
                  arr.push(x_14430__$1);
                  var G__14431 = seq__14397_14426;
                  var G__14432 = chunk__14398_14427;
                  var G__14433 = count__14399_14428;
                  var G__14434 = i__14400_14429 + 1;
                  seq__14397_14426 = G__14431;
                  chunk__14398_14427 = G__14432;
                  count__14399_14428 = G__14433;
                  i__14400_14429 = G__14434;
                  continue;
                } else {
                  var temp__4092__auto___14435 = cljs.core.seq.call(null, seq__14397_14426);
                  if (temp__4092__auto___14435) {
                    var seq__14397_14436__$1 = temp__4092__auto___14435;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__14397_14436__$1)) {
                      var c__11077__auto___14437 = cljs.core.chunk_first.call(null, seq__14397_14436__$1);
                      var G__14438 = cljs.core.chunk_rest.call(null, seq__14397_14436__$1);
                      var G__14439 = c__11077__auto___14437;
                      var G__14440 = cljs.core.count.call(null, c__11077__auto___14437);
                      var G__14441 = 0;
                      seq__14397_14426 = G__14438;
                      chunk__14398_14427 = G__14439;
                      count__14399_14428 = G__14440;
                      i__14400_14429 = G__14441;
                      continue;
                    } else {
                      var x_14442__$1 = cljs.core.first.call(null, seq__14397_14436__$1);
                      arr.push(x_14442__$1);
                      var G__14443 = cljs.core.next.call(null, seq__14397_14436__$1);
                      var G__14444 = null;
                      var G__14445 = 0;
                      var G__14446 = 0;
                      seq__14397_14426 = G__14443;
                      chunk__14398_14427 = G__14444;
                      count__14399_14428 = G__14445;
                      i__14400_14429 = G__14446;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj14448 = {};
  return obj14448;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__10317__auto__ = x;
    if (and__10317__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__10956__auto__ = x == null ? null : x;
    return function() {
      var or__10329__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__14469__delegate = function(x, opts) {
      if (function() {
        var G__14459 = x;
        if (G__14459) {
          var bit__10979__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__10329__auto__ = bit__10979__auto__;
            if (cljs.core.truth_(or__10329__auto__)) {
              return or__10329__auto__;
            } else {
              return G__14459.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__14459.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__14459);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__14459);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__14460 = opts;
          var map__14460__$1 = cljs.core.seq_QMARK_.call(null, map__14460) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14460) : map__14460;
          var keywordize_keys = cljs.core.get.call(null, map__14460__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__14460, map__14460__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__11046__auto__ = function(map__14460, map__14460__$1, keywordize_keys, keyfn) {
                          return function iter__14465(s__14466) {
                            return new cljs.core.LazySeq(null, function(map__14460, map__14460__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__14466__$1 = s__14466;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__14466__$1);
                                  if (temp__4092__auto__) {
                                    var s__14466__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__14466__$2)) {
                                      var c__11044__auto__ = cljs.core.chunk_first.call(null, s__14466__$2);
                                      var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
                                      var b__14468 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
                                      if (function() {
                                        var i__14467 = 0;
                                        while (true) {
                                          if (i__14467 < size__11045__auto__) {
                                            var k = cljs.core._nth.call(null, c__11044__auto__, i__14467);
                                            cljs.core.chunk_append.call(null, b__14468, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__14470 = i__14467 + 1;
                                            i__14467 = G__14470;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14468), iter__14465.call(null, cljs.core.chunk_rest.call(null, s__14466__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__14468), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__14466__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__14465.call(null, cljs.core.rest.call(null, s__14466__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__14460, map__14460__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__14460, map__14460__$1, keywordize_keys, keyfn);
                        return iter__11046__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__14460, map__14460__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__14469 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__14469__delegate.call(this, x, opts);
    };
    G__14469.cljs$lang$maxFixedArity = 1;
    G__14469.cljs$lang$applyTo = function(arglist__14471) {
      var x = cljs.core.first(arglist__14471);
      var opts = cljs.core.rest(arglist__14471);
      return G__14469__delegate(x, opts);
    };
    G__14469.cljs$core$IFn$_invoke$arity$variadic = G__14469__delegate;
    return G__14469;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__14472__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__14472 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__14472__delegate.call(this, args);
    };
    G__14472.cljs$lang$maxFixedArity = 0;
    G__14472.cljs$lang$applyTo = function(arglist__14473) {
      var args = cljs.core.seq(arglist__14473);
      return G__14472__delegate(args);
    };
    G__14472.cljs$core$IFn$_invoke$arity$variadic = G__14472__delegate;
    return G__14472;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__14474 = ret;
        f = G__14474;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__14475__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__14475 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__14475__delegate.call(this, f, args);
    };
    G__14475.cljs$lang$maxFixedArity = 1;
    G__14475.cljs$lang$applyTo = function(arglist__14476) {
      var f = cljs.core.first(arglist__14476);
      var args = cljs.core.rest(arglist__14476);
      return G__14475__delegate(f, args);
    };
    G__14475.cljs$core$IFn$_invoke$arity$variadic = G__14475__delegate;
    return G__14475;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__14477) {
    var f = cljs.core.first(arglist__14477);
    var args = cljs.core.rest(arglist__14477);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__10329__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__10329__auto__) {
      return or__10329__auto__;
    } else {
      var or__10329__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__10329__auto____$1) {
        return or__10329__auto____$1;
      } else {
        var and__10317__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__10317__auto__) {
          var and__10317__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__10317__auto____$1) {
            var and__10317__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__10317__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__14478 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__14479 = i + 1;
                  ret = G__14478;
                  i = G__14479;
                  continue;
                }
                break;
              }
            } else {
              return and__10317__auto____$2;
            }
          } else {
            return and__10317__auto____$1;
          }
        } else {
          return and__10317__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__10329__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__10329__auto__)) {
      return or__10329__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__14480_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__14480_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__14480_SHARP_), cljs.core.second.call(null, p1__14480_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__14481_SHARP_, p2__14482_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__14481_SHARP_, p2__14482_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__10329__auto__ = cljs.core.truth_(function() {
    var and__10317__auto__ = xprefs;
    if (cljs.core.truth_(and__10317__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__10317__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    var or__10329__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__14483 = cljs.core.rest.call(null, ps);
          ps = G__14483;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__10329__auto____$1)) {
      return or__10329__auto____$1;
    } else {
      var or__10329__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__14484 = cljs.core.rest.call(null, ps);
            ps = G__14484;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__10329__auto____$2)) {
        return or__10329__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__10329__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__14487) {
    var vec__14488 = p__14487;
    var k = cljs.core.nth.call(null, vec__14488, 0, null);
    var _ = cljs.core.nth.call(null, vec__14488, 1, null);
    var e = vec__14488;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__10329__auto__ = be == null;
        if (or__10329__auto__) {
          return or__10329__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj14490 = {};
  return obj14490;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._reset[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._reset["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._add_method[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._add_method["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._remove_method[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._remove_method["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._prefer_method[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._prefer_method["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._get_method[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._get_method["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._methods[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._methods["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._prefers[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._prefers["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__10317__auto__ = mf;
    if (and__10317__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__10956__auto__ = mf == null ? null : mf;
    return function() {
      var or__10329__auto__ = cljs.core._dispatch[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.core._dispatch["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__14491__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__14491 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__14491__delegate.call(this, _, args);
  };
  G__14491.cljs$lang$maxFixedArity = 1;
  G__14491.cljs$lang$applyTo = function(arglist__14492) {
    var _ = cljs.core.first(arglist__14492);
    var args = cljs.core.rest(arglist__14492);
    return G__14491__delegate(_, args);
  };
  G__14491.cljs$core$IFn$_invoke$arity$variadic = G__14491__delegate;
  return G__14491;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__10899__auto__, writer__10900__auto__, opts__10901__auto__) {
  return cljs.core._write.call(null, writer__10900__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("clojure.walk");
goog.require("cljs.core");
clojure.walk.walk = function walk(inner, outer, form) {
  if (cljs.core.seq_QMARK_.call(null, form)) {
    return outer.call(null, cljs.core.doall.call(null, cljs.core.map.call(null, inner, form)));
  } else {
    if (cljs.core.coll_QMARK_.call(null, form)) {
      return outer.call(null, cljs.core.into.call(null, cljs.core.empty.call(null, form), cljs.core.map.call(null, inner, form)));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return outer.call(null, form);
      } else {
        return null;
      }
    }
  }
};
clojure.walk.postwalk = function postwalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, postwalk, f), f, form);
};
clojure.walk.prewalk = function prewalk(f, form) {
  return clojure.walk.walk.call(null, cljs.core.partial.call(null, prewalk, f), cljs.core.identity, f.call(null, form));
};
clojure.walk.keywordize_keys = function keywordize_keys(m) {
  var f = function(p__13442) {
    var vec__13443 = p__13442;
    var k = cljs.core.nth.call(null, vec__13443, 0, null);
    var v = cljs.core.nth.call(null, vec__13443, 1, null);
    if (typeof k === "string") {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.stringify_keys = function stringify_keys(m) {
  var f = function(p__13446) {
    var vec__13447 = p__13446;
    var k = cljs.core.nth.call(null, vec__13447, 0, null);
    var v = cljs.core.nth.call(null, vec__13447, 1, null);
    if (k instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.name.call(null, k), v], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null);
    }
  };
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.map_QMARK_.call(null, x)) {
      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, f, x));
    } else {
      return x;
    }
  }, m);
};
clojure.walk.prewalk_replace = function prewalk_replace(smap, form) {
  return clojure.walk.prewalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
clojure.walk.postwalk_replace = function postwalk_replace(smap, form) {
  return clojure.walk.postwalk.call(null, function(x) {
    if (cljs.core.contains_QMARK_.call(null, smap, x)) {
      return smap.call(null, x);
    } else {
      return x;
    }
  }, form);
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(p1__13410_SHARP_) {
    return max === p1__13410_SHARP_;
  }, coll));
};
clojure.set.union = function() {
  var union = null;
  var union__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var union__1 = function(s1) {
    return s1;
  };
  var union__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
    }
  };
  var union__3 = function() {
    var G__13411__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__13411 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13411__delegate.call(this, s1, s2, sets);
    };
    G__13411.cljs$lang$maxFixedArity = 2;
    G__13411.cljs$lang$applyTo = function(arglist__13412) {
      var s1 = cljs.core.first(arglist__13412);
      arglist__13412 = cljs.core.next(arglist__13412);
      var s2 = cljs.core.first(arglist__13412);
      var sets = cljs.core.rest(arglist__13412);
      return G__13411__delegate(s1, s2, sets);
    };
    G__13411.cljs$core$IFn$_invoke$arity$variadic = G__13411__delegate;
    return G__13411;
  }();
  union = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 0:
        return union__0.call(this);
      case 1:
        return union__1.call(this, s1);
      case 2:
        return union__2.call(this, s1, s2);
      default:
        return union__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  union.cljs$lang$maxFixedArity = 2;
  union.cljs$lang$applyTo = union__3.cljs$lang$applyTo;
  union.cljs$core$IFn$_invoke$arity$0 = union__0;
  union.cljs$core$IFn$_invoke$arity$1 = union__1;
  union.cljs$core$IFn$_invoke$arity$2 = union__2;
  union.cljs$core$IFn$_invoke$arity$variadic = union__3.cljs$core$IFn$_invoke$arity$variadic;
  return union;
}();
clojure.set.intersection = function() {
  var intersection = null;
  var intersection__1 = function(s1) {
    return s1;
  };
  var intersection__2 = function(s1, s2) {
    while (true) {
      if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
        var G__13414 = s2;
        var G__13415 = s1;
        s1 = G__13414;
        s2 = G__13415;
        continue;
      } else {
        return cljs.core.reduce.call(null, function(s1, s2) {
          return function(result, item) {
            if (cljs.core.contains_QMARK_.call(null, s2, item)) {
              return result;
            } else {
              return cljs.core.disj.call(null, result, item);
            }
          };
        }(s1, s2), s1, s1);
      }
      break;
    }
  };
  var intersection__3 = function() {
    var G__13416__delegate = function(s1, s2, sets) {
      var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__13413_SHARP_) {
        return-cljs.core.count.call(null, p1__13413_SHARP_);
      }, cljs.core.conj.call(null, sets, s2, s1));
      return cljs.core.reduce.call(null, intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
    };
    var G__13416 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13416__delegate.call(this, s1, s2, sets);
    };
    G__13416.cljs$lang$maxFixedArity = 2;
    G__13416.cljs$lang$applyTo = function(arglist__13417) {
      var s1 = cljs.core.first(arglist__13417);
      arglist__13417 = cljs.core.next(arglist__13417);
      var s2 = cljs.core.first(arglist__13417);
      var sets = cljs.core.rest(arglist__13417);
      return G__13416__delegate(s1, s2, sets);
    };
    G__13416.cljs$core$IFn$_invoke$arity$variadic = G__13416__delegate;
    return G__13416;
  }();
  intersection = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return intersection__1.call(this, s1);
      case 2:
        return intersection__2.call(this, s1, s2);
      default:
        return intersection__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  intersection.cljs$lang$maxFixedArity = 2;
  intersection.cljs$lang$applyTo = intersection__3.cljs$lang$applyTo;
  intersection.cljs$core$IFn$_invoke$arity$1 = intersection__1;
  intersection.cljs$core$IFn$_invoke$arity$2 = intersection__2;
  intersection.cljs$core$IFn$_invoke$arity$variadic = intersection__3.cljs$core$IFn$_invoke$arity$variadic;
  return intersection;
}();
clojure.set.difference = function() {
  var difference = null;
  var difference__1 = function(s1) {
    return s1;
  };
  var difference__2 = function(s1, s2) {
    if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
      return cljs.core.reduce.call(null, function(result, item) {
        if (cljs.core.contains_QMARK_.call(null, s2, item)) {
          return cljs.core.disj.call(null, result, item);
        } else {
          return result;
        }
      }, s1, s1);
    } else {
      return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
    }
  };
  var difference__3 = function() {
    var G__13418__delegate = function(s1, s2, sets) {
      return cljs.core.reduce.call(null, difference, s1, cljs.core.conj.call(null, sets, s2));
    };
    var G__13418 = function(s1, s2, var_args) {
      var sets = null;
      if (arguments.length > 2) {
        sets = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13418__delegate.call(this, s1, s2, sets);
    };
    G__13418.cljs$lang$maxFixedArity = 2;
    G__13418.cljs$lang$applyTo = function(arglist__13419) {
      var s1 = cljs.core.first(arglist__13419);
      arglist__13419 = cljs.core.next(arglist__13419);
      var s2 = cljs.core.first(arglist__13419);
      var sets = cljs.core.rest(arglist__13419);
      return G__13418__delegate(s1, s2, sets);
    };
    G__13418.cljs$core$IFn$_invoke$arity$variadic = G__13418__delegate;
    return G__13418;
  }();
  difference = function(s1, s2, var_args) {
    var sets = var_args;
    switch(arguments.length) {
      case 1:
        return difference__1.call(this, s1);
      case 2:
        return difference__2.call(this, s1, s2);
      default:
        return difference__3.cljs$core$IFn$_invoke$arity$variadic(s1, s2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  difference.cljs$lang$maxFixedArity = 2;
  difference.cljs$lang$applyTo = difference__3.cljs$lang$applyTo;
  difference.cljs$core$IFn$_invoke$arity$1 = difference__1;
  difference.cljs$core$IFn$_invoke$arity$2 = difference__2;
  difference.cljs$core$IFn$_invoke$arity$variadic = difference__3.cljs$core$IFn$_invoke$arity$variadic;
  return difference;
}();
clojure.set.select = function select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__13420_SHARP_) {
    return cljs.core.select_keys.call(null, p1__13420_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__13423) {
    var vec__13424 = p__13423;
    var old = cljs.core.nth.call(null, vec__13424, 0, null);
    var new$ = cljs.core.nth.call(null, vec__13424, 1, null);
    if (cljs.core.not_EQ_.call(null, old, new$) && cljs.core.contains_QMARK_.call(null, m, old)) {
      return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, m, old)), old);
    } else {
      return m;
    }
  }, map, kmap);
};
clojure.set.rename = function rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__13425_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__13425_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__13428) {
    var vec__13429 = p__13428;
    var k = cljs.core.nth.call(null, vec__13429, 0, null);
    var v = cljs.core.nth.call(null, vec__13429, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function() {
  var join = null;
  var join__2 = function(xrel, yrel) {
    if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
      var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
      var vec__13436 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
      var r = cljs.core.nth.call(null, vec__13436, 0, null);
      var s = cljs.core.nth.call(null, vec__13436, 1, null);
      var idx = clojure.set.index.call(null, r, ks);
      return cljs.core.reduce.call(null, function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(p1__13430_SHARP_, p2__13431_SHARP_) {
            return cljs.core.conj.call(null, p1__13430_SHARP_, cljs.core.merge.call(null, p2__13431_SHARP_, x));
          }, ret, found);
        } else {
          return ret;
        }
      }, cljs.core.PersistentHashSet.EMPTY, s);
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  };
  var join__3 = function(xrel, yrel, km) {
    var vec__13437 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
    var r = cljs.core.nth.call(null, vec__13437, 0, null);
    var s = cljs.core.nth.call(null, vec__13437, 1, null);
    var k = cljs.core.nth.call(null, vec__13437, 2, null);
    var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
    return cljs.core.reduce.call(null, function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(p1__13432_SHARP_, p2__13433_SHARP_) {
          return cljs.core.conj.call(null, p1__13432_SHARP_, cljs.core.merge.call(null, p2__13433_SHARP_, x));
        }, ret, found);
      } else {
        return ret;
      }
    }, cljs.core.PersistentHashSet.EMPTY, s);
  };
  join = function(xrel, yrel, km) {
    switch(arguments.length) {
      case 2:
        return join__2.call(this, xrel, yrel);
      case 3:
        return join__3.call(this, xrel, yrel, km);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  join.cljs$core$IFn$_invoke$arity$3 = join__3;
  return join;
}();
clojure.set.subset_QMARK_ = function subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__13438_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__13438_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__13439_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__13439_SHARP_);
  }, set2);
};
goog.provide("datascript");
goog.require("cljs.core");
goog.require("clojure.walk");
goog.require("clojure.walk");
goog.require("clojure.set");
goog.require("clojure.set");
datascript.Datom = function(e, a, v, tx, added, __meta, __extmap) {
  this.e = e;
  this.a = a;
  this.v = v;
  this.tx = tx;
  this.added = added;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.Datom.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10910__auto__) {
  var self__ = this;
  var this__10910__auto____$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, this__10910__auto____$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
datascript.Datom.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10915__auto__, k__10916__auto__) {
  var self__ = this;
  var this__10915__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10915__auto____$1, k__10916__auto__, null);
};
datascript.Datom.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10917__auto__, k13185, else__10918__auto__) {
  var self__ = this;
  var this__10917__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k13185, new cljs.core.Keyword(null, "e", "e", 1013904343))) {
    return self__.e;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k13185, new cljs.core.Keyword(null, "a", "a", 1013904339))) {
      return self__.a;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k13185, new cljs.core.Keyword(null, "v", "v", 1013904360))) {
        return self__.v;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k13185, new cljs.core.Keyword(null, "tx", "tx", 1013907958))) {
          return self__.tx;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k13185, new cljs.core.Keyword(null, "added", "added", 1106564210))) {
            return self__.added;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k13185, else__10918__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
datascript.Datom.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10922__auto__, k__10923__auto__, G__13184) {
  var self__ = this;
  var this__10922__auto____$1 = this;
  var pred__13187 = cljs.core.keyword_identical_QMARK_;
  var expr__13188 = k__10923__auto__;
  if (cljs.core.truth_(pred__13187.call(null, new cljs.core.Keyword(null, "e", "e", 1013904343), expr__13188))) {
    return new datascript.Datom(G__13184, self__.a, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13187.call(null, new cljs.core.Keyword(null, "a", "a", 1013904339), expr__13188))) {
      return new datascript.Datom(self__.e, G__13184, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13187.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), expr__13188))) {
        return new datascript.Datom(self__.e, self__.a, G__13184, self__.tx, self__.added, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13187.call(null, new cljs.core.Keyword(null, "tx", "tx", 1013907958), expr__13188))) {
          return new datascript.Datom(self__.e, self__.a, self__.v, G__13184, self__.added, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13187.call(null, new cljs.core.Keyword(null, "added", "added", 1106564210), expr__13188))) {
            return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, G__13184, self__.__meta, self__.__extmap, null);
          } else {
            return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10923__auto__, G__13184), null);
          }
        }
      }
    }
  }
};
datascript.Datom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10929__auto__, writer__10930__auto__, opts__10931__auto__) {
  var self__ = this;
  var this__10929__auto____$1 = this;
  var pr_pair__10932__auto__ = function(keyval__10933__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, cljs.core.pr_writer, "", " ", "", opts__10931__auto__, keyval__10933__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, pr_pair__10932__auto__, "#datascript.Datom{", ", ", "}", opts__10931__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343), self__.e], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "a", "a", 1013904339), self__.a], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx", "tx", 1013907958), self__.tx], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "added", "added", 1106564210), self__.added], 
  null)], null), self__.__extmap));
};
datascript.Datom.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10920__auto__, entry__10921__auto__) {
  var self__ = this;
  var this__10920__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10921__auto__)) {
    return cljs.core._assoc.call(null, this__10920__auto____$1, cljs.core._nth.call(null, entry__10921__auto__, 0), cljs.core._nth.call(null, entry__10921__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10920__auto____$1, entry__10921__auto__);
  }
};
datascript.Datom.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$);
};
datascript.Datom.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10927__auto__) {
  var self__ = this;
  var this__10927__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343), self__.e], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "a", "a", 1013904339), self__.a], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "v", "v", 1013904360), self__.v], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx", "tx", 1013907958), self__.tx], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "added", "added", 1106564210), self__.added], null)], null), self__.__extmap));
};
datascript.Datom.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10919__auto__) {
  var self__ = this;
  var this__10919__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
datascript.Datom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10911__auto__, other__10912__auto__) {
  var self__ = this;
  var this__10911__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = other__10912__auto__;
    if (cljs.core.truth_(and__10317__auto__)) {
      return this__10911__auto____$1.constructor === other__10912__auto__.constructor && cljs.core.equiv_map.call(null, this__10911__auto____$1, other__10912__auto__);
    } else {
      return and__10317__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.Datom.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10914__auto__, G__13184) {
  var self__ = this;
  var this__10914__auto____$1 = this;
  return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, G__13184, self__.__extmap, self__.__hash);
};
datascript.Datom.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10909__auto__) {
  var self__ = this;
  var this__10909__auto____$1 = this;
  return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.Datom.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10913__auto__) {
  var self__ = this;
  var this__10913__auto____$1 = this;
  return self__.__meta;
};
datascript.Datom.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10924__auto__, k__10925__auto__) {
  var self__ = this;
  var this__10924__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "a", "a", 1013904339), null, new cljs.core.Keyword(null, "e", "e", 1013904343), null, new cljs.core.Keyword(null, "added", "added", 1106564210), null, new cljs.core.Keyword(null, "tx", "tx", 1013907958), null, new cljs.core.Keyword(null, "v", "v", 1013904360), null], null), null), k__10925__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10924__auto____$1), self__.__meta), k__10925__auto__);
  } else {
    return new datascript.Datom(self__.e, self__.a, self__.v, self__.tx, self__.added, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10925__auto__)), null);
  }
};
datascript.Datom.cljs$lang$type = true;
datascript.Datom.cljs$lang$ctorPrSeq = function(this__10949__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/Datom");
};
datascript.Datom.cljs$lang$ctorPrWriter = function(this__10949__auto__, writer__10950__auto__) {
  return cljs.core._write.call(null, writer__10950__auto__, "datascript/Datom");
};
datascript.__GT_Datom = function __GT_Datom(e, a, v, tx, added) {
  return new datascript.Datom(e, a, v, tx, added);
};
datascript.map__GT_Datom = function map__GT_Datom(G__13186) {
  return new datascript.Datom((new cljs.core.Keyword(null, "e", "e", 1013904343)).cljs$core$IFn$_invoke$arity$1(G__13186), (new cljs.core.Keyword(null, "a", "a", 1013904339)).cljs$core$IFn$_invoke$arity$1(G__13186), (new cljs.core.Keyword(null, "v", "v", 1013904360)).cljs$core$IFn$_invoke$arity$1(G__13186), (new cljs.core.Keyword(null, "tx", "tx", 1013907958)).cljs$core$IFn$_invoke$arity$1(G__13186), (new cljs.core.Keyword(null, "added", "added", 1106564210)).cljs$core$IFn$_invoke$arity$1(G__13186), 
  null, cljs.core.dissoc.call(null, G__13186, new cljs.core.Keyword(null, "e", "e", 1013904343), new cljs.core.Keyword(null, "a", "a", 1013904339), new cljs.core.Keyword(null, "v", "v", 1013904360), new cljs.core.Keyword(null, "tx", "tx", 1013907958), new cljs.core.Keyword(null, "added", "added", 1106564210)));
};
datascript.Datom.prototype.cljs$core$ISeqable$ = true;
datascript.Datom.prototype.cljs$core$ISeqable$_seq$arity$1 = function(d) {
  var d__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, d__$1.added), d__$1.tx), d__$1.v), d__$1.a), d__$1.e);
};
datascript.Datom.prototype.cljs$core$IEquiv$ = true;
datascript.Datom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(d, o) {
  var d__$1 = this;
  return cljs.core._EQ_.call(null, d__$1.e, o.e) && (cljs.core._EQ_.call(null, d__$1.a, o.a) && cljs.core._EQ_.call(null, d__$1.v, o.v));
};
datascript.Datom.prototype.cljs$core$IHash$ = true;
datascript.Datom.prototype.cljs$core$IHash$_hash$arity$1 = function(d) {
  var d__$1 = this;
  var or__10329__auto__ = d__$1.__hash;
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    return d__$1.__hash = cljs.core.hash_coll.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [d__$1.e, d__$1.a, d__$1.v], null));
  }
};
datascript.ISearch = function() {
  var obj13191 = {};
  return obj13191;
}();
datascript._search = function _search(data, pattern) {
  if (function() {
    var and__10317__auto__ = data;
    if (and__10317__auto__) {
      return data.datascript$ISearch$_search$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return data.datascript$ISearch$_search$arity$2(data, pattern);
  } else {
    var x__10956__auto__ = data == null ? null : data;
    return function() {
      var or__10329__auto__ = datascript._search[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = datascript._search["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISearch.-search", data);
        }
      }
    }().call(null, data, pattern);
  }
};
datascript.DB = function(schema, ea, av, max_eid, max_tx, __meta, __extmap) {
  this.schema = schema;
  this.ea = ea;
  this.av = av;
  this.max_eid = max_eid;
  this.max_tx = max_tx;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.DB.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10910__auto__) {
  var self__ = this;
  var this__10910__auto____$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, this__10910__auto____$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
datascript.DB.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10915__auto__, k__10916__auto__) {
  var self__ = this;
  var this__10915__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10915__auto____$1, k__10916__auto__, null);
};
datascript.DB.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10917__auto__, k13196, else__10918__auto__) {
  var self__ = this;
  var this__10917__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k13196, new cljs.core.Keyword(null, "schema", "schema", 4400883987))) {
    return self__.schema;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k13196, new cljs.core.Keyword(null, "ea", "ea", 1013907470))) {
      return self__.ea;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k13196, new cljs.core.Keyword(null, "av", "av", 1013907367))) {
        return self__.av;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k13196, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841))) {
          return self__.max_eid;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k13196, new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119))) {
            return self__.max_tx;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k13196, else__10918__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
datascript.DB.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10922__auto__, k__10923__auto__, G__13195) {
  var self__ = this;
  var this__10922__auto____$1 = this;
  var pred__13198 = cljs.core.keyword_identical_QMARK_;
  var expr__13199 = k__10923__auto__;
  if (cljs.core.truth_(pred__13198.call(null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), expr__13199))) {
    return new datascript.DB(G__13195, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13198.call(null, new cljs.core.Keyword(null, "ea", "ea", 1013907470), expr__13199))) {
      return new datascript.DB(self__.schema, G__13195, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13198.call(null, new cljs.core.Keyword(null, "av", "av", 1013907367), expr__13199))) {
        return new datascript.DB(self__.schema, self__.ea, G__13195, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13198.call(null, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), expr__13199))) {
          return new datascript.DB(self__.schema, self__.ea, self__.av, G__13195, self__.max_tx, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13198.call(null, new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), expr__13199))) {
            return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, G__13195, self__.__meta, self__.__extmap, null);
          } else {
            return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10923__auto__, G__13195), null);
          }
        }
      }
    }
  }
};
datascript.DB.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10929__auto__, writer__10930__auto__, opts__10931__auto__) {
  var self__ = this;
  var this__10929__auto____$1 = this;
  var pr_pair__10932__auto__ = function(keyval__10933__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, cljs.core.pr_writer, "", " ", "", opts__10931__auto__, keyval__10933__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, pr_pair__10932__auto__, "#datascript.DB{", ", ", "}", opts__10931__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "ea", "ea", 1013907470), self__.ea], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), self__.av], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), self__.max_eid], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "max-tx", "max-tx", 4227685119), self__.max_tx], null)], null), self__.__extmap));
};
datascript.DB.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10920__auto__, entry__10921__auto__) {
  var self__ = this;
  var this__10920__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10921__auto__)) {
    return cljs.core._assoc.call(null, this__10920__auto____$1, cljs.core._nth.call(null, entry__10921__auto__, 0), cljs.core._nth.call(null, entry__10921__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10920__auto____$1, entry__10921__auto__);
  }
};
datascript.DB.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10927__auto__) {
  var self__ = this;
  var this__10927__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), self__.schema], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), self__.ea], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), self__.av], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), self__.max_eid], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), self__.max_tx], null)], null), self__.__extmap));
};
datascript.DB.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10919__auto__) {
  var self__ = this;
  var this__10919__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
datascript.DB.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10911__auto__, other__10912__auto__) {
  var self__ = this;
  var this__10911__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = other__10912__auto__;
    if (cljs.core.truth_(and__10317__auto__)) {
      return this__10911__auto____$1.constructor === other__10912__auto__.constructor && cljs.core.equiv_map.call(null, this__10911__auto____$1, other__10912__auto__);
    } else {
      return and__10317__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.DB.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10914__auto__, G__13195) {
  var self__ = this;
  var this__10914__auto____$1 = this;
  return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, G__13195, self__.__extmap, self__.__hash);
};
datascript.DB.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10909__auto__) {
  var self__ = this;
  var this__10909__auto____$1 = this;
  return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.DB.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10913__auto__) {
  var self__ = this;
  var this__10913__auto____$1 = this;
  return self__.__meta;
};
datascript.DB.prototype.datascript$ISearch$ = true;
datascript.DB.prototype.datascript$ISearch$_search$arity$2 = function(db, p__13201) {
  var self__ = this;
  var vec__13202 = p__13201;
  var e = cljs.core.nth.call(null, vec__13202, 0, null);
  var a = cljs.core.nth.call(null, vec__13202, 1, null);
  var v = cljs.core.nth.call(null, vec__13202, 2, null);
  var tx = cljs.core.nth.call(null, vec__13202, 3, null);
  var added = cljs.core.nth.call(null, vec__13202, 4, null);
  var pattern = vec__13202;
  var db__$1 = this;
  var G__13203 = function() {
    var G__13204 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(e) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(a) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(v) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null], null);
    if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285)], null), G__13204)) {
      return cljs.core.filter.call(null, function(G__13204) {
        return function(p1__13192_SHARP_) {
          return cljs.core._EQ_.call(null, v, p1__13192_SHARP_.v);
        };
      }(G__13204), cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e, a], null)));
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285)], null), G__13204)) {
        return cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), a, v], null));
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), new cljs.core.Keyword(null, "+", "+", 1013904285), null], null), G__13204)) {
          return cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e, a], null));
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, new cljs.core.Keyword(null, "+", "+", 1013904285), null], null), G__13204)) {
            return cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), a], null))));
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "+", "+", 1013904285), null, null], null), G__13204)) {
              return cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, cljs.core.get_in.call(null, db__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), e], null))));
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(e) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(a) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null, cljs.core.truth_(v) ? new cljs.core.Keyword(null, "+", "+", 1013904285) : null], null))].join(""));
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }();
  var G__13203__$1 = cljs.core.truth_(tx) ? cljs.core.filter.call(null, function(G__13203) {
    return function(p1__13193_SHARP_) {
      return cljs.core._EQ_.call(null, tx, p1__13193_SHARP_.tx);
    };
  }(G__13203), G__13203) : G__13203;
  var G__13203__$2 = cljs.core.truth_(added) ? cljs.core.filter.call(null, function(G__13203, G__13203__$1) {
    return function(p1__13194_SHARP_) {
      return cljs.core._EQ_.call(null, added, p1__13194_SHARP_.added);
    };
  }(G__13203, G__13203__$1), G__13203__$1) : G__13203__$1;
  return G__13203__$2;
};
datascript.DB.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10924__auto__, k__10925__auto__) {
  var self__ = this;
  var this__10924__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119), null, new cljs.core.Keyword(null, "av", "av", 1013907367), null, new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), null, new cljs.core.Keyword(null, "ea", "ea", 1013907470), null, new cljs.core.Keyword(null, "schema", "schema", 4400883987), null], null), null), k__10925__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10924__auto____$1), self__.__meta), k__10925__auto__);
  } else {
    return new datascript.DB(self__.schema, self__.ea, self__.av, self__.max_eid, self__.max_tx, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10925__auto__)), null);
  }
};
datascript.DB.cljs$lang$type = true;
datascript.DB.cljs$lang$ctorPrSeq = function(this__10949__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/DB");
};
datascript.DB.cljs$lang$ctorPrWriter = function(this__10949__auto__, writer__10950__auto__) {
  return cljs.core._write.call(null, writer__10950__auto__, "datascript/DB");
};
datascript.__GT_DB = function __GT_DB(schema, ea, av, max_eid, max_tx) {
  return new datascript.DB(schema, ea, av, max_eid, max_tx);
};
datascript.map__GT_DB = function map__GT_DB(G__13197) {
  return new datascript.DB((new cljs.core.Keyword(null, "schema", "schema", 4400883987)).cljs$core$IFn$_invoke$arity$1(G__13197), (new cljs.core.Keyword(null, "ea", "ea", 1013907470)).cljs$core$IFn$_invoke$arity$1(G__13197), (new cljs.core.Keyword(null, "av", "av", 1013907367)).cljs$core$IFn$_invoke$arity$1(G__13197), (new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841)).cljs$core$IFn$_invoke$arity$1(G__13197), (new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)).cljs$core$IFn$_invoke$arity$1(G__13197), 
  null, cljs.core.dissoc.call(null, G__13197, new cljs.core.Keyword(null, "schema", "schema", 4400883987), new cljs.core.Keyword(null, "ea", "ea", 1013907470), new cljs.core.Keyword(null, "av", "av", 1013907367), new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)));
};
datascript.TxReport = function(db_before, db_after, tx_data, __meta, __extmap) {
  this.db_before = db_before;
  this.db_after = db_after;
  this.tx_data = tx_data;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 3) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
datascript.TxReport.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10910__auto__) {
  var self__ = this;
  var this__10910__auto____$1 = this;
  var h__10740__auto__ = self__.__hash;
  if (!(h__10740__auto__ == null)) {
    return h__10740__auto__;
  } else {
    var h__10740__auto____$1 = cljs.core.hash_imap.call(null, this__10910__auto____$1);
    self__.__hash = h__10740__auto____$1;
    return h__10740__auto____$1;
  }
};
datascript.TxReport.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10915__auto__, k__10916__auto__) {
  var self__ = this;
  var this__10915__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10915__auto____$1, k__10916__auto__, null);
};
datascript.TxReport.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10917__auto__, k13206, else__10918__auto__) {
  var self__ = this;
  var this__10917__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k13206, new cljs.core.Keyword(null, "db-before", "db-before", 3838846752))) {
    return self__.db_before;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k13206, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159))) {
      return self__.db_after;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k13206, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709))) {
        return self__.tx_data;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.get.call(null, self__.__extmap, k13206, else__10918__auto__);
        } else {
          return null;
        }
      }
    }
  }
};
datascript.TxReport.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10922__auto__, k__10923__auto__, G__13205) {
  var self__ = this;
  var this__10922__auto____$1 = this;
  var pred__13208 = cljs.core.keyword_identical_QMARK_;
  var expr__13209 = k__10923__auto__;
  if (cljs.core.truth_(pred__13208.call(null, new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), expr__13209))) {
    return new datascript.TxReport(G__13205, self__.db_after, self__.tx_data, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13208.call(null, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), expr__13209))) {
      return new datascript.TxReport(self__.db_before, G__13205, self__.tx_data, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13208.call(null, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), expr__13209))) {
        return new datascript.TxReport(self__.db_before, self__.db_after, G__13205, self__.__meta, self__.__extmap, null);
      } else {
        return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10923__auto__, G__13205), null);
      }
    }
  }
};
datascript.TxReport.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10929__auto__, writer__10930__auto__, opts__10931__auto__) {
  var self__ = this;
  var this__10929__auto____$1 = this;
  var pr_pair__10932__auto__ = function(keyval__10933__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, cljs.core.pr_writer, "", " ", "", opts__10931__auto__, keyval__10933__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10930__auto__, pr_pair__10932__auto__, "#datascript.TxReport{", ", ", "}", opts__10931__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), self__.db_before], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), self__.db_after], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), self__.tx_data], null)], null), self__.__extmap));
};
datascript.TxReport.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10920__auto__, entry__10921__auto__) {
  var self__ = this;
  var this__10920__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10921__auto__)) {
    return cljs.core._assoc.call(null, this__10920__auto____$1, cljs.core._nth.call(null, entry__10921__auto__, 0), cljs.core._nth.call(null, entry__10921__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10920__auto____$1, entry__10921__auto__);
  }
};
datascript.TxReport.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10927__auto__) {
  var self__ = this;
  var this__10927__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), self__.db_before], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), self__.db_after], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), self__.tx_data], null)], null), self__.__extmap));
};
datascript.TxReport.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10919__auto__) {
  var self__ = this;
  var this__10919__auto____$1 = this;
  return 3 + cljs.core.count.call(null, self__.__extmap);
};
datascript.TxReport.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10911__auto__, other__10912__auto__) {
  var self__ = this;
  var this__10911__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10317__auto__ = other__10912__auto__;
    if (cljs.core.truth_(and__10317__auto__)) {
      return this__10911__auto____$1.constructor === other__10912__auto__.constructor && cljs.core.equiv_map.call(null, this__10911__auto____$1, other__10912__auto__);
    } else {
      return and__10317__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
datascript.TxReport.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10914__auto__, G__13205) {
  var self__ = this;
  var this__10914__auto____$1 = this;
  return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, G__13205, self__.__extmap, self__.__hash);
};
datascript.TxReport.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10909__auto__) {
  var self__ = this;
  var this__10909__auto____$1 = this;
  return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.__meta, self__.__extmap, self__.__hash);
};
datascript.TxReport.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10913__auto__) {
  var self__ = this;
  var this__10913__auto____$1 = this;
  return self__.__meta;
};
datascript.TxReport.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10924__auto__, k__10925__auto__) {
  var self__ = this;
  var this__10924__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), null, new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709), null, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159), null], null), null), k__10925__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10924__auto____$1), self__.__meta), k__10925__auto__);
  } else {
    return new datascript.TxReport(self__.db_before, self__.db_after, self__.tx_data, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10925__auto__)), null);
  }
};
datascript.TxReport.cljs$lang$type = true;
datascript.TxReport.cljs$lang$ctorPrSeq = function(this__10949__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "datascript/TxReport");
};
datascript.TxReport.cljs$lang$ctorPrWriter = function(this__10949__auto__, writer__10950__auto__) {
  return cljs.core._write.call(null, writer__10950__auto__, "datascript/TxReport");
};
datascript.__GT_TxReport = function __GT_TxReport(db_before, db_after, tx_data) {
  return new datascript.TxReport(db_before, db_after, tx_data);
};
datascript.map__GT_TxReport = function map__GT_TxReport(G__13207) {
  return new datascript.TxReport((new cljs.core.Keyword(null, "db-before", "db-before", 3838846752)).cljs$core$IFn$_invoke$arity$1(G__13207), (new cljs.core.Keyword(null, "db-after", "db-after", 1658340159)).cljs$core$IFn$_invoke$arity$1(G__13207), (new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709)).cljs$core$IFn$_invoke$arity$1(G__13207), null, cljs.core.dissoc.call(null, G__13207, new cljs.core.Keyword(null, "db-before", "db-before", 3838846752), new cljs.core.Keyword(null, "db-after", 
  "db-after", 1658340159), new cljs.core.Keyword(null, "tx-data", "tx-data", 4365248709)));
};
datascript.multival_QMARK_ = function multival_QMARK_(db, attr) {
  return cljs.core._EQ_.call(null, cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), attr, new cljs.core.Keyword(null, "cardinality", "cardinality", 1859117312)], null)), new cljs.core.Keyword(null, "many", "many", 1017248209));
};
datascript.match_tuple = function match_tuple(tuple, pattern) {
  return cljs.core.every_QMARK_.call(null, cljs.core.true_QMARK_, cljs.core.map.call(null, function(p1__13212_SHARP_, p2__13211_SHARP_) {
    return p2__13211_SHARP_ == null || cljs.core._EQ_.call(null, p1__13212_SHARP_, p2__13211_SHARP_);
  }, tuple, pattern));
};
datascript.search = function search(data, pattern) {
  if (function() {
    var G__13216 = data;
    if (G__13216) {
      var bit__10979__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__10329__auto__ = bit__10979__auto__;
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return G__13216.datascript$ISearch$;
        }
      }())) {
        return true;
      } else {
        if (!G__13216.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, datascript.ISearch, G__13216);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, datascript.ISearch, G__13216);
    }
  }()) {
    return datascript._search.call(null, data, pattern);
  } else {
    if (function() {
      var G__13217 = data;
      if (G__13217) {
        var bit__10979__auto__ = G__13217.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__10979__auto__ || G__13217.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__13217.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__13217);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__13217);
      }
    }()) {
      return cljs.core.filter.call(null, function(p1__13213_SHARP_) {
        return datascript.match_tuple.call(null, p1__13213_SHARP_, pattern);
      }, data);
    } else {
      return null;
    }
  }
};
datascript.transact_datom = function transact_datom(db, datom) {
  if (cljs.core.truth_(datom.added)) {
    return cljs.core.update_in.call(null, cljs.core.update_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), datom.e, datom.a], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), datom), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), datom.a, datom.v], null), cljs.core.fnil.call(null, 
    cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), datom);
  } else {
    return cljs.core.update_in.call(null, cljs.core.update_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), datom.e, datom.a], null), cljs.core.disj, datom), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "av", "av", 1013907367), datom.a, datom.v], null), cljs.core.disj, datom);
  }
};
datascript._resolve_eid = function _resolve_eid(eid, db) {
  return db.max_eid - eid;
};
datascript.resolve_eid = function resolve_eid(db, d) {
  if (d.e < 0) {
    return cljs.core.update_in.call(null, d, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "e", "e", 1013904343)], null), datascript._resolve_eid, db);
  } else {
    return d;
  }
};
datascript.entity__GT_ops = function entity__GT_ops(db, entity) {
  if (cljs.core.map_QMARK_.call(null, entity)) {
    var eid = (new cljs.core.Keyword("db", "id", "db/id", 1014111942)).cljs$core$IFn$_invoke$arity$1(entity);
    var iter__11046__auto__ = function iter__13228(s__13229) {
      return new cljs.core.LazySeq(null, function() {
        var s__13229__$1 = s__13229;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__13229__$1);
          if (temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var vec__13235 = cljs.core.first.call(null, xs__4579__auto__);
            var a = cljs.core.nth.call(null, vec__13235, 0, null);
            var vs = cljs.core.nth.call(null, vec__13235, 1, null);
            var iterys__11042__auto__ = function(s__13229__$1, vec__13235, a, vs, xs__4579__auto__, temp__4092__auto__) {
              return function iter__13230(s__13231) {
                return new cljs.core.LazySeq(null, function(s__13229__$1, vec__13235, a, vs, xs__4579__auto__, temp__4092__auto__) {
                  return function() {
                    var s__13231__$1 = s__13231;
                    while (true) {
                      var temp__4092__auto____$1 = cljs.core.seq.call(null, s__13231__$1);
                      if (temp__4092__auto____$1) {
                        var s__13231__$2 = temp__4092__auto____$1;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__13231__$2)) {
                          var c__11044__auto__ = cljs.core.chunk_first.call(null, s__13231__$2);
                          var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
                          var b__13233 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
                          if (function() {
                            var i__13232 = 0;
                            while (true) {
                              if (i__13232 < size__11045__auto__) {
                                var v = cljs.core._nth.call(null, c__11044__auto__, i__13232);
                                cljs.core.chunk_append.call(null, b__13233, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), eid, a, v], null));
                                var G__13237 = i__13232 + 1;
                                i__13232 = G__13237;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13233), iter__13230.call(null, cljs.core.chunk_rest.call(null, s__13231__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13233), null);
                          }
                        } else {
                          var v = cljs.core.first.call(null, s__13231__$2);
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), eid, a, v], null), iter__13230.call(null, cljs.core.rest.call(null, s__13231__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(s__13229__$1, vec__13235, a, vs, xs__4579__auto__, temp__4092__auto__), null, null);
              };
            }(s__13229__$1, vec__13235, a, vs, xs__4579__auto__, temp__4092__auto__);
            var fs__11043__auto__ = cljs.core.seq.call(null, iterys__11042__auto__.call(null, cljs.core.sequential_QMARK_.call(null, vs) && datascript.multival_QMARK_.call(null, db, a) ? vs : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [vs], null)));
            if (fs__11043__auto__) {
              return cljs.core.concat.call(null, fs__11043__auto__, iter__13228.call(null, cljs.core.rest.call(null, s__13229__$1)));
            } else {
              var G__13238 = cljs.core.rest.call(null, s__13229__$1);
              s__13229__$1 = G__13238;
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__11046__auto__.call(null, cljs.core.dissoc.call(null, entity, new cljs.core.Keyword("db", "id", "db/id", 1014111942)));
  } else {
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, entity), new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894))) {
      var vec__13236 = entity;
      var _ = cljs.core.nth.call(null, vec__13236, 0, null);
      var f = cljs.core.nth.call(null, vec__13236, 1, null);
      var args = cljs.core.nthnext.call(null, vec__13236, 2);
      return cljs.core.mapcat.call(null, function(p1__13218_SHARP_) {
        return entity__GT_ops.call(null, db, p1__13218_SHARP_);
      }, cljs.core.apply.call(null, f, db, args));
    } else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [entity], null);
    }
  }
};
datascript.op__GT_tx_data = function op__GT_tx_data(db, p__13241) {
  var vec__13244 = p__13241;
  var op = cljs.core.nth.call(null, vec__13244, 0, null);
  var e = cljs.core.nth.call(null, vec__13244, 1, null);
  var a = cljs.core.nth.call(null, vec__13244, 2, null);
  var v = cljs.core.nth.call(null, vec__13244, 3, null);
  var tx = db.max_tx + 1;
  var G__13245 = op;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db.fn", "retractEntity", "db.fn/retractEntity", 4213852396), G__13245)) {
    var datoms = datascript._search.call(null, db, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [e], null));
    return cljs.core.map.call(null, function(p1__13240_SHARP_) {
      return cljs.core.assoc.call(null, p1__13240_SHARP_, new cljs.core.Keyword(null, "tx", "tx", 1013907958), tx, new cljs.core.Keyword(null, "added", "added", 1106564210), false);
    }, datoms);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db.fn", "retractAttribute", "db.fn/retractAttribute", 3416849171), G__13245)) {
      var datoms = datascript._search.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a], null));
      return cljs.core.map.call(null, function(p1__13239_SHARP_) {
        return cljs.core.assoc.call(null, p1__13239_SHARP_, new cljs.core.Keyword(null, "tx", "tx", 1013907958), tx, new cljs.core.Keyword(null, "added", "added", 1106564210), false);
      }, datoms);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db", "retract", "db/retract", 2112480480), G__13245)) {
        var temp__4092__auto__ = cljs.core.first.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a, v], null)));
        if (cljs.core.truth_(temp__4092__auto__)) {
          var old_datom = temp__4092__auto__;
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, false)], null);
        } else {
          return null;
        }
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword("db", "add", "db/add", 1014207040), G__13245)) {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "many", "many", 1017248209), cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "schema", "schema", 4400883987), a, new cljs.core.Keyword(null, "cardinality", "cardinality", 1859117312)], null)))) {
            if (cljs.core.empty_QMARK_.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a, v], null)))) {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
            } else {
              return null;
            }
          } else {
            var temp__4090__auto__ = cljs.core.first.call(null, datascript._search.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e, a], null)));
            if (cljs.core.truth_(temp__4090__auto__)) {
              var old_datom = temp__4090__auto__;
              if (cljs.core.not_EQ_.call(null, old_datom.v, v)) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, old_datom.v, tx, false), datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
              } else {
                return null;
              }
            } else {
              return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [datascript.__GT_Datom.call(null, e, a, v, tx, true)], null);
            }
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(op)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }
};
datascript.entity__GT_tx_data = function entity__GT_tx_data(db, entity) {
  return cljs.core.mapcat.call(null, function(p1__13246_SHARP_) {
    return datascript.op__GT_tx_data.call(null, db, p1__13246_SHARP_);
  }, datascript.entity__GT_ops.call(null, db, entity));
};
datascript._with = function _with(db, tx_data) {
  return cljs.core.assoc.call(null, cljs.core.update_in.call(null, cljs.core.reduce.call(null, datascript.transact_datom, db, tx_data), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)], null), cljs.core.inc), new cljs.core.Keyword(null, "max-eid", "max-eid", 1856848841), cljs.core.reduce.call(null, cljs.core.max, db.max_eid, cljs.core.map.call(null, new cljs.core.Keyword(null, "e", "e", 1013904343), tx_data)));
};
datascript.parse_where = function parse_where(where) {
  var source = cljs.core.first.call(null, where);
  if (source instanceof cljs.core.Symbol && cljs.core._EQ_.call(null, "$", cljs.core.first.call(null, cljs.core.name.call(null, source)))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, where), cljs.core.next.call(null, where)], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null), where], null);
  }
};
datascript.bind_symbol = function bind_symbol(sym, scope) {
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), sym)) {
    return null;
  } else {
    if (sym instanceof cljs.core.Symbol) {
      return cljs.core.get.call(null, scope, sym, null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return sym;
      } else {
        return null;
      }
    }
  }
};
datascript.bind_symbols = function bind_symbols(form, scope) {
  return cljs.core.map.call(null, function(p1__13247_SHARP_) {
    return datascript.bind_symbol.call(null, p1__13247_SHARP_, scope);
  }, form);
};
datascript.search_datoms = function search_datoms(source, where, scope) {
  return datascript.search.call(null, datascript.bind_symbol.call(null, source, scope), datascript.bind_symbols.call(null, where, scope));
};
datascript.populate_scope = function populate_scope(scope, where, datom) {
  return cljs.core.into.call(null, scope, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(p1__13248_SHARP_, p2__13249_SHARP_) {
    if (p1__13248_SHARP_ instanceof cljs.core.Symbol && !cljs.core.contains_QMARK_.call(null, scope, p1__13248_SHARP_)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__13248_SHARP_, p2__13249_SHARP_], null);
    } else {
      return null;
    }
  }, where, datom)));
};
datascript._differ_QMARK_ = function() {
  var _differ_QMARK___delegate = function(xs) {
    var l = cljs.core.count.call(null, xs);
    return cljs.core.not_EQ_.call(null, cljs.core.take.call(null, l / 2, xs), cljs.core.drop.call(null, l / 2, xs));
  };
  var _differ_QMARK_ = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return _differ_QMARK___delegate.call(this, xs);
  };
  _differ_QMARK_.cljs$lang$maxFixedArity = 0;
  _differ_QMARK_.cljs$lang$applyTo = function(arglist__13250) {
    var xs = cljs.core.seq(arglist__13250);
    return _differ_QMARK___delegate(xs);
  };
  _differ_QMARK_.cljs$core$IFn$_invoke$arity$variadic = _differ_QMARK___delegate;
  return _differ_QMARK_;
}();
datascript.built_ins = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null, "false?", "false?", 1372554549, null), new cljs.core.Symbol(null, "true?", "true?", -1529891286, null), new cljs.core.Symbol(null, "rem", "rem", -1640418733, null), new cljs.core.Symbol(null, "odd?", "odd?", -1637125463, null), new cljs.core.Symbol(null, "+", "+", -1640531484, null), new cljs.core.Symbol(null, "zero?", "zero?", -1524740016, null), new cljs.core.Symbol(null, "*", "*", -1640531485, null), new cljs.core.Symbol(null, 
"-differ?", "-differ?", 1135976441, null), new cljs.core.Symbol(null, "-", "-", -1640531482, null), new cljs.core.Symbol(null, "neg?", "neg?", -1637154200, null), new cljs.core.Symbol(null, "/", "/", -1640531480, null), new cljs.core.Symbol(null, "inc", "inc", -1640427113, null), new cljs.core.Symbol(null, "quot", "quot", -1637049150, null), new cljs.core.Symbol(null, "!\x3d", "!\x3d", -1640530443, null), new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), new cljs.core.Symbol(null, "\x3d", 
"\x3d", -1640531466, null), new cljs.core.Symbol(null, "max", "max", -1640423651, null), new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "even?", "even?", -1543640034, null), new cljs.core.Symbol(null, "\x3e\x3d", "\x3e\x3d", -1640529544, null), new cljs.core.Symbol(null, "pos?", "pos?", -1637084636, null), new cljs.core.Symbol(null, "\x3c\x3d", "\x3c\x3d", -1640529606, null), new cljs.core.Symbol(null, "dec", "dec", -1640432197, null), new cljs.core.Symbol(null, 
"mod", "mod", -1640423237, null), new cljs.core.Symbol(null, "min", "min", -1640423413, null), new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "\x3d\x3d", "\x3d\x3d", -1640529575, null), new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null)], [cljs.core.false_QMARK_, cljs.core.true_QMARK_, cljs.core.rem, cljs.core.odd_QMARK_, cljs.core._PLUS_, cljs.core.zero_QMARK_, cljs.core._STAR_, datascript._differ_QMARK_, cljs.core._, cljs.core.neg_QMARK_, 
cljs.core._SLASH_, cljs.core.inc, cljs.core.quot, cljs.core.not_EQ_, cljs.core._LT_, cljs.core._EQ_, cljs.core.max, cljs.core._GT_, cljs.core.even_QMARK_, cljs.core._GT__EQ_, cljs.core.pos_QMARK_, cljs.core._LT__EQ_, cljs.core.dec, cljs.core.mod, cljs.core.min, cljs.core.not_EQ_, cljs.core._EQ__EQ_, cljs.core.nil_QMARK_]);
datascript.call = function call(p__13251, scope) {
  var vec__13253 = p__13251;
  var f = cljs.core.nth.call(null, vec__13253, 0, null);
  var args = cljs.core.nthnext.call(null, vec__13253, 1);
  var bound_args = datascript.bind_symbols.call(null, args, scope);
  var f__$1 = function() {
    var or__10329__auto__ = datascript.built_ins.call(null, f);
    if (cljs.core.truth_(or__10329__auto__)) {
      return or__10329__auto__;
    } else {
      return scope.call(null, f);
    }
  }();
  return cljs.core.apply.call(null, f__$1, bound_args);
};
datascript.looks_like_QMARK_ = function looks_like_QMARK_(pattern, form) {
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), pattern)) {
    return true;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), pattern)) {
      return cljs.core.sequential_QMARK_.call(null, form);
    } else {
      if (cljs.core.sequential_QMARK_.call(null, pattern)) {
        return cljs.core.sequential_QMARK_.call(null, form) && (cljs.core._EQ_.call(null, cljs.core.count.call(null, form), cljs.core.count.call(null, pattern)) && cljs.core.every_QMARK_.call(null, function(p__13260) {
          var vec__13261 = p__13260;
          var pattern_el = cljs.core.nth.call(null, vec__13261, 0, null);
          var form_el = cljs.core.nth.call(null, vec__13261, 1, null);
          return looks_like_QMARK_.call(null, pattern_el, form_el);
        }, cljs.core.map.call(null, cljs.core.vector, pattern, form)));
      } else {
        if (pattern instanceof cljs.core.Symbol) {
          return cljs.core._EQ_.call(null, form, pattern);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return pattern.call(null, form);
          } else {
            return null;
          }
        }
      }
    }
  }
};
datascript.collect = function collect(f, coll) {
  return cljs.core.reduce.call(null, function(p1__13262_SHARP_, p2__13263_SHARP_) {
    return clojure.set.union.call(null, p1__13262_SHARP_, f.call(null, p2__13263_SHARP_));
  }, cljs.core.PersistentHashSet.EMPTY, coll);
};
datascript.bind_rule_branch = function bind_rule_branch(branch, call_args, context) {
  var vec__13271 = branch;
  var vec__13272 = cljs.core.nth.call(null, vec__13271, 0, null);
  var rule = cljs.core.nth.call(null, vec__13272, 0, null);
  var local_args = cljs.core.nthnext.call(null, vec__13272, 1);
  var body = cljs.core.nthnext.call(null, vec__13271, 1);
  var replacements = cljs.core.zipmap.call(null, local_args, call_args);
  var seqid = (new cljs.core.Keyword(null, "__depth", "__depth", 2242649685)).cljs$core$IFn$_invoke$arity$2(context, 0);
  var bound_body = clojure.walk.postwalk.call(null, function(vec__13271, vec__13272, rule, local_args, body, replacements, seqid) {
    return function(p1__13264_SHARP_) {
      if (p1__13264_SHARP_ instanceof cljs.core.Symbol && cljs.core._EQ_.call(null, "?", cljs.core.first.call(null, cljs.core.name.call(null, p1__13264_SHARP_)))) {
        var or__10329__auto__ = replacements.call(null, p1__13264_SHARP_);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return cljs.core.symbol.call(null, [cljs.core.str(cljs.core.name.call(null, p1__13264_SHARP_)), cljs.core.str("__auto__"), cljs.core.str(seqid)].join(""));
        }
      } else {
        return p1__13264_SHARP_;
      }
    };
  }(vec__13271, vec__13272, rule, local_args, body, replacements, seqid), body);
  return cljs.core.concat.call(null, function() {
    var iter__11046__auto__ = function iter__13273(s__13274) {
      return new cljs.core.LazySeq(null, function() {
        var s__13274__$1 = s__13274;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__13274__$1);
          if (temp__4092__auto__) {
            var s__13274__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13274__$2)) {
              var c__11044__auto__ = cljs.core.chunk_first.call(null, s__13274__$2);
              var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
              var b__13276 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
              if (function() {
                var i__13275 = 0;
                while (true) {
                  if (i__13275 < size__11045__auto__) {
                    var prev_call_args = cljs.core._nth.call(null, c__11044__auto__, i__13275);
                    cljs.core.chunk_append.call(null, b__13276, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "-differ?", "-differ?", 1135976441, null)], null), call_args, prev_call_args)], null));
                    var G__13277 = i__13275 + 1;
                    i__13275 = G__13277;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13276), iter__13273.call(null, cljs.core.chunk_rest.call(null, s__13274__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13276), null);
              }
            } else {
              var prev_call_args = cljs.core.first.call(null, s__13274__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "-differ?", "-differ?", 1135976441, null)], null), call_args, prev_call_args)], null), iter__13273.call(null, cljs.core.rest.call(null, s__13274__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__11046__auto__.call(null, cljs.core.get.call(null, context, rule));
  }(), bound_body);
};
datascript._q = function _q(in_PLUS_sources, wheres, scope) {
  while (true) {
    if (cljs.core.truth_(cljs.core.not_empty.call(null, in_PLUS_sources))) {
      var vec__13291 = cljs.core.first.call(null, in_PLUS_sources);
      var in$ = cljs.core.nth.call(null, vec__13291, 0, null);
      var source = cljs.core.nth.call(null, vec__13291, 1, null);
      var pred__13292 = datascript.looks_like_QMARK_;
      var expr__13293 = in$;
      if (cljs.core.truth_(pred__13292.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_", "_", -1640531432, null), new cljs.core.Symbol(null, "...", "...", -1640485849, null)], null), expr__13293))) {
        return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
          return function(p1__13278_SHARP_) {
            return _q.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, in$), p1__13278_SHARP_], null)], null), cljs.core.next.call(null, in_PLUS_sources)), wheres, scope);
          };
        }(in_PLUS_sources, wheres, scope), source);
      } else {
        if (cljs.core.truth_(pred__13292.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null)], null), expr__13293))) {
          return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
            return function(p1__13279_SHARP_) {
              return _q.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, in$), p1__13279_SHARP_], null)], null), cljs.core.next.call(null, in_PLUS_sources)), wheres, scope);
            };
          }(in_PLUS_sources, wheres, scope), source);
        } else {
          if (cljs.core.truth_(pred__13292.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), expr__13293))) {
            var G__13300 = cljs.core.concat.call(null, cljs.core.zipmap.call(null, in$, source), cljs.core.next.call(null, in_PLUS_sources));
            var G__13301 = wheres;
            var G__13302 = scope;
            in_PLUS_sources = G__13300;
            wheres = G__13301;
            scope = G__13302;
            continue;
          } else {
            if (cljs.core.truth_(pred__13292.call(null, new cljs.core.Symbol(null, "%", "%", -1640531490, null), expr__13293))) {
              var G__13303 = cljs.core.next.call(null, in_PLUS_sources);
              var G__13304 = wheres;
              var G__13305 = cljs.core.assoc.call(null, scope, new cljs.core.Keyword(null, "__rules", "__rules", 2256051337), cljs.core.group_by.call(null, cljs.core.ffirst, source));
              in_PLUS_sources = G__13303;
              wheres = G__13304;
              scope = G__13305;
              continue;
            } else {
              if (cljs.core.truth_(pred__13292.call(null, new cljs.core.Symbol(null, "_", "_", -1640531432, null), expr__13293))) {
                var G__13306 = cljs.core.next.call(null, in_PLUS_sources);
                var G__13307 = wheres;
                var G__13308 = cljs.core.assoc.call(null, scope, in$, source);
                in_PLUS_sources = G__13306;
                wheres = G__13307;
                scope = G__13308;
                continue;
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__13293)].join(""));
              }
            }
          }
        }
      }
    } else {
      if (cljs.core.truth_(cljs.core.not_empty.call(null, wheres))) {
        var where = cljs.core.first.call(null, wheres);
        var temp__4090__auto__ = cljs.core.get.call(null, (new cljs.core.Keyword(null, "__rules", "__rules", 2256051337)).cljs$core$IFn$_invoke$arity$1(scope), cljs.core.first.call(null, where));
        if (cljs.core.truth_(temp__4090__auto__)) {
          var rule_branches = temp__4090__auto__;
          var vec__13295 = where;
          var rule = cljs.core.nth.call(null, vec__13295, 0, null);
          var call_args = cljs.core.nthnext.call(null, vec__13295, 1);
          var next_scope = cljs.core.update_in.call(null, cljs.core.update_in.call(null, scope, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801), rule], null), cljs.core.conj, call_args), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801), new cljs.core.Keyword(null, "__depth", "__depth", 2242649685)], 
          null), cljs.core.inc);
          var next_wheres = cljs.core.next.call(null, wheres);
          return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
            return function(p1__13280_SHARP_) {
              return _q.call(null, null, cljs.core.concat.call(null, datascript.bind_rule_branch.call(null, p1__13280_SHARP_, call_args, (new cljs.core.Keyword(null, "__rules_ctx", "__rules_ctx", 2834098801)).cljs$core$IFn$_invoke$arity$1(scope)), next_wheres), next_scope);
            };
          }(in_PLUS_sources, wheres, scope), rule_branches);
        } else {
          var pred__13296 = datascript.looks_like_QMARK_;
          var expr__13297 = where;
          if (cljs.core.truth_(pred__13296.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null)], null), expr__13297))) {
            if (cljs.core.truth_(datascript.call.call(null, cljs.core.first.call(null, where), scope))) {
              var G__13309 = null;
              var G__13310 = cljs.core.next.call(null, wheres);
              var G__13311 = scope;
              in_PLUS_sources = G__13309;
              wheres = G__13310;
              scope = G__13311;
              continue;
            } else {
              return null;
            }
          } else {
            if (cljs.core.truth_(pred__13296.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), new cljs.core.Symbol(null, "_", "_", -1640531432, null)], null), expr__13297))) {
              var res = datascript.call.call(null, cljs.core.first.call(null, where), scope);
              var G__13312 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.second.call(null, where), res], null)], null);
              var G__13313 = cljs.core.next.call(null, wheres);
              var G__13314 = scope;
              in_PLUS_sources = G__13312;
              wheres = G__13313;
              scope = G__13314;
              continue;
            } else {
              if (cljs.core.truth_(pred__13296.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", -1640531485, null)], null), expr__13297))) {
                var vec__13299 = datascript.parse_where.call(null, where);
                var source = cljs.core.nth.call(null, vec__13299, 0, null);
                var where__$1 = cljs.core.nth.call(null, vec__13299, 1, null);
                var found = datascript.search_datoms.call(null, source, where__$1, scope);
                return datascript.collect.call(null, function(in_PLUS_sources, wheres, scope) {
                  return function(p1__13281_SHARP_) {
                    return _q.call(null, null, cljs.core.next.call(null, wheres), datascript.populate_scope.call(null, scope, where__$1, p1__13281_SHARP_));
                  };
                }(in_PLUS_sources, wheres, scope), found);
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__13297)].join(""));
              }
            }
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.PersistentHashSet.fromArray([cljs.core.mapv.call(null, scope, (new cljs.core.Keyword(null, "__find", "__find", 3824551179)).cljs$core$IFn$_invoke$arity$1(scope))], true);
        } else {
          return null;
        }
      }
    }
    break;
  }
};
datascript.built_in_aggregates = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Symbol(null, "distinct", "distinct", -1351833419, null), cljs.core.comp.call(null, cljs.core.vec, cljs.core.distinct), new cljs.core.Symbol(null, "min", "min", -1640423413, null), function() {
  var G__13316 = null;
  var G__13316__1 = function(coll) {
    return cljs.core.reduce.call(null, cljs.core.min, coll);
  };
  var G__13316__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.reduce.call(null, function(acc, x) {
      if (cljs.core.count.call(null, acc) < n) {
        return cljs.core.sort.call(null, cljs.core.conj.call(null, acc, x));
      } else {
        if (x < cljs.core.last.call(null, acc)) {
          return cljs.core.sort.call(null, cljs.core.conj.call(null, cljs.core.butlast.call(null, acc), x));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return acc;
          } else {
            return null;
          }
        }
      }
    }, cljs.core.PersistentVector.EMPTY, coll));
  };
  G__13316 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__13316__1.call(this, n);
      case 2:
        return G__13316__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__13316;
}(), new cljs.core.Symbol(null, "max", "max", -1640423651, null), function() {
  var G__13317 = null;
  var G__13317__1 = function(coll) {
    return cljs.core.reduce.call(null, cljs.core.max, coll);
  };
  var G__13317__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.reduce.call(null, function(acc, x) {
      if (cljs.core.count.call(null, acc) < n) {
        return cljs.core.sort.call(null, cljs.core.conj.call(null, acc, x));
      } else {
        if (x > cljs.core.first.call(null, acc)) {
          return cljs.core.sort.call(null, cljs.core.conj.call(null, cljs.core.next.call(null, acc), x));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return acc;
          } else {
            return null;
          }
        }
      }
    }, cljs.core.PersistentVector.EMPTY, coll));
  };
  G__13317 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__13317__1.call(this, n);
      case 2:
        return G__13317__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__13317;
}(), new cljs.core.Symbol(null, "sum", "sum", -1640417276, null), function(p1__13315_SHARP_) {
  return cljs.core.reduce.call(null, cljs.core._PLUS_, 0, p1__13315_SHARP_);
}, new cljs.core.Symbol(null, "rand", "rand", -1637038626, null), function() {
  var G__13318 = null;
  var G__13318__1 = function(coll) {
    return cljs.core.rand_nth.call(null, coll);
  };
  var G__13318__2 = function(n, coll) {
    return cljs.core.vec.call(null, cljs.core.repeatedly.call(null, n, function() {
      return cljs.core.rand_nth.call(null, coll);
    }));
  };
  G__13318 = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return G__13318__1.call(this, n);
      case 2:
        return G__13318__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__13318;
}(), new cljs.core.Symbol(null, "sample", "sample", 1744760675, null), function(n, coll) {
  return cljs.core.vec.call(null, cljs.core.take.call(null, n, cljs.core.shuffle.call(null, coll)));
}, new cljs.core.Symbol(null, "count", "count", -1545680184, null), cljs.core.count], null);
datascript.aggr_group_key = function aggr_group_key(find, result) {
  return cljs.core.mapv.call(null, function(val, sym) {
    if (cljs.core.sequential_QMARK_.call(null, sym)) {
      return null;
    } else {
      return val;
    }
  }, result, find);
};
datascript._aggregate = function _aggregate(find, scope, results) {
  return cljs.core.mapv.call(null, function(sym, val, i) {
    if (cljs.core.sequential_QMARK_.call(null, sym)) {
      var vec__13321 = sym;
      var f = cljs.core.nth.call(null, vec__13321, 0, null);
      var args = cljs.core.nthnext.call(null, vec__13321, 1);
      var vals = cljs.core.map.call(null, function(vec__13321, f, args) {
        return function(p1__13319_SHARP_) {
          return cljs.core.get.call(null, p1__13319_SHARP_, i);
        };
      }(vec__13321, f, args), results);
      var args__$1 = cljs.core.concat.call(null, datascript.bind_symbols.call(null, cljs.core.butlast.call(null, args), scope), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [vals], null));
      var f__$1 = function() {
        var or__10329__auto__ = datascript.built_in_aggregates.call(null, f);
        if (cljs.core.truth_(or__10329__auto__)) {
          return or__10329__auto__;
        } else {
          return scope.call(null, f);
        }
      }();
      return cljs.core.apply.call(null, f__$1, args__$1);
    } else {
      return val;
    }
  }, find, cljs.core.first.call(null, results), cljs.core.range.call(null));
};
datascript.aggregate = function aggregate(query, scope, results) {
  var find = cljs.core.concat.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query), (new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query));
  return cljs.core.mapv.call(null, function(p__13325) {
    var vec__13326 = p__13325;
    var _ = cljs.core.nth.call(null, vec__13326, 0, null);
    var results__$1 = cljs.core.nth.call(null, vec__13326, 1, null);
    return datascript._aggregate.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query), scope, results__$1);
  }, cljs.core.group_by.call(null, function(p1__13322_SHARP_) {
    return datascript.aggr_group_key.call(null, find, p1__13322_SHARP_);
  }, results));
};
datascript.parse_query = function parse_query(query) {
  var parsed = cljs.core.PersistentArrayMap.EMPTY;
  var key = null;
  var qs = query;
  while (true) {
    var temp__4090__auto__ = cljs.core.first.call(null, qs);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var q = temp__4090__auto__;
      if (q instanceof cljs.core.Keyword) {
        var G__13327 = parsed;
        var G__13328 = q;
        var G__13329 = cljs.core.next.call(null, qs);
        parsed = G__13327;
        key = G__13328;
        qs = G__13329;
        continue;
      } else {
        var G__13330 = cljs.core.update_in.call(null, parsed, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentVector.EMPTY), q);
        var G__13331 = key;
        var G__13332 = cljs.core.next.call(null, qs);
        parsed = G__13330;
        key = G__13331;
        qs = G__13332;
        continue;
      }
    } else {
      return parsed;
    }
    break;
  }
};
datascript.q = function() {
  var q__delegate = function(query, sources) {
    var query__$1 = function() {
      var G__13337 = query;
      var G__13337__$1 = cljs.core.sequential_QMARK_.call(null, query) ? datascript.parse_query.call(null, G__13337) : G__13337;
      return G__13337__$1;
    }();
    var ins__GT_sources = cljs.core.zipmap.call(null, (new cljs.core.Keyword(null, "in", "in", 1013907607)).cljs$core$IFn$_invoke$arity$2(query__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null)], null)), sources);
    var find = cljs.core.concat.call(null, cljs.core.map.call(null, function(query__$1, ins__GT_sources) {
      return function(p1__13333_SHARP_) {
        if (cljs.core.sequential_QMARK_.call(null, p1__13333_SHARP_)) {
          return cljs.core.last.call(null, p1__13333_SHARP_);
        } else {
          return p1__13333_SHARP_;
        }
      };
    }(query__$1, ins__GT_sources), (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)), (new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query__$1));
    var results = datascript._q.call(null, ins__GT_sources, (new cljs.core.Keyword(null, "where", "where", 1127002201)).cljs$core$IFn$_invoke$arity$1(query__$1), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "__find", "__find", 3824551179), find], null));
    var G__13338 = results;
    var G__13338__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "with", "with", 1017553976)).cljs$core$IFn$_invoke$arity$1(query__$1)) ? cljs.core.mapv.call(null, function(G__13338) {
      return function(p1__13334_SHARP_) {
        return cljs.core.subvec.call(null, p1__13334_SHARP_, 0, cljs.core.count.call(null, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)));
      };
    }(G__13338), G__13338) : G__13338;
    var G__13338__$2 = cljs.core.truth_(cljs.core.not_empty.call(null, cljs.core.filter.call(null, cljs.core.sequential_QMARK_, (new cljs.core.Keyword(null, "find", "find", 1017047339)).cljs$core$IFn$_invoke$arity$1(query__$1)))) ? datascript.aggregate.call(null, query__$1, ins__GT_sources, G__13338__$1) : G__13338__$1;
    return G__13338__$2;
  };
  var q = function(query, var_args) {
    var sources = null;
    if (arguments.length > 1) {
      sources = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return q__delegate.call(this, query, sources);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__13339) {
    var query = cljs.core.first(arglist__13339);
    var sources = cljs.core.rest(arglist__13339);
    return q__delegate(query, sources);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
datascript.entity = function entity(db, eid) {
  var temp__4092__auto__ = cljs.core.not_empty.call(null, cljs.core.get_in.call(null, db, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ea", "ea", 1013907470), eid], null)));
  if (cljs.core.truth_(temp__4092__auto__)) {
    var attrs = temp__4092__auto__;
    return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), eid], null), function() {
      var iter__11046__auto__ = function iter__13348(s__13349) {
        return new cljs.core.LazySeq(null, function() {
          var s__13349__$1 = s__13349;
          while (true) {
            var temp__4092__auto____$1 = cljs.core.seq.call(null, s__13349__$1);
            if (temp__4092__auto____$1) {
              var s__13349__$2 = temp__4092__auto____$1;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__13349__$2)) {
                var c__11044__auto__ = cljs.core.chunk_first.call(null, s__13349__$2);
                var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
                var b__13351 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
                if (function() {
                  var i__13350 = 0;
                  while (true) {
                    if (i__13350 < size__11045__auto__) {
                      var vec__13354 = cljs.core._nth.call(null, c__11044__auto__, i__13350);
                      var attr = cljs.core.nth.call(null, vec__13354, 0, null);
                      var datoms = cljs.core.nth.call(null, vec__13354, 1, null);
                      cljs.core.chunk_append.call(null, b__13351, datascript.multival_QMARK_.call(null, db, attr) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.map.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), datoms)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.first.call(null, datoms).v], null));
                      var G__13356 = i__13350 + 1;
                      i__13350 = G__13356;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13351), iter__13348.call(null, cljs.core.chunk_rest.call(null, s__13349__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13351), null);
                }
              } else {
                var vec__13355 = cljs.core.first.call(null, s__13349__$2);
                var attr = cljs.core.nth.call(null, vec__13355, 0, null);
                var datoms = cljs.core.nth.call(null, vec__13355, 1, null);
                return cljs.core.cons.call(null, datascript.multival_QMARK_.call(null, db, attr) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.map.call(null, new cljs.core.Keyword(null, "v", "v", 1013904360), datoms)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [attr, cljs.core.first.call(null, datoms).v], null), iter__13348.call(null, cljs.core.rest.call(null, s__13349__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__11046__auto__.call(null, attrs);
    }());
  } else {
    return null;
  }
};
datascript.with$ = function with$(db, entities) {
  return datascript._with.call(null, db, cljs.core.map.call(null, function(p1__13358_SHARP_) {
    return datascript.resolve_eid.call(null, db, p1__13358_SHARP_);
  }, cljs.core.mapcat.call(null, function(p1__13357_SHARP_) {
    return datascript.entity__GT_tx_data.call(null, db, p1__13357_SHARP_);
  }, entities)));
};
datascript.tx0 = 536870912;
datascript.empty_db = function() {
  var empty_db__delegate = function(p__13359) {
    var vec__13361 = p__13359;
    var schema = cljs.core.nth.call(null, vec__13361, 0, null);
    return new datascript.DB(schema, cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, 0, datascript.tx0);
  };
  var empty_db = function(var_args) {
    var p__13359 = null;
    if (arguments.length > 0) {
      p__13359 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return empty_db__delegate.call(this, p__13359);
  };
  empty_db.cljs$lang$maxFixedArity = 0;
  empty_db.cljs$lang$applyTo = function(arglist__13362) {
    var p__13359 = cljs.core.seq(arglist__13362);
    return empty_db__delegate(p__13359);
  };
  empty_db.cljs$core$IFn$_invoke$arity$variadic = empty_db__delegate;
  return empty_db;
}();
datascript.create_conn = function() {
  var create_conn__delegate = function(p__13363) {
    var vec__13365 = p__13363;
    var schema = cljs.core.nth.call(null, vec__13365, 0, null);
    return cljs.core.atom.call(null, datascript.empty_db.call(null, schema), new cljs.core.Keyword(null, "meta", "meta", 1017252215), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "listeners", "listeners", 4090152369), cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY)], null));
  };
  var create_conn = function(var_args) {
    var p__13363 = null;
    if (arguments.length > 0) {
      p__13363 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return create_conn__delegate.call(this, p__13363);
  };
  create_conn.cljs$lang$maxFixedArity = 0;
  create_conn.cljs$lang$applyTo = function(arglist__13366) {
    var p__13363 = cljs.core.seq(arglist__13366);
    return create_conn__delegate(p__13363);
  };
  create_conn.cljs$core$IFn$_invoke$arity$variadic = create_conn__delegate;
  return create_conn;
}();
datascript.transact_BANG_ = function transact_BANG_(conn, entities) {
  var meta = cljs.core.meta.call(null, conn);
  var db_before = cljs.core.atom.call(null, null);
  var tx_data = cljs.core.atom.call(null, null);
  var tempids = cljs.core.atom.call(null, null);
  var error = cljs.core.atom.call(null, null);
  var db_after = cljs.core.swap_BANG_.call(null, conn, function(meta, db_before, tx_data, tempids, error) {
    return function(db) {
      var raw_datoms = function() {
        try {
          return cljs.core.mapcat.call(null, function(meta, db_before, tx_data, tempids, error) {
            return function(p1__13367_SHARP_) {
              return datascript.entity__GT_tx_data.call(null, db, p1__13367_SHARP_);
            };
          }(meta, db_before, tx_data, tempids, error), entities);
        } catch (e13378) {
          if (e13378 instanceof Object) {
            var e = e13378;
            return cljs.core.reset_BANG_.call(null, error, e);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw e13378;
            } else {
              return null;
            }
          }
        }
      }();
      if (cljs.core.truth_(cljs.core.deref.call(null, error))) {
        return db;
      } else {
        var datoms = cljs.core.map.call(null, function(raw_datoms, meta, db_before, tx_data, tempids, error) {
          return function(p1__13368_SHARP_) {
            return datascript.resolve_eid.call(null, db, p1__13368_SHARP_);
          };
        }(raw_datoms, meta, db_before, tx_data, tempids, error), raw_datoms);
        cljs.core.reset_BANG_.call(null, db_before, db);
        cljs.core.reset_BANG_.call(null, tx_data, datoms);
        cljs.core.reset_BANG_.call(null, tempids, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(datoms, raw_datoms, meta, db_before, tx_data, tempids, error) {
          return function(p1__13370_SHARP_) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__13370_SHARP_.e, datascript._resolve_eid.call(null, p1__13370_SHARP_.e, db)], null);
          };
        }(datoms, raw_datoms, meta, db_before, tx_data, tempids, error), cljs.core.filter.call(null, function(datoms, raw_datoms, meta, db_before, tx_data, tempids, error) {
          return function(p1__13369_SHARP_) {
            return p1__13369_SHARP_.e < 0;
          };
        }(datoms, raw_datoms, meta, db_before, tx_data, tempids, error), raw_datoms))));
        return datascript._with.call(null, db, datoms);
      }
    };
  }(meta, db_before, tx_data, tempids, error));
  var temp__4090__auto__ = cljs.core.deref.call(null, error);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var e = temp__4090__auto__;
    throw e;
  } else {
    var report = new datascript.TxReport(cljs.core.deref.call(null, db_before), db_after, cljs.core.deref.call(null, tx_data));
    var seq__13379_13385 = cljs.core.seq.call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(meta)));
    var chunk__13380_13386 = null;
    var count__13381_13387 = 0;
    var i__13382_13388 = 0;
    while (true) {
      if (i__13382_13388 < count__13381_13387) {
        var vec__13383_13389 = cljs.core._nth.call(null, chunk__13380_13386, i__13382_13388);
        var __13390 = cljs.core.nth.call(null, vec__13383_13389, 0, null);
        var l_13391 = cljs.core.nth.call(null, vec__13383_13389, 1, null);
        l_13391.call(null, report);
        var G__13392 = seq__13379_13385;
        var G__13393 = chunk__13380_13386;
        var G__13394 = count__13381_13387;
        var G__13395 = i__13382_13388 + 1;
        seq__13379_13385 = G__13392;
        chunk__13380_13386 = G__13393;
        count__13381_13387 = G__13394;
        i__13382_13388 = G__13395;
        continue;
      } else {
        var temp__4092__auto___13396 = cljs.core.seq.call(null, seq__13379_13385);
        if (temp__4092__auto___13396) {
          var seq__13379_13397__$1 = temp__4092__auto___13396;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__13379_13397__$1)) {
            var c__11077__auto___13398 = cljs.core.chunk_first.call(null, seq__13379_13397__$1);
            var G__13399 = cljs.core.chunk_rest.call(null, seq__13379_13397__$1);
            var G__13400 = c__11077__auto___13398;
            var G__13401 = cljs.core.count.call(null, c__11077__auto___13398);
            var G__13402 = 0;
            seq__13379_13385 = G__13399;
            chunk__13380_13386 = G__13400;
            count__13381_13387 = G__13401;
            i__13382_13388 = G__13402;
            continue;
          } else {
            var vec__13384_13403 = cljs.core.first.call(null, seq__13379_13397__$1);
            var __13404 = cljs.core.nth.call(null, vec__13384_13403, 0, null);
            var l_13405 = cljs.core.nth.call(null, vec__13384_13403, 1, null);
            l_13405.call(null, report);
            var G__13406 = cljs.core.next.call(null, seq__13379_13397__$1);
            var G__13407 = null;
            var G__13408 = 0;
            var G__13409 = 0;
            seq__13379_13385 = G__13406;
            chunk__13380_13386 = G__13407;
            count__13381_13387 = G__13408;
            i__13382_13388 = G__13409;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return cljs.core.assoc.call(null, report, new cljs.core.Keyword(null, "tempids", "tempids", 3880764886), cljs.core.deref.call(null, tempids));
  }
};
datascript.listen_BANG_ = function() {
  var listen_BANG_ = null;
  var listen_BANG___2 = function(conn, callback) {
    return listen_BANG_.call(null, conn, cljs.core.rand.call(null), callback);
  };
  var listen_BANG___3 = function(conn, key, callback) {
    cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, conn)), cljs.core.assoc, key, callback);
    return key;
  };
  listen_BANG_ = function(conn, key, callback) {
    switch(arguments.length) {
      case 2:
        return listen_BANG___2.call(this, conn, key);
      case 3:
        return listen_BANG___3.call(this, conn, key, callback);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen_BANG_.cljs$core$IFn$_invoke$arity$2 = listen_BANG___2;
  listen_BANG_.cljs$core$IFn$_invoke$arity$3 = listen_BANG___3;
  return listen_BANG_;
}();
datascript.unlisten_BANG_ = function unlisten_BANG_(conn, key) {
  return cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "listeners", "listeners", 4090152369)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, conn)), cljs.core.dissoc, key);
};
goog.provide("cljs_uuid_utils");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
cljs_uuid_utils.uuid_string = function uuid_string(a_uuid) {
  return[cljs.core.str(a_uuid.uuid)].join("");
};
cljs_uuid_utils.make_random_uuid = function make_random_uuid() {
  var f = function f() {
    return cljs.core.rand_int.call(null, 16).toString(16);
  };
  var g = function g() {
    return(8 | 3 & cljs.core.rand_int.call(null, 15)).toString(16);
  };
  return new cljs.core.UUID((new goog.string.StringBuffer).append(f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), "-4", f.call(null), f.call(null), f.call(null), "-", g.call(null), f.call(null), f.call(null), f.call(null), "-", f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), f.call(null), 
  f.call(null)));
};
cljs_uuid_utils.uuid_regex = function() {
  var x = "[0-9a-fA-F]";
  return cljs.core.re_pattern.call(null, [cljs.core.str("^"), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("-"), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("-"), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("-"), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("-"), 
  cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str(x), cljs.core.str("$")].join(""));
}();
cljs_uuid_utils.valid_uuid_QMARK_ = function valid_uuid_QMARK_(maybe_uuid) {
  var maybe_uuid_str = cljs.core._EQ_.call(null, cljs.core.type.call(null, maybe_uuid), cljs.core.UUID) ? cljs_uuid_utils.uuid_string.call(null, maybe_uuid) : typeof maybe_uuid === "string" ? maybe_uuid : new cljs.core.Keyword(null, "true", "true", 1017473280) ? false : null;
  if (cljs.core.truth_(maybe_uuid_str)) {
    return cljs.core.re_find.call(null, cljs_uuid_utils.uuid_regex, maybe_uuid_str);
  } else {
    return null;
  }
};
cljs_uuid_utils.make_uuid_from = function make_uuid_from(maybe_uuid) {
  var temp__4092__auto__ = cljs_uuid_utils.valid_uuid_QMARK_.call(null, maybe_uuid);
  if (cljs.core.truth_(temp__4092__auto__)) {
    var uuid = temp__4092__auto__;
    if (cljs.core._EQ_.call(null, cljs.core.type.call(null, maybe_uuid), cljs.core.UUID)) {
      return maybe_uuid;
    } else {
      return new cljs.core.UUID(uuid);
    }
  } else {
    return null;
  }
};
goog.provide("todomvc.transact");
goog.require("cljs.core");
goog.require("cljs_uuid_utils");
goog.require("cljs_uuid_utils");
goog.require("datascript");
goog.require("datascript");
todomvc.transact.log_event = function() {
  var log_event__delegate = function(db, event, args) {
    var evente = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -100, new cljs.core.Keyword(null, "event", "event", 1110795788), event, new cljs.core.Keyword(null, "args", "args", 1016906831), args], null);
    var temp__4090__auto__ = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "last-event", "last-event", 1851999253)], null)], null)], null), db));
    if (cljs.core.truth_(temp__4090__auto__)) {
      var prev_event_eid = temp__4090__auto__;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.call(null, evente, new cljs.core.Keyword(null, "prev-event", "prev-event", 3549456882), prev_event_eid), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "retractAttribute", "db.fn/retractAttribute", 3416849171), prev_event_eid, new cljs.core.Keyword(null, "last-event", "last-event", 1851999253)], null)], null);
    } else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [evente], null);
    }
  };
  var log_event = function(db, event, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return log_event__delegate.call(this, db, event, args);
  };
  log_event.cljs$lang$maxFixedArity = 2;
  log_event.cljs$lang$applyTo = function(arglist__13149) {
    var db = cljs.core.first(arglist__13149);
    arglist__13149 = cljs.core.next(arglist__13149);
    var event = cljs.core.first(arglist__13149);
    var args = cljs.core.rest(arglist__13149);
    return log_event__delegate(db, event, args);
  };
  log_event.cljs$core$IFn$_invoke$arity$variadic = log_event__delegate;
  return log_event;
}();
todomvc.transact.set_filter = function set_filter(db, this_filter) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "set-filter", "set-filter", 2331384501), this_filter], null), function() {
    var e = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "filter", "filter", 4034379498)], null)], null)], null), db));
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "filter", "filter", 4034379498), this_filter], null);
  }()], null);
};
todomvc.transact.seed_item = function seed_item(db, id, text, completed) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "seed-item", "seed-item", 1596530785), id, text, completed], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, "id", 
  "id", 1013907597), id, new cljs.core.Keyword(null, "text", "text", 1017460895), text, new cljs.core.Keyword(null, "completed", "completed", 3905939901), completed, new cljs.core.Keyword(null, "commited", "commited", 4706580360), true], null)], null);
};
todomvc.transact.remove_item = function remove_item(db, id) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), id], null), function() {
    var e = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null), 
    new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null)], null)], null), db, id));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "retractEntity", "db.fn/retractEntity", 4213852396), e], null);
  }()], null);
};
todomvc.transact.clear_completed = function clear_completed(db) {
  var eids_PLUS_ids = datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 
  3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "completed", "completed", 3905939901), true], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null)], null)], null), db);
  return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "clear-completed", "clear-completed", 888981053), cljs.core.map.call(null, cljs.core.second, eids_PLUS_ids)], null)], null), function() {
    var iter__11046__auto__ = function iter__13154(s__13155) {
      return new cljs.core.LazySeq(null, function() {
        var s__13155__$1 = s__13155;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__13155__$1);
          if (temp__4092__auto__) {
            var s__13155__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13155__$2)) {
              var c__11044__auto__ = cljs.core.chunk_first.call(null, s__13155__$2);
              var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
              var b__13157 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
              if (function() {
                var i__13156 = 0;
                while (true) {
                  if (i__13156 < size__11045__auto__) {
                    var e = cljs.core._nth.call(null, c__11044__auto__, i__13156);
                    cljs.core.chunk_append.call(null, b__13157, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "retractEntity", "db.fn/retractEntity", 4213852396), e], null));
                    var G__13158 = i__13156 + 1;
                    i__13156 = G__13158;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13157), iter__13154.call(null, cljs.core.chunk_rest.call(null, s__13155__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13157), null);
              }
            } else {
              var e = cljs.core.first.call(null, s__13155__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "retractEntity", "db.fn/retractEntity", 4213852396), e], null), iter__13154.call(null, cljs.core.rest.call(null, s__13155__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__11046__auto__.call(null, cljs.core.map.call(null, cljs.core.first, eids_PLUS_ids));
  }());
};
todomvc.transact.toggle_item = function toggle_item(db, id) {
  var vec__13160 = cljs.core.first.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Symbol(null, "?completed", "?completed", 1756055205, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Symbol(null, "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", 
  -1640467629, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "completed", "completed", 3905939901), new cljs.core.Symbol(null, "?completed", "?completed", 1756055205, null)], null)], null)], null), db, id));
  var e = cljs.core.nth.call(null, vec__13160, 0, null);
  var completed = cljs.core.nth.call(null, vec__13160, 1, null);
  var completed__$1 = cljs.core.not.call(null, completed);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), id, completed__$1], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), 
  e, new cljs.core.Keyword(null, "completed", "completed", 3905939901), completed__$1], null)], null);
};
todomvc.transact.toggle_all = function toggle_all(db) {
  var e_PLUS_id_PLUS_completed = datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null), new cljs.core.Symbol(null, "?completed", "?completed", 1756055205, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), 
  new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, 
  "completed", "completed", 3905939901), new cljs.core.Symbol(null, "?completed", "?completed", 1756055205, null)], null)], null)], null), db);
  var target = !cljs.core.every_QMARK_.call(null, function(e_PLUS_id_PLUS_completed) {
    return function(p__13171) {
      var vec__13172 = p__13171;
      var _ = cljs.core.nth.call(null, vec__13172, 0, null);
      var ___$1 = cljs.core.nth.call(null, vec__13172, 1, null);
      var completed = cljs.core.nth.call(null, vec__13172, 2, null);
      return completed;
    };
  }(e_PLUS_id_PLUS_completed), e_PLUS_id_PLUS_completed);
  return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "toggle-all", "toggle-all", 4455256858)], null)], null), function() {
    var iter__11046__auto__ = function iter__13173(s__13174) {
      return new cljs.core.LazySeq(null, function() {
        var s__13174__$1 = s__13174;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__13174__$1);
          if (temp__4092__auto__) {
            var s__13174__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13174__$2)) {
              var c__11044__auto__ = cljs.core.chunk_first.call(null, s__13174__$2);
              var size__11045__auto__ = cljs.core.count.call(null, c__11044__auto__);
              var b__13176 = cljs.core.chunk_buffer.call(null, size__11045__auto__);
              if (function() {
                var i__13175 = 0;
                while (true) {
                  if (i__13175 < size__11045__auto__) {
                    var vec__13179 = cljs.core._nth.call(null, c__11044__auto__, i__13175);
                    var e = cljs.core.nth.call(null, vec__13179, 0, null);
                    var id = cljs.core.nth.call(null, vec__13179, 1, null);
                    var completed = cljs.core.nth.call(null, vec__13179, 2, null);
                    if (cljs.core._EQ_.call(null, completed, !target)) {
                      cljs.core.chunk_append.call(null, b__13176, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "completed", "completed", 3905939901), target], null));
                      var G__13181 = i__13175 + 1;
                      i__13175 = G__13181;
                      continue;
                    } else {
                      var G__13182 = i__13175 + 1;
                      i__13175 = G__13182;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13176), iter__13173.call(null, cljs.core.chunk_rest.call(null, s__13174__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13176), null);
              }
            } else {
              var vec__13180 = cljs.core.first.call(null, s__13174__$2);
              var e = cljs.core.nth.call(null, vec__13180, 0, null);
              var id = cljs.core.nth.call(null, vec__13180, 1, null);
              var completed = cljs.core.nth.call(null, vec__13180, 2, null);
              if (cljs.core._EQ_.call(null, completed, !target)) {
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "completed", "completed", 3905939901), target], null), iter__13173.call(null, cljs.core.rest.call(null, s__13174__$2)));
              } else {
                var G__13183 = cljs.core.rest.call(null, s__13174__$2);
                s__13174__$1 = G__13183;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__11046__auto__.call(null, e_PLUS_id_PLUS_completed);
  }());
};
todomvc.transact.error = function error(db, msg) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "error", "error", 1110689146), msg], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, "error", "error", 1110689146), 
  msg], null)], null);
};
todomvc.transact.create_item = function create_item(db, text) {
  var temp_id = cljs_uuid_utils.make_random_uuid.call(null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "create-item", "create-item", 4768804022), temp_id, text], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, "id", "id", 
  1013907597), temp_id, new cljs.core.Keyword(null, "commited", "commited", 4706580360), false, new cljs.core.Keyword(null, "completed", "completed", 3905939901), false, new cljs.core.Keyword(null, "text", "text", 1017460895), text], null)], null);
};
todomvc.transact.commit_item = function commit_item(db, temp_id, id) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "commit-item", "commit-item", 2479329627), temp_id, id], null), function() {
    var e = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null), 
    new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null)], null)], null), db, temp_id));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), e, new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "commited", "commited", 4706580360), true], null);
  }()], null);
};
todomvc.transact.start_edit = function start_edit(db, id) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "start-edit", "start-edit", 3689098247), id], null), function() {
    var e = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null), 
    new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null)], null)], null), db, id));
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "editing", "editing", 3420907786), true], null);
  }()], null);
};
todomvc.transact.complete_edit = function complete_edit(db, id, text) {
  return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "complete-edit", "complete-edit", 1152265616), id, text], null)], null), function() {
    var e = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null), 
    new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null)], null)], null), db, id));
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "editing", "editing", 3420907786), false], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "commited", "commited", 
    4706580360), false], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "text", "text", 1017460895), text], null)], null);
  }());
};
todomvc.transact.commit_edit = function commit_edit(db, id) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.log_event, new cljs.core.Keyword(null, "commit-edit", "commit-edit", 2479195218), id], null), function() {
    var e = cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "$", "$", -1640531491, null), 
    new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null)], null)], null), db, id));
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db", "add", "db/add", 1014207040), e, new cljs.core.Keyword(null, "commited", "commited", 4706580360), true], null);
  }()], null);
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.elements_ = [];
};
goog.structs.Queue.prototype.head_ = 0;
goog.structs.Queue.prototype.tail_ = 0;
goog.structs.Queue.prototype.enqueue = function(element) {
  this.elements_[this.tail_++] = element;
};
goog.structs.Queue.prototype.dequeue = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  var result = this.elements_[this.head_];
  delete this.elements_[this.head_];
  this.head_++;
  return result;
};
goog.structs.Queue.prototype.peek = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  return this.elements_[this.head_];
};
goog.structs.Queue.prototype.getCount = function() {
  return this.tail_ - this.head_;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return this.tail_ - this.head_ == 0;
};
goog.structs.Queue.prototype.clear = function() {
  this.elements_.length = 0;
  this.head_ = 0;
  this.tail_ = 0;
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.elements_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.indexOf(this.elements_, obj);
  if (index < 0) {
    return false;
  }
  if (index == this.head_) {
    this.dequeue();
  } else {
    goog.array.removeAt(this.elements_, index);
    this.tail_--;
  }
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  return this.elements_.slice(this.head_, this.tail_);
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = (this.freeQueue_.dequeue());
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject((freeQueue.dequeue()));
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject((freeQueue.dequeue()));
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.prototype.delayTimeout_;
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    goog.structs.forEach(headers, function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || (goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1")), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || (goog.userAgent.OPERA || goog.userAgent.WEBKIT), INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.events");
goog.require("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = [];
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (!goog.isArray(type)) {
    goog.events.EventHandler.typeArray_[0] = (type);
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var key = (goog.events.listen(src, type[i], opt_fn || this, opt_capture || false, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var key = (goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  return this.keys_.length;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this));
    if (listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key);
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0;
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.base(this);
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = request.xhrLite = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && (!request.getCompleted() && !request.hasReachedMaxRetries())) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || (xhrIo.isSuccess() || request.hasReachedMaxRetries())) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  var requests = this.requests_;
  goog.structs.forEach(requests, function(value, key) {
    value.dispose();
  });
  requests.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
  this.xhrLite = (xhrIo);
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  goog.Disposable.call(this);
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.inherits(goog.net.XhrManager.Request, goog.Disposable);
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrManager.Request.prototype.disposeInternal = function() {
  goog.net.XhrManager.Request.superClass_.disposeInternal.call(this);
  delete this.xhrEventCallback_;
  delete this.completeCallback_;
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__18279 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__18279;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__18283 = cljs.core._EQ_;
    var expr__18284 = limit;
    if (cljs.core.truth_(pred__18283.call(null, 1, expr__18284))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__18283.call(null, 2, expr__18284))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__18286 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__18287 = limit__$1 - 1;
            var G__18288 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__18286;
            limit__$1 = G__18287;
            parts = G__18288;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__18289 = index - 1;
        index = G__18289;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___18290 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___18290)) {
        var replacement_18291 = temp__4090__auto___18290;
        buffer.append([cljs.core.str(replacement_18291)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__18292 = index + 1;
      index = G__18292;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj18177 = {};
  return obj18177;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__10317__auto__ = reader;
    if (and__10317__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__10956__auto__ = reader == null ? null : reader;
    return function() {
      var or__10329__auto__ = cljs.reader.read_char[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.reader.read_char["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__10317__auto__ = reader;
    if (and__10317__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__10956__auto__ = reader == null ? null : reader;
    return function() {
      var or__10329__auto__ = cljs.reader.unread[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.reader.unread["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__10896__auto__, writer__10897__auto__, opt__10898__auto__) {
  return cljs.core._write.call(null, writer__10897__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__10329__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__18178) {
    var rdr = cljs.core.first(arglist__18178);
    var msg = cljs.core.rest(arglist__18178);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__10317__auto__ = !(ch === "#");
  if (and__10317__auto__) {
    var and__10317__auto____$1 = !(ch === "'");
    if (and__10317__auto____$1) {
      var and__10317__auto____$2 = !(ch === ":");
      if (and__10317__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__10317__auto____$2;
      }
    } else {
      return and__10317__auto____$1;
    }
  } else {
    return and__10317__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__18179 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__18180 = cljs.reader.read_char.call(null, rdr);
      sb = G__18179;
      ch = G__18180;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__18181 = cljs.reader.read_char.call(null, rdr);
      ch = G__18181;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__18182 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__18182;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__18183 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__18183;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__10329__auto__ = ch == null;
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__10329__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__18184 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__18185 = cljs.reader.read_char.call(null, reader);
      buffer = G__18184;
      ch = G__18185;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__18186 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__18187 = cljs.reader.read_char.call(null, reader);
        buffer = G__18186;
        ch = G__18187;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__18188 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__18189 = cljs.reader.read_char.call(null, reader);
            buffer = G__18188;
            ch = G__18189;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__18191 = o;
    if (G__18191) {
      var bit__10979__auto__ = G__18191.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__10979__auto__ || G__18191.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__18191.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__18191);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__18191);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__18192 = reader;
        var G__18193 = eof_is_error;
        var G__18194 = sentinel;
        var G__18195 = is_recursive;
        reader = G__18192;
        eof_is_error = G__18193;
        sentinel = G__18194;
        is_recursive = G__18195;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__18196 = cljs.reader.read_comment.call(null, reader, ch);
          var G__18197 = eof_is_error;
          var G__18198 = sentinel;
          var G__18199 = is_recursive;
          reader = G__18196;
          eof_is_error = G__18197;
          sentinel = G__18198;
          is_recursive = G__18199;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__18200 = reader;
              var G__18201 = eof_is_error;
              var G__18202 = sentinel;
              var G__18203 = is_recursive;
              reader = G__18200;
              eof_is_error = G__18201;
              sentinel = G__18202;
              is_recursive = G__18203;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__18204 = b.append("0");
            b = G__18204;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__18206 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__18206, 0, null);
  var years = cljs.core.nth.call(null, vec__18206, 1, null);
  var months = cljs.core.nth.call(null, vec__18206, 2, null);
  var days = cljs.core.nth.call(null, vec__18206, 3, null);
  var hours = cljs.core.nth.call(null, vec__18206, 4, null);
  var minutes = cljs.core.nth.call(null, vec__18206, 5, null);
  var seconds = cljs.core.nth.call(null, vec__18206, 6, null);
  var fraction = cljs.core.nth.call(null, vec__18206, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__18206, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__18206, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__18206, 10, null);
  var v = vec__18206;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__10329__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__18208 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__18208, 0, null);
    var months = cljs.core.nth.call(null, vec__18208, 1, null);
    var days = cljs.core.nth.call(null, vec__18208, 2, null);
    var hours = cljs.core.nth.call(null, vec__18208, 3, null);
    var minutes = cljs.core.nth.call(null, vec__18208, 4, null);
    var seconds = cljs.core.nth.call(null, vec__18208, 5, null);
    var ms = cljs.core.nth.call(null, vec__18208, 6, null);
    var offset = cljs.core.nth.call(null, vec__18208, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__18221_18233 = cljs.core.seq.call(null, form);
    var chunk__18222_18234 = null;
    var count__18223_18235 = 0;
    var i__18224_18236 = 0;
    while (true) {
      if (i__18224_18236 < count__18223_18235) {
        var x_18237 = cljs.core._nth.call(null, chunk__18222_18234, i__18224_18236);
        arr.push(x_18237);
        var G__18238 = seq__18221_18233;
        var G__18239 = chunk__18222_18234;
        var G__18240 = count__18223_18235;
        var G__18241 = i__18224_18236 + 1;
        seq__18221_18233 = G__18238;
        chunk__18222_18234 = G__18239;
        count__18223_18235 = G__18240;
        i__18224_18236 = G__18241;
        continue;
      } else {
        var temp__4092__auto___18242 = cljs.core.seq.call(null, seq__18221_18233);
        if (temp__4092__auto___18242) {
          var seq__18221_18243__$1 = temp__4092__auto___18242;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18221_18243__$1)) {
            var c__11077__auto___18244 = cljs.core.chunk_first.call(null, seq__18221_18243__$1);
            var G__18245 = cljs.core.chunk_rest.call(null, seq__18221_18243__$1);
            var G__18246 = c__11077__auto___18244;
            var G__18247 = cljs.core.count.call(null, c__11077__auto___18244);
            var G__18248 = 0;
            seq__18221_18233 = G__18245;
            chunk__18222_18234 = G__18246;
            count__18223_18235 = G__18247;
            i__18224_18236 = G__18248;
            continue;
          } else {
            var x_18249 = cljs.core.first.call(null, seq__18221_18243__$1);
            arr.push(x_18249);
            var G__18250 = cljs.core.next.call(null, seq__18221_18243__$1);
            var G__18251 = null;
            var G__18252 = 0;
            var G__18253 = 0;
            seq__18221_18233 = G__18250;
            chunk__18222_18234 = G__18251;
            count__18223_18235 = G__18252;
            i__18224_18236 = G__18253;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj18226 = {};
        return obj18226;
      }();
      var seq__18227_18254 = cljs.core.seq.call(null, form);
      var chunk__18228_18255 = null;
      var count__18229_18256 = 0;
      var i__18230_18257 = 0;
      while (true) {
        if (i__18230_18257 < count__18229_18256) {
          var vec__18231_18258 = cljs.core._nth.call(null, chunk__18228_18255, i__18230_18257);
          var k_18259 = cljs.core.nth.call(null, vec__18231_18258, 0, null);
          var v_18260 = cljs.core.nth.call(null, vec__18231_18258, 1, null);
          obj[cljs.core.name.call(null, k_18259)] = v_18260;
          var G__18261 = seq__18227_18254;
          var G__18262 = chunk__18228_18255;
          var G__18263 = count__18229_18256;
          var G__18264 = i__18230_18257 + 1;
          seq__18227_18254 = G__18261;
          chunk__18228_18255 = G__18262;
          count__18229_18256 = G__18263;
          i__18230_18257 = G__18264;
          continue;
        } else {
          var temp__4092__auto___18265 = cljs.core.seq.call(null, seq__18227_18254);
          if (temp__4092__auto___18265) {
            var seq__18227_18266__$1 = temp__4092__auto___18265;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__18227_18266__$1)) {
              var c__11077__auto___18267 = cljs.core.chunk_first.call(null, seq__18227_18266__$1);
              var G__18268 = cljs.core.chunk_rest.call(null, seq__18227_18266__$1);
              var G__18269 = c__11077__auto___18267;
              var G__18270 = cljs.core.count.call(null, c__11077__auto___18267);
              var G__18271 = 0;
              seq__18227_18254 = G__18268;
              chunk__18228_18255 = G__18269;
              count__18229_18256 = G__18270;
              i__18230_18257 = G__18271;
              continue;
            } else {
              var vec__18232_18272 = cljs.core.first.call(null, seq__18227_18266__$1);
              var k_18273 = cljs.core.nth.call(null, vec__18232_18272, 0, null);
              var v_18274 = cljs.core.nth.call(null, vec__18232_18272, 1, null);
              obj[cljs.core.name.call(null, k_18273)] = v_18274;
              var G__18275 = cljs.core.next.call(null, seq__18227_18266__$1);
              var G__18276 = null;
              var G__18277 = 0;
              var G__18278 = 0;
              seq__18227_18254 = G__18275;
              chunk__18228_18255 = G__18276;
              count__18229_18256 = G__18277;
              i__18230_18257 = G__18278;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.json.Serializer");
goog.require("goog.net.XhrManager");
goog.require("goog.Uri.QueryData");
goog.require("goog.events");
goog.require("goog.net.XhrManager");
goog.require("cljs.reader");
goog.require("goog.net.EventType");
goog.require("goog.structs");
goog.require("goog.Uri.QueryData");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("goog.structs");
goog.require("cljs.reader");
goog.require("goog.Uri");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIo");
goog.require("goog.events");
goog.require("goog.Uri");
ajax.core.AjaxImpl = function() {
  var obj18110 = {};
  return obj18110;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__10317__auto__ = this$;
    if (and__10317__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__10317__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__10956__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10329__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__10956__auto__)];
      if (or__10329__auto__) {
        return or__10329__auto__;
      } else {
        var or__10329__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__10329__auto____$1) {
          return or__10329__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__18111) {
  var map__18112 = p__18111;
  var map__18112__$1 = cljs.core.seq_QMARK_.call(null, map__18112) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18112) : map__18112;
  var timeout = cljs.core.get.call(null, map__18112__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var this$__$1 = this;
  var G__18113 = this$__$1;
  goog.events.listen(G__18113, goog.net.EventType.COMPLETE, handler);
  G__18113.send(uri, method, body, headers, timeout);
  return G__18113;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__18114) {
  var map__18115 = p__18114;
  var map__18115__$1 = cljs.core.seq_QMARK_.call(null, map__18115) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18115) : map__18115;
  var max_retries = cljs.core.get.call(null, map__18115__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", 902021455));
  var priority = cljs.core.get.call(null, map__18115__$1, new cljs.core.Keyword(null, "priority", "priority", 4143410454));
  var timeout = cljs.core.get.call(null, map__18115__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var id = cljs.core.get.call(null, map__18115__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, headers, priority, handler, max_retries);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, xhrio.getResponseText());
};
ajax.core.edn_response_format = function edn_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN"], null);
};
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/edn"], null);
};
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.read_text = function read_text(xhrio) {
  return xhrio.getResponseText();
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function raw_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_text, new cljs.core.Keyword(null, "description", "description", 3584325486), "raw text"], null);
};
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/json"], null);
};
ajax.core.json_response_format = function json_response_format(p__18116) {
  var map__18118 = p__18116;
  var map__18118__$1 = cljs.core.seq_QMARK_.call(null, map__18118) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18118) : map__18118;
  var keywords_QMARK_ = cljs.core.get.call(null, map__18118__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 4346628423));
  var prefix = cljs.core.get.call(null, map__18118__$1, new cljs.core.Keyword(null, "prefix", "prefix", 4328760836));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function read_json(xhrio) {
    var json = xhrio.getResponseJson(prefix);
    return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), keywords_QMARK_);
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join("")], null);
};
ajax.core.get_default_format = function get_default_format(xhrio) {
  var ct = xhrio.getResponseHeader("Content-Type");
  var format = cljs.core.truth_(function() {
    var and__10317__auto__ = ct;
    if (cljs.core.truth_(and__10317__auto__)) {
      return ct.indexOf("json") >= 0;
    } else {
      return and__10317__auto__;
    }
  }()) ? ajax.core.json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY) : ajax.core.edn_response_format.call(null);
  return cljs.core.update_in.call(null, format, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "description", "description", 3584325486)], null), function(p1__18119_SHARP_) {
    return[cljs.core.str(p1__18119_SHARP_), cljs.core.str(" (default)")].join("");
  });
};
ajax.core.use_content_type = function use_content_type(format) {
  return cljs.core.dissoc.call(null, format, new cljs.core.Keyword(null, "write", "write", 1127304017));
};
ajax.core.codec = function codec(request_format, p__18120) {
  var map__18122 = p__18120;
  var map__18122__$1 = cljs.core.seq_QMARK_.call(null, map__18122) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18122) : map__18122;
  var response_format = map__18122__$1;
  var description = cljs.core.get.call(null, map__18122__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var read = cljs.core.get.call(null, map__18122__$1, new cljs.core.Keyword(null, "read", "read", 1017400584));
  return cljs.core.assoc.call(null, request_format, new cljs.core.Keyword(null, "read", "read", 1017400584), read, new cljs.core.Keyword(null, "description", "description", 3584325486), description);
};
ajax.core.get_format = function get_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), format, new cljs.core.Keyword(null, "description", "description", 3584325486), "custom"], null));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("unrecognized format: "), cljs.core.str(format)].join(""));
      } else {
        return null;
      }
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__18123, xhrio) {
  var map__18125 = p__18123;
  var map__18125__$1 = cljs.core.seq_QMARK_.call(null, map__18125) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18125) : map__18125;
  var description = cljs.core.get.call(null, map__18125__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var response = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "response", "response", 673580979), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), status_text, new cljs.core.Keyword(null, "is-parse-error", "is-parse-error", 4116943293), true, new cljs.core.Keyword(null, "original-text", "original-text", 2831108891), xhrio.getResponseText());
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "parse-error", "parse-error", 3528843744), parse_error);
  }
};
ajax.core.interpret_response = function interpret_response(format, response, get_default_format) {
  try {
    var xhrio = response.target;
    var status = xhrio.getStatus();
    var format__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format)) ? format : get_default_format.call(null, xhrio);
    var parse = (new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format__$1);
    try {
      var response__$1 = parse.call(null, xhrio);
      if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response__$1], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "response", "response", 673580979), response__$1], null)], null);
      }
    } catch (e18129) {
      if (e18129 instanceof Object) {
        var e = e18129;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format__$1, xhrio)], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e18129;
        } else {
          return null;
        }
      }
    }
  } catch (e18128) {
    if (e18128 instanceof Object) {
      var e = e18128;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), 0, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), e.message, new cljs.core.Keyword(null, "response", "response", 673580979), null], null)], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e18128;
      } else {
        return null;
      }
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.process_inputs = function process_inputs(uri, method, p__18130, p__18131) {
  var map__18135 = p__18130;
  var map__18135__$1 = cljs.core.seq_QMARK_.call(null, map__18135) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18135) : map__18135;
  var format = map__18135__$1;
  var content_type = cljs.core.get.call(null, map__18135__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
  var write = cljs.core.get.call(null, map__18135__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
  var map__18136 = p__18131;
  var map__18136__$1 = cljs.core.seq_QMARK_.call(null, map__18136) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18136) : map__18136;
  var headers = cljs.core.get.call(null, map__18136__$1, new cljs.core.Keyword(null, "headers", "headers", 1809212152));
  var params = cljs.core.get.call(null, map__18136__$1, new cljs.core.Keyword(null, "params", "params", 4313443576));
  if (cljs.core._EQ_.call(null, method, "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers], null);
  } else {
    var map__18137 = format;
    var map__18137__$1 = cljs.core.seq_QMARK_.call(null, map__18137) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18137) : map__18137;
    var content_type__$1 = cljs.core.get.call(null, map__18137__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
    var write__$1 = cljs.core.get.call(null, map__18137__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
    var body = write__$1.call(null, params);
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$1 = cljs.core.merge.call(null, function() {
      var or__10329__auto__ = headers;
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$1], null);
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.base_handler = function base_handler(format, p__18138) {
  var map__18140 = p__18138;
  var map__18140__$1 = cljs.core.seq_QMARK_.call(null, map__18140) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18140) : map__18140;
  var get_default_format = cljs.core.get.call(null, map__18140__$1, new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996));
  var handler = cljs.core.get.call(null, map__18140__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function(xhrio) {
    return handler.call(null, ajax.core.interpret_response.call(null, format, xhrio, function() {
      var or__10329__auto__ = get_default_format;
      if (cljs.core.truth_(or__10329__auto__)) {
        return or__10329__auto__;
      } else {
        return ajax.core.no_format;
      }
    }()));
  };
};
ajax.core.ajax_request = function() {
  var ajax_request = null;
  var ajax_request__3 = function(uri, method, opts) {
    return ajax_request.call(null, uri, method, opts, new goog.net.XhrIo);
  };
  var ajax_request__4 = function(uri, method, p__18141, js_ajax) {
    var map__18144 = p__18141;
    var map__18144__$1 = cljs.core.seq_QMARK_.call(null, map__18144) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18144) : map__18144;
    var opts = map__18144__$1;
    var format = cljs.core.get.call(null, map__18144__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
    var format__$1 = ajax.core.get_format.call(null, format);
    var method__$1 = ajax.core.normalize_method.call(null, method);
    var vec__18145 = ajax.core.process_inputs.call(null, uri, method__$1, format__$1, opts);
    var uri__$1 = cljs.core.nth.call(null, vec__18145, 0, null);
    var body = cljs.core.nth.call(null, vec__18145, 1, null);
    var headers = cljs.core.nth.call(null, vec__18145, 2, null);
    var handler = ajax.core.base_handler.call(null, format__$1, opts);
    return ajax.core._js_ajax_request.call(null, js_ajax, uri__$1, method__$1, body, cljs.core.clj__GT_js.call(null, headers), handler, opts);
  };
  ajax_request = function(uri, method, p__18141, js_ajax) {
    switch(arguments.length) {
      case 3:
        return ajax_request__3.call(this, uri, method, p__18141);
      case 4:
        return ajax_request__4.call(this, uri, method, p__18141, js_ajax);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax_request.cljs$core$IFn$_invoke$arity$3 = ajax_request__3;
  ajax_request.cljs$core$IFn$_invoke$arity$4 = ajax_request__4;
  return ajax_request;
}();
ajax.core.json_format = function json_format(format_params) {
  return ajax.core.codec.call(null, ajax.core.json_request_format.call(null), ajax.core.json_response_format.call(null, format_params));
};
ajax.core.edn_format = function edn_format() {
  return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), ajax.core.edn_response_format.call(null));
};
ajax.core.raw_format = function raw_format() {
  return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), ajax.core.raw_response_format.call(null));
};
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  var G__18147 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "url", "url", 1014020321), G__18147)) {
    return ajax.core.url_request_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__18147)) {
      return ajax.core.url_request_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__18147)) {
        return ajax.core.edn_request_format.call(null);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__18147)) {
          return ajax.core.json_request_format.call(null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  var G__18149 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__18149)) {
    return ajax.core.raw_response_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__18149)) {
      return ajax.core.edn_response_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__18149)) {
        return ajax.core.json_response_format.call(null, format_params);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return null;
        } else {
          return null;
        }
      }
    }
  }
};
ajax.core.transform_handler = function transform_handler(p__18150) {
  var map__18155 = p__18150;
  var map__18155__$1 = cljs.core.seq_QMARK_.call(null, map__18155) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18155) : map__18155;
  var finally$ = cljs.core.get.call(null, map__18155__$1, new cljs.core.Keyword(null, "finally", "finally", 4455611637));
  var error_handler = cljs.core.get.call(null, map__18155__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671));
  var handler = cljs.core.get.call(null, map__18155__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function easy_handler(p__18156) {
    var vec__18158 = p__18156;
    var ok = cljs.core.nth.call(null, vec__18158, 0, null);
    var result = cljs.core.nth.call(null, vec__18158, 1, null);
    var temp__4090__auto___18159 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4090__auto___18159)) {
      var h_18160 = temp__4090__auto___18159;
      h_18160.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
};
ajax.core.transform_format = function transform_format(p__18161) {
  var map__18163 = p__18161;
  var map__18163__$1 = cljs.core.seq_QMARK_.call(null, map__18163) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18163) : map__18163;
  var opts = map__18163__$1;
  var response_format = cljs.core.get.call(null, map__18163__$1, new cljs.core.Keyword(null, "response-format", "response-format", 4250805877));
  var format = cljs.core.get.call(null, map__18163__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
  var rf = ajax.core.keyword_response_format.call(null, response_format, opts);
  if (format == null) {
    return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), rf);
  } else {
    if (format instanceof cljs.core.Keyword) {
      return ajax.core.codec.call(null, ajax.core.keyword_request_format.call(null, format, opts), rf);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return format;
      } else {
        return null;
      }
    }
  }
};
ajax.core.transform_opts = function transform_opts(opts) {
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", 1706707644), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", 4040092521), ajax.core.transform_format.call(null, opts), new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996), ajax.core.get_default_format);
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, p__18164) {
    var vec__18166 = p__18164;
    var opts = cljs.core.nth.call(null, vec__18166, 0, null);
    return ajax.core.ajax_request.call(null, uri, "GET", ajax.core.transform_opts.call(null, opts));
  };
  var GET = function(uri, var_args) {
    var p__18164 = null;
    if (arguments.length > 1) {
      p__18164 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return GET__delegate.call(this, uri, p__18164);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__18167) {
    var uri = cljs.core.first(arglist__18167);
    var p__18164 = cljs.core.rest(arglist__18167);
    return GET__delegate(uri, p__18164);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, p__18168) {
    var vec__18170 = p__18168;
    var opts = cljs.core.nth.call(null, vec__18170, 0, null);
    return ajax.core.ajax_request.call(null, uri, "PUT", ajax.core.transform_opts.call(null, opts));
  };
  var PUT = function(uri, var_args) {
    var p__18168 = null;
    if (arguments.length > 1) {
      p__18168 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return PUT__delegate.call(this, uri, p__18168);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__18171) {
    var uri = cljs.core.first(arglist__18171);
    var p__18168 = cljs.core.rest(arglist__18171);
    return PUT__delegate(uri, p__18168);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, p__18172) {
    var vec__18174 = p__18172;
    var opts = cljs.core.nth.call(null, vec__18174, 0, null);
    return ajax.core.ajax_request.call(null, uri, "POST", ajax.core.transform_opts.call(null, opts));
  };
  var POST = function(uri, var_args) {
    var p__18172 = null;
    if (arguments.length > 1) {
      p__18172 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return POST__delegate.call(this, uri, p__18172);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__18175) {
    var uri = cljs.core.first(arglist__18175);
    var p__18172 = cljs.core.rest(arglist__18175);
    return POST__delegate(uri, p__18172);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
goog.provide("quiescent");
goog.require("cljs.core");
quiescent._STAR_component_STAR_ = null;
quiescent.component = function component(renderer) {
  var react_component = React.createClass({"render":function() {
    var this$ = this;
    var _STAR_component_STAR_18105 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return cljs.core.apply.call(null, renderer, this$.props["value"], this$.props["statics"]);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_18105;
    }
  }, "shouldComponentUpdate":function(next_props, _) {
    var this$ = this;
    return cljs.core.not_EQ_.call(null, this$.props["value"], next_props["value"]);
  }});
  return function() {
    var G__18106__delegate = function(value, static_args) {
      return react_component.call(null, {"statics":static_args, "value":value});
    };
    var G__18106 = function(value, var_args) {
      var static_args = null;
      if (arguments.length > 1) {
        static_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__18106__delegate.call(this, value, static_args);
    };
    G__18106.cljs$lang$maxFixedArity = 1;
    G__18106.cljs$lang$applyTo = function(arglist__18107) {
      var value = cljs.core.first(arglist__18107);
      var static_args = cljs.core.rest(arglist__18107);
      return G__18106__delegate(value, static_args);
    };
    G__18106.cljs$core$IFn$_invoke$arity$variadic = G__18106__delegate;
    return G__18106;
  }();
};
quiescent.WrapperComponent = React.createClass({"componentDidMount":function() {
  var this$ = this;
  var temp__4092__auto__ = this$.props["onMount"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var f = temp__4092__auto__;
    return f.call(null, this$.getDOMNode());
  } else {
    return null;
  }
}, "componentDidUpdate":function(prev_props, prev_state) {
  var this$ = this;
  var temp__4092__auto__ = this$.props["onUpdate"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var f = temp__4092__auto__;
    var _STAR_component_STAR_18108 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_18108;
    }
  } else {
    return null;
  }
}, "render":function() {
  var this$ = this;
  return this$.props["wrappee"];
}});
quiescent.on_update = function on_update(child, f) {
  return quiescent.WrapperComponent.call(null, {"onUpdate":f, "wrappee":child});
};
quiescent.on_initial_render = function on_initial_render(child, f) {
  return quiescent.WrapperComponent.call(null, {"onMount":f, "wrappee":child});
};
quiescent.on_render = function on_render(child, f) {
  return quiescent.WrapperComponent.call(null, {"onMount":f, "onUpdate":f, "wrappee":child});
};
quiescent.render = function render(component, node) {
  return React.renderComponent(component, node);
};
goog.provide("quiescent.dom");
goog.require("cljs.core");
goog.require("quiescent");
goog.require("quiescent");
quiescent.dom.js_props = function js_props(obj) {
  if (cljs.core.map_QMARK_.call(null, obj)) {
    var o = function() {
      var obj14502 = {};
      return obj14502;
    }();
    var seq__14503_14509 = cljs.core.seq.call(null, obj);
    var chunk__14504_14510 = null;
    var count__14505_14511 = 0;
    var i__14506_14512 = 0;
    while (true) {
      if (i__14506_14512 < count__14505_14511) {
        var vec__14507_14513 = cljs.core._nth.call(null, chunk__14504_14510, i__14506_14512);
        var k_14514 = cljs.core.nth.call(null, vec__14507_14513, 0, null);
        var v_14515 = cljs.core.nth.call(null, vec__14507_14513, 1, null);
        o[cljs.core.name.call(null, k_14514)] = js_props.call(null, v_14515);
        var G__14516 = seq__14503_14509;
        var G__14517 = chunk__14504_14510;
        var G__14518 = count__14505_14511;
        var G__14519 = i__14506_14512 + 1;
        seq__14503_14509 = G__14516;
        chunk__14504_14510 = G__14517;
        count__14505_14511 = G__14518;
        i__14506_14512 = G__14519;
        continue;
      } else {
        var temp__4092__auto___14520 = cljs.core.seq.call(null, seq__14503_14509);
        if (temp__4092__auto___14520) {
          var seq__14503_14521__$1 = temp__4092__auto___14520;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14503_14521__$1)) {
            var c__11077__auto___14522 = cljs.core.chunk_first.call(null, seq__14503_14521__$1);
            var G__14523 = cljs.core.chunk_rest.call(null, seq__14503_14521__$1);
            var G__14524 = c__11077__auto___14522;
            var G__14525 = cljs.core.count.call(null, c__11077__auto___14522);
            var G__14526 = 0;
            seq__14503_14509 = G__14523;
            chunk__14504_14510 = G__14524;
            count__14505_14511 = G__14525;
            i__14506_14512 = G__14526;
            continue;
          } else {
            var vec__14508_14527 = cljs.core.first.call(null, seq__14503_14521__$1);
            var k_14528 = cljs.core.nth.call(null, vec__14508_14527, 0, null);
            var v_14529 = cljs.core.nth.call(null, vec__14508_14527, 1, null);
            o[cljs.core.name.call(null, k_14528)] = js_props.call(null, v_14529);
            var G__14530 = cljs.core.next.call(null, seq__14503_14521__$1);
            var G__14531 = null;
            var G__14532 = 0;
            var G__14533 = 0;
            seq__14503_14509 = G__14530;
            chunk__14504_14510 = G__14531;
            count__14505_14511 = G__14532;
            i__14506_14512 = G__14533;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o;
  } else {
    return obj;
  }
};
quiescent.dom.a = function() {
  var a__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14538_15486 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14539_15487 = null;
    var count__14540_15488 = 0;
    var i__14541_15489 = 0;
    while (true) {
      if (i__14541_15489 < count__14540_15488) {
        var arg__11908__auto___15490 = cljs.core._nth.call(null, chunk__14539_15487, i__14541_15489);
        a__11907__auto__.push(arg__11908__auto___15490);
        var G__15491 = seq__14538_15486;
        var G__15492 = chunk__14539_15487;
        var G__15493 = count__14540_15488;
        var G__15494 = i__14541_15489 + 1;
        seq__14538_15486 = G__15491;
        chunk__14539_15487 = G__15492;
        count__14540_15488 = G__15493;
        i__14541_15489 = G__15494;
        continue;
      } else {
        var temp__4092__auto___15495 = cljs.core.seq.call(null, seq__14538_15486);
        if (temp__4092__auto___15495) {
          var seq__14538_15496__$1 = temp__4092__auto___15495;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14538_15496__$1)) {
            var c__11077__auto___15497 = cljs.core.chunk_first.call(null, seq__14538_15496__$1);
            var G__15498 = cljs.core.chunk_rest.call(null, seq__14538_15496__$1);
            var G__15499 = c__11077__auto___15497;
            var G__15500 = cljs.core.count.call(null, c__11077__auto___15497);
            var G__15501 = 0;
            seq__14538_15486 = G__15498;
            chunk__14539_15487 = G__15499;
            count__14540_15488 = G__15500;
            i__14541_15489 = G__15501;
            continue;
          } else {
            var arg__11908__auto___15502 = cljs.core.first.call(null, seq__14538_15496__$1);
            a__11907__auto__.push(arg__11908__auto___15502);
            var G__15503 = cljs.core.next.call(null, seq__14538_15496__$1);
            var G__15504 = null;
            var G__15505 = 0;
            var G__15506 = 0;
            seq__14538_15486 = G__15503;
            chunk__14539_15487 = G__15504;
            count__14540_15488 = G__15505;
            i__14541_15489 = G__15506;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.a.apply(null, a__11907__auto__);
  };
  var a = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return a__delegate.call(this, args__11906__auto__);
  };
  a.cljs$lang$maxFixedArity = 0;
  a.cljs$lang$applyTo = function(arglist__15507) {
    var args__11906__auto__ = cljs.core.seq(arglist__15507);
    return a__delegate(args__11906__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
quiescent.dom.abbr = function() {
  var abbr__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14546_15508 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14547_15509 = null;
    var count__14548_15510 = 0;
    var i__14549_15511 = 0;
    while (true) {
      if (i__14549_15511 < count__14548_15510) {
        var arg__11908__auto___15512 = cljs.core._nth.call(null, chunk__14547_15509, i__14549_15511);
        a__11907__auto__.push(arg__11908__auto___15512);
        var G__15513 = seq__14546_15508;
        var G__15514 = chunk__14547_15509;
        var G__15515 = count__14548_15510;
        var G__15516 = i__14549_15511 + 1;
        seq__14546_15508 = G__15513;
        chunk__14547_15509 = G__15514;
        count__14548_15510 = G__15515;
        i__14549_15511 = G__15516;
        continue;
      } else {
        var temp__4092__auto___15517 = cljs.core.seq.call(null, seq__14546_15508);
        if (temp__4092__auto___15517) {
          var seq__14546_15518__$1 = temp__4092__auto___15517;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14546_15518__$1)) {
            var c__11077__auto___15519 = cljs.core.chunk_first.call(null, seq__14546_15518__$1);
            var G__15520 = cljs.core.chunk_rest.call(null, seq__14546_15518__$1);
            var G__15521 = c__11077__auto___15519;
            var G__15522 = cljs.core.count.call(null, c__11077__auto___15519);
            var G__15523 = 0;
            seq__14546_15508 = G__15520;
            chunk__14547_15509 = G__15521;
            count__14548_15510 = G__15522;
            i__14549_15511 = G__15523;
            continue;
          } else {
            var arg__11908__auto___15524 = cljs.core.first.call(null, seq__14546_15518__$1);
            a__11907__auto__.push(arg__11908__auto___15524);
            var G__15525 = cljs.core.next.call(null, seq__14546_15518__$1);
            var G__15526 = null;
            var G__15527 = 0;
            var G__15528 = 0;
            seq__14546_15508 = G__15525;
            chunk__14547_15509 = G__15526;
            count__14548_15510 = G__15527;
            i__14549_15511 = G__15528;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.abbr.apply(null, a__11907__auto__);
  };
  var abbr = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return abbr__delegate.call(this, args__11906__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 0;
  abbr.cljs$lang$applyTo = function(arglist__15529) {
    var args__11906__auto__ = cljs.core.seq(arglist__15529);
    return abbr__delegate(args__11906__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
quiescent.dom.address = function() {
  var address__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14554_15530 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14555_15531 = null;
    var count__14556_15532 = 0;
    var i__14557_15533 = 0;
    while (true) {
      if (i__14557_15533 < count__14556_15532) {
        var arg__11908__auto___15534 = cljs.core._nth.call(null, chunk__14555_15531, i__14557_15533);
        a__11907__auto__.push(arg__11908__auto___15534);
        var G__15535 = seq__14554_15530;
        var G__15536 = chunk__14555_15531;
        var G__15537 = count__14556_15532;
        var G__15538 = i__14557_15533 + 1;
        seq__14554_15530 = G__15535;
        chunk__14555_15531 = G__15536;
        count__14556_15532 = G__15537;
        i__14557_15533 = G__15538;
        continue;
      } else {
        var temp__4092__auto___15539 = cljs.core.seq.call(null, seq__14554_15530);
        if (temp__4092__auto___15539) {
          var seq__14554_15540__$1 = temp__4092__auto___15539;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14554_15540__$1)) {
            var c__11077__auto___15541 = cljs.core.chunk_first.call(null, seq__14554_15540__$1);
            var G__15542 = cljs.core.chunk_rest.call(null, seq__14554_15540__$1);
            var G__15543 = c__11077__auto___15541;
            var G__15544 = cljs.core.count.call(null, c__11077__auto___15541);
            var G__15545 = 0;
            seq__14554_15530 = G__15542;
            chunk__14555_15531 = G__15543;
            count__14556_15532 = G__15544;
            i__14557_15533 = G__15545;
            continue;
          } else {
            var arg__11908__auto___15546 = cljs.core.first.call(null, seq__14554_15540__$1);
            a__11907__auto__.push(arg__11908__auto___15546);
            var G__15547 = cljs.core.next.call(null, seq__14554_15540__$1);
            var G__15548 = null;
            var G__15549 = 0;
            var G__15550 = 0;
            seq__14554_15530 = G__15547;
            chunk__14555_15531 = G__15548;
            count__14556_15532 = G__15549;
            i__14557_15533 = G__15550;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.address.apply(null, a__11907__auto__);
  };
  var address = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return address__delegate.call(this, args__11906__auto__);
  };
  address.cljs$lang$maxFixedArity = 0;
  address.cljs$lang$applyTo = function(arglist__15551) {
    var args__11906__auto__ = cljs.core.seq(arglist__15551);
    return address__delegate(args__11906__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
quiescent.dom.area = function() {
  var area__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14562_15552 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14563_15553 = null;
    var count__14564_15554 = 0;
    var i__14565_15555 = 0;
    while (true) {
      if (i__14565_15555 < count__14564_15554) {
        var arg__11908__auto___15556 = cljs.core._nth.call(null, chunk__14563_15553, i__14565_15555);
        a__11907__auto__.push(arg__11908__auto___15556);
        var G__15557 = seq__14562_15552;
        var G__15558 = chunk__14563_15553;
        var G__15559 = count__14564_15554;
        var G__15560 = i__14565_15555 + 1;
        seq__14562_15552 = G__15557;
        chunk__14563_15553 = G__15558;
        count__14564_15554 = G__15559;
        i__14565_15555 = G__15560;
        continue;
      } else {
        var temp__4092__auto___15561 = cljs.core.seq.call(null, seq__14562_15552);
        if (temp__4092__auto___15561) {
          var seq__14562_15562__$1 = temp__4092__auto___15561;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14562_15562__$1)) {
            var c__11077__auto___15563 = cljs.core.chunk_first.call(null, seq__14562_15562__$1);
            var G__15564 = cljs.core.chunk_rest.call(null, seq__14562_15562__$1);
            var G__15565 = c__11077__auto___15563;
            var G__15566 = cljs.core.count.call(null, c__11077__auto___15563);
            var G__15567 = 0;
            seq__14562_15552 = G__15564;
            chunk__14563_15553 = G__15565;
            count__14564_15554 = G__15566;
            i__14565_15555 = G__15567;
            continue;
          } else {
            var arg__11908__auto___15568 = cljs.core.first.call(null, seq__14562_15562__$1);
            a__11907__auto__.push(arg__11908__auto___15568);
            var G__15569 = cljs.core.next.call(null, seq__14562_15562__$1);
            var G__15570 = null;
            var G__15571 = 0;
            var G__15572 = 0;
            seq__14562_15552 = G__15569;
            chunk__14563_15553 = G__15570;
            count__14564_15554 = G__15571;
            i__14565_15555 = G__15572;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.area.apply(null, a__11907__auto__);
  };
  var area = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return area__delegate.call(this, args__11906__auto__);
  };
  area.cljs$lang$maxFixedArity = 0;
  area.cljs$lang$applyTo = function(arglist__15573) {
    var args__11906__auto__ = cljs.core.seq(arglist__15573);
    return area__delegate(args__11906__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
quiescent.dom.article = function() {
  var article__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14570_15574 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14571_15575 = null;
    var count__14572_15576 = 0;
    var i__14573_15577 = 0;
    while (true) {
      if (i__14573_15577 < count__14572_15576) {
        var arg__11908__auto___15578 = cljs.core._nth.call(null, chunk__14571_15575, i__14573_15577);
        a__11907__auto__.push(arg__11908__auto___15578);
        var G__15579 = seq__14570_15574;
        var G__15580 = chunk__14571_15575;
        var G__15581 = count__14572_15576;
        var G__15582 = i__14573_15577 + 1;
        seq__14570_15574 = G__15579;
        chunk__14571_15575 = G__15580;
        count__14572_15576 = G__15581;
        i__14573_15577 = G__15582;
        continue;
      } else {
        var temp__4092__auto___15583 = cljs.core.seq.call(null, seq__14570_15574);
        if (temp__4092__auto___15583) {
          var seq__14570_15584__$1 = temp__4092__auto___15583;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14570_15584__$1)) {
            var c__11077__auto___15585 = cljs.core.chunk_first.call(null, seq__14570_15584__$1);
            var G__15586 = cljs.core.chunk_rest.call(null, seq__14570_15584__$1);
            var G__15587 = c__11077__auto___15585;
            var G__15588 = cljs.core.count.call(null, c__11077__auto___15585);
            var G__15589 = 0;
            seq__14570_15574 = G__15586;
            chunk__14571_15575 = G__15587;
            count__14572_15576 = G__15588;
            i__14573_15577 = G__15589;
            continue;
          } else {
            var arg__11908__auto___15590 = cljs.core.first.call(null, seq__14570_15584__$1);
            a__11907__auto__.push(arg__11908__auto___15590);
            var G__15591 = cljs.core.next.call(null, seq__14570_15584__$1);
            var G__15592 = null;
            var G__15593 = 0;
            var G__15594 = 0;
            seq__14570_15574 = G__15591;
            chunk__14571_15575 = G__15592;
            count__14572_15576 = G__15593;
            i__14573_15577 = G__15594;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.article.apply(null, a__11907__auto__);
  };
  var article = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return article__delegate.call(this, args__11906__auto__);
  };
  article.cljs$lang$maxFixedArity = 0;
  article.cljs$lang$applyTo = function(arglist__15595) {
    var args__11906__auto__ = cljs.core.seq(arglist__15595);
    return article__delegate(args__11906__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
quiescent.dom.aside = function() {
  var aside__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14578_15596 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14579_15597 = null;
    var count__14580_15598 = 0;
    var i__14581_15599 = 0;
    while (true) {
      if (i__14581_15599 < count__14580_15598) {
        var arg__11908__auto___15600 = cljs.core._nth.call(null, chunk__14579_15597, i__14581_15599);
        a__11907__auto__.push(arg__11908__auto___15600);
        var G__15601 = seq__14578_15596;
        var G__15602 = chunk__14579_15597;
        var G__15603 = count__14580_15598;
        var G__15604 = i__14581_15599 + 1;
        seq__14578_15596 = G__15601;
        chunk__14579_15597 = G__15602;
        count__14580_15598 = G__15603;
        i__14581_15599 = G__15604;
        continue;
      } else {
        var temp__4092__auto___15605 = cljs.core.seq.call(null, seq__14578_15596);
        if (temp__4092__auto___15605) {
          var seq__14578_15606__$1 = temp__4092__auto___15605;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14578_15606__$1)) {
            var c__11077__auto___15607 = cljs.core.chunk_first.call(null, seq__14578_15606__$1);
            var G__15608 = cljs.core.chunk_rest.call(null, seq__14578_15606__$1);
            var G__15609 = c__11077__auto___15607;
            var G__15610 = cljs.core.count.call(null, c__11077__auto___15607);
            var G__15611 = 0;
            seq__14578_15596 = G__15608;
            chunk__14579_15597 = G__15609;
            count__14580_15598 = G__15610;
            i__14581_15599 = G__15611;
            continue;
          } else {
            var arg__11908__auto___15612 = cljs.core.first.call(null, seq__14578_15606__$1);
            a__11907__auto__.push(arg__11908__auto___15612);
            var G__15613 = cljs.core.next.call(null, seq__14578_15606__$1);
            var G__15614 = null;
            var G__15615 = 0;
            var G__15616 = 0;
            seq__14578_15596 = G__15613;
            chunk__14579_15597 = G__15614;
            count__14580_15598 = G__15615;
            i__14581_15599 = G__15616;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.aside.apply(null, a__11907__auto__);
  };
  var aside = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return aside__delegate.call(this, args__11906__auto__);
  };
  aside.cljs$lang$maxFixedArity = 0;
  aside.cljs$lang$applyTo = function(arglist__15617) {
    var args__11906__auto__ = cljs.core.seq(arglist__15617);
    return aside__delegate(args__11906__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
quiescent.dom.audio = function() {
  var audio__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14586_15618 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14587_15619 = null;
    var count__14588_15620 = 0;
    var i__14589_15621 = 0;
    while (true) {
      if (i__14589_15621 < count__14588_15620) {
        var arg__11908__auto___15622 = cljs.core._nth.call(null, chunk__14587_15619, i__14589_15621);
        a__11907__auto__.push(arg__11908__auto___15622);
        var G__15623 = seq__14586_15618;
        var G__15624 = chunk__14587_15619;
        var G__15625 = count__14588_15620;
        var G__15626 = i__14589_15621 + 1;
        seq__14586_15618 = G__15623;
        chunk__14587_15619 = G__15624;
        count__14588_15620 = G__15625;
        i__14589_15621 = G__15626;
        continue;
      } else {
        var temp__4092__auto___15627 = cljs.core.seq.call(null, seq__14586_15618);
        if (temp__4092__auto___15627) {
          var seq__14586_15628__$1 = temp__4092__auto___15627;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14586_15628__$1)) {
            var c__11077__auto___15629 = cljs.core.chunk_first.call(null, seq__14586_15628__$1);
            var G__15630 = cljs.core.chunk_rest.call(null, seq__14586_15628__$1);
            var G__15631 = c__11077__auto___15629;
            var G__15632 = cljs.core.count.call(null, c__11077__auto___15629);
            var G__15633 = 0;
            seq__14586_15618 = G__15630;
            chunk__14587_15619 = G__15631;
            count__14588_15620 = G__15632;
            i__14589_15621 = G__15633;
            continue;
          } else {
            var arg__11908__auto___15634 = cljs.core.first.call(null, seq__14586_15628__$1);
            a__11907__auto__.push(arg__11908__auto___15634);
            var G__15635 = cljs.core.next.call(null, seq__14586_15628__$1);
            var G__15636 = null;
            var G__15637 = 0;
            var G__15638 = 0;
            seq__14586_15618 = G__15635;
            chunk__14587_15619 = G__15636;
            count__14588_15620 = G__15637;
            i__14589_15621 = G__15638;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.audio.apply(null, a__11907__auto__);
  };
  var audio = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return audio__delegate.call(this, args__11906__auto__);
  };
  audio.cljs$lang$maxFixedArity = 0;
  audio.cljs$lang$applyTo = function(arglist__15639) {
    var args__11906__auto__ = cljs.core.seq(arglist__15639);
    return audio__delegate(args__11906__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
quiescent.dom.b = function() {
  var b__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14594_15640 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14595_15641 = null;
    var count__14596_15642 = 0;
    var i__14597_15643 = 0;
    while (true) {
      if (i__14597_15643 < count__14596_15642) {
        var arg__11908__auto___15644 = cljs.core._nth.call(null, chunk__14595_15641, i__14597_15643);
        a__11907__auto__.push(arg__11908__auto___15644);
        var G__15645 = seq__14594_15640;
        var G__15646 = chunk__14595_15641;
        var G__15647 = count__14596_15642;
        var G__15648 = i__14597_15643 + 1;
        seq__14594_15640 = G__15645;
        chunk__14595_15641 = G__15646;
        count__14596_15642 = G__15647;
        i__14597_15643 = G__15648;
        continue;
      } else {
        var temp__4092__auto___15649 = cljs.core.seq.call(null, seq__14594_15640);
        if (temp__4092__auto___15649) {
          var seq__14594_15650__$1 = temp__4092__auto___15649;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14594_15650__$1)) {
            var c__11077__auto___15651 = cljs.core.chunk_first.call(null, seq__14594_15650__$1);
            var G__15652 = cljs.core.chunk_rest.call(null, seq__14594_15650__$1);
            var G__15653 = c__11077__auto___15651;
            var G__15654 = cljs.core.count.call(null, c__11077__auto___15651);
            var G__15655 = 0;
            seq__14594_15640 = G__15652;
            chunk__14595_15641 = G__15653;
            count__14596_15642 = G__15654;
            i__14597_15643 = G__15655;
            continue;
          } else {
            var arg__11908__auto___15656 = cljs.core.first.call(null, seq__14594_15650__$1);
            a__11907__auto__.push(arg__11908__auto___15656);
            var G__15657 = cljs.core.next.call(null, seq__14594_15650__$1);
            var G__15658 = null;
            var G__15659 = 0;
            var G__15660 = 0;
            seq__14594_15640 = G__15657;
            chunk__14595_15641 = G__15658;
            count__14596_15642 = G__15659;
            i__14597_15643 = G__15660;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.b.apply(null, a__11907__auto__);
  };
  var b = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return b__delegate.call(this, args__11906__auto__);
  };
  b.cljs$lang$maxFixedArity = 0;
  b.cljs$lang$applyTo = function(arglist__15661) {
    var args__11906__auto__ = cljs.core.seq(arglist__15661);
    return b__delegate(args__11906__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
quiescent.dom.base = function() {
  var base__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14602_15662 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14603_15663 = null;
    var count__14604_15664 = 0;
    var i__14605_15665 = 0;
    while (true) {
      if (i__14605_15665 < count__14604_15664) {
        var arg__11908__auto___15666 = cljs.core._nth.call(null, chunk__14603_15663, i__14605_15665);
        a__11907__auto__.push(arg__11908__auto___15666);
        var G__15667 = seq__14602_15662;
        var G__15668 = chunk__14603_15663;
        var G__15669 = count__14604_15664;
        var G__15670 = i__14605_15665 + 1;
        seq__14602_15662 = G__15667;
        chunk__14603_15663 = G__15668;
        count__14604_15664 = G__15669;
        i__14605_15665 = G__15670;
        continue;
      } else {
        var temp__4092__auto___15671 = cljs.core.seq.call(null, seq__14602_15662);
        if (temp__4092__auto___15671) {
          var seq__14602_15672__$1 = temp__4092__auto___15671;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14602_15672__$1)) {
            var c__11077__auto___15673 = cljs.core.chunk_first.call(null, seq__14602_15672__$1);
            var G__15674 = cljs.core.chunk_rest.call(null, seq__14602_15672__$1);
            var G__15675 = c__11077__auto___15673;
            var G__15676 = cljs.core.count.call(null, c__11077__auto___15673);
            var G__15677 = 0;
            seq__14602_15662 = G__15674;
            chunk__14603_15663 = G__15675;
            count__14604_15664 = G__15676;
            i__14605_15665 = G__15677;
            continue;
          } else {
            var arg__11908__auto___15678 = cljs.core.first.call(null, seq__14602_15672__$1);
            a__11907__auto__.push(arg__11908__auto___15678);
            var G__15679 = cljs.core.next.call(null, seq__14602_15672__$1);
            var G__15680 = null;
            var G__15681 = 0;
            var G__15682 = 0;
            seq__14602_15662 = G__15679;
            chunk__14603_15663 = G__15680;
            count__14604_15664 = G__15681;
            i__14605_15665 = G__15682;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.base.apply(null, a__11907__auto__);
  };
  var base = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return base__delegate.call(this, args__11906__auto__);
  };
  base.cljs$lang$maxFixedArity = 0;
  base.cljs$lang$applyTo = function(arglist__15683) {
    var args__11906__auto__ = cljs.core.seq(arglist__15683);
    return base__delegate(args__11906__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
quiescent.dom.bdi = function() {
  var bdi__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14610_15684 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14611_15685 = null;
    var count__14612_15686 = 0;
    var i__14613_15687 = 0;
    while (true) {
      if (i__14613_15687 < count__14612_15686) {
        var arg__11908__auto___15688 = cljs.core._nth.call(null, chunk__14611_15685, i__14613_15687);
        a__11907__auto__.push(arg__11908__auto___15688);
        var G__15689 = seq__14610_15684;
        var G__15690 = chunk__14611_15685;
        var G__15691 = count__14612_15686;
        var G__15692 = i__14613_15687 + 1;
        seq__14610_15684 = G__15689;
        chunk__14611_15685 = G__15690;
        count__14612_15686 = G__15691;
        i__14613_15687 = G__15692;
        continue;
      } else {
        var temp__4092__auto___15693 = cljs.core.seq.call(null, seq__14610_15684);
        if (temp__4092__auto___15693) {
          var seq__14610_15694__$1 = temp__4092__auto___15693;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14610_15694__$1)) {
            var c__11077__auto___15695 = cljs.core.chunk_first.call(null, seq__14610_15694__$1);
            var G__15696 = cljs.core.chunk_rest.call(null, seq__14610_15694__$1);
            var G__15697 = c__11077__auto___15695;
            var G__15698 = cljs.core.count.call(null, c__11077__auto___15695);
            var G__15699 = 0;
            seq__14610_15684 = G__15696;
            chunk__14611_15685 = G__15697;
            count__14612_15686 = G__15698;
            i__14613_15687 = G__15699;
            continue;
          } else {
            var arg__11908__auto___15700 = cljs.core.first.call(null, seq__14610_15694__$1);
            a__11907__auto__.push(arg__11908__auto___15700);
            var G__15701 = cljs.core.next.call(null, seq__14610_15694__$1);
            var G__15702 = null;
            var G__15703 = 0;
            var G__15704 = 0;
            seq__14610_15684 = G__15701;
            chunk__14611_15685 = G__15702;
            count__14612_15686 = G__15703;
            i__14613_15687 = G__15704;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdi.apply(null, a__11907__auto__);
  };
  var bdi = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdi__delegate.call(this, args__11906__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 0;
  bdi.cljs$lang$applyTo = function(arglist__15705) {
    var args__11906__auto__ = cljs.core.seq(arglist__15705);
    return bdi__delegate(args__11906__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
quiescent.dom.bdo = function() {
  var bdo__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14618_15706 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14619_15707 = null;
    var count__14620_15708 = 0;
    var i__14621_15709 = 0;
    while (true) {
      if (i__14621_15709 < count__14620_15708) {
        var arg__11908__auto___15710 = cljs.core._nth.call(null, chunk__14619_15707, i__14621_15709);
        a__11907__auto__.push(arg__11908__auto___15710);
        var G__15711 = seq__14618_15706;
        var G__15712 = chunk__14619_15707;
        var G__15713 = count__14620_15708;
        var G__15714 = i__14621_15709 + 1;
        seq__14618_15706 = G__15711;
        chunk__14619_15707 = G__15712;
        count__14620_15708 = G__15713;
        i__14621_15709 = G__15714;
        continue;
      } else {
        var temp__4092__auto___15715 = cljs.core.seq.call(null, seq__14618_15706);
        if (temp__4092__auto___15715) {
          var seq__14618_15716__$1 = temp__4092__auto___15715;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14618_15716__$1)) {
            var c__11077__auto___15717 = cljs.core.chunk_first.call(null, seq__14618_15716__$1);
            var G__15718 = cljs.core.chunk_rest.call(null, seq__14618_15716__$1);
            var G__15719 = c__11077__auto___15717;
            var G__15720 = cljs.core.count.call(null, c__11077__auto___15717);
            var G__15721 = 0;
            seq__14618_15706 = G__15718;
            chunk__14619_15707 = G__15719;
            count__14620_15708 = G__15720;
            i__14621_15709 = G__15721;
            continue;
          } else {
            var arg__11908__auto___15722 = cljs.core.first.call(null, seq__14618_15716__$1);
            a__11907__auto__.push(arg__11908__auto___15722);
            var G__15723 = cljs.core.next.call(null, seq__14618_15716__$1);
            var G__15724 = null;
            var G__15725 = 0;
            var G__15726 = 0;
            seq__14618_15706 = G__15723;
            chunk__14619_15707 = G__15724;
            count__14620_15708 = G__15725;
            i__14621_15709 = G__15726;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdo.apply(null, a__11907__auto__);
  };
  var bdo = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdo__delegate.call(this, args__11906__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 0;
  bdo.cljs$lang$applyTo = function(arglist__15727) {
    var args__11906__auto__ = cljs.core.seq(arglist__15727);
    return bdo__delegate(args__11906__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
quiescent.dom.big = function() {
  var big__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14626_15728 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14627_15729 = null;
    var count__14628_15730 = 0;
    var i__14629_15731 = 0;
    while (true) {
      if (i__14629_15731 < count__14628_15730) {
        var arg__11908__auto___15732 = cljs.core._nth.call(null, chunk__14627_15729, i__14629_15731);
        a__11907__auto__.push(arg__11908__auto___15732);
        var G__15733 = seq__14626_15728;
        var G__15734 = chunk__14627_15729;
        var G__15735 = count__14628_15730;
        var G__15736 = i__14629_15731 + 1;
        seq__14626_15728 = G__15733;
        chunk__14627_15729 = G__15734;
        count__14628_15730 = G__15735;
        i__14629_15731 = G__15736;
        continue;
      } else {
        var temp__4092__auto___15737 = cljs.core.seq.call(null, seq__14626_15728);
        if (temp__4092__auto___15737) {
          var seq__14626_15738__$1 = temp__4092__auto___15737;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14626_15738__$1)) {
            var c__11077__auto___15739 = cljs.core.chunk_first.call(null, seq__14626_15738__$1);
            var G__15740 = cljs.core.chunk_rest.call(null, seq__14626_15738__$1);
            var G__15741 = c__11077__auto___15739;
            var G__15742 = cljs.core.count.call(null, c__11077__auto___15739);
            var G__15743 = 0;
            seq__14626_15728 = G__15740;
            chunk__14627_15729 = G__15741;
            count__14628_15730 = G__15742;
            i__14629_15731 = G__15743;
            continue;
          } else {
            var arg__11908__auto___15744 = cljs.core.first.call(null, seq__14626_15738__$1);
            a__11907__auto__.push(arg__11908__auto___15744);
            var G__15745 = cljs.core.next.call(null, seq__14626_15738__$1);
            var G__15746 = null;
            var G__15747 = 0;
            var G__15748 = 0;
            seq__14626_15728 = G__15745;
            chunk__14627_15729 = G__15746;
            count__14628_15730 = G__15747;
            i__14629_15731 = G__15748;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.big.apply(null, a__11907__auto__);
  };
  var big = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return big__delegate.call(this, args__11906__auto__);
  };
  big.cljs$lang$maxFixedArity = 0;
  big.cljs$lang$applyTo = function(arglist__15749) {
    var args__11906__auto__ = cljs.core.seq(arglist__15749);
    return big__delegate(args__11906__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
quiescent.dom.blockquote = function() {
  var blockquote__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14634_15750 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14635_15751 = null;
    var count__14636_15752 = 0;
    var i__14637_15753 = 0;
    while (true) {
      if (i__14637_15753 < count__14636_15752) {
        var arg__11908__auto___15754 = cljs.core._nth.call(null, chunk__14635_15751, i__14637_15753);
        a__11907__auto__.push(arg__11908__auto___15754);
        var G__15755 = seq__14634_15750;
        var G__15756 = chunk__14635_15751;
        var G__15757 = count__14636_15752;
        var G__15758 = i__14637_15753 + 1;
        seq__14634_15750 = G__15755;
        chunk__14635_15751 = G__15756;
        count__14636_15752 = G__15757;
        i__14637_15753 = G__15758;
        continue;
      } else {
        var temp__4092__auto___15759 = cljs.core.seq.call(null, seq__14634_15750);
        if (temp__4092__auto___15759) {
          var seq__14634_15760__$1 = temp__4092__auto___15759;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14634_15760__$1)) {
            var c__11077__auto___15761 = cljs.core.chunk_first.call(null, seq__14634_15760__$1);
            var G__15762 = cljs.core.chunk_rest.call(null, seq__14634_15760__$1);
            var G__15763 = c__11077__auto___15761;
            var G__15764 = cljs.core.count.call(null, c__11077__auto___15761);
            var G__15765 = 0;
            seq__14634_15750 = G__15762;
            chunk__14635_15751 = G__15763;
            count__14636_15752 = G__15764;
            i__14637_15753 = G__15765;
            continue;
          } else {
            var arg__11908__auto___15766 = cljs.core.first.call(null, seq__14634_15760__$1);
            a__11907__auto__.push(arg__11908__auto___15766);
            var G__15767 = cljs.core.next.call(null, seq__14634_15760__$1);
            var G__15768 = null;
            var G__15769 = 0;
            var G__15770 = 0;
            seq__14634_15750 = G__15767;
            chunk__14635_15751 = G__15768;
            count__14636_15752 = G__15769;
            i__14637_15753 = G__15770;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.blockquote.apply(null, a__11907__auto__);
  };
  var blockquote = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return blockquote__delegate.call(this, args__11906__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 0;
  blockquote.cljs$lang$applyTo = function(arglist__15771) {
    var args__11906__auto__ = cljs.core.seq(arglist__15771);
    return blockquote__delegate(args__11906__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
quiescent.dom.body = function() {
  var body__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14642_15772 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14643_15773 = null;
    var count__14644_15774 = 0;
    var i__14645_15775 = 0;
    while (true) {
      if (i__14645_15775 < count__14644_15774) {
        var arg__11908__auto___15776 = cljs.core._nth.call(null, chunk__14643_15773, i__14645_15775);
        a__11907__auto__.push(arg__11908__auto___15776);
        var G__15777 = seq__14642_15772;
        var G__15778 = chunk__14643_15773;
        var G__15779 = count__14644_15774;
        var G__15780 = i__14645_15775 + 1;
        seq__14642_15772 = G__15777;
        chunk__14643_15773 = G__15778;
        count__14644_15774 = G__15779;
        i__14645_15775 = G__15780;
        continue;
      } else {
        var temp__4092__auto___15781 = cljs.core.seq.call(null, seq__14642_15772);
        if (temp__4092__auto___15781) {
          var seq__14642_15782__$1 = temp__4092__auto___15781;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14642_15782__$1)) {
            var c__11077__auto___15783 = cljs.core.chunk_first.call(null, seq__14642_15782__$1);
            var G__15784 = cljs.core.chunk_rest.call(null, seq__14642_15782__$1);
            var G__15785 = c__11077__auto___15783;
            var G__15786 = cljs.core.count.call(null, c__11077__auto___15783);
            var G__15787 = 0;
            seq__14642_15772 = G__15784;
            chunk__14643_15773 = G__15785;
            count__14644_15774 = G__15786;
            i__14645_15775 = G__15787;
            continue;
          } else {
            var arg__11908__auto___15788 = cljs.core.first.call(null, seq__14642_15782__$1);
            a__11907__auto__.push(arg__11908__auto___15788);
            var G__15789 = cljs.core.next.call(null, seq__14642_15782__$1);
            var G__15790 = null;
            var G__15791 = 0;
            var G__15792 = 0;
            seq__14642_15772 = G__15789;
            chunk__14643_15773 = G__15790;
            count__14644_15774 = G__15791;
            i__14645_15775 = G__15792;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.body.apply(null, a__11907__auto__);
  };
  var body = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return body__delegate.call(this, args__11906__auto__);
  };
  body.cljs$lang$maxFixedArity = 0;
  body.cljs$lang$applyTo = function(arglist__15793) {
    var args__11906__auto__ = cljs.core.seq(arglist__15793);
    return body__delegate(args__11906__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
quiescent.dom.br = function() {
  var br__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14650_15794 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14651_15795 = null;
    var count__14652_15796 = 0;
    var i__14653_15797 = 0;
    while (true) {
      if (i__14653_15797 < count__14652_15796) {
        var arg__11908__auto___15798 = cljs.core._nth.call(null, chunk__14651_15795, i__14653_15797);
        a__11907__auto__.push(arg__11908__auto___15798);
        var G__15799 = seq__14650_15794;
        var G__15800 = chunk__14651_15795;
        var G__15801 = count__14652_15796;
        var G__15802 = i__14653_15797 + 1;
        seq__14650_15794 = G__15799;
        chunk__14651_15795 = G__15800;
        count__14652_15796 = G__15801;
        i__14653_15797 = G__15802;
        continue;
      } else {
        var temp__4092__auto___15803 = cljs.core.seq.call(null, seq__14650_15794);
        if (temp__4092__auto___15803) {
          var seq__14650_15804__$1 = temp__4092__auto___15803;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14650_15804__$1)) {
            var c__11077__auto___15805 = cljs.core.chunk_first.call(null, seq__14650_15804__$1);
            var G__15806 = cljs.core.chunk_rest.call(null, seq__14650_15804__$1);
            var G__15807 = c__11077__auto___15805;
            var G__15808 = cljs.core.count.call(null, c__11077__auto___15805);
            var G__15809 = 0;
            seq__14650_15794 = G__15806;
            chunk__14651_15795 = G__15807;
            count__14652_15796 = G__15808;
            i__14653_15797 = G__15809;
            continue;
          } else {
            var arg__11908__auto___15810 = cljs.core.first.call(null, seq__14650_15804__$1);
            a__11907__auto__.push(arg__11908__auto___15810);
            var G__15811 = cljs.core.next.call(null, seq__14650_15804__$1);
            var G__15812 = null;
            var G__15813 = 0;
            var G__15814 = 0;
            seq__14650_15794 = G__15811;
            chunk__14651_15795 = G__15812;
            count__14652_15796 = G__15813;
            i__14653_15797 = G__15814;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.br.apply(null, a__11907__auto__);
  };
  var br = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return br__delegate.call(this, args__11906__auto__);
  };
  br.cljs$lang$maxFixedArity = 0;
  br.cljs$lang$applyTo = function(arglist__15815) {
    var args__11906__auto__ = cljs.core.seq(arglist__15815);
    return br__delegate(args__11906__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
quiescent.dom.button = function() {
  var button__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14658_15816 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14659_15817 = null;
    var count__14660_15818 = 0;
    var i__14661_15819 = 0;
    while (true) {
      if (i__14661_15819 < count__14660_15818) {
        var arg__11908__auto___15820 = cljs.core._nth.call(null, chunk__14659_15817, i__14661_15819);
        a__11907__auto__.push(arg__11908__auto___15820);
        var G__15821 = seq__14658_15816;
        var G__15822 = chunk__14659_15817;
        var G__15823 = count__14660_15818;
        var G__15824 = i__14661_15819 + 1;
        seq__14658_15816 = G__15821;
        chunk__14659_15817 = G__15822;
        count__14660_15818 = G__15823;
        i__14661_15819 = G__15824;
        continue;
      } else {
        var temp__4092__auto___15825 = cljs.core.seq.call(null, seq__14658_15816);
        if (temp__4092__auto___15825) {
          var seq__14658_15826__$1 = temp__4092__auto___15825;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14658_15826__$1)) {
            var c__11077__auto___15827 = cljs.core.chunk_first.call(null, seq__14658_15826__$1);
            var G__15828 = cljs.core.chunk_rest.call(null, seq__14658_15826__$1);
            var G__15829 = c__11077__auto___15827;
            var G__15830 = cljs.core.count.call(null, c__11077__auto___15827);
            var G__15831 = 0;
            seq__14658_15816 = G__15828;
            chunk__14659_15817 = G__15829;
            count__14660_15818 = G__15830;
            i__14661_15819 = G__15831;
            continue;
          } else {
            var arg__11908__auto___15832 = cljs.core.first.call(null, seq__14658_15826__$1);
            a__11907__auto__.push(arg__11908__auto___15832);
            var G__15833 = cljs.core.next.call(null, seq__14658_15826__$1);
            var G__15834 = null;
            var G__15835 = 0;
            var G__15836 = 0;
            seq__14658_15816 = G__15833;
            chunk__14659_15817 = G__15834;
            count__14660_15818 = G__15835;
            i__14661_15819 = G__15836;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.button.apply(null, a__11907__auto__);
  };
  var button = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return button__delegate.call(this, args__11906__auto__);
  };
  button.cljs$lang$maxFixedArity = 0;
  button.cljs$lang$applyTo = function(arglist__15837) {
    var args__11906__auto__ = cljs.core.seq(arglist__15837);
    return button__delegate(args__11906__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
quiescent.dom.canvas = function() {
  var canvas__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14666_15838 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14667_15839 = null;
    var count__14668_15840 = 0;
    var i__14669_15841 = 0;
    while (true) {
      if (i__14669_15841 < count__14668_15840) {
        var arg__11908__auto___15842 = cljs.core._nth.call(null, chunk__14667_15839, i__14669_15841);
        a__11907__auto__.push(arg__11908__auto___15842);
        var G__15843 = seq__14666_15838;
        var G__15844 = chunk__14667_15839;
        var G__15845 = count__14668_15840;
        var G__15846 = i__14669_15841 + 1;
        seq__14666_15838 = G__15843;
        chunk__14667_15839 = G__15844;
        count__14668_15840 = G__15845;
        i__14669_15841 = G__15846;
        continue;
      } else {
        var temp__4092__auto___15847 = cljs.core.seq.call(null, seq__14666_15838);
        if (temp__4092__auto___15847) {
          var seq__14666_15848__$1 = temp__4092__auto___15847;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14666_15848__$1)) {
            var c__11077__auto___15849 = cljs.core.chunk_first.call(null, seq__14666_15848__$1);
            var G__15850 = cljs.core.chunk_rest.call(null, seq__14666_15848__$1);
            var G__15851 = c__11077__auto___15849;
            var G__15852 = cljs.core.count.call(null, c__11077__auto___15849);
            var G__15853 = 0;
            seq__14666_15838 = G__15850;
            chunk__14667_15839 = G__15851;
            count__14668_15840 = G__15852;
            i__14669_15841 = G__15853;
            continue;
          } else {
            var arg__11908__auto___15854 = cljs.core.first.call(null, seq__14666_15848__$1);
            a__11907__auto__.push(arg__11908__auto___15854);
            var G__15855 = cljs.core.next.call(null, seq__14666_15848__$1);
            var G__15856 = null;
            var G__15857 = 0;
            var G__15858 = 0;
            seq__14666_15838 = G__15855;
            chunk__14667_15839 = G__15856;
            count__14668_15840 = G__15857;
            i__14669_15841 = G__15858;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.canvas.apply(null, a__11907__auto__);
  };
  var canvas = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return canvas__delegate.call(this, args__11906__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 0;
  canvas.cljs$lang$applyTo = function(arglist__15859) {
    var args__11906__auto__ = cljs.core.seq(arglist__15859);
    return canvas__delegate(args__11906__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
quiescent.dom.caption = function() {
  var caption__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14674_15860 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14675_15861 = null;
    var count__14676_15862 = 0;
    var i__14677_15863 = 0;
    while (true) {
      if (i__14677_15863 < count__14676_15862) {
        var arg__11908__auto___15864 = cljs.core._nth.call(null, chunk__14675_15861, i__14677_15863);
        a__11907__auto__.push(arg__11908__auto___15864);
        var G__15865 = seq__14674_15860;
        var G__15866 = chunk__14675_15861;
        var G__15867 = count__14676_15862;
        var G__15868 = i__14677_15863 + 1;
        seq__14674_15860 = G__15865;
        chunk__14675_15861 = G__15866;
        count__14676_15862 = G__15867;
        i__14677_15863 = G__15868;
        continue;
      } else {
        var temp__4092__auto___15869 = cljs.core.seq.call(null, seq__14674_15860);
        if (temp__4092__auto___15869) {
          var seq__14674_15870__$1 = temp__4092__auto___15869;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14674_15870__$1)) {
            var c__11077__auto___15871 = cljs.core.chunk_first.call(null, seq__14674_15870__$1);
            var G__15872 = cljs.core.chunk_rest.call(null, seq__14674_15870__$1);
            var G__15873 = c__11077__auto___15871;
            var G__15874 = cljs.core.count.call(null, c__11077__auto___15871);
            var G__15875 = 0;
            seq__14674_15860 = G__15872;
            chunk__14675_15861 = G__15873;
            count__14676_15862 = G__15874;
            i__14677_15863 = G__15875;
            continue;
          } else {
            var arg__11908__auto___15876 = cljs.core.first.call(null, seq__14674_15870__$1);
            a__11907__auto__.push(arg__11908__auto___15876);
            var G__15877 = cljs.core.next.call(null, seq__14674_15870__$1);
            var G__15878 = null;
            var G__15879 = 0;
            var G__15880 = 0;
            seq__14674_15860 = G__15877;
            chunk__14675_15861 = G__15878;
            count__14676_15862 = G__15879;
            i__14677_15863 = G__15880;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.caption.apply(null, a__11907__auto__);
  };
  var caption = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return caption__delegate.call(this, args__11906__auto__);
  };
  caption.cljs$lang$maxFixedArity = 0;
  caption.cljs$lang$applyTo = function(arglist__15881) {
    var args__11906__auto__ = cljs.core.seq(arglist__15881);
    return caption__delegate(args__11906__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
quiescent.dom.cite = function() {
  var cite__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14682_15882 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14683_15883 = null;
    var count__14684_15884 = 0;
    var i__14685_15885 = 0;
    while (true) {
      if (i__14685_15885 < count__14684_15884) {
        var arg__11908__auto___15886 = cljs.core._nth.call(null, chunk__14683_15883, i__14685_15885);
        a__11907__auto__.push(arg__11908__auto___15886);
        var G__15887 = seq__14682_15882;
        var G__15888 = chunk__14683_15883;
        var G__15889 = count__14684_15884;
        var G__15890 = i__14685_15885 + 1;
        seq__14682_15882 = G__15887;
        chunk__14683_15883 = G__15888;
        count__14684_15884 = G__15889;
        i__14685_15885 = G__15890;
        continue;
      } else {
        var temp__4092__auto___15891 = cljs.core.seq.call(null, seq__14682_15882);
        if (temp__4092__auto___15891) {
          var seq__14682_15892__$1 = temp__4092__auto___15891;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14682_15892__$1)) {
            var c__11077__auto___15893 = cljs.core.chunk_first.call(null, seq__14682_15892__$1);
            var G__15894 = cljs.core.chunk_rest.call(null, seq__14682_15892__$1);
            var G__15895 = c__11077__auto___15893;
            var G__15896 = cljs.core.count.call(null, c__11077__auto___15893);
            var G__15897 = 0;
            seq__14682_15882 = G__15894;
            chunk__14683_15883 = G__15895;
            count__14684_15884 = G__15896;
            i__14685_15885 = G__15897;
            continue;
          } else {
            var arg__11908__auto___15898 = cljs.core.first.call(null, seq__14682_15892__$1);
            a__11907__auto__.push(arg__11908__auto___15898);
            var G__15899 = cljs.core.next.call(null, seq__14682_15892__$1);
            var G__15900 = null;
            var G__15901 = 0;
            var G__15902 = 0;
            seq__14682_15882 = G__15899;
            chunk__14683_15883 = G__15900;
            count__14684_15884 = G__15901;
            i__14685_15885 = G__15902;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.cite.apply(null, a__11907__auto__);
  };
  var cite = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cite__delegate.call(this, args__11906__auto__);
  };
  cite.cljs$lang$maxFixedArity = 0;
  cite.cljs$lang$applyTo = function(arglist__15903) {
    var args__11906__auto__ = cljs.core.seq(arglist__15903);
    return cite__delegate(args__11906__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
quiescent.dom.code = function() {
  var code__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14690_15904 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14691_15905 = null;
    var count__14692_15906 = 0;
    var i__14693_15907 = 0;
    while (true) {
      if (i__14693_15907 < count__14692_15906) {
        var arg__11908__auto___15908 = cljs.core._nth.call(null, chunk__14691_15905, i__14693_15907);
        a__11907__auto__.push(arg__11908__auto___15908);
        var G__15909 = seq__14690_15904;
        var G__15910 = chunk__14691_15905;
        var G__15911 = count__14692_15906;
        var G__15912 = i__14693_15907 + 1;
        seq__14690_15904 = G__15909;
        chunk__14691_15905 = G__15910;
        count__14692_15906 = G__15911;
        i__14693_15907 = G__15912;
        continue;
      } else {
        var temp__4092__auto___15913 = cljs.core.seq.call(null, seq__14690_15904);
        if (temp__4092__auto___15913) {
          var seq__14690_15914__$1 = temp__4092__auto___15913;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14690_15914__$1)) {
            var c__11077__auto___15915 = cljs.core.chunk_first.call(null, seq__14690_15914__$1);
            var G__15916 = cljs.core.chunk_rest.call(null, seq__14690_15914__$1);
            var G__15917 = c__11077__auto___15915;
            var G__15918 = cljs.core.count.call(null, c__11077__auto___15915);
            var G__15919 = 0;
            seq__14690_15904 = G__15916;
            chunk__14691_15905 = G__15917;
            count__14692_15906 = G__15918;
            i__14693_15907 = G__15919;
            continue;
          } else {
            var arg__11908__auto___15920 = cljs.core.first.call(null, seq__14690_15914__$1);
            a__11907__auto__.push(arg__11908__auto___15920);
            var G__15921 = cljs.core.next.call(null, seq__14690_15914__$1);
            var G__15922 = null;
            var G__15923 = 0;
            var G__15924 = 0;
            seq__14690_15904 = G__15921;
            chunk__14691_15905 = G__15922;
            count__14692_15906 = G__15923;
            i__14693_15907 = G__15924;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.code.apply(null, a__11907__auto__);
  };
  var code = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return code__delegate.call(this, args__11906__auto__);
  };
  code.cljs$lang$maxFixedArity = 0;
  code.cljs$lang$applyTo = function(arglist__15925) {
    var args__11906__auto__ = cljs.core.seq(arglist__15925);
    return code__delegate(args__11906__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
quiescent.dom.col = function() {
  var col__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14698_15926 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14699_15927 = null;
    var count__14700_15928 = 0;
    var i__14701_15929 = 0;
    while (true) {
      if (i__14701_15929 < count__14700_15928) {
        var arg__11908__auto___15930 = cljs.core._nth.call(null, chunk__14699_15927, i__14701_15929);
        a__11907__auto__.push(arg__11908__auto___15930);
        var G__15931 = seq__14698_15926;
        var G__15932 = chunk__14699_15927;
        var G__15933 = count__14700_15928;
        var G__15934 = i__14701_15929 + 1;
        seq__14698_15926 = G__15931;
        chunk__14699_15927 = G__15932;
        count__14700_15928 = G__15933;
        i__14701_15929 = G__15934;
        continue;
      } else {
        var temp__4092__auto___15935 = cljs.core.seq.call(null, seq__14698_15926);
        if (temp__4092__auto___15935) {
          var seq__14698_15936__$1 = temp__4092__auto___15935;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14698_15936__$1)) {
            var c__11077__auto___15937 = cljs.core.chunk_first.call(null, seq__14698_15936__$1);
            var G__15938 = cljs.core.chunk_rest.call(null, seq__14698_15936__$1);
            var G__15939 = c__11077__auto___15937;
            var G__15940 = cljs.core.count.call(null, c__11077__auto___15937);
            var G__15941 = 0;
            seq__14698_15926 = G__15938;
            chunk__14699_15927 = G__15939;
            count__14700_15928 = G__15940;
            i__14701_15929 = G__15941;
            continue;
          } else {
            var arg__11908__auto___15942 = cljs.core.first.call(null, seq__14698_15936__$1);
            a__11907__auto__.push(arg__11908__auto___15942);
            var G__15943 = cljs.core.next.call(null, seq__14698_15936__$1);
            var G__15944 = null;
            var G__15945 = 0;
            var G__15946 = 0;
            seq__14698_15926 = G__15943;
            chunk__14699_15927 = G__15944;
            count__14700_15928 = G__15945;
            i__14701_15929 = G__15946;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.col.apply(null, a__11907__auto__);
  };
  var col = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col__delegate.call(this, args__11906__auto__);
  };
  col.cljs$lang$maxFixedArity = 0;
  col.cljs$lang$applyTo = function(arglist__15947) {
    var args__11906__auto__ = cljs.core.seq(arglist__15947);
    return col__delegate(args__11906__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
quiescent.dom.colgroup = function() {
  var colgroup__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14706_15948 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14707_15949 = null;
    var count__14708_15950 = 0;
    var i__14709_15951 = 0;
    while (true) {
      if (i__14709_15951 < count__14708_15950) {
        var arg__11908__auto___15952 = cljs.core._nth.call(null, chunk__14707_15949, i__14709_15951);
        a__11907__auto__.push(arg__11908__auto___15952);
        var G__15953 = seq__14706_15948;
        var G__15954 = chunk__14707_15949;
        var G__15955 = count__14708_15950;
        var G__15956 = i__14709_15951 + 1;
        seq__14706_15948 = G__15953;
        chunk__14707_15949 = G__15954;
        count__14708_15950 = G__15955;
        i__14709_15951 = G__15956;
        continue;
      } else {
        var temp__4092__auto___15957 = cljs.core.seq.call(null, seq__14706_15948);
        if (temp__4092__auto___15957) {
          var seq__14706_15958__$1 = temp__4092__auto___15957;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14706_15958__$1)) {
            var c__11077__auto___15959 = cljs.core.chunk_first.call(null, seq__14706_15958__$1);
            var G__15960 = cljs.core.chunk_rest.call(null, seq__14706_15958__$1);
            var G__15961 = c__11077__auto___15959;
            var G__15962 = cljs.core.count.call(null, c__11077__auto___15959);
            var G__15963 = 0;
            seq__14706_15948 = G__15960;
            chunk__14707_15949 = G__15961;
            count__14708_15950 = G__15962;
            i__14709_15951 = G__15963;
            continue;
          } else {
            var arg__11908__auto___15964 = cljs.core.first.call(null, seq__14706_15958__$1);
            a__11907__auto__.push(arg__11908__auto___15964);
            var G__15965 = cljs.core.next.call(null, seq__14706_15958__$1);
            var G__15966 = null;
            var G__15967 = 0;
            var G__15968 = 0;
            seq__14706_15948 = G__15965;
            chunk__14707_15949 = G__15966;
            count__14708_15950 = G__15967;
            i__14709_15951 = G__15968;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.colgroup.apply(null, a__11907__auto__);
  };
  var colgroup = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return colgroup__delegate.call(this, args__11906__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 0;
  colgroup.cljs$lang$applyTo = function(arglist__15969) {
    var args__11906__auto__ = cljs.core.seq(arglist__15969);
    return colgroup__delegate(args__11906__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
quiescent.dom.data = function() {
  var data__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14714_15970 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14715_15971 = null;
    var count__14716_15972 = 0;
    var i__14717_15973 = 0;
    while (true) {
      if (i__14717_15973 < count__14716_15972) {
        var arg__11908__auto___15974 = cljs.core._nth.call(null, chunk__14715_15971, i__14717_15973);
        a__11907__auto__.push(arg__11908__auto___15974);
        var G__15975 = seq__14714_15970;
        var G__15976 = chunk__14715_15971;
        var G__15977 = count__14716_15972;
        var G__15978 = i__14717_15973 + 1;
        seq__14714_15970 = G__15975;
        chunk__14715_15971 = G__15976;
        count__14716_15972 = G__15977;
        i__14717_15973 = G__15978;
        continue;
      } else {
        var temp__4092__auto___15979 = cljs.core.seq.call(null, seq__14714_15970);
        if (temp__4092__auto___15979) {
          var seq__14714_15980__$1 = temp__4092__auto___15979;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14714_15980__$1)) {
            var c__11077__auto___15981 = cljs.core.chunk_first.call(null, seq__14714_15980__$1);
            var G__15982 = cljs.core.chunk_rest.call(null, seq__14714_15980__$1);
            var G__15983 = c__11077__auto___15981;
            var G__15984 = cljs.core.count.call(null, c__11077__auto___15981);
            var G__15985 = 0;
            seq__14714_15970 = G__15982;
            chunk__14715_15971 = G__15983;
            count__14716_15972 = G__15984;
            i__14717_15973 = G__15985;
            continue;
          } else {
            var arg__11908__auto___15986 = cljs.core.first.call(null, seq__14714_15980__$1);
            a__11907__auto__.push(arg__11908__auto___15986);
            var G__15987 = cljs.core.next.call(null, seq__14714_15980__$1);
            var G__15988 = null;
            var G__15989 = 0;
            var G__15990 = 0;
            seq__14714_15970 = G__15987;
            chunk__14715_15971 = G__15988;
            count__14716_15972 = G__15989;
            i__14717_15973 = G__15990;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.data.apply(null, a__11907__auto__);
  };
  var data = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return data__delegate.call(this, args__11906__auto__);
  };
  data.cljs$lang$maxFixedArity = 0;
  data.cljs$lang$applyTo = function(arglist__15991) {
    var args__11906__auto__ = cljs.core.seq(arglist__15991);
    return data__delegate(args__11906__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
quiescent.dom.datalist = function() {
  var datalist__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14722_15992 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14723_15993 = null;
    var count__14724_15994 = 0;
    var i__14725_15995 = 0;
    while (true) {
      if (i__14725_15995 < count__14724_15994) {
        var arg__11908__auto___15996 = cljs.core._nth.call(null, chunk__14723_15993, i__14725_15995);
        a__11907__auto__.push(arg__11908__auto___15996);
        var G__15997 = seq__14722_15992;
        var G__15998 = chunk__14723_15993;
        var G__15999 = count__14724_15994;
        var G__16000 = i__14725_15995 + 1;
        seq__14722_15992 = G__15997;
        chunk__14723_15993 = G__15998;
        count__14724_15994 = G__15999;
        i__14725_15995 = G__16000;
        continue;
      } else {
        var temp__4092__auto___16001 = cljs.core.seq.call(null, seq__14722_15992);
        if (temp__4092__auto___16001) {
          var seq__14722_16002__$1 = temp__4092__auto___16001;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14722_16002__$1)) {
            var c__11077__auto___16003 = cljs.core.chunk_first.call(null, seq__14722_16002__$1);
            var G__16004 = cljs.core.chunk_rest.call(null, seq__14722_16002__$1);
            var G__16005 = c__11077__auto___16003;
            var G__16006 = cljs.core.count.call(null, c__11077__auto___16003);
            var G__16007 = 0;
            seq__14722_15992 = G__16004;
            chunk__14723_15993 = G__16005;
            count__14724_15994 = G__16006;
            i__14725_15995 = G__16007;
            continue;
          } else {
            var arg__11908__auto___16008 = cljs.core.first.call(null, seq__14722_16002__$1);
            a__11907__auto__.push(arg__11908__auto___16008);
            var G__16009 = cljs.core.next.call(null, seq__14722_16002__$1);
            var G__16010 = null;
            var G__16011 = 0;
            var G__16012 = 0;
            seq__14722_15992 = G__16009;
            chunk__14723_15993 = G__16010;
            count__14724_15994 = G__16011;
            i__14725_15995 = G__16012;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.datalist.apply(null, a__11907__auto__);
  };
  var datalist = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return datalist__delegate.call(this, args__11906__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 0;
  datalist.cljs$lang$applyTo = function(arglist__16013) {
    var args__11906__auto__ = cljs.core.seq(arglist__16013);
    return datalist__delegate(args__11906__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
quiescent.dom.dd = function() {
  var dd__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14730_16014 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14731_16015 = null;
    var count__14732_16016 = 0;
    var i__14733_16017 = 0;
    while (true) {
      if (i__14733_16017 < count__14732_16016) {
        var arg__11908__auto___16018 = cljs.core._nth.call(null, chunk__14731_16015, i__14733_16017);
        a__11907__auto__.push(arg__11908__auto___16018);
        var G__16019 = seq__14730_16014;
        var G__16020 = chunk__14731_16015;
        var G__16021 = count__14732_16016;
        var G__16022 = i__14733_16017 + 1;
        seq__14730_16014 = G__16019;
        chunk__14731_16015 = G__16020;
        count__14732_16016 = G__16021;
        i__14733_16017 = G__16022;
        continue;
      } else {
        var temp__4092__auto___16023 = cljs.core.seq.call(null, seq__14730_16014);
        if (temp__4092__auto___16023) {
          var seq__14730_16024__$1 = temp__4092__auto___16023;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14730_16024__$1)) {
            var c__11077__auto___16025 = cljs.core.chunk_first.call(null, seq__14730_16024__$1);
            var G__16026 = cljs.core.chunk_rest.call(null, seq__14730_16024__$1);
            var G__16027 = c__11077__auto___16025;
            var G__16028 = cljs.core.count.call(null, c__11077__auto___16025);
            var G__16029 = 0;
            seq__14730_16014 = G__16026;
            chunk__14731_16015 = G__16027;
            count__14732_16016 = G__16028;
            i__14733_16017 = G__16029;
            continue;
          } else {
            var arg__11908__auto___16030 = cljs.core.first.call(null, seq__14730_16024__$1);
            a__11907__auto__.push(arg__11908__auto___16030);
            var G__16031 = cljs.core.next.call(null, seq__14730_16024__$1);
            var G__16032 = null;
            var G__16033 = 0;
            var G__16034 = 0;
            seq__14730_16014 = G__16031;
            chunk__14731_16015 = G__16032;
            count__14732_16016 = G__16033;
            i__14733_16017 = G__16034;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dd.apply(null, a__11907__auto__);
  };
  var dd = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dd__delegate.call(this, args__11906__auto__);
  };
  dd.cljs$lang$maxFixedArity = 0;
  dd.cljs$lang$applyTo = function(arglist__16035) {
    var args__11906__auto__ = cljs.core.seq(arglist__16035);
    return dd__delegate(args__11906__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
quiescent.dom.del = function() {
  var del__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14738_16036 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14739_16037 = null;
    var count__14740_16038 = 0;
    var i__14741_16039 = 0;
    while (true) {
      if (i__14741_16039 < count__14740_16038) {
        var arg__11908__auto___16040 = cljs.core._nth.call(null, chunk__14739_16037, i__14741_16039);
        a__11907__auto__.push(arg__11908__auto___16040);
        var G__16041 = seq__14738_16036;
        var G__16042 = chunk__14739_16037;
        var G__16043 = count__14740_16038;
        var G__16044 = i__14741_16039 + 1;
        seq__14738_16036 = G__16041;
        chunk__14739_16037 = G__16042;
        count__14740_16038 = G__16043;
        i__14741_16039 = G__16044;
        continue;
      } else {
        var temp__4092__auto___16045 = cljs.core.seq.call(null, seq__14738_16036);
        if (temp__4092__auto___16045) {
          var seq__14738_16046__$1 = temp__4092__auto___16045;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14738_16046__$1)) {
            var c__11077__auto___16047 = cljs.core.chunk_first.call(null, seq__14738_16046__$1);
            var G__16048 = cljs.core.chunk_rest.call(null, seq__14738_16046__$1);
            var G__16049 = c__11077__auto___16047;
            var G__16050 = cljs.core.count.call(null, c__11077__auto___16047);
            var G__16051 = 0;
            seq__14738_16036 = G__16048;
            chunk__14739_16037 = G__16049;
            count__14740_16038 = G__16050;
            i__14741_16039 = G__16051;
            continue;
          } else {
            var arg__11908__auto___16052 = cljs.core.first.call(null, seq__14738_16046__$1);
            a__11907__auto__.push(arg__11908__auto___16052);
            var G__16053 = cljs.core.next.call(null, seq__14738_16046__$1);
            var G__16054 = null;
            var G__16055 = 0;
            var G__16056 = 0;
            seq__14738_16036 = G__16053;
            chunk__14739_16037 = G__16054;
            count__14740_16038 = G__16055;
            i__14741_16039 = G__16056;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.del.apply(null, a__11907__auto__);
  };
  var del = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return del__delegate.call(this, args__11906__auto__);
  };
  del.cljs$lang$maxFixedArity = 0;
  del.cljs$lang$applyTo = function(arglist__16057) {
    var args__11906__auto__ = cljs.core.seq(arglist__16057);
    return del__delegate(args__11906__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
quiescent.dom.details = function() {
  var details__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14746_16058 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14747_16059 = null;
    var count__14748_16060 = 0;
    var i__14749_16061 = 0;
    while (true) {
      if (i__14749_16061 < count__14748_16060) {
        var arg__11908__auto___16062 = cljs.core._nth.call(null, chunk__14747_16059, i__14749_16061);
        a__11907__auto__.push(arg__11908__auto___16062);
        var G__16063 = seq__14746_16058;
        var G__16064 = chunk__14747_16059;
        var G__16065 = count__14748_16060;
        var G__16066 = i__14749_16061 + 1;
        seq__14746_16058 = G__16063;
        chunk__14747_16059 = G__16064;
        count__14748_16060 = G__16065;
        i__14749_16061 = G__16066;
        continue;
      } else {
        var temp__4092__auto___16067 = cljs.core.seq.call(null, seq__14746_16058);
        if (temp__4092__auto___16067) {
          var seq__14746_16068__$1 = temp__4092__auto___16067;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14746_16068__$1)) {
            var c__11077__auto___16069 = cljs.core.chunk_first.call(null, seq__14746_16068__$1);
            var G__16070 = cljs.core.chunk_rest.call(null, seq__14746_16068__$1);
            var G__16071 = c__11077__auto___16069;
            var G__16072 = cljs.core.count.call(null, c__11077__auto___16069);
            var G__16073 = 0;
            seq__14746_16058 = G__16070;
            chunk__14747_16059 = G__16071;
            count__14748_16060 = G__16072;
            i__14749_16061 = G__16073;
            continue;
          } else {
            var arg__11908__auto___16074 = cljs.core.first.call(null, seq__14746_16068__$1);
            a__11907__auto__.push(arg__11908__auto___16074);
            var G__16075 = cljs.core.next.call(null, seq__14746_16068__$1);
            var G__16076 = null;
            var G__16077 = 0;
            var G__16078 = 0;
            seq__14746_16058 = G__16075;
            chunk__14747_16059 = G__16076;
            count__14748_16060 = G__16077;
            i__14749_16061 = G__16078;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.details.apply(null, a__11907__auto__);
  };
  var details = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return details__delegate.call(this, args__11906__auto__);
  };
  details.cljs$lang$maxFixedArity = 0;
  details.cljs$lang$applyTo = function(arglist__16079) {
    var args__11906__auto__ = cljs.core.seq(arglist__16079);
    return details__delegate(args__11906__auto__);
  };
  details.cljs$core$IFn$_invoke$arity$variadic = details__delegate;
  return details;
}();
quiescent.dom.dfn = function() {
  var dfn__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14754_16080 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14755_16081 = null;
    var count__14756_16082 = 0;
    var i__14757_16083 = 0;
    while (true) {
      if (i__14757_16083 < count__14756_16082) {
        var arg__11908__auto___16084 = cljs.core._nth.call(null, chunk__14755_16081, i__14757_16083);
        a__11907__auto__.push(arg__11908__auto___16084);
        var G__16085 = seq__14754_16080;
        var G__16086 = chunk__14755_16081;
        var G__16087 = count__14756_16082;
        var G__16088 = i__14757_16083 + 1;
        seq__14754_16080 = G__16085;
        chunk__14755_16081 = G__16086;
        count__14756_16082 = G__16087;
        i__14757_16083 = G__16088;
        continue;
      } else {
        var temp__4092__auto___16089 = cljs.core.seq.call(null, seq__14754_16080);
        if (temp__4092__auto___16089) {
          var seq__14754_16090__$1 = temp__4092__auto___16089;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14754_16090__$1)) {
            var c__11077__auto___16091 = cljs.core.chunk_first.call(null, seq__14754_16090__$1);
            var G__16092 = cljs.core.chunk_rest.call(null, seq__14754_16090__$1);
            var G__16093 = c__11077__auto___16091;
            var G__16094 = cljs.core.count.call(null, c__11077__auto___16091);
            var G__16095 = 0;
            seq__14754_16080 = G__16092;
            chunk__14755_16081 = G__16093;
            count__14756_16082 = G__16094;
            i__14757_16083 = G__16095;
            continue;
          } else {
            var arg__11908__auto___16096 = cljs.core.first.call(null, seq__14754_16090__$1);
            a__11907__auto__.push(arg__11908__auto___16096);
            var G__16097 = cljs.core.next.call(null, seq__14754_16090__$1);
            var G__16098 = null;
            var G__16099 = 0;
            var G__16100 = 0;
            seq__14754_16080 = G__16097;
            chunk__14755_16081 = G__16098;
            count__14756_16082 = G__16099;
            i__14757_16083 = G__16100;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dfn.apply(null, a__11907__auto__);
  };
  var dfn = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dfn__delegate.call(this, args__11906__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 0;
  dfn.cljs$lang$applyTo = function(arglist__16101) {
    var args__11906__auto__ = cljs.core.seq(arglist__16101);
    return dfn__delegate(args__11906__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
quiescent.dom.div = function() {
  var div__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14762_16102 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14763_16103 = null;
    var count__14764_16104 = 0;
    var i__14765_16105 = 0;
    while (true) {
      if (i__14765_16105 < count__14764_16104) {
        var arg__11908__auto___16106 = cljs.core._nth.call(null, chunk__14763_16103, i__14765_16105);
        a__11907__auto__.push(arg__11908__auto___16106);
        var G__16107 = seq__14762_16102;
        var G__16108 = chunk__14763_16103;
        var G__16109 = count__14764_16104;
        var G__16110 = i__14765_16105 + 1;
        seq__14762_16102 = G__16107;
        chunk__14763_16103 = G__16108;
        count__14764_16104 = G__16109;
        i__14765_16105 = G__16110;
        continue;
      } else {
        var temp__4092__auto___16111 = cljs.core.seq.call(null, seq__14762_16102);
        if (temp__4092__auto___16111) {
          var seq__14762_16112__$1 = temp__4092__auto___16111;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14762_16112__$1)) {
            var c__11077__auto___16113 = cljs.core.chunk_first.call(null, seq__14762_16112__$1);
            var G__16114 = cljs.core.chunk_rest.call(null, seq__14762_16112__$1);
            var G__16115 = c__11077__auto___16113;
            var G__16116 = cljs.core.count.call(null, c__11077__auto___16113);
            var G__16117 = 0;
            seq__14762_16102 = G__16114;
            chunk__14763_16103 = G__16115;
            count__14764_16104 = G__16116;
            i__14765_16105 = G__16117;
            continue;
          } else {
            var arg__11908__auto___16118 = cljs.core.first.call(null, seq__14762_16112__$1);
            a__11907__auto__.push(arg__11908__auto___16118);
            var G__16119 = cljs.core.next.call(null, seq__14762_16112__$1);
            var G__16120 = null;
            var G__16121 = 0;
            var G__16122 = 0;
            seq__14762_16102 = G__16119;
            chunk__14763_16103 = G__16120;
            count__14764_16104 = G__16121;
            i__14765_16105 = G__16122;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.div.apply(null, a__11907__auto__);
  };
  var div = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return div__delegate.call(this, args__11906__auto__);
  };
  div.cljs$lang$maxFixedArity = 0;
  div.cljs$lang$applyTo = function(arglist__16123) {
    var args__11906__auto__ = cljs.core.seq(arglist__16123);
    return div__delegate(args__11906__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
quiescent.dom.dl = function() {
  var dl__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14770_16124 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14771_16125 = null;
    var count__14772_16126 = 0;
    var i__14773_16127 = 0;
    while (true) {
      if (i__14773_16127 < count__14772_16126) {
        var arg__11908__auto___16128 = cljs.core._nth.call(null, chunk__14771_16125, i__14773_16127);
        a__11907__auto__.push(arg__11908__auto___16128);
        var G__16129 = seq__14770_16124;
        var G__16130 = chunk__14771_16125;
        var G__16131 = count__14772_16126;
        var G__16132 = i__14773_16127 + 1;
        seq__14770_16124 = G__16129;
        chunk__14771_16125 = G__16130;
        count__14772_16126 = G__16131;
        i__14773_16127 = G__16132;
        continue;
      } else {
        var temp__4092__auto___16133 = cljs.core.seq.call(null, seq__14770_16124);
        if (temp__4092__auto___16133) {
          var seq__14770_16134__$1 = temp__4092__auto___16133;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14770_16134__$1)) {
            var c__11077__auto___16135 = cljs.core.chunk_first.call(null, seq__14770_16134__$1);
            var G__16136 = cljs.core.chunk_rest.call(null, seq__14770_16134__$1);
            var G__16137 = c__11077__auto___16135;
            var G__16138 = cljs.core.count.call(null, c__11077__auto___16135);
            var G__16139 = 0;
            seq__14770_16124 = G__16136;
            chunk__14771_16125 = G__16137;
            count__14772_16126 = G__16138;
            i__14773_16127 = G__16139;
            continue;
          } else {
            var arg__11908__auto___16140 = cljs.core.first.call(null, seq__14770_16134__$1);
            a__11907__auto__.push(arg__11908__auto___16140);
            var G__16141 = cljs.core.next.call(null, seq__14770_16134__$1);
            var G__16142 = null;
            var G__16143 = 0;
            var G__16144 = 0;
            seq__14770_16124 = G__16141;
            chunk__14771_16125 = G__16142;
            count__14772_16126 = G__16143;
            i__14773_16127 = G__16144;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dl.apply(null, a__11907__auto__);
  };
  var dl = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dl__delegate.call(this, args__11906__auto__);
  };
  dl.cljs$lang$maxFixedArity = 0;
  dl.cljs$lang$applyTo = function(arglist__16145) {
    var args__11906__auto__ = cljs.core.seq(arglist__16145);
    return dl__delegate(args__11906__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
quiescent.dom.dt = function() {
  var dt__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14778_16146 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14779_16147 = null;
    var count__14780_16148 = 0;
    var i__14781_16149 = 0;
    while (true) {
      if (i__14781_16149 < count__14780_16148) {
        var arg__11908__auto___16150 = cljs.core._nth.call(null, chunk__14779_16147, i__14781_16149);
        a__11907__auto__.push(arg__11908__auto___16150);
        var G__16151 = seq__14778_16146;
        var G__16152 = chunk__14779_16147;
        var G__16153 = count__14780_16148;
        var G__16154 = i__14781_16149 + 1;
        seq__14778_16146 = G__16151;
        chunk__14779_16147 = G__16152;
        count__14780_16148 = G__16153;
        i__14781_16149 = G__16154;
        continue;
      } else {
        var temp__4092__auto___16155 = cljs.core.seq.call(null, seq__14778_16146);
        if (temp__4092__auto___16155) {
          var seq__14778_16156__$1 = temp__4092__auto___16155;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14778_16156__$1)) {
            var c__11077__auto___16157 = cljs.core.chunk_first.call(null, seq__14778_16156__$1);
            var G__16158 = cljs.core.chunk_rest.call(null, seq__14778_16156__$1);
            var G__16159 = c__11077__auto___16157;
            var G__16160 = cljs.core.count.call(null, c__11077__auto___16157);
            var G__16161 = 0;
            seq__14778_16146 = G__16158;
            chunk__14779_16147 = G__16159;
            count__14780_16148 = G__16160;
            i__14781_16149 = G__16161;
            continue;
          } else {
            var arg__11908__auto___16162 = cljs.core.first.call(null, seq__14778_16156__$1);
            a__11907__auto__.push(arg__11908__auto___16162);
            var G__16163 = cljs.core.next.call(null, seq__14778_16156__$1);
            var G__16164 = null;
            var G__16165 = 0;
            var G__16166 = 0;
            seq__14778_16146 = G__16163;
            chunk__14779_16147 = G__16164;
            count__14780_16148 = G__16165;
            i__14781_16149 = G__16166;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dt.apply(null, a__11907__auto__);
  };
  var dt = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dt__delegate.call(this, args__11906__auto__);
  };
  dt.cljs$lang$maxFixedArity = 0;
  dt.cljs$lang$applyTo = function(arglist__16167) {
    var args__11906__auto__ = cljs.core.seq(arglist__16167);
    return dt__delegate(args__11906__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
quiescent.dom.em = function() {
  var em__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14786_16168 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14787_16169 = null;
    var count__14788_16170 = 0;
    var i__14789_16171 = 0;
    while (true) {
      if (i__14789_16171 < count__14788_16170) {
        var arg__11908__auto___16172 = cljs.core._nth.call(null, chunk__14787_16169, i__14789_16171);
        a__11907__auto__.push(arg__11908__auto___16172);
        var G__16173 = seq__14786_16168;
        var G__16174 = chunk__14787_16169;
        var G__16175 = count__14788_16170;
        var G__16176 = i__14789_16171 + 1;
        seq__14786_16168 = G__16173;
        chunk__14787_16169 = G__16174;
        count__14788_16170 = G__16175;
        i__14789_16171 = G__16176;
        continue;
      } else {
        var temp__4092__auto___16177 = cljs.core.seq.call(null, seq__14786_16168);
        if (temp__4092__auto___16177) {
          var seq__14786_16178__$1 = temp__4092__auto___16177;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14786_16178__$1)) {
            var c__11077__auto___16179 = cljs.core.chunk_first.call(null, seq__14786_16178__$1);
            var G__16180 = cljs.core.chunk_rest.call(null, seq__14786_16178__$1);
            var G__16181 = c__11077__auto___16179;
            var G__16182 = cljs.core.count.call(null, c__11077__auto___16179);
            var G__16183 = 0;
            seq__14786_16168 = G__16180;
            chunk__14787_16169 = G__16181;
            count__14788_16170 = G__16182;
            i__14789_16171 = G__16183;
            continue;
          } else {
            var arg__11908__auto___16184 = cljs.core.first.call(null, seq__14786_16178__$1);
            a__11907__auto__.push(arg__11908__auto___16184);
            var G__16185 = cljs.core.next.call(null, seq__14786_16178__$1);
            var G__16186 = null;
            var G__16187 = 0;
            var G__16188 = 0;
            seq__14786_16168 = G__16185;
            chunk__14787_16169 = G__16186;
            count__14788_16170 = G__16187;
            i__14789_16171 = G__16188;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.em.apply(null, a__11907__auto__);
  };
  var em = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return em__delegate.call(this, args__11906__auto__);
  };
  em.cljs$lang$maxFixedArity = 0;
  em.cljs$lang$applyTo = function(arglist__16189) {
    var args__11906__auto__ = cljs.core.seq(arglist__16189);
    return em__delegate(args__11906__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
quiescent.dom.embed = function() {
  var embed__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14802_16190 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14803_16191 = null;
    var count__14804_16192 = 0;
    var i__14805_16193 = 0;
    while (true) {
      if (i__14805_16193 < count__14804_16192) {
        var arg__11908__auto___16194 = cljs.core._nth.call(null, chunk__14803_16191, i__14805_16193);
        a__11907__auto__.push(arg__11908__auto___16194);
        var G__16195 = seq__14802_16190;
        var G__16196 = chunk__14803_16191;
        var G__16197 = count__14804_16192;
        var G__16198 = i__14805_16193 + 1;
        seq__14802_16190 = G__16195;
        chunk__14803_16191 = G__16196;
        count__14804_16192 = G__16197;
        i__14805_16193 = G__16198;
        continue;
      } else {
        var temp__4092__auto___16199 = cljs.core.seq.call(null, seq__14802_16190);
        if (temp__4092__auto___16199) {
          var seq__14802_16200__$1 = temp__4092__auto___16199;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14802_16200__$1)) {
            var c__11077__auto___16201 = cljs.core.chunk_first.call(null, seq__14802_16200__$1);
            var G__16202 = cljs.core.chunk_rest.call(null, seq__14802_16200__$1);
            var G__16203 = c__11077__auto___16201;
            var G__16204 = cljs.core.count.call(null, c__11077__auto___16201);
            var G__16205 = 0;
            seq__14802_16190 = G__16202;
            chunk__14803_16191 = G__16203;
            count__14804_16192 = G__16204;
            i__14805_16193 = G__16205;
            continue;
          } else {
            var arg__11908__auto___16206 = cljs.core.first.call(null, seq__14802_16200__$1);
            a__11907__auto__.push(arg__11908__auto___16206);
            var G__16207 = cljs.core.next.call(null, seq__14802_16200__$1);
            var G__16208 = null;
            var G__16209 = 0;
            var G__16210 = 0;
            seq__14802_16190 = G__16207;
            chunk__14803_16191 = G__16208;
            count__14804_16192 = G__16209;
            i__14805_16193 = G__16210;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.embed.apply(null, a__11907__auto__);
  };
  var embed = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return embed__delegate.call(this, args__11906__auto__);
  };
  embed.cljs$lang$maxFixedArity = 0;
  embed.cljs$lang$applyTo = function(arglist__16211) {
    var args__11906__auto__ = cljs.core.seq(arglist__16211);
    return embed__delegate(args__11906__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
quiescent.dom.fieldset = function() {
  var fieldset__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14810_16212 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14811_16213 = null;
    var count__14812_16214 = 0;
    var i__14813_16215 = 0;
    while (true) {
      if (i__14813_16215 < count__14812_16214) {
        var arg__11908__auto___16216 = cljs.core._nth.call(null, chunk__14811_16213, i__14813_16215);
        a__11907__auto__.push(arg__11908__auto___16216);
        var G__16217 = seq__14810_16212;
        var G__16218 = chunk__14811_16213;
        var G__16219 = count__14812_16214;
        var G__16220 = i__14813_16215 + 1;
        seq__14810_16212 = G__16217;
        chunk__14811_16213 = G__16218;
        count__14812_16214 = G__16219;
        i__14813_16215 = G__16220;
        continue;
      } else {
        var temp__4092__auto___16221 = cljs.core.seq.call(null, seq__14810_16212);
        if (temp__4092__auto___16221) {
          var seq__14810_16222__$1 = temp__4092__auto___16221;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14810_16222__$1)) {
            var c__11077__auto___16223 = cljs.core.chunk_first.call(null, seq__14810_16222__$1);
            var G__16224 = cljs.core.chunk_rest.call(null, seq__14810_16222__$1);
            var G__16225 = c__11077__auto___16223;
            var G__16226 = cljs.core.count.call(null, c__11077__auto___16223);
            var G__16227 = 0;
            seq__14810_16212 = G__16224;
            chunk__14811_16213 = G__16225;
            count__14812_16214 = G__16226;
            i__14813_16215 = G__16227;
            continue;
          } else {
            var arg__11908__auto___16228 = cljs.core.first.call(null, seq__14810_16222__$1);
            a__11907__auto__.push(arg__11908__auto___16228);
            var G__16229 = cljs.core.next.call(null, seq__14810_16222__$1);
            var G__16230 = null;
            var G__16231 = 0;
            var G__16232 = 0;
            seq__14810_16212 = G__16229;
            chunk__14811_16213 = G__16230;
            count__14812_16214 = G__16231;
            i__14813_16215 = G__16232;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.fieldset.apply(null, a__11907__auto__);
  };
  var fieldset = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return fieldset__delegate.call(this, args__11906__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 0;
  fieldset.cljs$lang$applyTo = function(arglist__16233) {
    var args__11906__auto__ = cljs.core.seq(arglist__16233);
    return fieldset__delegate(args__11906__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
quiescent.dom.figcaption = function() {
  var figcaption__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14818_16234 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14819_16235 = null;
    var count__14820_16236 = 0;
    var i__14821_16237 = 0;
    while (true) {
      if (i__14821_16237 < count__14820_16236) {
        var arg__11908__auto___16238 = cljs.core._nth.call(null, chunk__14819_16235, i__14821_16237);
        a__11907__auto__.push(arg__11908__auto___16238);
        var G__16239 = seq__14818_16234;
        var G__16240 = chunk__14819_16235;
        var G__16241 = count__14820_16236;
        var G__16242 = i__14821_16237 + 1;
        seq__14818_16234 = G__16239;
        chunk__14819_16235 = G__16240;
        count__14820_16236 = G__16241;
        i__14821_16237 = G__16242;
        continue;
      } else {
        var temp__4092__auto___16243 = cljs.core.seq.call(null, seq__14818_16234);
        if (temp__4092__auto___16243) {
          var seq__14818_16244__$1 = temp__4092__auto___16243;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14818_16244__$1)) {
            var c__11077__auto___16245 = cljs.core.chunk_first.call(null, seq__14818_16244__$1);
            var G__16246 = cljs.core.chunk_rest.call(null, seq__14818_16244__$1);
            var G__16247 = c__11077__auto___16245;
            var G__16248 = cljs.core.count.call(null, c__11077__auto___16245);
            var G__16249 = 0;
            seq__14818_16234 = G__16246;
            chunk__14819_16235 = G__16247;
            count__14820_16236 = G__16248;
            i__14821_16237 = G__16249;
            continue;
          } else {
            var arg__11908__auto___16250 = cljs.core.first.call(null, seq__14818_16244__$1);
            a__11907__auto__.push(arg__11908__auto___16250);
            var G__16251 = cljs.core.next.call(null, seq__14818_16244__$1);
            var G__16252 = null;
            var G__16253 = 0;
            var G__16254 = 0;
            seq__14818_16234 = G__16251;
            chunk__14819_16235 = G__16252;
            count__14820_16236 = G__16253;
            i__14821_16237 = G__16254;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figcaption.apply(null, a__11907__auto__);
  };
  var figcaption = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figcaption__delegate.call(this, args__11906__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 0;
  figcaption.cljs$lang$applyTo = function(arglist__16255) {
    var args__11906__auto__ = cljs.core.seq(arglist__16255);
    return figcaption__delegate(args__11906__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
quiescent.dom.figure = function() {
  var figure__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14826_16256 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14827_16257 = null;
    var count__14828_16258 = 0;
    var i__14829_16259 = 0;
    while (true) {
      if (i__14829_16259 < count__14828_16258) {
        var arg__11908__auto___16260 = cljs.core._nth.call(null, chunk__14827_16257, i__14829_16259);
        a__11907__auto__.push(arg__11908__auto___16260);
        var G__16261 = seq__14826_16256;
        var G__16262 = chunk__14827_16257;
        var G__16263 = count__14828_16258;
        var G__16264 = i__14829_16259 + 1;
        seq__14826_16256 = G__16261;
        chunk__14827_16257 = G__16262;
        count__14828_16258 = G__16263;
        i__14829_16259 = G__16264;
        continue;
      } else {
        var temp__4092__auto___16265 = cljs.core.seq.call(null, seq__14826_16256);
        if (temp__4092__auto___16265) {
          var seq__14826_16266__$1 = temp__4092__auto___16265;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14826_16266__$1)) {
            var c__11077__auto___16267 = cljs.core.chunk_first.call(null, seq__14826_16266__$1);
            var G__16268 = cljs.core.chunk_rest.call(null, seq__14826_16266__$1);
            var G__16269 = c__11077__auto___16267;
            var G__16270 = cljs.core.count.call(null, c__11077__auto___16267);
            var G__16271 = 0;
            seq__14826_16256 = G__16268;
            chunk__14827_16257 = G__16269;
            count__14828_16258 = G__16270;
            i__14829_16259 = G__16271;
            continue;
          } else {
            var arg__11908__auto___16272 = cljs.core.first.call(null, seq__14826_16266__$1);
            a__11907__auto__.push(arg__11908__auto___16272);
            var G__16273 = cljs.core.next.call(null, seq__14826_16266__$1);
            var G__16274 = null;
            var G__16275 = 0;
            var G__16276 = 0;
            seq__14826_16256 = G__16273;
            chunk__14827_16257 = G__16274;
            count__14828_16258 = G__16275;
            i__14829_16259 = G__16276;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figure.apply(null, a__11907__auto__);
  };
  var figure = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figure__delegate.call(this, args__11906__auto__);
  };
  figure.cljs$lang$maxFixedArity = 0;
  figure.cljs$lang$applyTo = function(arglist__16277) {
    var args__11906__auto__ = cljs.core.seq(arglist__16277);
    return figure__delegate(args__11906__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
quiescent.dom.footer = function() {
  var footer__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14834_16278 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14835_16279 = null;
    var count__14836_16280 = 0;
    var i__14837_16281 = 0;
    while (true) {
      if (i__14837_16281 < count__14836_16280) {
        var arg__11908__auto___16282 = cljs.core._nth.call(null, chunk__14835_16279, i__14837_16281);
        a__11907__auto__.push(arg__11908__auto___16282);
        var G__16283 = seq__14834_16278;
        var G__16284 = chunk__14835_16279;
        var G__16285 = count__14836_16280;
        var G__16286 = i__14837_16281 + 1;
        seq__14834_16278 = G__16283;
        chunk__14835_16279 = G__16284;
        count__14836_16280 = G__16285;
        i__14837_16281 = G__16286;
        continue;
      } else {
        var temp__4092__auto___16287 = cljs.core.seq.call(null, seq__14834_16278);
        if (temp__4092__auto___16287) {
          var seq__14834_16288__$1 = temp__4092__auto___16287;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14834_16288__$1)) {
            var c__11077__auto___16289 = cljs.core.chunk_first.call(null, seq__14834_16288__$1);
            var G__16290 = cljs.core.chunk_rest.call(null, seq__14834_16288__$1);
            var G__16291 = c__11077__auto___16289;
            var G__16292 = cljs.core.count.call(null, c__11077__auto___16289);
            var G__16293 = 0;
            seq__14834_16278 = G__16290;
            chunk__14835_16279 = G__16291;
            count__14836_16280 = G__16292;
            i__14837_16281 = G__16293;
            continue;
          } else {
            var arg__11908__auto___16294 = cljs.core.first.call(null, seq__14834_16288__$1);
            a__11907__auto__.push(arg__11908__auto___16294);
            var G__16295 = cljs.core.next.call(null, seq__14834_16288__$1);
            var G__16296 = null;
            var G__16297 = 0;
            var G__16298 = 0;
            seq__14834_16278 = G__16295;
            chunk__14835_16279 = G__16296;
            count__14836_16280 = G__16297;
            i__14837_16281 = G__16298;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.footer.apply(null, a__11907__auto__);
  };
  var footer = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return footer__delegate.call(this, args__11906__auto__);
  };
  footer.cljs$lang$maxFixedArity = 0;
  footer.cljs$lang$applyTo = function(arglist__16299) {
    var args__11906__auto__ = cljs.core.seq(arglist__16299);
    return footer__delegate(args__11906__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
quiescent.dom.form = function() {
  var form__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14842_16300 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14843_16301 = null;
    var count__14844_16302 = 0;
    var i__14845_16303 = 0;
    while (true) {
      if (i__14845_16303 < count__14844_16302) {
        var arg__11908__auto___16304 = cljs.core._nth.call(null, chunk__14843_16301, i__14845_16303);
        a__11907__auto__.push(arg__11908__auto___16304);
        var G__16305 = seq__14842_16300;
        var G__16306 = chunk__14843_16301;
        var G__16307 = count__14844_16302;
        var G__16308 = i__14845_16303 + 1;
        seq__14842_16300 = G__16305;
        chunk__14843_16301 = G__16306;
        count__14844_16302 = G__16307;
        i__14845_16303 = G__16308;
        continue;
      } else {
        var temp__4092__auto___16309 = cljs.core.seq.call(null, seq__14842_16300);
        if (temp__4092__auto___16309) {
          var seq__14842_16310__$1 = temp__4092__auto___16309;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14842_16310__$1)) {
            var c__11077__auto___16311 = cljs.core.chunk_first.call(null, seq__14842_16310__$1);
            var G__16312 = cljs.core.chunk_rest.call(null, seq__14842_16310__$1);
            var G__16313 = c__11077__auto___16311;
            var G__16314 = cljs.core.count.call(null, c__11077__auto___16311);
            var G__16315 = 0;
            seq__14842_16300 = G__16312;
            chunk__14843_16301 = G__16313;
            count__14844_16302 = G__16314;
            i__14845_16303 = G__16315;
            continue;
          } else {
            var arg__11908__auto___16316 = cljs.core.first.call(null, seq__14842_16310__$1);
            a__11907__auto__.push(arg__11908__auto___16316);
            var G__16317 = cljs.core.next.call(null, seq__14842_16310__$1);
            var G__16318 = null;
            var G__16319 = 0;
            var G__16320 = 0;
            seq__14842_16300 = G__16317;
            chunk__14843_16301 = G__16318;
            count__14844_16302 = G__16319;
            i__14845_16303 = G__16320;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.form.apply(null, a__11907__auto__);
  };
  var form = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return form__delegate.call(this, args__11906__auto__);
  };
  form.cljs$lang$maxFixedArity = 0;
  form.cljs$lang$applyTo = function(arglist__16321) {
    var args__11906__auto__ = cljs.core.seq(arglist__16321);
    return form__delegate(args__11906__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
quiescent.dom.h1 = function() {
  var h1__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14850_16322 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14851_16323 = null;
    var count__14852_16324 = 0;
    var i__14853_16325 = 0;
    while (true) {
      if (i__14853_16325 < count__14852_16324) {
        var arg__11908__auto___16326 = cljs.core._nth.call(null, chunk__14851_16323, i__14853_16325);
        a__11907__auto__.push(arg__11908__auto___16326);
        var G__16327 = seq__14850_16322;
        var G__16328 = chunk__14851_16323;
        var G__16329 = count__14852_16324;
        var G__16330 = i__14853_16325 + 1;
        seq__14850_16322 = G__16327;
        chunk__14851_16323 = G__16328;
        count__14852_16324 = G__16329;
        i__14853_16325 = G__16330;
        continue;
      } else {
        var temp__4092__auto___16331 = cljs.core.seq.call(null, seq__14850_16322);
        if (temp__4092__auto___16331) {
          var seq__14850_16332__$1 = temp__4092__auto___16331;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14850_16332__$1)) {
            var c__11077__auto___16333 = cljs.core.chunk_first.call(null, seq__14850_16332__$1);
            var G__16334 = cljs.core.chunk_rest.call(null, seq__14850_16332__$1);
            var G__16335 = c__11077__auto___16333;
            var G__16336 = cljs.core.count.call(null, c__11077__auto___16333);
            var G__16337 = 0;
            seq__14850_16322 = G__16334;
            chunk__14851_16323 = G__16335;
            count__14852_16324 = G__16336;
            i__14853_16325 = G__16337;
            continue;
          } else {
            var arg__11908__auto___16338 = cljs.core.first.call(null, seq__14850_16332__$1);
            a__11907__auto__.push(arg__11908__auto___16338);
            var G__16339 = cljs.core.next.call(null, seq__14850_16332__$1);
            var G__16340 = null;
            var G__16341 = 0;
            var G__16342 = 0;
            seq__14850_16322 = G__16339;
            chunk__14851_16323 = G__16340;
            count__14852_16324 = G__16341;
            i__14853_16325 = G__16342;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h1.apply(null, a__11907__auto__);
  };
  var h1 = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h1__delegate.call(this, args__11906__auto__);
  };
  h1.cljs$lang$maxFixedArity = 0;
  h1.cljs$lang$applyTo = function(arglist__16343) {
    var args__11906__auto__ = cljs.core.seq(arglist__16343);
    return h1__delegate(args__11906__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
quiescent.dom.h2 = function() {
  var h2__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14858_16344 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14859_16345 = null;
    var count__14860_16346 = 0;
    var i__14861_16347 = 0;
    while (true) {
      if (i__14861_16347 < count__14860_16346) {
        var arg__11908__auto___16348 = cljs.core._nth.call(null, chunk__14859_16345, i__14861_16347);
        a__11907__auto__.push(arg__11908__auto___16348);
        var G__16349 = seq__14858_16344;
        var G__16350 = chunk__14859_16345;
        var G__16351 = count__14860_16346;
        var G__16352 = i__14861_16347 + 1;
        seq__14858_16344 = G__16349;
        chunk__14859_16345 = G__16350;
        count__14860_16346 = G__16351;
        i__14861_16347 = G__16352;
        continue;
      } else {
        var temp__4092__auto___16353 = cljs.core.seq.call(null, seq__14858_16344);
        if (temp__4092__auto___16353) {
          var seq__14858_16354__$1 = temp__4092__auto___16353;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14858_16354__$1)) {
            var c__11077__auto___16355 = cljs.core.chunk_first.call(null, seq__14858_16354__$1);
            var G__16356 = cljs.core.chunk_rest.call(null, seq__14858_16354__$1);
            var G__16357 = c__11077__auto___16355;
            var G__16358 = cljs.core.count.call(null, c__11077__auto___16355);
            var G__16359 = 0;
            seq__14858_16344 = G__16356;
            chunk__14859_16345 = G__16357;
            count__14860_16346 = G__16358;
            i__14861_16347 = G__16359;
            continue;
          } else {
            var arg__11908__auto___16360 = cljs.core.first.call(null, seq__14858_16354__$1);
            a__11907__auto__.push(arg__11908__auto___16360);
            var G__16361 = cljs.core.next.call(null, seq__14858_16354__$1);
            var G__16362 = null;
            var G__16363 = 0;
            var G__16364 = 0;
            seq__14858_16344 = G__16361;
            chunk__14859_16345 = G__16362;
            count__14860_16346 = G__16363;
            i__14861_16347 = G__16364;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h2.apply(null, a__11907__auto__);
  };
  var h2 = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h2__delegate.call(this, args__11906__auto__);
  };
  h2.cljs$lang$maxFixedArity = 0;
  h2.cljs$lang$applyTo = function(arglist__16365) {
    var args__11906__auto__ = cljs.core.seq(arglist__16365);
    return h2__delegate(args__11906__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
quiescent.dom.h3 = function() {
  var h3__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14866_16366 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14867_16367 = null;
    var count__14868_16368 = 0;
    var i__14869_16369 = 0;
    while (true) {
      if (i__14869_16369 < count__14868_16368) {
        var arg__11908__auto___16370 = cljs.core._nth.call(null, chunk__14867_16367, i__14869_16369);
        a__11907__auto__.push(arg__11908__auto___16370);
        var G__16371 = seq__14866_16366;
        var G__16372 = chunk__14867_16367;
        var G__16373 = count__14868_16368;
        var G__16374 = i__14869_16369 + 1;
        seq__14866_16366 = G__16371;
        chunk__14867_16367 = G__16372;
        count__14868_16368 = G__16373;
        i__14869_16369 = G__16374;
        continue;
      } else {
        var temp__4092__auto___16375 = cljs.core.seq.call(null, seq__14866_16366);
        if (temp__4092__auto___16375) {
          var seq__14866_16376__$1 = temp__4092__auto___16375;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14866_16376__$1)) {
            var c__11077__auto___16377 = cljs.core.chunk_first.call(null, seq__14866_16376__$1);
            var G__16378 = cljs.core.chunk_rest.call(null, seq__14866_16376__$1);
            var G__16379 = c__11077__auto___16377;
            var G__16380 = cljs.core.count.call(null, c__11077__auto___16377);
            var G__16381 = 0;
            seq__14866_16366 = G__16378;
            chunk__14867_16367 = G__16379;
            count__14868_16368 = G__16380;
            i__14869_16369 = G__16381;
            continue;
          } else {
            var arg__11908__auto___16382 = cljs.core.first.call(null, seq__14866_16376__$1);
            a__11907__auto__.push(arg__11908__auto___16382);
            var G__16383 = cljs.core.next.call(null, seq__14866_16376__$1);
            var G__16384 = null;
            var G__16385 = 0;
            var G__16386 = 0;
            seq__14866_16366 = G__16383;
            chunk__14867_16367 = G__16384;
            count__14868_16368 = G__16385;
            i__14869_16369 = G__16386;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h3.apply(null, a__11907__auto__);
  };
  var h3 = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h3__delegate.call(this, args__11906__auto__);
  };
  h3.cljs$lang$maxFixedArity = 0;
  h3.cljs$lang$applyTo = function(arglist__16387) {
    var args__11906__auto__ = cljs.core.seq(arglist__16387);
    return h3__delegate(args__11906__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
quiescent.dom.h4 = function() {
  var h4__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14874_16388 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14875_16389 = null;
    var count__14876_16390 = 0;
    var i__14877_16391 = 0;
    while (true) {
      if (i__14877_16391 < count__14876_16390) {
        var arg__11908__auto___16392 = cljs.core._nth.call(null, chunk__14875_16389, i__14877_16391);
        a__11907__auto__.push(arg__11908__auto___16392);
        var G__16393 = seq__14874_16388;
        var G__16394 = chunk__14875_16389;
        var G__16395 = count__14876_16390;
        var G__16396 = i__14877_16391 + 1;
        seq__14874_16388 = G__16393;
        chunk__14875_16389 = G__16394;
        count__14876_16390 = G__16395;
        i__14877_16391 = G__16396;
        continue;
      } else {
        var temp__4092__auto___16397 = cljs.core.seq.call(null, seq__14874_16388);
        if (temp__4092__auto___16397) {
          var seq__14874_16398__$1 = temp__4092__auto___16397;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14874_16398__$1)) {
            var c__11077__auto___16399 = cljs.core.chunk_first.call(null, seq__14874_16398__$1);
            var G__16400 = cljs.core.chunk_rest.call(null, seq__14874_16398__$1);
            var G__16401 = c__11077__auto___16399;
            var G__16402 = cljs.core.count.call(null, c__11077__auto___16399);
            var G__16403 = 0;
            seq__14874_16388 = G__16400;
            chunk__14875_16389 = G__16401;
            count__14876_16390 = G__16402;
            i__14877_16391 = G__16403;
            continue;
          } else {
            var arg__11908__auto___16404 = cljs.core.first.call(null, seq__14874_16398__$1);
            a__11907__auto__.push(arg__11908__auto___16404);
            var G__16405 = cljs.core.next.call(null, seq__14874_16398__$1);
            var G__16406 = null;
            var G__16407 = 0;
            var G__16408 = 0;
            seq__14874_16388 = G__16405;
            chunk__14875_16389 = G__16406;
            count__14876_16390 = G__16407;
            i__14877_16391 = G__16408;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h4.apply(null, a__11907__auto__);
  };
  var h4 = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h4__delegate.call(this, args__11906__auto__);
  };
  h4.cljs$lang$maxFixedArity = 0;
  h4.cljs$lang$applyTo = function(arglist__16409) {
    var args__11906__auto__ = cljs.core.seq(arglist__16409);
    return h4__delegate(args__11906__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
quiescent.dom.h5 = function() {
  var h5__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14882_16410 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14883_16411 = null;
    var count__14884_16412 = 0;
    var i__14885_16413 = 0;
    while (true) {
      if (i__14885_16413 < count__14884_16412) {
        var arg__11908__auto___16414 = cljs.core._nth.call(null, chunk__14883_16411, i__14885_16413);
        a__11907__auto__.push(arg__11908__auto___16414);
        var G__16415 = seq__14882_16410;
        var G__16416 = chunk__14883_16411;
        var G__16417 = count__14884_16412;
        var G__16418 = i__14885_16413 + 1;
        seq__14882_16410 = G__16415;
        chunk__14883_16411 = G__16416;
        count__14884_16412 = G__16417;
        i__14885_16413 = G__16418;
        continue;
      } else {
        var temp__4092__auto___16419 = cljs.core.seq.call(null, seq__14882_16410);
        if (temp__4092__auto___16419) {
          var seq__14882_16420__$1 = temp__4092__auto___16419;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14882_16420__$1)) {
            var c__11077__auto___16421 = cljs.core.chunk_first.call(null, seq__14882_16420__$1);
            var G__16422 = cljs.core.chunk_rest.call(null, seq__14882_16420__$1);
            var G__16423 = c__11077__auto___16421;
            var G__16424 = cljs.core.count.call(null, c__11077__auto___16421);
            var G__16425 = 0;
            seq__14882_16410 = G__16422;
            chunk__14883_16411 = G__16423;
            count__14884_16412 = G__16424;
            i__14885_16413 = G__16425;
            continue;
          } else {
            var arg__11908__auto___16426 = cljs.core.first.call(null, seq__14882_16420__$1);
            a__11907__auto__.push(arg__11908__auto___16426);
            var G__16427 = cljs.core.next.call(null, seq__14882_16420__$1);
            var G__16428 = null;
            var G__16429 = 0;
            var G__16430 = 0;
            seq__14882_16410 = G__16427;
            chunk__14883_16411 = G__16428;
            count__14884_16412 = G__16429;
            i__14885_16413 = G__16430;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h5.apply(null, a__11907__auto__);
  };
  var h5 = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h5__delegate.call(this, args__11906__auto__);
  };
  h5.cljs$lang$maxFixedArity = 0;
  h5.cljs$lang$applyTo = function(arglist__16431) {
    var args__11906__auto__ = cljs.core.seq(arglist__16431);
    return h5__delegate(args__11906__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
quiescent.dom.h6 = function() {
  var h6__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14890_16432 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14891_16433 = null;
    var count__14892_16434 = 0;
    var i__14893_16435 = 0;
    while (true) {
      if (i__14893_16435 < count__14892_16434) {
        var arg__11908__auto___16436 = cljs.core._nth.call(null, chunk__14891_16433, i__14893_16435);
        a__11907__auto__.push(arg__11908__auto___16436);
        var G__16437 = seq__14890_16432;
        var G__16438 = chunk__14891_16433;
        var G__16439 = count__14892_16434;
        var G__16440 = i__14893_16435 + 1;
        seq__14890_16432 = G__16437;
        chunk__14891_16433 = G__16438;
        count__14892_16434 = G__16439;
        i__14893_16435 = G__16440;
        continue;
      } else {
        var temp__4092__auto___16441 = cljs.core.seq.call(null, seq__14890_16432);
        if (temp__4092__auto___16441) {
          var seq__14890_16442__$1 = temp__4092__auto___16441;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14890_16442__$1)) {
            var c__11077__auto___16443 = cljs.core.chunk_first.call(null, seq__14890_16442__$1);
            var G__16444 = cljs.core.chunk_rest.call(null, seq__14890_16442__$1);
            var G__16445 = c__11077__auto___16443;
            var G__16446 = cljs.core.count.call(null, c__11077__auto___16443);
            var G__16447 = 0;
            seq__14890_16432 = G__16444;
            chunk__14891_16433 = G__16445;
            count__14892_16434 = G__16446;
            i__14893_16435 = G__16447;
            continue;
          } else {
            var arg__11908__auto___16448 = cljs.core.first.call(null, seq__14890_16442__$1);
            a__11907__auto__.push(arg__11908__auto___16448);
            var G__16449 = cljs.core.next.call(null, seq__14890_16442__$1);
            var G__16450 = null;
            var G__16451 = 0;
            var G__16452 = 0;
            seq__14890_16432 = G__16449;
            chunk__14891_16433 = G__16450;
            count__14892_16434 = G__16451;
            i__14893_16435 = G__16452;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h6.apply(null, a__11907__auto__);
  };
  var h6 = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h6__delegate.call(this, args__11906__auto__);
  };
  h6.cljs$lang$maxFixedArity = 0;
  h6.cljs$lang$applyTo = function(arglist__16453) {
    var args__11906__auto__ = cljs.core.seq(arglist__16453);
    return h6__delegate(args__11906__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
quiescent.dom.head = function() {
  var head__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14898_16454 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14899_16455 = null;
    var count__14900_16456 = 0;
    var i__14901_16457 = 0;
    while (true) {
      if (i__14901_16457 < count__14900_16456) {
        var arg__11908__auto___16458 = cljs.core._nth.call(null, chunk__14899_16455, i__14901_16457);
        a__11907__auto__.push(arg__11908__auto___16458);
        var G__16459 = seq__14898_16454;
        var G__16460 = chunk__14899_16455;
        var G__16461 = count__14900_16456;
        var G__16462 = i__14901_16457 + 1;
        seq__14898_16454 = G__16459;
        chunk__14899_16455 = G__16460;
        count__14900_16456 = G__16461;
        i__14901_16457 = G__16462;
        continue;
      } else {
        var temp__4092__auto___16463 = cljs.core.seq.call(null, seq__14898_16454);
        if (temp__4092__auto___16463) {
          var seq__14898_16464__$1 = temp__4092__auto___16463;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14898_16464__$1)) {
            var c__11077__auto___16465 = cljs.core.chunk_first.call(null, seq__14898_16464__$1);
            var G__16466 = cljs.core.chunk_rest.call(null, seq__14898_16464__$1);
            var G__16467 = c__11077__auto___16465;
            var G__16468 = cljs.core.count.call(null, c__11077__auto___16465);
            var G__16469 = 0;
            seq__14898_16454 = G__16466;
            chunk__14899_16455 = G__16467;
            count__14900_16456 = G__16468;
            i__14901_16457 = G__16469;
            continue;
          } else {
            var arg__11908__auto___16470 = cljs.core.first.call(null, seq__14898_16464__$1);
            a__11907__auto__.push(arg__11908__auto___16470);
            var G__16471 = cljs.core.next.call(null, seq__14898_16464__$1);
            var G__16472 = null;
            var G__16473 = 0;
            var G__16474 = 0;
            seq__14898_16454 = G__16471;
            chunk__14899_16455 = G__16472;
            count__14900_16456 = G__16473;
            i__14901_16457 = G__16474;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.head.apply(null, a__11907__auto__);
  };
  var head = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return head__delegate.call(this, args__11906__auto__);
  };
  head.cljs$lang$maxFixedArity = 0;
  head.cljs$lang$applyTo = function(arglist__16475) {
    var args__11906__auto__ = cljs.core.seq(arglist__16475);
    return head__delegate(args__11906__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
quiescent.dom.header = function() {
  var header__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14906_16476 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14907_16477 = null;
    var count__14908_16478 = 0;
    var i__14909_16479 = 0;
    while (true) {
      if (i__14909_16479 < count__14908_16478) {
        var arg__11908__auto___16480 = cljs.core._nth.call(null, chunk__14907_16477, i__14909_16479);
        a__11907__auto__.push(arg__11908__auto___16480);
        var G__16481 = seq__14906_16476;
        var G__16482 = chunk__14907_16477;
        var G__16483 = count__14908_16478;
        var G__16484 = i__14909_16479 + 1;
        seq__14906_16476 = G__16481;
        chunk__14907_16477 = G__16482;
        count__14908_16478 = G__16483;
        i__14909_16479 = G__16484;
        continue;
      } else {
        var temp__4092__auto___16485 = cljs.core.seq.call(null, seq__14906_16476);
        if (temp__4092__auto___16485) {
          var seq__14906_16486__$1 = temp__4092__auto___16485;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14906_16486__$1)) {
            var c__11077__auto___16487 = cljs.core.chunk_first.call(null, seq__14906_16486__$1);
            var G__16488 = cljs.core.chunk_rest.call(null, seq__14906_16486__$1);
            var G__16489 = c__11077__auto___16487;
            var G__16490 = cljs.core.count.call(null, c__11077__auto___16487);
            var G__16491 = 0;
            seq__14906_16476 = G__16488;
            chunk__14907_16477 = G__16489;
            count__14908_16478 = G__16490;
            i__14909_16479 = G__16491;
            continue;
          } else {
            var arg__11908__auto___16492 = cljs.core.first.call(null, seq__14906_16486__$1);
            a__11907__auto__.push(arg__11908__auto___16492);
            var G__16493 = cljs.core.next.call(null, seq__14906_16486__$1);
            var G__16494 = null;
            var G__16495 = 0;
            var G__16496 = 0;
            seq__14906_16476 = G__16493;
            chunk__14907_16477 = G__16494;
            count__14908_16478 = G__16495;
            i__14909_16479 = G__16496;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.header.apply(null, a__11907__auto__);
  };
  var header = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return header__delegate.call(this, args__11906__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__16497) {
    var args__11906__auto__ = cljs.core.seq(arglist__16497);
    return header__delegate(args__11906__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
quiescent.dom.hr = function() {
  var hr__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14914_16498 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14915_16499 = null;
    var count__14916_16500 = 0;
    var i__14917_16501 = 0;
    while (true) {
      if (i__14917_16501 < count__14916_16500) {
        var arg__11908__auto___16502 = cljs.core._nth.call(null, chunk__14915_16499, i__14917_16501);
        a__11907__auto__.push(arg__11908__auto___16502);
        var G__16503 = seq__14914_16498;
        var G__16504 = chunk__14915_16499;
        var G__16505 = count__14916_16500;
        var G__16506 = i__14917_16501 + 1;
        seq__14914_16498 = G__16503;
        chunk__14915_16499 = G__16504;
        count__14916_16500 = G__16505;
        i__14917_16501 = G__16506;
        continue;
      } else {
        var temp__4092__auto___16507 = cljs.core.seq.call(null, seq__14914_16498);
        if (temp__4092__auto___16507) {
          var seq__14914_16508__$1 = temp__4092__auto___16507;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14914_16508__$1)) {
            var c__11077__auto___16509 = cljs.core.chunk_first.call(null, seq__14914_16508__$1);
            var G__16510 = cljs.core.chunk_rest.call(null, seq__14914_16508__$1);
            var G__16511 = c__11077__auto___16509;
            var G__16512 = cljs.core.count.call(null, c__11077__auto___16509);
            var G__16513 = 0;
            seq__14914_16498 = G__16510;
            chunk__14915_16499 = G__16511;
            count__14916_16500 = G__16512;
            i__14917_16501 = G__16513;
            continue;
          } else {
            var arg__11908__auto___16514 = cljs.core.first.call(null, seq__14914_16508__$1);
            a__11907__auto__.push(arg__11908__auto___16514);
            var G__16515 = cljs.core.next.call(null, seq__14914_16508__$1);
            var G__16516 = null;
            var G__16517 = 0;
            var G__16518 = 0;
            seq__14914_16498 = G__16515;
            chunk__14915_16499 = G__16516;
            count__14916_16500 = G__16517;
            i__14917_16501 = G__16518;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.hr.apply(null, a__11907__auto__);
  };
  var hr = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hr__delegate.call(this, args__11906__auto__);
  };
  hr.cljs$lang$maxFixedArity = 0;
  hr.cljs$lang$applyTo = function(arglist__16519) {
    var args__11906__auto__ = cljs.core.seq(arglist__16519);
    return hr__delegate(args__11906__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
quiescent.dom.html = function() {
  var html__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14922_16520 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14923_16521 = null;
    var count__14924_16522 = 0;
    var i__14925_16523 = 0;
    while (true) {
      if (i__14925_16523 < count__14924_16522) {
        var arg__11908__auto___16524 = cljs.core._nth.call(null, chunk__14923_16521, i__14925_16523);
        a__11907__auto__.push(arg__11908__auto___16524);
        var G__16525 = seq__14922_16520;
        var G__16526 = chunk__14923_16521;
        var G__16527 = count__14924_16522;
        var G__16528 = i__14925_16523 + 1;
        seq__14922_16520 = G__16525;
        chunk__14923_16521 = G__16526;
        count__14924_16522 = G__16527;
        i__14925_16523 = G__16528;
        continue;
      } else {
        var temp__4092__auto___16529 = cljs.core.seq.call(null, seq__14922_16520);
        if (temp__4092__auto___16529) {
          var seq__14922_16530__$1 = temp__4092__auto___16529;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14922_16530__$1)) {
            var c__11077__auto___16531 = cljs.core.chunk_first.call(null, seq__14922_16530__$1);
            var G__16532 = cljs.core.chunk_rest.call(null, seq__14922_16530__$1);
            var G__16533 = c__11077__auto___16531;
            var G__16534 = cljs.core.count.call(null, c__11077__auto___16531);
            var G__16535 = 0;
            seq__14922_16520 = G__16532;
            chunk__14923_16521 = G__16533;
            count__14924_16522 = G__16534;
            i__14925_16523 = G__16535;
            continue;
          } else {
            var arg__11908__auto___16536 = cljs.core.first.call(null, seq__14922_16530__$1);
            a__11907__auto__.push(arg__11908__auto___16536);
            var G__16537 = cljs.core.next.call(null, seq__14922_16530__$1);
            var G__16538 = null;
            var G__16539 = 0;
            var G__16540 = 0;
            seq__14922_16520 = G__16537;
            chunk__14923_16521 = G__16538;
            count__14924_16522 = G__16539;
            i__14925_16523 = G__16540;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.html.apply(null, a__11907__auto__);
  };
  var html = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return html__delegate.call(this, args__11906__auto__);
  };
  html.cljs$lang$maxFixedArity = 0;
  html.cljs$lang$applyTo = function(arglist__16541) {
    var args__11906__auto__ = cljs.core.seq(arglist__16541);
    return html__delegate(args__11906__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
quiescent.dom.i = function() {
  var i__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14930_16542 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14931_16543 = null;
    var count__14932_16544 = 0;
    var i__14933_16545 = 0;
    while (true) {
      if (i__14933_16545 < count__14932_16544) {
        var arg__11908__auto___16546 = cljs.core._nth.call(null, chunk__14931_16543, i__14933_16545);
        a__11907__auto__.push(arg__11908__auto___16546);
        var G__16547 = seq__14930_16542;
        var G__16548 = chunk__14931_16543;
        var G__16549 = count__14932_16544;
        var G__16550 = i__14933_16545 + 1;
        seq__14930_16542 = G__16547;
        chunk__14931_16543 = G__16548;
        count__14932_16544 = G__16549;
        i__14933_16545 = G__16550;
        continue;
      } else {
        var temp__4092__auto___16551 = cljs.core.seq.call(null, seq__14930_16542);
        if (temp__4092__auto___16551) {
          var seq__14930_16552__$1 = temp__4092__auto___16551;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14930_16552__$1)) {
            var c__11077__auto___16553 = cljs.core.chunk_first.call(null, seq__14930_16552__$1);
            var G__16554 = cljs.core.chunk_rest.call(null, seq__14930_16552__$1);
            var G__16555 = c__11077__auto___16553;
            var G__16556 = cljs.core.count.call(null, c__11077__auto___16553);
            var G__16557 = 0;
            seq__14930_16542 = G__16554;
            chunk__14931_16543 = G__16555;
            count__14932_16544 = G__16556;
            i__14933_16545 = G__16557;
            continue;
          } else {
            var arg__11908__auto___16558 = cljs.core.first.call(null, seq__14930_16552__$1);
            a__11907__auto__.push(arg__11908__auto___16558);
            var G__16559 = cljs.core.next.call(null, seq__14930_16552__$1);
            var G__16560 = null;
            var G__16561 = 0;
            var G__16562 = 0;
            seq__14930_16542 = G__16559;
            chunk__14931_16543 = G__16560;
            count__14932_16544 = G__16561;
            i__14933_16545 = G__16562;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.i.apply(null, a__11907__auto__);
  };
  var i = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return i__delegate.call(this, args__11906__auto__);
  };
  i.cljs$lang$maxFixedArity = 0;
  i.cljs$lang$applyTo = function(arglist__16563) {
    var args__11906__auto__ = cljs.core.seq(arglist__16563);
    return i__delegate(args__11906__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
quiescent.dom.iframe = function() {
  var iframe__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14938_16564 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14939_16565 = null;
    var count__14940_16566 = 0;
    var i__14941_16567 = 0;
    while (true) {
      if (i__14941_16567 < count__14940_16566) {
        var arg__11908__auto___16568 = cljs.core._nth.call(null, chunk__14939_16565, i__14941_16567);
        a__11907__auto__.push(arg__11908__auto___16568);
        var G__16569 = seq__14938_16564;
        var G__16570 = chunk__14939_16565;
        var G__16571 = count__14940_16566;
        var G__16572 = i__14941_16567 + 1;
        seq__14938_16564 = G__16569;
        chunk__14939_16565 = G__16570;
        count__14940_16566 = G__16571;
        i__14941_16567 = G__16572;
        continue;
      } else {
        var temp__4092__auto___16573 = cljs.core.seq.call(null, seq__14938_16564);
        if (temp__4092__auto___16573) {
          var seq__14938_16574__$1 = temp__4092__auto___16573;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14938_16574__$1)) {
            var c__11077__auto___16575 = cljs.core.chunk_first.call(null, seq__14938_16574__$1);
            var G__16576 = cljs.core.chunk_rest.call(null, seq__14938_16574__$1);
            var G__16577 = c__11077__auto___16575;
            var G__16578 = cljs.core.count.call(null, c__11077__auto___16575);
            var G__16579 = 0;
            seq__14938_16564 = G__16576;
            chunk__14939_16565 = G__16577;
            count__14940_16566 = G__16578;
            i__14941_16567 = G__16579;
            continue;
          } else {
            var arg__11908__auto___16580 = cljs.core.first.call(null, seq__14938_16574__$1);
            a__11907__auto__.push(arg__11908__auto___16580);
            var G__16581 = cljs.core.next.call(null, seq__14938_16574__$1);
            var G__16582 = null;
            var G__16583 = 0;
            var G__16584 = 0;
            seq__14938_16564 = G__16581;
            chunk__14939_16565 = G__16582;
            count__14940_16566 = G__16583;
            i__14941_16567 = G__16584;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.iframe.apply(null, a__11907__auto__);
  };
  var iframe = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return iframe__delegate.call(this, args__11906__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 0;
  iframe.cljs$lang$applyTo = function(arglist__16585) {
    var args__11906__auto__ = cljs.core.seq(arglist__16585);
    return iframe__delegate(args__11906__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
quiescent.dom.img = function() {
  var img__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14946_16586 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14947_16587 = null;
    var count__14948_16588 = 0;
    var i__14949_16589 = 0;
    while (true) {
      if (i__14949_16589 < count__14948_16588) {
        var arg__11908__auto___16590 = cljs.core._nth.call(null, chunk__14947_16587, i__14949_16589);
        a__11907__auto__.push(arg__11908__auto___16590);
        var G__16591 = seq__14946_16586;
        var G__16592 = chunk__14947_16587;
        var G__16593 = count__14948_16588;
        var G__16594 = i__14949_16589 + 1;
        seq__14946_16586 = G__16591;
        chunk__14947_16587 = G__16592;
        count__14948_16588 = G__16593;
        i__14949_16589 = G__16594;
        continue;
      } else {
        var temp__4092__auto___16595 = cljs.core.seq.call(null, seq__14946_16586);
        if (temp__4092__auto___16595) {
          var seq__14946_16596__$1 = temp__4092__auto___16595;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14946_16596__$1)) {
            var c__11077__auto___16597 = cljs.core.chunk_first.call(null, seq__14946_16596__$1);
            var G__16598 = cljs.core.chunk_rest.call(null, seq__14946_16596__$1);
            var G__16599 = c__11077__auto___16597;
            var G__16600 = cljs.core.count.call(null, c__11077__auto___16597);
            var G__16601 = 0;
            seq__14946_16586 = G__16598;
            chunk__14947_16587 = G__16599;
            count__14948_16588 = G__16600;
            i__14949_16589 = G__16601;
            continue;
          } else {
            var arg__11908__auto___16602 = cljs.core.first.call(null, seq__14946_16596__$1);
            a__11907__auto__.push(arg__11908__auto___16602);
            var G__16603 = cljs.core.next.call(null, seq__14946_16596__$1);
            var G__16604 = null;
            var G__16605 = 0;
            var G__16606 = 0;
            seq__14946_16586 = G__16603;
            chunk__14947_16587 = G__16604;
            count__14948_16588 = G__16605;
            i__14949_16589 = G__16606;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.img.apply(null, a__11907__auto__);
  };
  var img = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return img__delegate.call(this, args__11906__auto__);
  };
  img.cljs$lang$maxFixedArity = 0;
  img.cljs$lang$applyTo = function(arglist__16607) {
    var args__11906__auto__ = cljs.core.seq(arglist__16607);
    return img__delegate(args__11906__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
quiescent.dom.input = function() {
  var input__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14954_16608 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14955_16609 = null;
    var count__14956_16610 = 0;
    var i__14957_16611 = 0;
    while (true) {
      if (i__14957_16611 < count__14956_16610) {
        var arg__11908__auto___16612 = cljs.core._nth.call(null, chunk__14955_16609, i__14957_16611);
        a__11907__auto__.push(arg__11908__auto___16612);
        var G__16613 = seq__14954_16608;
        var G__16614 = chunk__14955_16609;
        var G__16615 = count__14956_16610;
        var G__16616 = i__14957_16611 + 1;
        seq__14954_16608 = G__16613;
        chunk__14955_16609 = G__16614;
        count__14956_16610 = G__16615;
        i__14957_16611 = G__16616;
        continue;
      } else {
        var temp__4092__auto___16617 = cljs.core.seq.call(null, seq__14954_16608);
        if (temp__4092__auto___16617) {
          var seq__14954_16618__$1 = temp__4092__auto___16617;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14954_16618__$1)) {
            var c__11077__auto___16619 = cljs.core.chunk_first.call(null, seq__14954_16618__$1);
            var G__16620 = cljs.core.chunk_rest.call(null, seq__14954_16618__$1);
            var G__16621 = c__11077__auto___16619;
            var G__16622 = cljs.core.count.call(null, c__11077__auto___16619);
            var G__16623 = 0;
            seq__14954_16608 = G__16620;
            chunk__14955_16609 = G__16621;
            count__14956_16610 = G__16622;
            i__14957_16611 = G__16623;
            continue;
          } else {
            var arg__11908__auto___16624 = cljs.core.first.call(null, seq__14954_16618__$1);
            a__11907__auto__.push(arg__11908__auto___16624);
            var G__16625 = cljs.core.next.call(null, seq__14954_16618__$1);
            var G__16626 = null;
            var G__16627 = 0;
            var G__16628 = 0;
            seq__14954_16608 = G__16625;
            chunk__14955_16609 = G__16626;
            count__14956_16610 = G__16627;
            i__14957_16611 = G__16628;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.input.apply(null, a__11907__auto__);
  };
  var input = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return input__delegate.call(this, args__11906__auto__);
  };
  input.cljs$lang$maxFixedArity = 0;
  input.cljs$lang$applyTo = function(arglist__16629) {
    var args__11906__auto__ = cljs.core.seq(arglist__16629);
    return input__delegate(args__11906__auto__);
  };
  input.cljs$core$IFn$_invoke$arity$variadic = input__delegate;
  return input;
}();
quiescent.dom.ins = function() {
  var ins__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14962_16630 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14963_16631 = null;
    var count__14964_16632 = 0;
    var i__14965_16633 = 0;
    while (true) {
      if (i__14965_16633 < count__14964_16632) {
        var arg__11908__auto___16634 = cljs.core._nth.call(null, chunk__14963_16631, i__14965_16633);
        a__11907__auto__.push(arg__11908__auto___16634);
        var G__16635 = seq__14962_16630;
        var G__16636 = chunk__14963_16631;
        var G__16637 = count__14964_16632;
        var G__16638 = i__14965_16633 + 1;
        seq__14962_16630 = G__16635;
        chunk__14963_16631 = G__16636;
        count__14964_16632 = G__16637;
        i__14965_16633 = G__16638;
        continue;
      } else {
        var temp__4092__auto___16639 = cljs.core.seq.call(null, seq__14962_16630);
        if (temp__4092__auto___16639) {
          var seq__14962_16640__$1 = temp__4092__auto___16639;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14962_16640__$1)) {
            var c__11077__auto___16641 = cljs.core.chunk_first.call(null, seq__14962_16640__$1);
            var G__16642 = cljs.core.chunk_rest.call(null, seq__14962_16640__$1);
            var G__16643 = c__11077__auto___16641;
            var G__16644 = cljs.core.count.call(null, c__11077__auto___16641);
            var G__16645 = 0;
            seq__14962_16630 = G__16642;
            chunk__14963_16631 = G__16643;
            count__14964_16632 = G__16644;
            i__14965_16633 = G__16645;
            continue;
          } else {
            var arg__11908__auto___16646 = cljs.core.first.call(null, seq__14962_16640__$1);
            a__11907__auto__.push(arg__11908__auto___16646);
            var G__16647 = cljs.core.next.call(null, seq__14962_16640__$1);
            var G__16648 = null;
            var G__16649 = 0;
            var G__16650 = 0;
            seq__14962_16630 = G__16647;
            chunk__14963_16631 = G__16648;
            count__14964_16632 = G__16649;
            i__14965_16633 = G__16650;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ins.apply(null, a__11907__auto__);
  };
  var ins = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ins__delegate.call(this, args__11906__auto__);
  };
  ins.cljs$lang$maxFixedArity = 0;
  ins.cljs$lang$applyTo = function(arglist__16651) {
    var args__11906__auto__ = cljs.core.seq(arglist__16651);
    return ins__delegate(args__11906__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
quiescent.dom.kbd = function() {
  var kbd__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14970_16652 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14971_16653 = null;
    var count__14972_16654 = 0;
    var i__14973_16655 = 0;
    while (true) {
      if (i__14973_16655 < count__14972_16654) {
        var arg__11908__auto___16656 = cljs.core._nth.call(null, chunk__14971_16653, i__14973_16655);
        a__11907__auto__.push(arg__11908__auto___16656);
        var G__16657 = seq__14970_16652;
        var G__16658 = chunk__14971_16653;
        var G__16659 = count__14972_16654;
        var G__16660 = i__14973_16655 + 1;
        seq__14970_16652 = G__16657;
        chunk__14971_16653 = G__16658;
        count__14972_16654 = G__16659;
        i__14973_16655 = G__16660;
        continue;
      } else {
        var temp__4092__auto___16661 = cljs.core.seq.call(null, seq__14970_16652);
        if (temp__4092__auto___16661) {
          var seq__14970_16662__$1 = temp__4092__auto___16661;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14970_16662__$1)) {
            var c__11077__auto___16663 = cljs.core.chunk_first.call(null, seq__14970_16662__$1);
            var G__16664 = cljs.core.chunk_rest.call(null, seq__14970_16662__$1);
            var G__16665 = c__11077__auto___16663;
            var G__16666 = cljs.core.count.call(null, c__11077__auto___16663);
            var G__16667 = 0;
            seq__14970_16652 = G__16664;
            chunk__14971_16653 = G__16665;
            count__14972_16654 = G__16666;
            i__14973_16655 = G__16667;
            continue;
          } else {
            var arg__11908__auto___16668 = cljs.core.first.call(null, seq__14970_16662__$1);
            a__11907__auto__.push(arg__11908__auto___16668);
            var G__16669 = cljs.core.next.call(null, seq__14970_16662__$1);
            var G__16670 = null;
            var G__16671 = 0;
            var G__16672 = 0;
            seq__14970_16652 = G__16669;
            chunk__14971_16653 = G__16670;
            count__14972_16654 = G__16671;
            i__14973_16655 = G__16672;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.kbd.apply(null, a__11907__auto__);
  };
  var kbd = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return kbd__delegate.call(this, args__11906__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 0;
  kbd.cljs$lang$applyTo = function(arglist__16673) {
    var args__11906__auto__ = cljs.core.seq(arglist__16673);
    return kbd__delegate(args__11906__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
quiescent.dom.keygen = function() {
  var keygen__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14978_16674 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14979_16675 = null;
    var count__14980_16676 = 0;
    var i__14981_16677 = 0;
    while (true) {
      if (i__14981_16677 < count__14980_16676) {
        var arg__11908__auto___16678 = cljs.core._nth.call(null, chunk__14979_16675, i__14981_16677);
        a__11907__auto__.push(arg__11908__auto___16678);
        var G__16679 = seq__14978_16674;
        var G__16680 = chunk__14979_16675;
        var G__16681 = count__14980_16676;
        var G__16682 = i__14981_16677 + 1;
        seq__14978_16674 = G__16679;
        chunk__14979_16675 = G__16680;
        count__14980_16676 = G__16681;
        i__14981_16677 = G__16682;
        continue;
      } else {
        var temp__4092__auto___16683 = cljs.core.seq.call(null, seq__14978_16674);
        if (temp__4092__auto___16683) {
          var seq__14978_16684__$1 = temp__4092__auto___16683;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14978_16684__$1)) {
            var c__11077__auto___16685 = cljs.core.chunk_first.call(null, seq__14978_16684__$1);
            var G__16686 = cljs.core.chunk_rest.call(null, seq__14978_16684__$1);
            var G__16687 = c__11077__auto___16685;
            var G__16688 = cljs.core.count.call(null, c__11077__auto___16685);
            var G__16689 = 0;
            seq__14978_16674 = G__16686;
            chunk__14979_16675 = G__16687;
            count__14980_16676 = G__16688;
            i__14981_16677 = G__16689;
            continue;
          } else {
            var arg__11908__auto___16690 = cljs.core.first.call(null, seq__14978_16684__$1);
            a__11907__auto__.push(arg__11908__auto___16690);
            var G__16691 = cljs.core.next.call(null, seq__14978_16684__$1);
            var G__16692 = null;
            var G__16693 = 0;
            var G__16694 = 0;
            seq__14978_16674 = G__16691;
            chunk__14979_16675 = G__16692;
            count__14980_16676 = G__16693;
            i__14981_16677 = G__16694;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.keygen.apply(null, a__11907__auto__);
  };
  var keygen = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return keygen__delegate.call(this, args__11906__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 0;
  keygen.cljs$lang$applyTo = function(arglist__16695) {
    var args__11906__auto__ = cljs.core.seq(arglist__16695);
    return keygen__delegate(args__11906__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
quiescent.dom.label = function() {
  var label__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14986_16696 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14987_16697 = null;
    var count__14988_16698 = 0;
    var i__14989_16699 = 0;
    while (true) {
      if (i__14989_16699 < count__14988_16698) {
        var arg__11908__auto___16700 = cljs.core._nth.call(null, chunk__14987_16697, i__14989_16699);
        a__11907__auto__.push(arg__11908__auto___16700);
        var G__16701 = seq__14986_16696;
        var G__16702 = chunk__14987_16697;
        var G__16703 = count__14988_16698;
        var G__16704 = i__14989_16699 + 1;
        seq__14986_16696 = G__16701;
        chunk__14987_16697 = G__16702;
        count__14988_16698 = G__16703;
        i__14989_16699 = G__16704;
        continue;
      } else {
        var temp__4092__auto___16705 = cljs.core.seq.call(null, seq__14986_16696);
        if (temp__4092__auto___16705) {
          var seq__14986_16706__$1 = temp__4092__auto___16705;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14986_16706__$1)) {
            var c__11077__auto___16707 = cljs.core.chunk_first.call(null, seq__14986_16706__$1);
            var G__16708 = cljs.core.chunk_rest.call(null, seq__14986_16706__$1);
            var G__16709 = c__11077__auto___16707;
            var G__16710 = cljs.core.count.call(null, c__11077__auto___16707);
            var G__16711 = 0;
            seq__14986_16696 = G__16708;
            chunk__14987_16697 = G__16709;
            count__14988_16698 = G__16710;
            i__14989_16699 = G__16711;
            continue;
          } else {
            var arg__11908__auto___16712 = cljs.core.first.call(null, seq__14986_16706__$1);
            a__11907__auto__.push(arg__11908__auto___16712);
            var G__16713 = cljs.core.next.call(null, seq__14986_16706__$1);
            var G__16714 = null;
            var G__16715 = 0;
            var G__16716 = 0;
            seq__14986_16696 = G__16713;
            chunk__14987_16697 = G__16714;
            count__14988_16698 = G__16715;
            i__14989_16699 = G__16716;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.label.apply(null, a__11907__auto__);
  };
  var label = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return label__delegate.call(this, args__11906__auto__);
  };
  label.cljs$lang$maxFixedArity = 0;
  label.cljs$lang$applyTo = function(arglist__16717) {
    var args__11906__auto__ = cljs.core.seq(arglist__16717);
    return label__delegate(args__11906__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
quiescent.dom.legend = function() {
  var legend__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14994_16718 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14995_16719 = null;
    var count__14996_16720 = 0;
    var i__14997_16721 = 0;
    while (true) {
      if (i__14997_16721 < count__14996_16720) {
        var arg__11908__auto___16722 = cljs.core._nth.call(null, chunk__14995_16719, i__14997_16721);
        a__11907__auto__.push(arg__11908__auto___16722);
        var G__16723 = seq__14994_16718;
        var G__16724 = chunk__14995_16719;
        var G__16725 = count__14996_16720;
        var G__16726 = i__14997_16721 + 1;
        seq__14994_16718 = G__16723;
        chunk__14995_16719 = G__16724;
        count__14996_16720 = G__16725;
        i__14997_16721 = G__16726;
        continue;
      } else {
        var temp__4092__auto___16727 = cljs.core.seq.call(null, seq__14994_16718);
        if (temp__4092__auto___16727) {
          var seq__14994_16728__$1 = temp__4092__auto___16727;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14994_16728__$1)) {
            var c__11077__auto___16729 = cljs.core.chunk_first.call(null, seq__14994_16728__$1);
            var G__16730 = cljs.core.chunk_rest.call(null, seq__14994_16728__$1);
            var G__16731 = c__11077__auto___16729;
            var G__16732 = cljs.core.count.call(null, c__11077__auto___16729);
            var G__16733 = 0;
            seq__14994_16718 = G__16730;
            chunk__14995_16719 = G__16731;
            count__14996_16720 = G__16732;
            i__14997_16721 = G__16733;
            continue;
          } else {
            var arg__11908__auto___16734 = cljs.core.first.call(null, seq__14994_16728__$1);
            a__11907__auto__.push(arg__11908__auto___16734);
            var G__16735 = cljs.core.next.call(null, seq__14994_16728__$1);
            var G__16736 = null;
            var G__16737 = 0;
            var G__16738 = 0;
            seq__14994_16718 = G__16735;
            chunk__14995_16719 = G__16736;
            count__14996_16720 = G__16737;
            i__14997_16721 = G__16738;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.legend.apply(null, a__11907__auto__);
  };
  var legend = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return legend__delegate.call(this, args__11906__auto__);
  };
  legend.cljs$lang$maxFixedArity = 0;
  legend.cljs$lang$applyTo = function(arglist__16739) {
    var args__11906__auto__ = cljs.core.seq(arglist__16739);
    return legend__delegate(args__11906__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
quiescent.dom.li = function() {
  var li__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15002_16740 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15003_16741 = null;
    var count__15004_16742 = 0;
    var i__15005_16743 = 0;
    while (true) {
      if (i__15005_16743 < count__15004_16742) {
        var arg__11908__auto___16744 = cljs.core._nth.call(null, chunk__15003_16741, i__15005_16743);
        a__11907__auto__.push(arg__11908__auto___16744);
        var G__16745 = seq__15002_16740;
        var G__16746 = chunk__15003_16741;
        var G__16747 = count__15004_16742;
        var G__16748 = i__15005_16743 + 1;
        seq__15002_16740 = G__16745;
        chunk__15003_16741 = G__16746;
        count__15004_16742 = G__16747;
        i__15005_16743 = G__16748;
        continue;
      } else {
        var temp__4092__auto___16749 = cljs.core.seq.call(null, seq__15002_16740);
        if (temp__4092__auto___16749) {
          var seq__15002_16750__$1 = temp__4092__auto___16749;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15002_16750__$1)) {
            var c__11077__auto___16751 = cljs.core.chunk_first.call(null, seq__15002_16750__$1);
            var G__16752 = cljs.core.chunk_rest.call(null, seq__15002_16750__$1);
            var G__16753 = c__11077__auto___16751;
            var G__16754 = cljs.core.count.call(null, c__11077__auto___16751);
            var G__16755 = 0;
            seq__15002_16740 = G__16752;
            chunk__15003_16741 = G__16753;
            count__15004_16742 = G__16754;
            i__15005_16743 = G__16755;
            continue;
          } else {
            var arg__11908__auto___16756 = cljs.core.first.call(null, seq__15002_16750__$1);
            a__11907__auto__.push(arg__11908__auto___16756);
            var G__16757 = cljs.core.next.call(null, seq__15002_16750__$1);
            var G__16758 = null;
            var G__16759 = 0;
            var G__16760 = 0;
            seq__15002_16740 = G__16757;
            chunk__15003_16741 = G__16758;
            count__15004_16742 = G__16759;
            i__15005_16743 = G__16760;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.li.apply(null, a__11907__auto__);
  };
  var li = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return li__delegate.call(this, args__11906__auto__);
  };
  li.cljs$lang$maxFixedArity = 0;
  li.cljs$lang$applyTo = function(arglist__16761) {
    var args__11906__auto__ = cljs.core.seq(arglist__16761);
    return li__delegate(args__11906__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
quiescent.dom.link = function() {
  var link__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15010_16762 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15011_16763 = null;
    var count__15012_16764 = 0;
    var i__15013_16765 = 0;
    while (true) {
      if (i__15013_16765 < count__15012_16764) {
        var arg__11908__auto___16766 = cljs.core._nth.call(null, chunk__15011_16763, i__15013_16765);
        a__11907__auto__.push(arg__11908__auto___16766);
        var G__16767 = seq__15010_16762;
        var G__16768 = chunk__15011_16763;
        var G__16769 = count__15012_16764;
        var G__16770 = i__15013_16765 + 1;
        seq__15010_16762 = G__16767;
        chunk__15011_16763 = G__16768;
        count__15012_16764 = G__16769;
        i__15013_16765 = G__16770;
        continue;
      } else {
        var temp__4092__auto___16771 = cljs.core.seq.call(null, seq__15010_16762);
        if (temp__4092__auto___16771) {
          var seq__15010_16772__$1 = temp__4092__auto___16771;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15010_16772__$1)) {
            var c__11077__auto___16773 = cljs.core.chunk_first.call(null, seq__15010_16772__$1);
            var G__16774 = cljs.core.chunk_rest.call(null, seq__15010_16772__$1);
            var G__16775 = c__11077__auto___16773;
            var G__16776 = cljs.core.count.call(null, c__11077__auto___16773);
            var G__16777 = 0;
            seq__15010_16762 = G__16774;
            chunk__15011_16763 = G__16775;
            count__15012_16764 = G__16776;
            i__15013_16765 = G__16777;
            continue;
          } else {
            var arg__11908__auto___16778 = cljs.core.first.call(null, seq__15010_16772__$1);
            a__11907__auto__.push(arg__11908__auto___16778);
            var G__16779 = cljs.core.next.call(null, seq__15010_16772__$1);
            var G__16780 = null;
            var G__16781 = 0;
            var G__16782 = 0;
            seq__15010_16762 = G__16779;
            chunk__15011_16763 = G__16780;
            count__15012_16764 = G__16781;
            i__15013_16765 = G__16782;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.link.apply(null, a__11907__auto__);
  };
  var link = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return link__delegate.call(this, args__11906__auto__);
  };
  link.cljs$lang$maxFixedArity = 0;
  link.cljs$lang$applyTo = function(arglist__16783) {
    var args__11906__auto__ = cljs.core.seq(arglist__16783);
    return link__delegate(args__11906__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
quiescent.dom.main = function() {
  var main__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15018_16784 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15019_16785 = null;
    var count__15020_16786 = 0;
    var i__15021_16787 = 0;
    while (true) {
      if (i__15021_16787 < count__15020_16786) {
        var arg__11908__auto___16788 = cljs.core._nth.call(null, chunk__15019_16785, i__15021_16787);
        a__11907__auto__.push(arg__11908__auto___16788);
        var G__16789 = seq__15018_16784;
        var G__16790 = chunk__15019_16785;
        var G__16791 = count__15020_16786;
        var G__16792 = i__15021_16787 + 1;
        seq__15018_16784 = G__16789;
        chunk__15019_16785 = G__16790;
        count__15020_16786 = G__16791;
        i__15021_16787 = G__16792;
        continue;
      } else {
        var temp__4092__auto___16793 = cljs.core.seq.call(null, seq__15018_16784);
        if (temp__4092__auto___16793) {
          var seq__15018_16794__$1 = temp__4092__auto___16793;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15018_16794__$1)) {
            var c__11077__auto___16795 = cljs.core.chunk_first.call(null, seq__15018_16794__$1);
            var G__16796 = cljs.core.chunk_rest.call(null, seq__15018_16794__$1);
            var G__16797 = c__11077__auto___16795;
            var G__16798 = cljs.core.count.call(null, c__11077__auto___16795);
            var G__16799 = 0;
            seq__15018_16784 = G__16796;
            chunk__15019_16785 = G__16797;
            count__15020_16786 = G__16798;
            i__15021_16787 = G__16799;
            continue;
          } else {
            var arg__11908__auto___16800 = cljs.core.first.call(null, seq__15018_16794__$1);
            a__11907__auto__.push(arg__11908__auto___16800);
            var G__16801 = cljs.core.next.call(null, seq__15018_16794__$1);
            var G__16802 = null;
            var G__16803 = 0;
            var G__16804 = 0;
            seq__15018_16784 = G__16801;
            chunk__15019_16785 = G__16802;
            count__15020_16786 = G__16803;
            i__15021_16787 = G__16804;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.main.apply(null, a__11907__auto__);
  };
  var main = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return main__delegate.call(this, args__11906__auto__);
  };
  main.cljs$lang$maxFixedArity = 0;
  main.cljs$lang$applyTo = function(arglist__16805) {
    var args__11906__auto__ = cljs.core.seq(arglist__16805);
    return main__delegate(args__11906__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
quiescent.dom.map = function() {
  var map__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15026_16806 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15027_16807 = null;
    var count__15028_16808 = 0;
    var i__15029_16809 = 0;
    while (true) {
      if (i__15029_16809 < count__15028_16808) {
        var arg__11908__auto___16810 = cljs.core._nth.call(null, chunk__15027_16807, i__15029_16809);
        a__11907__auto__.push(arg__11908__auto___16810);
        var G__16811 = seq__15026_16806;
        var G__16812 = chunk__15027_16807;
        var G__16813 = count__15028_16808;
        var G__16814 = i__15029_16809 + 1;
        seq__15026_16806 = G__16811;
        chunk__15027_16807 = G__16812;
        count__15028_16808 = G__16813;
        i__15029_16809 = G__16814;
        continue;
      } else {
        var temp__4092__auto___16815 = cljs.core.seq.call(null, seq__15026_16806);
        if (temp__4092__auto___16815) {
          var seq__15026_16816__$1 = temp__4092__auto___16815;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15026_16816__$1)) {
            var c__11077__auto___16817 = cljs.core.chunk_first.call(null, seq__15026_16816__$1);
            var G__16818 = cljs.core.chunk_rest.call(null, seq__15026_16816__$1);
            var G__16819 = c__11077__auto___16817;
            var G__16820 = cljs.core.count.call(null, c__11077__auto___16817);
            var G__16821 = 0;
            seq__15026_16806 = G__16818;
            chunk__15027_16807 = G__16819;
            count__15028_16808 = G__16820;
            i__15029_16809 = G__16821;
            continue;
          } else {
            var arg__11908__auto___16822 = cljs.core.first.call(null, seq__15026_16816__$1);
            a__11907__auto__.push(arg__11908__auto___16822);
            var G__16823 = cljs.core.next.call(null, seq__15026_16816__$1);
            var G__16824 = null;
            var G__16825 = 0;
            var G__16826 = 0;
            seq__15026_16806 = G__16823;
            chunk__15027_16807 = G__16824;
            count__15028_16808 = G__16825;
            i__15029_16809 = G__16826;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.map.apply(null, a__11907__auto__);
  };
  var map = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return map__delegate.call(this, args__11906__auto__);
  };
  map.cljs$lang$maxFixedArity = 0;
  map.cljs$lang$applyTo = function(arglist__16827) {
    var args__11906__auto__ = cljs.core.seq(arglist__16827);
    return map__delegate(args__11906__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
quiescent.dom.mark = function() {
  var mark__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15034_16828 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15035_16829 = null;
    var count__15036_16830 = 0;
    var i__15037_16831 = 0;
    while (true) {
      if (i__15037_16831 < count__15036_16830) {
        var arg__11908__auto___16832 = cljs.core._nth.call(null, chunk__15035_16829, i__15037_16831);
        a__11907__auto__.push(arg__11908__auto___16832);
        var G__16833 = seq__15034_16828;
        var G__16834 = chunk__15035_16829;
        var G__16835 = count__15036_16830;
        var G__16836 = i__15037_16831 + 1;
        seq__15034_16828 = G__16833;
        chunk__15035_16829 = G__16834;
        count__15036_16830 = G__16835;
        i__15037_16831 = G__16836;
        continue;
      } else {
        var temp__4092__auto___16837 = cljs.core.seq.call(null, seq__15034_16828);
        if (temp__4092__auto___16837) {
          var seq__15034_16838__$1 = temp__4092__auto___16837;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15034_16838__$1)) {
            var c__11077__auto___16839 = cljs.core.chunk_first.call(null, seq__15034_16838__$1);
            var G__16840 = cljs.core.chunk_rest.call(null, seq__15034_16838__$1);
            var G__16841 = c__11077__auto___16839;
            var G__16842 = cljs.core.count.call(null, c__11077__auto___16839);
            var G__16843 = 0;
            seq__15034_16828 = G__16840;
            chunk__15035_16829 = G__16841;
            count__15036_16830 = G__16842;
            i__15037_16831 = G__16843;
            continue;
          } else {
            var arg__11908__auto___16844 = cljs.core.first.call(null, seq__15034_16838__$1);
            a__11907__auto__.push(arg__11908__auto___16844);
            var G__16845 = cljs.core.next.call(null, seq__15034_16838__$1);
            var G__16846 = null;
            var G__16847 = 0;
            var G__16848 = 0;
            seq__15034_16828 = G__16845;
            chunk__15035_16829 = G__16846;
            count__15036_16830 = G__16847;
            i__15037_16831 = G__16848;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.mark.apply(null, a__11907__auto__);
  };
  var mark = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return mark__delegate.call(this, args__11906__auto__);
  };
  mark.cljs$lang$maxFixedArity = 0;
  mark.cljs$lang$applyTo = function(arglist__16849) {
    var args__11906__auto__ = cljs.core.seq(arglist__16849);
    return mark__delegate(args__11906__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
quiescent.dom.menu = function() {
  var menu__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15042_16850 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15043_16851 = null;
    var count__15044_16852 = 0;
    var i__15045_16853 = 0;
    while (true) {
      if (i__15045_16853 < count__15044_16852) {
        var arg__11908__auto___16854 = cljs.core._nth.call(null, chunk__15043_16851, i__15045_16853);
        a__11907__auto__.push(arg__11908__auto___16854);
        var G__16855 = seq__15042_16850;
        var G__16856 = chunk__15043_16851;
        var G__16857 = count__15044_16852;
        var G__16858 = i__15045_16853 + 1;
        seq__15042_16850 = G__16855;
        chunk__15043_16851 = G__16856;
        count__15044_16852 = G__16857;
        i__15045_16853 = G__16858;
        continue;
      } else {
        var temp__4092__auto___16859 = cljs.core.seq.call(null, seq__15042_16850);
        if (temp__4092__auto___16859) {
          var seq__15042_16860__$1 = temp__4092__auto___16859;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15042_16860__$1)) {
            var c__11077__auto___16861 = cljs.core.chunk_first.call(null, seq__15042_16860__$1);
            var G__16862 = cljs.core.chunk_rest.call(null, seq__15042_16860__$1);
            var G__16863 = c__11077__auto___16861;
            var G__16864 = cljs.core.count.call(null, c__11077__auto___16861);
            var G__16865 = 0;
            seq__15042_16850 = G__16862;
            chunk__15043_16851 = G__16863;
            count__15044_16852 = G__16864;
            i__15045_16853 = G__16865;
            continue;
          } else {
            var arg__11908__auto___16866 = cljs.core.first.call(null, seq__15042_16860__$1);
            a__11907__auto__.push(arg__11908__auto___16866);
            var G__16867 = cljs.core.next.call(null, seq__15042_16860__$1);
            var G__16868 = null;
            var G__16869 = 0;
            var G__16870 = 0;
            seq__15042_16850 = G__16867;
            chunk__15043_16851 = G__16868;
            count__15044_16852 = G__16869;
            i__15045_16853 = G__16870;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menu.apply(null, a__11907__auto__);
  };
  var menu = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menu__delegate.call(this, args__11906__auto__);
  };
  menu.cljs$lang$maxFixedArity = 0;
  menu.cljs$lang$applyTo = function(arglist__16871) {
    var args__11906__auto__ = cljs.core.seq(arglist__16871);
    return menu__delegate(args__11906__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
quiescent.dom.menuitem = function() {
  var menuitem__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15050_16872 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15051_16873 = null;
    var count__15052_16874 = 0;
    var i__15053_16875 = 0;
    while (true) {
      if (i__15053_16875 < count__15052_16874) {
        var arg__11908__auto___16876 = cljs.core._nth.call(null, chunk__15051_16873, i__15053_16875);
        a__11907__auto__.push(arg__11908__auto___16876);
        var G__16877 = seq__15050_16872;
        var G__16878 = chunk__15051_16873;
        var G__16879 = count__15052_16874;
        var G__16880 = i__15053_16875 + 1;
        seq__15050_16872 = G__16877;
        chunk__15051_16873 = G__16878;
        count__15052_16874 = G__16879;
        i__15053_16875 = G__16880;
        continue;
      } else {
        var temp__4092__auto___16881 = cljs.core.seq.call(null, seq__15050_16872);
        if (temp__4092__auto___16881) {
          var seq__15050_16882__$1 = temp__4092__auto___16881;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15050_16882__$1)) {
            var c__11077__auto___16883 = cljs.core.chunk_first.call(null, seq__15050_16882__$1);
            var G__16884 = cljs.core.chunk_rest.call(null, seq__15050_16882__$1);
            var G__16885 = c__11077__auto___16883;
            var G__16886 = cljs.core.count.call(null, c__11077__auto___16883);
            var G__16887 = 0;
            seq__15050_16872 = G__16884;
            chunk__15051_16873 = G__16885;
            count__15052_16874 = G__16886;
            i__15053_16875 = G__16887;
            continue;
          } else {
            var arg__11908__auto___16888 = cljs.core.first.call(null, seq__15050_16882__$1);
            a__11907__auto__.push(arg__11908__auto___16888);
            var G__16889 = cljs.core.next.call(null, seq__15050_16882__$1);
            var G__16890 = null;
            var G__16891 = 0;
            var G__16892 = 0;
            seq__15050_16872 = G__16889;
            chunk__15051_16873 = G__16890;
            count__15052_16874 = G__16891;
            i__15053_16875 = G__16892;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menuitem.apply(null, a__11907__auto__);
  };
  var menuitem = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menuitem__delegate.call(this, args__11906__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 0;
  menuitem.cljs$lang$applyTo = function(arglist__16893) {
    var args__11906__auto__ = cljs.core.seq(arglist__16893);
    return menuitem__delegate(args__11906__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
quiescent.dom.meta = function() {
  var meta__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15058_16894 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15059_16895 = null;
    var count__15060_16896 = 0;
    var i__15061_16897 = 0;
    while (true) {
      if (i__15061_16897 < count__15060_16896) {
        var arg__11908__auto___16898 = cljs.core._nth.call(null, chunk__15059_16895, i__15061_16897);
        a__11907__auto__.push(arg__11908__auto___16898);
        var G__16899 = seq__15058_16894;
        var G__16900 = chunk__15059_16895;
        var G__16901 = count__15060_16896;
        var G__16902 = i__15061_16897 + 1;
        seq__15058_16894 = G__16899;
        chunk__15059_16895 = G__16900;
        count__15060_16896 = G__16901;
        i__15061_16897 = G__16902;
        continue;
      } else {
        var temp__4092__auto___16903 = cljs.core.seq.call(null, seq__15058_16894);
        if (temp__4092__auto___16903) {
          var seq__15058_16904__$1 = temp__4092__auto___16903;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15058_16904__$1)) {
            var c__11077__auto___16905 = cljs.core.chunk_first.call(null, seq__15058_16904__$1);
            var G__16906 = cljs.core.chunk_rest.call(null, seq__15058_16904__$1);
            var G__16907 = c__11077__auto___16905;
            var G__16908 = cljs.core.count.call(null, c__11077__auto___16905);
            var G__16909 = 0;
            seq__15058_16894 = G__16906;
            chunk__15059_16895 = G__16907;
            count__15060_16896 = G__16908;
            i__15061_16897 = G__16909;
            continue;
          } else {
            var arg__11908__auto___16910 = cljs.core.first.call(null, seq__15058_16904__$1);
            a__11907__auto__.push(arg__11908__auto___16910);
            var G__16911 = cljs.core.next.call(null, seq__15058_16904__$1);
            var G__16912 = null;
            var G__16913 = 0;
            var G__16914 = 0;
            seq__15058_16894 = G__16911;
            chunk__15059_16895 = G__16912;
            count__15060_16896 = G__16913;
            i__15061_16897 = G__16914;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meta.apply(null, a__11907__auto__);
  };
  var meta = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meta__delegate.call(this, args__11906__auto__);
  };
  meta.cljs$lang$maxFixedArity = 0;
  meta.cljs$lang$applyTo = function(arglist__16915) {
    var args__11906__auto__ = cljs.core.seq(arglist__16915);
    return meta__delegate(args__11906__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
quiescent.dom.meter = function() {
  var meter__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15066_16916 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15067_16917 = null;
    var count__15068_16918 = 0;
    var i__15069_16919 = 0;
    while (true) {
      if (i__15069_16919 < count__15068_16918) {
        var arg__11908__auto___16920 = cljs.core._nth.call(null, chunk__15067_16917, i__15069_16919);
        a__11907__auto__.push(arg__11908__auto___16920);
        var G__16921 = seq__15066_16916;
        var G__16922 = chunk__15067_16917;
        var G__16923 = count__15068_16918;
        var G__16924 = i__15069_16919 + 1;
        seq__15066_16916 = G__16921;
        chunk__15067_16917 = G__16922;
        count__15068_16918 = G__16923;
        i__15069_16919 = G__16924;
        continue;
      } else {
        var temp__4092__auto___16925 = cljs.core.seq.call(null, seq__15066_16916);
        if (temp__4092__auto___16925) {
          var seq__15066_16926__$1 = temp__4092__auto___16925;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15066_16926__$1)) {
            var c__11077__auto___16927 = cljs.core.chunk_first.call(null, seq__15066_16926__$1);
            var G__16928 = cljs.core.chunk_rest.call(null, seq__15066_16926__$1);
            var G__16929 = c__11077__auto___16927;
            var G__16930 = cljs.core.count.call(null, c__11077__auto___16927);
            var G__16931 = 0;
            seq__15066_16916 = G__16928;
            chunk__15067_16917 = G__16929;
            count__15068_16918 = G__16930;
            i__15069_16919 = G__16931;
            continue;
          } else {
            var arg__11908__auto___16932 = cljs.core.first.call(null, seq__15066_16926__$1);
            a__11907__auto__.push(arg__11908__auto___16932);
            var G__16933 = cljs.core.next.call(null, seq__15066_16926__$1);
            var G__16934 = null;
            var G__16935 = 0;
            var G__16936 = 0;
            seq__15066_16916 = G__16933;
            chunk__15067_16917 = G__16934;
            count__15068_16918 = G__16935;
            i__15069_16919 = G__16936;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meter.apply(null, a__11907__auto__);
  };
  var meter = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meter__delegate.call(this, args__11906__auto__);
  };
  meter.cljs$lang$maxFixedArity = 0;
  meter.cljs$lang$applyTo = function(arglist__16937) {
    var args__11906__auto__ = cljs.core.seq(arglist__16937);
    return meter__delegate(args__11906__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
quiescent.dom.nav = function() {
  var nav__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15074_16938 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15075_16939 = null;
    var count__15076_16940 = 0;
    var i__15077_16941 = 0;
    while (true) {
      if (i__15077_16941 < count__15076_16940) {
        var arg__11908__auto___16942 = cljs.core._nth.call(null, chunk__15075_16939, i__15077_16941);
        a__11907__auto__.push(arg__11908__auto___16942);
        var G__16943 = seq__15074_16938;
        var G__16944 = chunk__15075_16939;
        var G__16945 = count__15076_16940;
        var G__16946 = i__15077_16941 + 1;
        seq__15074_16938 = G__16943;
        chunk__15075_16939 = G__16944;
        count__15076_16940 = G__16945;
        i__15077_16941 = G__16946;
        continue;
      } else {
        var temp__4092__auto___16947 = cljs.core.seq.call(null, seq__15074_16938);
        if (temp__4092__auto___16947) {
          var seq__15074_16948__$1 = temp__4092__auto___16947;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15074_16948__$1)) {
            var c__11077__auto___16949 = cljs.core.chunk_first.call(null, seq__15074_16948__$1);
            var G__16950 = cljs.core.chunk_rest.call(null, seq__15074_16948__$1);
            var G__16951 = c__11077__auto___16949;
            var G__16952 = cljs.core.count.call(null, c__11077__auto___16949);
            var G__16953 = 0;
            seq__15074_16938 = G__16950;
            chunk__15075_16939 = G__16951;
            count__15076_16940 = G__16952;
            i__15077_16941 = G__16953;
            continue;
          } else {
            var arg__11908__auto___16954 = cljs.core.first.call(null, seq__15074_16948__$1);
            a__11907__auto__.push(arg__11908__auto___16954);
            var G__16955 = cljs.core.next.call(null, seq__15074_16948__$1);
            var G__16956 = null;
            var G__16957 = 0;
            var G__16958 = 0;
            seq__15074_16938 = G__16955;
            chunk__15075_16939 = G__16956;
            count__15076_16940 = G__16957;
            i__15077_16941 = G__16958;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.nav.apply(null, a__11907__auto__);
  };
  var nav = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return nav__delegate.call(this, args__11906__auto__);
  };
  nav.cljs$lang$maxFixedArity = 0;
  nav.cljs$lang$applyTo = function(arglist__16959) {
    var args__11906__auto__ = cljs.core.seq(arglist__16959);
    return nav__delegate(args__11906__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
quiescent.dom.noscript = function() {
  var noscript__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15082_16960 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15083_16961 = null;
    var count__15084_16962 = 0;
    var i__15085_16963 = 0;
    while (true) {
      if (i__15085_16963 < count__15084_16962) {
        var arg__11908__auto___16964 = cljs.core._nth.call(null, chunk__15083_16961, i__15085_16963);
        a__11907__auto__.push(arg__11908__auto___16964);
        var G__16965 = seq__15082_16960;
        var G__16966 = chunk__15083_16961;
        var G__16967 = count__15084_16962;
        var G__16968 = i__15085_16963 + 1;
        seq__15082_16960 = G__16965;
        chunk__15083_16961 = G__16966;
        count__15084_16962 = G__16967;
        i__15085_16963 = G__16968;
        continue;
      } else {
        var temp__4092__auto___16969 = cljs.core.seq.call(null, seq__15082_16960);
        if (temp__4092__auto___16969) {
          var seq__15082_16970__$1 = temp__4092__auto___16969;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15082_16970__$1)) {
            var c__11077__auto___16971 = cljs.core.chunk_first.call(null, seq__15082_16970__$1);
            var G__16972 = cljs.core.chunk_rest.call(null, seq__15082_16970__$1);
            var G__16973 = c__11077__auto___16971;
            var G__16974 = cljs.core.count.call(null, c__11077__auto___16971);
            var G__16975 = 0;
            seq__15082_16960 = G__16972;
            chunk__15083_16961 = G__16973;
            count__15084_16962 = G__16974;
            i__15085_16963 = G__16975;
            continue;
          } else {
            var arg__11908__auto___16976 = cljs.core.first.call(null, seq__15082_16970__$1);
            a__11907__auto__.push(arg__11908__auto___16976);
            var G__16977 = cljs.core.next.call(null, seq__15082_16970__$1);
            var G__16978 = null;
            var G__16979 = 0;
            var G__16980 = 0;
            seq__15082_16960 = G__16977;
            chunk__15083_16961 = G__16978;
            count__15084_16962 = G__16979;
            i__15085_16963 = G__16980;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.noscript.apply(null, a__11907__auto__);
  };
  var noscript = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return noscript__delegate.call(this, args__11906__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 0;
  noscript.cljs$lang$applyTo = function(arglist__16981) {
    var args__11906__auto__ = cljs.core.seq(arglist__16981);
    return noscript__delegate(args__11906__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
quiescent.dom.object = function() {
  var object__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15090_16982 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15091_16983 = null;
    var count__15092_16984 = 0;
    var i__15093_16985 = 0;
    while (true) {
      if (i__15093_16985 < count__15092_16984) {
        var arg__11908__auto___16986 = cljs.core._nth.call(null, chunk__15091_16983, i__15093_16985);
        a__11907__auto__.push(arg__11908__auto___16986);
        var G__16987 = seq__15090_16982;
        var G__16988 = chunk__15091_16983;
        var G__16989 = count__15092_16984;
        var G__16990 = i__15093_16985 + 1;
        seq__15090_16982 = G__16987;
        chunk__15091_16983 = G__16988;
        count__15092_16984 = G__16989;
        i__15093_16985 = G__16990;
        continue;
      } else {
        var temp__4092__auto___16991 = cljs.core.seq.call(null, seq__15090_16982);
        if (temp__4092__auto___16991) {
          var seq__15090_16992__$1 = temp__4092__auto___16991;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15090_16992__$1)) {
            var c__11077__auto___16993 = cljs.core.chunk_first.call(null, seq__15090_16992__$1);
            var G__16994 = cljs.core.chunk_rest.call(null, seq__15090_16992__$1);
            var G__16995 = c__11077__auto___16993;
            var G__16996 = cljs.core.count.call(null, c__11077__auto___16993);
            var G__16997 = 0;
            seq__15090_16982 = G__16994;
            chunk__15091_16983 = G__16995;
            count__15092_16984 = G__16996;
            i__15093_16985 = G__16997;
            continue;
          } else {
            var arg__11908__auto___16998 = cljs.core.first.call(null, seq__15090_16992__$1);
            a__11907__auto__.push(arg__11908__auto___16998);
            var G__16999 = cljs.core.next.call(null, seq__15090_16992__$1);
            var G__17000 = null;
            var G__17001 = 0;
            var G__17002 = 0;
            seq__15090_16982 = G__16999;
            chunk__15091_16983 = G__17000;
            count__15092_16984 = G__17001;
            i__15093_16985 = G__17002;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.object.apply(null, a__11907__auto__);
  };
  var object = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return object__delegate.call(this, args__11906__auto__);
  };
  object.cljs$lang$maxFixedArity = 0;
  object.cljs$lang$applyTo = function(arglist__17003) {
    var args__11906__auto__ = cljs.core.seq(arglist__17003);
    return object__delegate(args__11906__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
quiescent.dom.ol = function() {
  var ol__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15098_17004 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15099_17005 = null;
    var count__15100_17006 = 0;
    var i__15101_17007 = 0;
    while (true) {
      if (i__15101_17007 < count__15100_17006) {
        var arg__11908__auto___17008 = cljs.core._nth.call(null, chunk__15099_17005, i__15101_17007);
        a__11907__auto__.push(arg__11908__auto___17008);
        var G__17009 = seq__15098_17004;
        var G__17010 = chunk__15099_17005;
        var G__17011 = count__15100_17006;
        var G__17012 = i__15101_17007 + 1;
        seq__15098_17004 = G__17009;
        chunk__15099_17005 = G__17010;
        count__15100_17006 = G__17011;
        i__15101_17007 = G__17012;
        continue;
      } else {
        var temp__4092__auto___17013 = cljs.core.seq.call(null, seq__15098_17004);
        if (temp__4092__auto___17013) {
          var seq__15098_17014__$1 = temp__4092__auto___17013;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15098_17014__$1)) {
            var c__11077__auto___17015 = cljs.core.chunk_first.call(null, seq__15098_17014__$1);
            var G__17016 = cljs.core.chunk_rest.call(null, seq__15098_17014__$1);
            var G__17017 = c__11077__auto___17015;
            var G__17018 = cljs.core.count.call(null, c__11077__auto___17015);
            var G__17019 = 0;
            seq__15098_17004 = G__17016;
            chunk__15099_17005 = G__17017;
            count__15100_17006 = G__17018;
            i__15101_17007 = G__17019;
            continue;
          } else {
            var arg__11908__auto___17020 = cljs.core.first.call(null, seq__15098_17014__$1);
            a__11907__auto__.push(arg__11908__auto___17020);
            var G__17021 = cljs.core.next.call(null, seq__15098_17014__$1);
            var G__17022 = null;
            var G__17023 = 0;
            var G__17024 = 0;
            seq__15098_17004 = G__17021;
            chunk__15099_17005 = G__17022;
            count__15100_17006 = G__17023;
            i__15101_17007 = G__17024;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ol.apply(null, a__11907__auto__);
  };
  var ol = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ol__delegate.call(this, args__11906__auto__);
  };
  ol.cljs$lang$maxFixedArity = 0;
  ol.cljs$lang$applyTo = function(arglist__17025) {
    var args__11906__auto__ = cljs.core.seq(arglist__17025);
    return ol__delegate(args__11906__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
quiescent.dom.optgroup = function() {
  var optgroup__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15106_17026 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15107_17027 = null;
    var count__15108_17028 = 0;
    var i__15109_17029 = 0;
    while (true) {
      if (i__15109_17029 < count__15108_17028) {
        var arg__11908__auto___17030 = cljs.core._nth.call(null, chunk__15107_17027, i__15109_17029);
        a__11907__auto__.push(arg__11908__auto___17030);
        var G__17031 = seq__15106_17026;
        var G__17032 = chunk__15107_17027;
        var G__17033 = count__15108_17028;
        var G__17034 = i__15109_17029 + 1;
        seq__15106_17026 = G__17031;
        chunk__15107_17027 = G__17032;
        count__15108_17028 = G__17033;
        i__15109_17029 = G__17034;
        continue;
      } else {
        var temp__4092__auto___17035 = cljs.core.seq.call(null, seq__15106_17026);
        if (temp__4092__auto___17035) {
          var seq__15106_17036__$1 = temp__4092__auto___17035;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15106_17036__$1)) {
            var c__11077__auto___17037 = cljs.core.chunk_first.call(null, seq__15106_17036__$1);
            var G__17038 = cljs.core.chunk_rest.call(null, seq__15106_17036__$1);
            var G__17039 = c__11077__auto___17037;
            var G__17040 = cljs.core.count.call(null, c__11077__auto___17037);
            var G__17041 = 0;
            seq__15106_17026 = G__17038;
            chunk__15107_17027 = G__17039;
            count__15108_17028 = G__17040;
            i__15109_17029 = G__17041;
            continue;
          } else {
            var arg__11908__auto___17042 = cljs.core.first.call(null, seq__15106_17036__$1);
            a__11907__auto__.push(arg__11908__auto___17042);
            var G__17043 = cljs.core.next.call(null, seq__15106_17036__$1);
            var G__17044 = null;
            var G__17045 = 0;
            var G__17046 = 0;
            seq__15106_17026 = G__17043;
            chunk__15107_17027 = G__17044;
            count__15108_17028 = G__17045;
            i__15109_17029 = G__17046;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.optgroup.apply(null, a__11907__auto__);
  };
  var optgroup = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return optgroup__delegate.call(this, args__11906__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 0;
  optgroup.cljs$lang$applyTo = function(arglist__17047) {
    var args__11906__auto__ = cljs.core.seq(arglist__17047);
    return optgroup__delegate(args__11906__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
quiescent.dom.option = function() {
  var option__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15114_17048 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15115_17049 = null;
    var count__15116_17050 = 0;
    var i__15117_17051 = 0;
    while (true) {
      if (i__15117_17051 < count__15116_17050) {
        var arg__11908__auto___17052 = cljs.core._nth.call(null, chunk__15115_17049, i__15117_17051);
        a__11907__auto__.push(arg__11908__auto___17052);
        var G__17053 = seq__15114_17048;
        var G__17054 = chunk__15115_17049;
        var G__17055 = count__15116_17050;
        var G__17056 = i__15117_17051 + 1;
        seq__15114_17048 = G__17053;
        chunk__15115_17049 = G__17054;
        count__15116_17050 = G__17055;
        i__15117_17051 = G__17056;
        continue;
      } else {
        var temp__4092__auto___17057 = cljs.core.seq.call(null, seq__15114_17048);
        if (temp__4092__auto___17057) {
          var seq__15114_17058__$1 = temp__4092__auto___17057;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15114_17058__$1)) {
            var c__11077__auto___17059 = cljs.core.chunk_first.call(null, seq__15114_17058__$1);
            var G__17060 = cljs.core.chunk_rest.call(null, seq__15114_17058__$1);
            var G__17061 = c__11077__auto___17059;
            var G__17062 = cljs.core.count.call(null, c__11077__auto___17059);
            var G__17063 = 0;
            seq__15114_17048 = G__17060;
            chunk__15115_17049 = G__17061;
            count__15116_17050 = G__17062;
            i__15117_17051 = G__17063;
            continue;
          } else {
            var arg__11908__auto___17064 = cljs.core.first.call(null, seq__15114_17058__$1);
            a__11907__auto__.push(arg__11908__auto___17064);
            var G__17065 = cljs.core.next.call(null, seq__15114_17058__$1);
            var G__17066 = null;
            var G__17067 = 0;
            var G__17068 = 0;
            seq__15114_17048 = G__17065;
            chunk__15115_17049 = G__17066;
            count__15116_17050 = G__17067;
            i__15117_17051 = G__17068;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.option.apply(null, a__11907__auto__);
  };
  var option = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return option__delegate.call(this, args__11906__auto__);
  };
  option.cljs$lang$maxFixedArity = 0;
  option.cljs$lang$applyTo = function(arglist__17069) {
    var args__11906__auto__ = cljs.core.seq(arglist__17069);
    return option__delegate(args__11906__auto__);
  };
  option.cljs$core$IFn$_invoke$arity$variadic = option__delegate;
  return option;
}();
quiescent.dom.output = function() {
  var output__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15122_17070 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15123_17071 = null;
    var count__15124_17072 = 0;
    var i__15125_17073 = 0;
    while (true) {
      if (i__15125_17073 < count__15124_17072) {
        var arg__11908__auto___17074 = cljs.core._nth.call(null, chunk__15123_17071, i__15125_17073);
        a__11907__auto__.push(arg__11908__auto___17074);
        var G__17075 = seq__15122_17070;
        var G__17076 = chunk__15123_17071;
        var G__17077 = count__15124_17072;
        var G__17078 = i__15125_17073 + 1;
        seq__15122_17070 = G__17075;
        chunk__15123_17071 = G__17076;
        count__15124_17072 = G__17077;
        i__15125_17073 = G__17078;
        continue;
      } else {
        var temp__4092__auto___17079 = cljs.core.seq.call(null, seq__15122_17070);
        if (temp__4092__auto___17079) {
          var seq__15122_17080__$1 = temp__4092__auto___17079;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15122_17080__$1)) {
            var c__11077__auto___17081 = cljs.core.chunk_first.call(null, seq__15122_17080__$1);
            var G__17082 = cljs.core.chunk_rest.call(null, seq__15122_17080__$1);
            var G__17083 = c__11077__auto___17081;
            var G__17084 = cljs.core.count.call(null, c__11077__auto___17081);
            var G__17085 = 0;
            seq__15122_17070 = G__17082;
            chunk__15123_17071 = G__17083;
            count__15124_17072 = G__17084;
            i__15125_17073 = G__17085;
            continue;
          } else {
            var arg__11908__auto___17086 = cljs.core.first.call(null, seq__15122_17080__$1);
            a__11907__auto__.push(arg__11908__auto___17086);
            var G__17087 = cljs.core.next.call(null, seq__15122_17080__$1);
            var G__17088 = null;
            var G__17089 = 0;
            var G__17090 = 0;
            seq__15122_17070 = G__17087;
            chunk__15123_17071 = G__17088;
            count__15124_17072 = G__17089;
            i__15125_17073 = G__17090;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.output.apply(null, a__11907__auto__);
  };
  var output = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return output__delegate.call(this, args__11906__auto__);
  };
  output.cljs$lang$maxFixedArity = 0;
  output.cljs$lang$applyTo = function(arglist__17091) {
    var args__11906__auto__ = cljs.core.seq(arglist__17091);
    return output__delegate(args__11906__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
quiescent.dom.p = function() {
  var p__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15130_17092 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15131_17093 = null;
    var count__15132_17094 = 0;
    var i__15133_17095 = 0;
    while (true) {
      if (i__15133_17095 < count__15132_17094) {
        var arg__11908__auto___17096 = cljs.core._nth.call(null, chunk__15131_17093, i__15133_17095);
        a__11907__auto__.push(arg__11908__auto___17096);
        var G__17097 = seq__15130_17092;
        var G__17098 = chunk__15131_17093;
        var G__17099 = count__15132_17094;
        var G__17100 = i__15133_17095 + 1;
        seq__15130_17092 = G__17097;
        chunk__15131_17093 = G__17098;
        count__15132_17094 = G__17099;
        i__15133_17095 = G__17100;
        continue;
      } else {
        var temp__4092__auto___17101 = cljs.core.seq.call(null, seq__15130_17092);
        if (temp__4092__auto___17101) {
          var seq__15130_17102__$1 = temp__4092__auto___17101;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15130_17102__$1)) {
            var c__11077__auto___17103 = cljs.core.chunk_first.call(null, seq__15130_17102__$1);
            var G__17104 = cljs.core.chunk_rest.call(null, seq__15130_17102__$1);
            var G__17105 = c__11077__auto___17103;
            var G__17106 = cljs.core.count.call(null, c__11077__auto___17103);
            var G__17107 = 0;
            seq__15130_17092 = G__17104;
            chunk__15131_17093 = G__17105;
            count__15132_17094 = G__17106;
            i__15133_17095 = G__17107;
            continue;
          } else {
            var arg__11908__auto___17108 = cljs.core.first.call(null, seq__15130_17102__$1);
            a__11907__auto__.push(arg__11908__auto___17108);
            var G__17109 = cljs.core.next.call(null, seq__15130_17102__$1);
            var G__17110 = null;
            var G__17111 = 0;
            var G__17112 = 0;
            seq__15130_17092 = G__17109;
            chunk__15131_17093 = G__17110;
            count__15132_17094 = G__17111;
            i__15133_17095 = G__17112;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.p.apply(null, a__11907__auto__);
  };
  var p = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return p__delegate.call(this, args__11906__auto__);
  };
  p.cljs$lang$maxFixedArity = 0;
  p.cljs$lang$applyTo = function(arglist__17113) {
    var args__11906__auto__ = cljs.core.seq(arglist__17113);
    return p__delegate(args__11906__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
quiescent.dom.param = function() {
  var param__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15138_17114 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15139_17115 = null;
    var count__15140_17116 = 0;
    var i__15141_17117 = 0;
    while (true) {
      if (i__15141_17117 < count__15140_17116) {
        var arg__11908__auto___17118 = cljs.core._nth.call(null, chunk__15139_17115, i__15141_17117);
        a__11907__auto__.push(arg__11908__auto___17118);
        var G__17119 = seq__15138_17114;
        var G__17120 = chunk__15139_17115;
        var G__17121 = count__15140_17116;
        var G__17122 = i__15141_17117 + 1;
        seq__15138_17114 = G__17119;
        chunk__15139_17115 = G__17120;
        count__15140_17116 = G__17121;
        i__15141_17117 = G__17122;
        continue;
      } else {
        var temp__4092__auto___17123 = cljs.core.seq.call(null, seq__15138_17114);
        if (temp__4092__auto___17123) {
          var seq__15138_17124__$1 = temp__4092__auto___17123;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15138_17124__$1)) {
            var c__11077__auto___17125 = cljs.core.chunk_first.call(null, seq__15138_17124__$1);
            var G__17126 = cljs.core.chunk_rest.call(null, seq__15138_17124__$1);
            var G__17127 = c__11077__auto___17125;
            var G__17128 = cljs.core.count.call(null, c__11077__auto___17125);
            var G__17129 = 0;
            seq__15138_17114 = G__17126;
            chunk__15139_17115 = G__17127;
            count__15140_17116 = G__17128;
            i__15141_17117 = G__17129;
            continue;
          } else {
            var arg__11908__auto___17130 = cljs.core.first.call(null, seq__15138_17124__$1);
            a__11907__auto__.push(arg__11908__auto___17130);
            var G__17131 = cljs.core.next.call(null, seq__15138_17124__$1);
            var G__17132 = null;
            var G__17133 = 0;
            var G__17134 = 0;
            seq__15138_17114 = G__17131;
            chunk__15139_17115 = G__17132;
            count__15140_17116 = G__17133;
            i__15141_17117 = G__17134;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.param.apply(null, a__11907__auto__);
  };
  var param = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return param__delegate.call(this, args__11906__auto__);
  };
  param.cljs$lang$maxFixedArity = 0;
  param.cljs$lang$applyTo = function(arglist__17135) {
    var args__11906__auto__ = cljs.core.seq(arglist__17135);
    return param__delegate(args__11906__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
quiescent.dom.pre = function() {
  var pre__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15146_17136 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15147_17137 = null;
    var count__15148_17138 = 0;
    var i__15149_17139 = 0;
    while (true) {
      if (i__15149_17139 < count__15148_17138) {
        var arg__11908__auto___17140 = cljs.core._nth.call(null, chunk__15147_17137, i__15149_17139);
        a__11907__auto__.push(arg__11908__auto___17140);
        var G__17141 = seq__15146_17136;
        var G__17142 = chunk__15147_17137;
        var G__17143 = count__15148_17138;
        var G__17144 = i__15149_17139 + 1;
        seq__15146_17136 = G__17141;
        chunk__15147_17137 = G__17142;
        count__15148_17138 = G__17143;
        i__15149_17139 = G__17144;
        continue;
      } else {
        var temp__4092__auto___17145 = cljs.core.seq.call(null, seq__15146_17136);
        if (temp__4092__auto___17145) {
          var seq__15146_17146__$1 = temp__4092__auto___17145;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15146_17146__$1)) {
            var c__11077__auto___17147 = cljs.core.chunk_first.call(null, seq__15146_17146__$1);
            var G__17148 = cljs.core.chunk_rest.call(null, seq__15146_17146__$1);
            var G__17149 = c__11077__auto___17147;
            var G__17150 = cljs.core.count.call(null, c__11077__auto___17147);
            var G__17151 = 0;
            seq__15146_17136 = G__17148;
            chunk__15147_17137 = G__17149;
            count__15148_17138 = G__17150;
            i__15149_17139 = G__17151;
            continue;
          } else {
            var arg__11908__auto___17152 = cljs.core.first.call(null, seq__15146_17146__$1);
            a__11907__auto__.push(arg__11908__auto___17152);
            var G__17153 = cljs.core.next.call(null, seq__15146_17146__$1);
            var G__17154 = null;
            var G__17155 = 0;
            var G__17156 = 0;
            seq__15146_17136 = G__17153;
            chunk__15147_17137 = G__17154;
            count__15148_17138 = G__17155;
            i__15149_17139 = G__17156;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.pre.apply(null, a__11907__auto__);
  };
  var pre = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pre__delegate.call(this, args__11906__auto__);
  };
  pre.cljs$lang$maxFixedArity = 0;
  pre.cljs$lang$applyTo = function(arglist__17157) {
    var args__11906__auto__ = cljs.core.seq(arglist__17157);
    return pre__delegate(args__11906__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
quiescent.dom.progress = function() {
  var progress__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15154_17158 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15155_17159 = null;
    var count__15156_17160 = 0;
    var i__15157_17161 = 0;
    while (true) {
      if (i__15157_17161 < count__15156_17160) {
        var arg__11908__auto___17162 = cljs.core._nth.call(null, chunk__15155_17159, i__15157_17161);
        a__11907__auto__.push(arg__11908__auto___17162);
        var G__17163 = seq__15154_17158;
        var G__17164 = chunk__15155_17159;
        var G__17165 = count__15156_17160;
        var G__17166 = i__15157_17161 + 1;
        seq__15154_17158 = G__17163;
        chunk__15155_17159 = G__17164;
        count__15156_17160 = G__17165;
        i__15157_17161 = G__17166;
        continue;
      } else {
        var temp__4092__auto___17167 = cljs.core.seq.call(null, seq__15154_17158);
        if (temp__4092__auto___17167) {
          var seq__15154_17168__$1 = temp__4092__auto___17167;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15154_17168__$1)) {
            var c__11077__auto___17169 = cljs.core.chunk_first.call(null, seq__15154_17168__$1);
            var G__17170 = cljs.core.chunk_rest.call(null, seq__15154_17168__$1);
            var G__17171 = c__11077__auto___17169;
            var G__17172 = cljs.core.count.call(null, c__11077__auto___17169);
            var G__17173 = 0;
            seq__15154_17158 = G__17170;
            chunk__15155_17159 = G__17171;
            count__15156_17160 = G__17172;
            i__15157_17161 = G__17173;
            continue;
          } else {
            var arg__11908__auto___17174 = cljs.core.first.call(null, seq__15154_17168__$1);
            a__11907__auto__.push(arg__11908__auto___17174);
            var G__17175 = cljs.core.next.call(null, seq__15154_17168__$1);
            var G__17176 = null;
            var G__17177 = 0;
            var G__17178 = 0;
            seq__15154_17158 = G__17175;
            chunk__15155_17159 = G__17176;
            count__15156_17160 = G__17177;
            i__15157_17161 = G__17178;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.progress.apply(null, a__11907__auto__);
  };
  var progress = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return progress__delegate.call(this, args__11906__auto__);
  };
  progress.cljs$lang$maxFixedArity = 0;
  progress.cljs$lang$applyTo = function(arglist__17179) {
    var args__11906__auto__ = cljs.core.seq(arglist__17179);
    return progress__delegate(args__11906__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
quiescent.dom.q = function() {
  var q__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15162_17180 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15163_17181 = null;
    var count__15164_17182 = 0;
    var i__15165_17183 = 0;
    while (true) {
      if (i__15165_17183 < count__15164_17182) {
        var arg__11908__auto___17184 = cljs.core._nth.call(null, chunk__15163_17181, i__15165_17183);
        a__11907__auto__.push(arg__11908__auto___17184);
        var G__17185 = seq__15162_17180;
        var G__17186 = chunk__15163_17181;
        var G__17187 = count__15164_17182;
        var G__17188 = i__15165_17183 + 1;
        seq__15162_17180 = G__17185;
        chunk__15163_17181 = G__17186;
        count__15164_17182 = G__17187;
        i__15165_17183 = G__17188;
        continue;
      } else {
        var temp__4092__auto___17189 = cljs.core.seq.call(null, seq__15162_17180);
        if (temp__4092__auto___17189) {
          var seq__15162_17190__$1 = temp__4092__auto___17189;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15162_17190__$1)) {
            var c__11077__auto___17191 = cljs.core.chunk_first.call(null, seq__15162_17190__$1);
            var G__17192 = cljs.core.chunk_rest.call(null, seq__15162_17190__$1);
            var G__17193 = c__11077__auto___17191;
            var G__17194 = cljs.core.count.call(null, c__11077__auto___17191);
            var G__17195 = 0;
            seq__15162_17180 = G__17192;
            chunk__15163_17181 = G__17193;
            count__15164_17182 = G__17194;
            i__15165_17183 = G__17195;
            continue;
          } else {
            var arg__11908__auto___17196 = cljs.core.first.call(null, seq__15162_17190__$1);
            a__11907__auto__.push(arg__11908__auto___17196);
            var G__17197 = cljs.core.next.call(null, seq__15162_17190__$1);
            var G__17198 = null;
            var G__17199 = 0;
            var G__17200 = 0;
            seq__15162_17180 = G__17197;
            chunk__15163_17181 = G__17198;
            count__15164_17182 = G__17199;
            i__15165_17183 = G__17200;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.q.apply(null, a__11907__auto__);
  };
  var q = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return q__delegate.call(this, args__11906__auto__);
  };
  q.cljs$lang$maxFixedArity = 0;
  q.cljs$lang$applyTo = function(arglist__17201) {
    var args__11906__auto__ = cljs.core.seq(arglist__17201);
    return q__delegate(args__11906__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
quiescent.dom.rp = function() {
  var rp__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15170_17202 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15171_17203 = null;
    var count__15172_17204 = 0;
    var i__15173_17205 = 0;
    while (true) {
      if (i__15173_17205 < count__15172_17204) {
        var arg__11908__auto___17206 = cljs.core._nth.call(null, chunk__15171_17203, i__15173_17205);
        a__11907__auto__.push(arg__11908__auto___17206);
        var G__17207 = seq__15170_17202;
        var G__17208 = chunk__15171_17203;
        var G__17209 = count__15172_17204;
        var G__17210 = i__15173_17205 + 1;
        seq__15170_17202 = G__17207;
        chunk__15171_17203 = G__17208;
        count__15172_17204 = G__17209;
        i__15173_17205 = G__17210;
        continue;
      } else {
        var temp__4092__auto___17211 = cljs.core.seq.call(null, seq__15170_17202);
        if (temp__4092__auto___17211) {
          var seq__15170_17212__$1 = temp__4092__auto___17211;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15170_17212__$1)) {
            var c__11077__auto___17213 = cljs.core.chunk_first.call(null, seq__15170_17212__$1);
            var G__17214 = cljs.core.chunk_rest.call(null, seq__15170_17212__$1);
            var G__17215 = c__11077__auto___17213;
            var G__17216 = cljs.core.count.call(null, c__11077__auto___17213);
            var G__17217 = 0;
            seq__15170_17202 = G__17214;
            chunk__15171_17203 = G__17215;
            count__15172_17204 = G__17216;
            i__15173_17205 = G__17217;
            continue;
          } else {
            var arg__11908__auto___17218 = cljs.core.first.call(null, seq__15170_17212__$1);
            a__11907__auto__.push(arg__11908__auto___17218);
            var G__17219 = cljs.core.next.call(null, seq__15170_17212__$1);
            var G__17220 = null;
            var G__17221 = 0;
            var G__17222 = 0;
            seq__15170_17202 = G__17219;
            chunk__15171_17203 = G__17220;
            count__15172_17204 = G__17221;
            i__15173_17205 = G__17222;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rp.apply(null, a__11907__auto__);
  };
  var rp = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rp__delegate.call(this, args__11906__auto__);
  };
  rp.cljs$lang$maxFixedArity = 0;
  rp.cljs$lang$applyTo = function(arglist__17223) {
    var args__11906__auto__ = cljs.core.seq(arglist__17223);
    return rp__delegate(args__11906__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
quiescent.dom.rt = function() {
  var rt__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15178_17224 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15179_17225 = null;
    var count__15180_17226 = 0;
    var i__15181_17227 = 0;
    while (true) {
      if (i__15181_17227 < count__15180_17226) {
        var arg__11908__auto___17228 = cljs.core._nth.call(null, chunk__15179_17225, i__15181_17227);
        a__11907__auto__.push(arg__11908__auto___17228);
        var G__17229 = seq__15178_17224;
        var G__17230 = chunk__15179_17225;
        var G__17231 = count__15180_17226;
        var G__17232 = i__15181_17227 + 1;
        seq__15178_17224 = G__17229;
        chunk__15179_17225 = G__17230;
        count__15180_17226 = G__17231;
        i__15181_17227 = G__17232;
        continue;
      } else {
        var temp__4092__auto___17233 = cljs.core.seq.call(null, seq__15178_17224);
        if (temp__4092__auto___17233) {
          var seq__15178_17234__$1 = temp__4092__auto___17233;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15178_17234__$1)) {
            var c__11077__auto___17235 = cljs.core.chunk_first.call(null, seq__15178_17234__$1);
            var G__17236 = cljs.core.chunk_rest.call(null, seq__15178_17234__$1);
            var G__17237 = c__11077__auto___17235;
            var G__17238 = cljs.core.count.call(null, c__11077__auto___17235);
            var G__17239 = 0;
            seq__15178_17224 = G__17236;
            chunk__15179_17225 = G__17237;
            count__15180_17226 = G__17238;
            i__15181_17227 = G__17239;
            continue;
          } else {
            var arg__11908__auto___17240 = cljs.core.first.call(null, seq__15178_17234__$1);
            a__11907__auto__.push(arg__11908__auto___17240);
            var G__17241 = cljs.core.next.call(null, seq__15178_17234__$1);
            var G__17242 = null;
            var G__17243 = 0;
            var G__17244 = 0;
            seq__15178_17224 = G__17241;
            chunk__15179_17225 = G__17242;
            count__15180_17226 = G__17243;
            i__15181_17227 = G__17244;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rt.apply(null, a__11907__auto__);
  };
  var rt = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rt__delegate.call(this, args__11906__auto__);
  };
  rt.cljs$lang$maxFixedArity = 0;
  rt.cljs$lang$applyTo = function(arglist__17245) {
    var args__11906__auto__ = cljs.core.seq(arglist__17245);
    return rt__delegate(args__11906__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
quiescent.dom.ruby = function() {
  var ruby__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15186_17246 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15187_17247 = null;
    var count__15188_17248 = 0;
    var i__15189_17249 = 0;
    while (true) {
      if (i__15189_17249 < count__15188_17248) {
        var arg__11908__auto___17250 = cljs.core._nth.call(null, chunk__15187_17247, i__15189_17249);
        a__11907__auto__.push(arg__11908__auto___17250);
        var G__17251 = seq__15186_17246;
        var G__17252 = chunk__15187_17247;
        var G__17253 = count__15188_17248;
        var G__17254 = i__15189_17249 + 1;
        seq__15186_17246 = G__17251;
        chunk__15187_17247 = G__17252;
        count__15188_17248 = G__17253;
        i__15189_17249 = G__17254;
        continue;
      } else {
        var temp__4092__auto___17255 = cljs.core.seq.call(null, seq__15186_17246);
        if (temp__4092__auto___17255) {
          var seq__15186_17256__$1 = temp__4092__auto___17255;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15186_17256__$1)) {
            var c__11077__auto___17257 = cljs.core.chunk_first.call(null, seq__15186_17256__$1);
            var G__17258 = cljs.core.chunk_rest.call(null, seq__15186_17256__$1);
            var G__17259 = c__11077__auto___17257;
            var G__17260 = cljs.core.count.call(null, c__11077__auto___17257);
            var G__17261 = 0;
            seq__15186_17246 = G__17258;
            chunk__15187_17247 = G__17259;
            count__15188_17248 = G__17260;
            i__15189_17249 = G__17261;
            continue;
          } else {
            var arg__11908__auto___17262 = cljs.core.first.call(null, seq__15186_17256__$1);
            a__11907__auto__.push(arg__11908__auto___17262);
            var G__17263 = cljs.core.next.call(null, seq__15186_17256__$1);
            var G__17264 = null;
            var G__17265 = 0;
            var G__17266 = 0;
            seq__15186_17246 = G__17263;
            chunk__15187_17247 = G__17264;
            count__15188_17248 = G__17265;
            i__15189_17249 = G__17266;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ruby.apply(null, a__11907__auto__);
  };
  var ruby = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ruby__delegate.call(this, args__11906__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 0;
  ruby.cljs$lang$applyTo = function(arglist__17267) {
    var args__11906__auto__ = cljs.core.seq(arglist__17267);
    return ruby__delegate(args__11906__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
quiescent.dom.s = function() {
  var s__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15194_17268 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15195_17269 = null;
    var count__15196_17270 = 0;
    var i__15197_17271 = 0;
    while (true) {
      if (i__15197_17271 < count__15196_17270) {
        var arg__11908__auto___17272 = cljs.core._nth.call(null, chunk__15195_17269, i__15197_17271);
        a__11907__auto__.push(arg__11908__auto___17272);
        var G__17273 = seq__15194_17268;
        var G__17274 = chunk__15195_17269;
        var G__17275 = count__15196_17270;
        var G__17276 = i__15197_17271 + 1;
        seq__15194_17268 = G__17273;
        chunk__15195_17269 = G__17274;
        count__15196_17270 = G__17275;
        i__15197_17271 = G__17276;
        continue;
      } else {
        var temp__4092__auto___17277 = cljs.core.seq.call(null, seq__15194_17268);
        if (temp__4092__auto___17277) {
          var seq__15194_17278__$1 = temp__4092__auto___17277;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15194_17278__$1)) {
            var c__11077__auto___17279 = cljs.core.chunk_first.call(null, seq__15194_17278__$1);
            var G__17280 = cljs.core.chunk_rest.call(null, seq__15194_17278__$1);
            var G__17281 = c__11077__auto___17279;
            var G__17282 = cljs.core.count.call(null, c__11077__auto___17279);
            var G__17283 = 0;
            seq__15194_17268 = G__17280;
            chunk__15195_17269 = G__17281;
            count__15196_17270 = G__17282;
            i__15197_17271 = G__17283;
            continue;
          } else {
            var arg__11908__auto___17284 = cljs.core.first.call(null, seq__15194_17278__$1);
            a__11907__auto__.push(arg__11908__auto___17284);
            var G__17285 = cljs.core.next.call(null, seq__15194_17278__$1);
            var G__17286 = null;
            var G__17287 = 0;
            var G__17288 = 0;
            seq__15194_17268 = G__17285;
            chunk__15195_17269 = G__17286;
            count__15196_17270 = G__17287;
            i__15197_17271 = G__17288;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.s.apply(null, a__11907__auto__);
  };
  var s = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return s__delegate.call(this, args__11906__auto__);
  };
  s.cljs$lang$maxFixedArity = 0;
  s.cljs$lang$applyTo = function(arglist__17289) {
    var args__11906__auto__ = cljs.core.seq(arglist__17289);
    return s__delegate(args__11906__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
quiescent.dom.samp = function() {
  var samp__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15202_17290 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15203_17291 = null;
    var count__15204_17292 = 0;
    var i__15205_17293 = 0;
    while (true) {
      if (i__15205_17293 < count__15204_17292) {
        var arg__11908__auto___17294 = cljs.core._nth.call(null, chunk__15203_17291, i__15205_17293);
        a__11907__auto__.push(arg__11908__auto___17294);
        var G__17295 = seq__15202_17290;
        var G__17296 = chunk__15203_17291;
        var G__17297 = count__15204_17292;
        var G__17298 = i__15205_17293 + 1;
        seq__15202_17290 = G__17295;
        chunk__15203_17291 = G__17296;
        count__15204_17292 = G__17297;
        i__15205_17293 = G__17298;
        continue;
      } else {
        var temp__4092__auto___17299 = cljs.core.seq.call(null, seq__15202_17290);
        if (temp__4092__auto___17299) {
          var seq__15202_17300__$1 = temp__4092__auto___17299;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15202_17300__$1)) {
            var c__11077__auto___17301 = cljs.core.chunk_first.call(null, seq__15202_17300__$1);
            var G__17302 = cljs.core.chunk_rest.call(null, seq__15202_17300__$1);
            var G__17303 = c__11077__auto___17301;
            var G__17304 = cljs.core.count.call(null, c__11077__auto___17301);
            var G__17305 = 0;
            seq__15202_17290 = G__17302;
            chunk__15203_17291 = G__17303;
            count__15204_17292 = G__17304;
            i__15205_17293 = G__17305;
            continue;
          } else {
            var arg__11908__auto___17306 = cljs.core.first.call(null, seq__15202_17300__$1);
            a__11907__auto__.push(arg__11908__auto___17306);
            var G__17307 = cljs.core.next.call(null, seq__15202_17300__$1);
            var G__17308 = null;
            var G__17309 = 0;
            var G__17310 = 0;
            seq__15202_17290 = G__17307;
            chunk__15203_17291 = G__17308;
            count__15204_17292 = G__17309;
            i__15205_17293 = G__17310;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.samp.apply(null, a__11907__auto__);
  };
  var samp = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return samp__delegate.call(this, args__11906__auto__);
  };
  samp.cljs$lang$maxFixedArity = 0;
  samp.cljs$lang$applyTo = function(arglist__17311) {
    var args__11906__auto__ = cljs.core.seq(arglist__17311);
    return samp__delegate(args__11906__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
quiescent.dom.script = function() {
  var script__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15210_17312 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15211_17313 = null;
    var count__15212_17314 = 0;
    var i__15213_17315 = 0;
    while (true) {
      if (i__15213_17315 < count__15212_17314) {
        var arg__11908__auto___17316 = cljs.core._nth.call(null, chunk__15211_17313, i__15213_17315);
        a__11907__auto__.push(arg__11908__auto___17316);
        var G__17317 = seq__15210_17312;
        var G__17318 = chunk__15211_17313;
        var G__17319 = count__15212_17314;
        var G__17320 = i__15213_17315 + 1;
        seq__15210_17312 = G__17317;
        chunk__15211_17313 = G__17318;
        count__15212_17314 = G__17319;
        i__15213_17315 = G__17320;
        continue;
      } else {
        var temp__4092__auto___17321 = cljs.core.seq.call(null, seq__15210_17312);
        if (temp__4092__auto___17321) {
          var seq__15210_17322__$1 = temp__4092__auto___17321;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15210_17322__$1)) {
            var c__11077__auto___17323 = cljs.core.chunk_first.call(null, seq__15210_17322__$1);
            var G__17324 = cljs.core.chunk_rest.call(null, seq__15210_17322__$1);
            var G__17325 = c__11077__auto___17323;
            var G__17326 = cljs.core.count.call(null, c__11077__auto___17323);
            var G__17327 = 0;
            seq__15210_17312 = G__17324;
            chunk__15211_17313 = G__17325;
            count__15212_17314 = G__17326;
            i__15213_17315 = G__17327;
            continue;
          } else {
            var arg__11908__auto___17328 = cljs.core.first.call(null, seq__15210_17322__$1);
            a__11907__auto__.push(arg__11908__auto___17328);
            var G__17329 = cljs.core.next.call(null, seq__15210_17322__$1);
            var G__17330 = null;
            var G__17331 = 0;
            var G__17332 = 0;
            seq__15210_17312 = G__17329;
            chunk__15211_17313 = G__17330;
            count__15212_17314 = G__17331;
            i__15213_17315 = G__17332;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.script.apply(null, a__11907__auto__);
  };
  var script = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return script__delegate.call(this, args__11906__auto__);
  };
  script.cljs$lang$maxFixedArity = 0;
  script.cljs$lang$applyTo = function(arglist__17333) {
    var args__11906__auto__ = cljs.core.seq(arglist__17333);
    return script__delegate(args__11906__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
quiescent.dom.section = function() {
  var section__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15218_17334 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15219_17335 = null;
    var count__15220_17336 = 0;
    var i__15221_17337 = 0;
    while (true) {
      if (i__15221_17337 < count__15220_17336) {
        var arg__11908__auto___17338 = cljs.core._nth.call(null, chunk__15219_17335, i__15221_17337);
        a__11907__auto__.push(arg__11908__auto___17338);
        var G__17339 = seq__15218_17334;
        var G__17340 = chunk__15219_17335;
        var G__17341 = count__15220_17336;
        var G__17342 = i__15221_17337 + 1;
        seq__15218_17334 = G__17339;
        chunk__15219_17335 = G__17340;
        count__15220_17336 = G__17341;
        i__15221_17337 = G__17342;
        continue;
      } else {
        var temp__4092__auto___17343 = cljs.core.seq.call(null, seq__15218_17334);
        if (temp__4092__auto___17343) {
          var seq__15218_17344__$1 = temp__4092__auto___17343;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15218_17344__$1)) {
            var c__11077__auto___17345 = cljs.core.chunk_first.call(null, seq__15218_17344__$1);
            var G__17346 = cljs.core.chunk_rest.call(null, seq__15218_17344__$1);
            var G__17347 = c__11077__auto___17345;
            var G__17348 = cljs.core.count.call(null, c__11077__auto___17345);
            var G__17349 = 0;
            seq__15218_17334 = G__17346;
            chunk__15219_17335 = G__17347;
            count__15220_17336 = G__17348;
            i__15221_17337 = G__17349;
            continue;
          } else {
            var arg__11908__auto___17350 = cljs.core.first.call(null, seq__15218_17344__$1);
            a__11907__auto__.push(arg__11908__auto___17350);
            var G__17351 = cljs.core.next.call(null, seq__15218_17344__$1);
            var G__17352 = null;
            var G__17353 = 0;
            var G__17354 = 0;
            seq__15218_17334 = G__17351;
            chunk__15219_17335 = G__17352;
            count__15220_17336 = G__17353;
            i__15221_17337 = G__17354;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.section.apply(null, a__11907__auto__);
  };
  var section = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return section__delegate.call(this, args__11906__auto__);
  };
  section.cljs$lang$maxFixedArity = 0;
  section.cljs$lang$applyTo = function(arglist__17355) {
    var args__11906__auto__ = cljs.core.seq(arglist__17355);
    return section__delegate(args__11906__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
quiescent.dom.select = function() {
  var select__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15226_17356 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15227_17357 = null;
    var count__15228_17358 = 0;
    var i__15229_17359 = 0;
    while (true) {
      if (i__15229_17359 < count__15228_17358) {
        var arg__11908__auto___17360 = cljs.core._nth.call(null, chunk__15227_17357, i__15229_17359);
        a__11907__auto__.push(arg__11908__auto___17360);
        var G__17361 = seq__15226_17356;
        var G__17362 = chunk__15227_17357;
        var G__17363 = count__15228_17358;
        var G__17364 = i__15229_17359 + 1;
        seq__15226_17356 = G__17361;
        chunk__15227_17357 = G__17362;
        count__15228_17358 = G__17363;
        i__15229_17359 = G__17364;
        continue;
      } else {
        var temp__4092__auto___17365 = cljs.core.seq.call(null, seq__15226_17356);
        if (temp__4092__auto___17365) {
          var seq__15226_17366__$1 = temp__4092__auto___17365;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15226_17366__$1)) {
            var c__11077__auto___17367 = cljs.core.chunk_first.call(null, seq__15226_17366__$1);
            var G__17368 = cljs.core.chunk_rest.call(null, seq__15226_17366__$1);
            var G__17369 = c__11077__auto___17367;
            var G__17370 = cljs.core.count.call(null, c__11077__auto___17367);
            var G__17371 = 0;
            seq__15226_17356 = G__17368;
            chunk__15227_17357 = G__17369;
            count__15228_17358 = G__17370;
            i__15229_17359 = G__17371;
            continue;
          } else {
            var arg__11908__auto___17372 = cljs.core.first.call(null, seq__15226_17366__$1);
            a__11907__auto__.push(arg__11908__auto___17372);
            var G__17373 = cljs.core.next.call(null, seq__15226_17366__$1);
            var G__17374 = null;
            var G__17375 = 0;
            var G__17376 = 0;
            seq__15226_17356 = G__17373;
            chunk__15227_17357 = G__17374;
            count__15228_17358 = G__17375;
            i__15229_17359 = G__17376;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.select.apply(null, a__11907__auto__);
  };
  var select = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return select__delegate.call(this, args__11906__auto__);
  };
  select.cljs$lang$maxFixedArity = 0;
  select.cljs$lang$applyTo = function(arglist__17377) {
    var args__11906__auto__ = cljs.core.seq(arglist__17377);
    return select__delegate(args__11906__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
quiescent.dom.small = function() {
  var small__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15234_17378 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15235_17379 = null;
    var count__15236_17380 = 0;
    var i__15237_17381 = 0;
    while (true) {
      if (i__15237_17381 < count__15236_17380) {
        var arg__11908__auto___17382 = cljs.core._nth.call(null, chunk__15235_17379, i__15237_17381);
        a__11907__auto__.push(arg__11908__auto___17382);
        var G__17383 = seq__15234_17378;
        var G__17384 = chunk__15235_17379;
        var G__17385 = count__15236_17380;
        var G__17386 = i__15237_17381 + 1;
        seq__15234_17378 = G__17383;
        chunk__15235_17379 = G__17384;
        count__15236_17380 = G__17385;
        i__15237_17381 = G__17386;
        continue;
      } else {
        var temp__4092__auto___17387 = cljs.core.seq.call(null, seq__15234_17378);
        if (temp__4092__auto___17387) {
          var seq__15234_17388__$1 = temp__4092__auto___17387;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15234_17388__$1)) {
            var c__11077__auto___17389 = cljs.core.chunk_first.call(null, seq__15234_17388__$1);
            var G__17390 = cljs.core.chunk_rest.call(null, seq__15234_17388__$1);
            var G__17391 = c__11077__auto___17389;
            var G__17392 = cljs.core.count.call(null, c__11077__auto___17389);
            var G__17393 = 0;
            seq__15234_17378 = G__17390;
            chunk__15235_17379 = G__17391;
            count__15236_17380 = G__17392;
            i__15237_17381 = G__17393;
            continue;
          } else {
            var arg__11908__auto___17394 = cljs.core.first.call(null, seq__15234_17388__$1);
            a__11907__auto__.push(arg__11908__auto___17394);
            var G__17395 = cljs.core.next.call(null, seq__15234_17388__$1);
            var G__17396 = null;
            var G__17397 = 0;
            var G__17398 = 0;
            seq__15234_17378 = G__17395;
            chunk__15235_17379 = G__17396;
            count__15236_17380 = G__17397;
            i__15237_17381 = G__17398;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.small.apply(null, a__11907__auto__);
  };
  var small = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return small__delegate.call(this, args__11906__auto__);
  };
  small.cljs$lang$maxFixedArity = 0;
  small.cljs$lang$applyTo = function(arglist__17399) {
    var args__11906__auto__ = cljs.core.seq(arglist__17399);
    return small__delegate(args__11906__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
quiescent.dom.source = function() {
  var source__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15242_17400 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15243_17401 = null;
    var count__15244_17402 = 0;
    var i__15245_17403 = 0;
    while (true) {
      if (i__15245_17403 < count__15244_17402) {
        var arg__11908__auto___17404 = cljs.core._nth.call(null, chunk__15243_17401, i__15245_17403);
        a__11907__auto__.push(arg__11908__auto___17404);
        var G__17405 = seq__15242_17400;
        var G__17406 = chunk__15243_17401;
        var G__17407 = count__15244_17402;
        var G__17408 = i__15245_17403 + 1;
        seq__15242_17400 = G__17405;
        chunk__15243_17401 = G__17406;
        count__15244_17402 = G__17407;
        i__15245_17403 = G__17408;
        continue;
      } else {
        var temp__4092__auto___17409 = cljs.core.seq.call(null, seq__15242_17400);
        if (temp__4092__auto___17409) {
          var seq__15242_17410__$1 = temp__4092__auto___17409;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15242_17410__$1)) {
            var c__11077__auto___17411 = cljs.core.chunk_first.call(null, seq__15242_17410__$1);
            var G__17412 = cljs.core.chunk_rest.call(null, seq__15242_17410__$1);
            var G__17413 = c__11077__auto___17411;
            var G__17414 = cljs.core.count.call(null, c__11077__auto___17411);
            var G__17415 = 0;
            seq__15242_17400 = G__17412;
            chunk__15243_17401 = G__17413;
            count__15244_17402 = G__17414;
            i__15245_17403 = G__17415;
            continue;
          } else {
            var arg__11908__auto___17416 = cljs.core.first.call(null, seq__15242_17410__$1);
            a__11907__auto__.push(arg__11908__auto___17416);
            var G__17417 = cljs.core.next.call(null, seq__15242_17410__$1);
            var G__17418 = null;
            var G__17419 = 0;
            var G__17420 = 0;
            seq__15242_17400 = G__17417;
            chunk__15243_17401 = G__17418;
            count__15244_17402 = G__17419;
            i__15245_17403 = G__17420;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.source.apply(null, a__11907__auto__);
  };
  var source = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return source__delegate.call(this, args__11906__auto__);
  };
  source.cljs$lang$maxFixedArity = 0;
  source.cljs$lang$applyTo = function(arglist__17421) {
    var args__11906__auto__ = cljs.core.seq(arglist__17421);
    return source__delegate(args__11906__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
quiescent.dom.span = function() {
  var span__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15250_17422 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15251_17423 = null;
    var count__15252_17424 = 0;
    var i__15253_17425 = 0;
    while (true) {
      if (i__15253_17425 < count__15252_17424) {
        var arg__11908__auto___17426 = cljs.core._nth.call(null, chunk__15251_17423, i__15253_17425);
        a__11907__auto__.push(arg__11908__auto___17426);
        var G__17427 = seq__15250_17422;
        var G__17428 = chunk__15251_17423;
        var G__17429 = count__15252_17424;
        var G__17430 = i__15253_17425 + 1;
        seq__15250_17422 = G__17427;
        chunk__15251_17423 = G__17428;
        count__15252_17424 = G__17429;
        i__15253_17425 = G__17430;
        continue;
      } else {
        var temp__4092__auto___17431 = cljs.core.seq.call(null, seq__15250_17422);
        if (temp__4092__auto___17431) {
          var seq__15250_17432__$1 = temp__4092__auto___17431;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15250_17432__$1)) {
            var c__11077__auto___17433 = cljs.core.chunk_first.call(null, seq__15250_17432__$1);
            var G__17434 = cljs.core.chunk_rest.call(null, seq__15250_17432__$1);
            var G__17435 = c__11077__auto___17433;
            var G__17436 = cljs.core.count.call(null, c__11077__auto___17433);
            var G__17437 = 0;
            seq__15250_17422 = G__17434;
            chunk__15251_17423 = G__17435;
            count__15252_17424 = G__17436;
            i__15253_17425 = G__17437;
            continue;
          } else {
            var arg__11908__auto___17438 = cljs.core.first.call(null, seq__15250_17432__$1);
            a__11907__auto__.push(arg__11908__auto___17438);
            var G__17439 = cljs.core.next.call(null, seq__15250_17432__$1);
            var G__17440 = null;
            var G__17441 = 0;
            var G__17442 = 0;
            seq__15250_17422 = G__17439;
            chunk__15251_17423 = G__17440;
            count__15252_17424 = G__17441;
            i__15253_17425 = G__17442;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.span.apply(null, a__11907__auto__);
  };
  var span = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return span__delegate.call(this, args__11906__auto__);
  };
  span.cljs$lang$maxFixedArity = 0;
  span.cljs$lang$applyTo = function(arglist__17443) {
    var args__11906__auto__ = cljs.core.seq(arglist__17443);
    return span__delegate(args__11906__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
quiescent.dom.strong = function() {
  var strong__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15258_17444 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15259_17445 = null;
    var count__15260_17446 = 0;
    var i__15261_17447 = 0;
    while (true) {
      if (i__15261_17447 < count__15260_17446) {
        var arg__11908__auto___17448 = cljs.core._nth.call(null, chunk__15259_17445, i__15261_17447);
        a__11907__auto__.push(arg__11908__auto___17448);
        var G__17449 = seq__15258_17444;
        var G__17450 = chunk__15259_17445;
        var G__17451 = count__15260_17446;
        var G__17452 = i__15261_17447 + 1;
        seq__15258_17444 = G__17449;
        chunk__15259_17445 = G__17450;
        count__15260_17446 = G__17451;
        i__15261_17447 = G__17452;
        continue;
      } else {
        var temp__4092__auto___17453 = cljs.core.seq.call(null, seq__15258_17444);
        if (temp__4092__auto___17453) {
          var seq__15258_17454__$1 = temp__4092__auto___17453;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15258_17454__$1)) {
            var c__11077__auto___17455 = cljs.core.chunk_first.call(null, seq__15258_17454__$1);
            var G__17456 = cljs.core.chunk_rest.call(null, seq__15258_17454__$1);
            var G__17457 = c__11077__auto___17455;
            var G__17458 = cljs.core.count.call(null, c__11077__auto___17455);
            var G__17459 = 0;
            seq__15258_17444 = G__17456;
            chunk__15259_17445 = G__17457;
            count__15260_17446 = G__17458;
            i__15261_17447 = G__17459;
            continue;
          } else {
            var arg__11908__auto___17460 = cljs.core.first.call(null, seq__15258_17454__$1);
            a__11907__auto__.push(arg__11908__auto___17460);
            var G__17461 = cljs.core.next.call(null, seq__15258_17454__$1);
            var G__17462 = null;
            var G__17463 = 0;
            var G__17464 = 0;
            seq__15258_17444 = G__17461;
            chunk__15259_17445 = G__17462;
            count__15260_17446 = G__17463;
            i__15261_17447 = G__17464;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.strong.apply(null, a__11907__auto__);
  };
  var strong = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return strong__delegate.call(this, args__11906__auto__);
  };
  strong.cljs$lang$maxFixedArity = 0;
  strong.cljs$lang$applyTo = function(arglist__17465) {
    var args__11906__auto__ = cljs.core.seq(arglist__17465);
    return strong__delegate(args__11906__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
quiescent.dom.style = function() {
  var style__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15266_17466 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15267_17467 = null;
    var count__15268_17468 = 0;
    var i__15269_17469 = 0;
    while (true) {
      if (i__15269_17469 < count__15268_17468) {
        var arg__11908__auto___17470 = cljs.core._nth.call(null, chunk__15267_17467, i__15269_17469);
        a__11907__auto__.push(arg__11908__auto___17470);
        var G__17471 = seq__15266_17466;
        var G__17472 = chunk__15267_17467;
        var G__17473 = count__15268_17468;
        var G__17474 = i__15269_17469 + 1;
        seq__15266_17466 = G__17471;
        chunk__15267_17467 = G__17472;
        count__15268_17468 = G__17473;
        i__15269_17469 = G__17474;
        continue;
      } else {
        var temp__4092__auto___17475 = cljs.core.seq.call(null, seq__15266_17466);
        if (temp__4092__auto___17475) {
          var seq__15266_17476__$1 = temp__4092__auto___17475;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15266_17476__$1)) {
            var c__11077__auto___17477 = cljs.core.chunk_first.call(null, seq__15266_17476__$1);
            var G__17478 = cljs.core.chunk_rest.call(null, seq__15266_17476__$1);
            var G__17479 = c__11077__auto___17477;
            var G__17480 = cljs.core.count.call(null, c__11077__auto___17477);
            var G__17481 = 0;
            seq__15266_17466 = G__17478;
            chunk__15267_17467 = G__17479;
            count__15268_17468 = G__17480;
            i__15269_17469 = G__17481;
            continue;
          } else {
            var arg__11908__auto___17482 = cljs.core.first.call(null, seq__15266_17476__$1);
            a__11907__auto__.push(arg__11908__auto___17482);
            var G__17483 = cljs.core.next.call(null, seq__15266_17476__$1);
            var G__17484 = null;
            var G__17485 = 0;
            var G__17486 = 0;
            seq__15266_17466 = G__17483;
            chunk__15267_17467 = G__17484;
            count__15268_17468 = G__17485;
            i__15269_17469 = G__17486;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.style.apply(null, a__11907__auto__);
  };
  var style = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return style__delegate.call(this, args__11906__auto__);
  };
  style.cljs$lang$maxFixedArity = 0;
  style.cljs$lang$applyTo = function(arglist__17487) {
    var args__11906__auto__ = cljs.core.seq(arglist__17487);
    return style__delegate(args__11906__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
quiescent.dom.sub = function() {
  var sub__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15274_17488 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15275_17489 = null;
    var count__15276_17490 = 0;
    var i__15277_17491 = 0;
    while (true) {
      if (i__15277_17491 < count__15276_17490) {
        var arg__11908__auto___17492 = cljs.core._nth.call(null, chunk__15275_17489, i__15277_17491);
        a__11907__auto__.push(arg__11908__auto___17492);
        var G__17493 = seq__15274_17488;
        var G__17494 = chunk__15275_17489;
        var G__17495 = count__15276_17490;
        var G__17496 = i__15277_17491 + 1;
        seq__15274_17488 = G__17493;
        chunk__15275_17489 = G__17494;
        count__15276_17490 = G__17495;
        i__15277_17491 = G__17496;
        continue;
      } else {
        var temp__4092__auto___17497 = cljs.core.seq.call(null, seq__15274_17488);
        if (temp__4092__auto___17497) {
          var seq__15274_17498__$1 = temp__4092__auto___17497;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15274_17498__$1)) {
            var c__11077__auto___17499 = cljs.core.chunk_first.call(null, seq__15274_17498__$1);
            var G__17500 = cljs.core.chunk_rest.call(null, seq__15274_17498__$1);
            var G__17501 = c__11077__auto___17499;
            var G__17502 = cljs.core.count.call(null, c__11077__auto___17499);
            var G__17503 = 0;
            seq__15274_17488 = G__17500;
            chunk__15275_17489 = G__17501;
            count__15276_17490 = G__17502;
            i__15277_17491 = G__17503;
            continue;
          } else {
            var arg__11908__auto___17504 = cljs.core.first.call(null, seq__15274_17498__$1);
            a__11907__auto__.push(arg__11908__auto___17504);
            var G__17505 = cljs.core.next.call(null, seq__15274_17498__$1);
            var G__17506 = null;
            var G__17507 = 0;
            var G__17508 = 0;
            seq__15274_17488 = G__17505;
            chunk__15275_17489 = G__17506;
            count__15276_17490 = G__17507;
            i__15277_17491 = G__17508;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sub.apply(null, a__11907__auto__);
  };
  var sub = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sub__delegate.call(this, args__11906__auto__);
  };
  sub.cljs$lang$maxFixedArity = 0;
  sub.cljs$lang$applyTo = function(arglist__17509) {
    var args__11906__auto__ = cljs.core.seq(arglist__17509);
    return sub__delegate(args__11906__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
quiescent.dom.summary = function() {
  var summary__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15282_17510 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15283_17511 = null;
    var count__15284_17512 = 0;
    var i__15285_17513 = 0;
    while (true) {
      if (i__15285_17513 < count__15284_17512) {
        var arg__11908__auto___17514 = cljs.core._nth.call(null, chunk__15283_17511, i__15285_17513);
        a__11907__auto__.push(arg__11908__auto___17514);
        var G__17515 = seq__15282_17510;
        var G__17516 = chunk__15283_17511;
        var G__17517 = count__15284_17512;
        var G__17518 = i__15285_17513 + 1;
        seq__15282_17510 = G__17515;
        chunk__15283_17511 = G__17516;
        count__15284_17512 = G__17517;
        i__15285_17513 = G__17518;
        continue;
      } else {
        var temp__4092__auto___17519 = cljs.core.seq.call(null, seq__15282_17510);
        if (temp__4092__auto___17519) {
          var seq__15282_17520__$1 = temp__4092__auto___17519;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15282_17520__$1)) {
            var c__11077__auto___17521 = cljs.core.chunk_first.call(null, seq__15282_17520__$1);
            var G__17522 = cljs.core.chunk_rest.call(null, seq__15282_17520__$1);
            var G__17523 = c__11077__auto___17521;
            var G__17524 = cljs.core.count.call(null, c__11077__auto___17521);
            var G__17525 = 0;
            seq__15282_17510 = G__17522;
            chunk__15283_17511 = G__17523;
            count__15284_17512 = G__17524;
            i__15285_17513 = G__17525;
            continue;
          } else {
            var arg__11908__auto___17526 = cljs.core.first.call(null, seq__15282_17520__$1);
            a__11907__auto__.push(arg__11908__auto___17526);
            var G__17527 = cljs.core.next.call(null, seq__15282_17520__$1);
            var G__17528 = null;
            var G__17529 = 0;
            var G__17530 = 0;
            seq__15282_17510 = G__17527;
            chunk__15283_17511 = G__17528;
            count__15284_17512 = G__17529;
            i__15285_17513 = G__17530;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.summary.apply(null, a__11907__auto__);
  };
  var summary = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return summary__delegate.call(this, args__11906__auto__);
  };
  summary.cljs$lang$maxFixedArity = 0;
  summary.cljs$lang$applyTo = function(arglist__17531) {
    var args__11906__auto__ = cljs.core.seq(arglist__17531);
    return summary__delegate(args__11906__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
quiescent.dom.sup = function() {
  var sup__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15290_17532 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15291_17533 = null;
    var count__15292_17534 = 0;
    var i__15293_17535 = 0;
    while (true) {
      if (i__15293_17535 < count__15292_17534) {
        var arg__11908__auto___17536 = cljs.core._nth.call(null, chunk__15291_17533, i__15293_17535);
        a__11907__auto__.push(arg__11908__auto___17536);
        var G__17537 = seq__15290_17532;
        var G__17538 = chunk__15291_17533;
        var G__17539 = count__15292_17534;
        var G__17540 = i__15293_17535 + 1;
        seq__15290_17532 = G__17537;
        chunk__15291_17533 = G__17538;
        count__15292_17534 = G__17539;
        i__15293_17535 = G__17540;
        continue;
      } else {
        var temp__4092__auto___17541 = cljs.core.seq.call(null, seq__15290_17532);
        if (temp__4092__auto___17541) {
          var seq__15290_17542__$1 = temp__4092__auto___17541;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15290_17542__$1)) {
            var c__11077__auto___17543 = cljs.core.chunk_first.call(null, seq__15290_17542__$1);
            var G__17544 = cljs.core.chunk_rest.call(null, seq__15290_17542__$1);
            var G__17545 = c__11077__auto___17543;
            var G__17546 = cljs.core.count.call(null, c__11077__auto___17543);
            var G__17547 = 0;
            seq__15290_17532 = G__17544;
            chunk__15291_17533 = G__17545;
            count__15292_17534 = G__17546;
            i__15293_17535 = G__17547;
            continue;
          } else {
            var arg__11908__auto___17548 = cljs.core.first.call(null, seq__15290_17542__$1);
            a__11907__auto__.push(arg__11908__auto___17548);
            var G__17549 = cljs.core.next.call(null, seq__15290_17542__$1);
            var G__17550 = null;
            var G__17551 = 0;
            var G__17552 = 0;
            seq__15290_17532 = G__17549;
            chunk__15291_17533 = G__17550;
            count__15292_17534 = G__17551;
            i__15293_17535 = G__17552;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sup.apply(null, a__11907__auto__);
  };
  var sup = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sup__delegate.call(this, args__11906__auto__);
  };
  sup.cljs$lang$maxFixedArity = 0;
  sup.cljs$lang$applyTo = function(arglist__17553) {
    var args__11906__auto__ = cljs.core.seq(arglist__17553);
    return sup__delegate(args__11906__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
quiescent.dom.table = function() {
  var table__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15298_17554 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15299_17555 = null;
    var count__15300_17556 = 0;
    var i__15301_17557 = 0;
    while (true) {
      if (i__15301_17557 < count__15300_17556) {
        var arg__11908__auto___17558 = cljs.core._nth.call(null, chunk__15299_17555, i__15301_17557);
        a__11907__auto__.push(arg__11908__auto___17558);
        var G__17559 = seq__15298_17554;
        var G__17560 = chunk__15299_17555;
        var G__17561 = count__15300_17556;
        var G__17562 = i__15301_17557 + 1;
        seq__15298_17554 = G__17559;
        chunk__15299_17555 = G__17560;
        count__15300_17556 = G__17561;
        i__15301_17557 = G__17562;
        continue;
      } else {
        var temp__4092__auto___17563 = cljs.core.seq.call(null, seq__15298_17554);
        if (temp__4092__auto___17563) {
          var seq__15298_17564__$1 = temp__4092__auto___17563;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15298_17564__$1)) {
            var c__11077__auto___17565 = cljs.core.chunk_first.call(null, seq__15298_17564__$1);
            var G__17566 = cljs.core.chunk_rest.call(null, seq__15298_17564__$1);
            var G__17567 = c__11077__auto___17565;
            var G__17568 = cljs.core.count.call(null, c__11077__auto___17565);
            var G__17569 = 0;
            seq__15298_17554 = G__17566;
            chunk__15299_17555 = G__17567;
            count__15300_17556 = G__17568;
            i__15301_17557 = G__17569;
            continue;
          } else {
            var arg__11908__auto___17570 = cljs.core.first.call(null, seq__15298_17564__$1);
            a__11907__auto__.push(arg__11908__auto___17570);
            var G__17571 = cljs.core.next.call(null, seq__15298_17564__$1);
            var G__17572 = null;
            var G__17573 = 0;
            var G__17574 = 0;
            seq__15298_17554 = G__17571;
            chunk__15299_17555 = G__17572;
            count__15300_17556 = G__17573;
            i__15301_17557 = G__17574;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.table.apply(null, a__11907__auto__);
  };
  var table = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return table__delegate.call(this, args__11906__auto__);
  };
  table.cljs$lang$maxFixedArity = 0;
  table.cljs$lang$applyTo = function(arglist__17575) {
    var args__11906__auto__ = cljs.core.seq(arglist__17575);
    return table__delegate(args__11906__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
quiescent.dom.tbody = function() {
  var tbody__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15306_17576 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15307_17577 = null;
    var count__15308_17578 = 0;
    var i__15309_17579 = 0;
    while (true) {
      if (i__15309_17579 < count__15308_17578) {
        var arg__11908__auto___17580 = cljs.core._nth.call(null, chunk__15307_17577, i__15309_17579);
        a__11907__auto__.push(arg__11908__auto___17580);
        var G__17581 = seq__15306_17576;
        var G__17582 = chunk__15307_17577;
        var G__17583 = count__15308_17578;
        var G__17584 = i__15309_17579 + 1;
        seq__15306_17576 = G__17581;
        chunk__15307_17577 = G__17582;
        count__15308_17578 = G__17583;
        i__15309_17579 = G__17584;
        continue;
      } else {
        var temp__4092__auto___17585 = cljs.core.seq.call(null, seq__15306_17576);
        if (temp__4092__auto___17585) {
          var seq__15306_17586__$1 = temp__4092__auto___17585;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15306_17586__$1)) {
            var c__11077__auto___17587 = cljs.core.chunk_first.call(null, seq__15306_17586__$1);
            var G__17588 = cljs.core.chunk_rest.call(null, seq__15306_17586__$1);
            var G__17589 = c__11077__auto___17587;
            var G__17590 = cljs.core.count.call(null, c__11077__auto___17587);
            var G__17591 = 0;
            seq__15306_17576 = G__17588;
            chunk__15307_17577 = G__17589;
            count__15308_17578 = G__17590;
            i__15309_17579 = G__17591;
            continue;
          } else {
            var arg__11908__auto___17592 = cljs.core.first.call(null, seq__15306_17586__$1);
            a__11907__auto__.push(arg__11908__auto___17592);
            var G__17593 = cljs.core.next.call(null, seq__15306_17586__$1);
            var G__17594 = null;
            var G__17595 = 0;
            var G__17596 = 0;
            seq__15306_17576 = G__17593;
            chunk__15307_17577 = G__17594;
            count__15308_17578 = G__17595;
            i__15309_17579 = G__17596;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tbody.apply(null, a__11907__auto__);
  };
  var tbody = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tbody__delegate.call(this, args__11906__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 0;
  tbody.cljs$lang$applyTo = function(arglist__17597) {
    var args__11906__auto__ = cljs.core.seq(arglist__17597);
    return tbody__delegate(args__11906__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
quiescent.dom.td = function() {
  var td__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15314_17598 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15315_17599 = null;
    var count__15316_17600 = 0;
    var i__15317_17601 = 0;
    while (true) {
      if (i__15317_17601 < count__15316_17600) {
        var arg__11908__auto___17602 = cljs.core._nth.call(null, chunk__15315_17599, i__15317_17601);
        a__11907__auto__.push(arg__11908__auto___17602);
        var G__17603 = seq__15314_17598;
        var G__17604 = chunk__15315_17599;
        var G__17605 = count__15316_17600;
        var G__17606 = i__15317_17601 + 1;
        seq__15314_17598 = G__17603;
        chunk__15315_17599 = G__17604;
        count__15316_17600 = G__17605;
        i__15317_17601 = G__17606;
        continue;
      } else {
        var temp__4092__auto___17607 = cljs.core.seq.call(null, seq__15314_17598);
        if (temp__4092__auto___17607) {
          var seq__15314_17608__$1 = temp__4092__auto___17607;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15314_17608__$1)) {
            var c__11077__auto___17609 = cljs.core.chunk_first.call(null, seq__15314_17608__$1);
            var G__17610 = cljs.core.chunk_rest.call(null, seq__15314_17608__$1);
            var G__17611 = c__11077__auto___17609;
            var G__17612 = cljs.core.count.call(null, c__11077__auto___17609);
            var G__17613 = 0;
            seq__15314_17598 = G__17610;
            chunk__15315_17599 = G__17611;
            count__15316_17600 = G__17612;
            i__15317_17601 = G__17613;
            continue;
          } else {
            var arg__11908__auto___17614 = cljs.core.first.call(null, seq__15314_17608__$1);
            a__11907__auto__.push(arg__11908__auto___17614);
            var G__17615 = cljs.core.next.call(null, seq__15314_17608__$1);
            var G__17616 = null;
            var G__17617 = 0;
            var G__17618 = 0;
            seq__15314_17598 = G__17615;
            chunk__15315_17599 = G__17616;
            count__15316_17600 = G__17617;
            i__15317_17601 = G__17618;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.td.apply(null, a__11907__auto__);
  };
  var td = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return td__delegate.call(this, args__11906__auto__);
  };
  td.cljs$lang$maxFixedArity = 0;
  td.cljs$lang$applyTo = function(arglist__17619) {
    var args__11906__auto__ = cljs.core.seq(arglist__17619);
    return td__delegate(args__11906__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
quiescent.dom.textarea = function() {
  var textarea__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15322_17620 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15323_17621 = null;
    var count__15324_17622 = 0;
    var i__15325_17623 = 0;
    while (true) {
      if (i__15325_17623 < count__15324_17622) {
        var arg__11908__auto___17624 = cljs.core._nth.call(null, chunk__15323_17621, i__15325_17623);
        a__11907__auto__.push(arg__11908__auto___17624);
        var G__17625 = seq__15322_17620;
        var G__17626 = chunk__15323_17621;
        var G__17627 = count__15324_17622;
        var G__17628 = i__15325_17623 + 1;
        seq__15322_17620 = G__17625;
        chunk__15323_17621 = G__17626;
        count__15324_17622 = G__17627;
        i__15325_17623 = G__17628;
        continue;
      } else {
        var temp__4092__auto___17629 = cljs.core.seq.call(null, seq__15322_17620);
        if (temp__4092__auto___17629) {
          var seq__15322_17630__$1 = temp__4092__auto___17629;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15322_17630__$1)) {
            var c__11077__auto___17631 = cljs.core.chunk_first.call(null, seq__15322_17630__$1);
            var G__17632 = cljs.core.chunk_rest.call(null, seq__15322_17630__$1);
            var G__17633 = c__11077__auto___17631;
            var G__17634 = cljs.core.count.call(null, c__11077__auto___17631);
            var G__17635 = 0;
            seq__15322_17620 = G__17632;
            chunk__15323_17621 = G__17633;
            count__15324_17622 = G__17634;
            i__15325_17623 = G__17635;
            continue;
          } else {
            var arg__11908__auto___17636 = cljs.core.first.call(null, seq__15322_17630__$1);
            a__11907__auto__.push(arg__11908__auto___17636);
            var G__17637 = cljs.core.next.call(null, seq__15322_17630__$1);
            var G__17638 = null;
            var G__17639 = 0;
            var G__17640 = 0;
            seq__15322_17620 = G__17637;
            chunk__15323_17621 = G__17638;
            count__15324_17622 = G__17639;
            i__15325_17623 = G__17640;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.textarea.apply(null, a__11907__auto__);
  };
  var textarea = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return textarea__delegate.call(this, args__11906__auto__);
  };
  textarea.cljs$lang$maxFixedArity = 0;
  textarea.cljs$lang$applyTo = function(arglist__17641) {
    var args__11906__auto__ = cljs.core.seq(arglist__17641);
    return textarea__delegate(args__11906__auto__);
  };
  textarea.cljs$core$IFn$_invoke$arity$variadic = textarea__delegate;
  return textarea;
}();
quiescent.dom.tfoot = function() {
  var tfoot__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15330_17642 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15331_17643 = null;
    var count__15332_17644 = 0;
    var i__15333_17645 = 0;
    while (true) {
      if (i__15333_17645 < count__15332_17644) {
        var arg__11908__auto___17646 = cljs.core._nth.call(null, chunk__15331_17643, i__15333_17645);
        a__11907__auto__.push(arg__11908__auto___17646);
        var G__17647 = seq__15330_17642;
        var G__17648 = chunk__15331_17643;
        var G__17649 = count__15332_17644;
        var G__17650 = i__15333_17645 + 1;
        seq__15330_17642 = G__17647;
        chunk__15331_17643 = G__17648;
        count__15332_17644 = G__17649;
        i__15333_17645 = G__17650;
        continue;
      } else {
        var temp__4092__auto___17651 = cljs.core.seq.call(null, seq__15330_17642);
        if (temp__4092__auto___17651) {
          var seq__15330_17652__$1 = temp__4092__auto___17651;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15330_17652__$1)) {
            var c__11077__auto___17653 = cljs.core.chunk_first.call(null, seq__15330_17652__$1);
            var G__17654 = cljs.core.chunk_rest.call(null, seq__15330_17652__$1);
            var G__17655 = c__11077__auto___17653;
            var G__17656 = cljs.core.count.call(null, c__11077__auto___17653);
            var G__17657 = 0;
            seq__15330_17642 = G__17654;
            chunk__15331_17643 = G__17655;
            count__15332_17644 = G__17656;
            i__15333_17645 = G__17657;
            continue;
          } else {
            var arg__11908__auto___17658 = cljs.core.first.call(null, seq__15330_17652__$1);
            a__11907__auto__.push(arg__11908__auto___17658);
            var G__17659 = cljs.core.next.call(null, seq__15330_17652__$1);
            var G__17660 = null;
            var G__17661 = 0;
            var G__17662 = 0;
            seq__15330_17642 = G__17659;
            chunk__15331_17643 = G__17660;
            count__15332_17644 = G__17661;
            i__15333_17645 = G__17662;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tfoot.apply(null, a__11907__auto__);
  };
  var tfoot = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tfoot__delegate.call(this, args__11906__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 0;
  tfoot.cljs$lang$applyTo = function(arglist__17663) {
    var args__11906__auto__ = cljs.core.seq(arglist__17663);
    return tfoot__delegate(args__11906__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
quiescent.dom.th = function() {
  var th__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15338_17664 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15339_17665 = null;
    var count__15340_17666 = 0;
    var i__15341_17667 = 0;
    while (true) {
      if (i__15341_17667 < count__15340_17666) {
        var arg__11908__auto___17668 = cljs.core._nth.call(null, chunk__15339_17665, i__15341_17667);
        a__11907__auto__.push(arg__11908__auto___17668);
        var G__17669 = seq__15338_17664;
        var G__17670 = chunk__15339_17665;
        var G__17671 = count__15340_17666;
        var G__17672 = i__15341_17667 + 1;
        seq__15338_17664 = G__17669;
        chunk__15339_17665 = G__17670;
        count__15340_17666 = G__17671;
        i__15341_17667 = G__17672;
        continue;
      } else {
        var temp__4092__auto___17673 = cljs.core.seq.call(null, seq__15338_17664);
        if (temp__4092__auto___17673) {
          var seq__15338_17674__$1 = temp__4092__auto___17673;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15338_17674__$1)) {
            var c__11077__auto___17675 = cljs.core.chunk_first.call(null, seq__15338_17674__$1);
            var G__17676 = cljs.core.chunk_rest.call(null, seq__15338_17674__$1);
            var G__17677 = c__11077__auto___17675;
            var G__17678 = cljs.core.count.call(null, c__11077__auto___17675);
            var G__17679 = 0;
            seq__15338_17664 = G__17676;
            chunk__15339_17665 = G__17677;
            count__15340_17666 = G__17678;
            i__15341_17667 = G__17679;
            continue;
          } else {
            var arg__11908__auto___17680 = cljs.core.first.call(null, seq__15338_17674__$1);
            a__11907__auto__.push(arg__11908__auto___17680);
            var G__17681 = cljs.core.next.call(null, seq__15338_17674__$1);
            var G__17682 = null;
            var G__17683 = 0;
            var G__17684 = 0;
            seq__15338_17664 = G__17681;
            chunk__15339_17665 = G__17682;
            count__15340_17666 = G__17683;
            i__15341_17667 = G__17684;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.th.apply(null, a__11907__auto__);
  };
  var th = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return th__delegate.call(this, args__11906__auto__);
  };
  th.cljs$lang$maxFixedArity = 0;
  th.cljs$lang$applyTo = function(arglist__17685) {
    var args__11906__auto__ = cljs.core.seq(arglist__17685);
    return th__delegate(args__11906__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
quiescent.dom.thead = function() {
  var thead__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15346_17686 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15347_17687 = null;
    var count__15348_17688 = 0;
    var i__15349_17689 = 0;
    while (true) {
      if (i__15349_17689 < count__15348_17688) {
        var arg__11908__auto___17690 = cljs.core._nth.call(null, chunk__15347_17687, i__15349_17689);
        a__11907__auto__.push(arg__11908__auto___17690);
        var G__17691 = seq__15346_17686;
        var G__17692 = chunk__15347_17687;
        var G__17693 = count__15348_17688;
        var G__17694 = i__15349_17689 + 1;
        seq__15346_17686 = G__17691;
        chunk__15347_17687 = G__17692;
        count__15348_17688 = G__17693;
        i__15349_17689 = G__17694;
        continue;
      } else {
        var temp__4092__auto___17695 = cljs.core.seq.call(null, seq__15346_17686);
        if (temp__4092__auto___17695) {
          var seq__15346_17696__$1 = temp__4092__auto___17695;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15346_17696__$1)) {
            var c__11077__auto___17697 = cljs.core.chunk_first.call(null, seq__15346_17696__$1);
            var G__17698 = cljs.core.chunk_rest.call(null, seq__15346_17696__$1);
            var G__17699 = c__11077__auto___17697;
            var G__17700 = cljs.core.count.call(null, c__11077__auto___17697);
            var G__17701 = 0;
            seq__15346_17686 = G__17698;
            chunk__15347_17687 = G__17699;
            count__15348_17688 = G__17700;
            i__15349_17689 = G__17701;
            continue;
          } else {
            var arg__11908__auto___17702 = cljs.core.first.call(null, seq__15346_17696__$1);
            a__11907__auto__.push(arg__11908__auto___17702);
            var G__17703 = cljs.core.next.call(null, seq__15346_17696__$1);
            var G__17704 = null;
            var G__17705 = 0;
            var G__17706 = 0;
            seq__15346_17686 = G__17703;
            chunk__15347_17687 = G__17704;
            count__15348_17688 = G__17705;
            i__15349_17689 = G__17706;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.thead.apply(null, a__11907__auto__);
  };
  var thead = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return thead__delegate.call(this, args__11906__auto__);
  };
  thead.cljs$lang$maxFixedArity = 0;
  thead.cljs$lang$applyTo = function(arglist__17707) {
    var args__11906__auto__ = cljs.core.seq(arglist__17707);
    return thead__delegate(args__11906__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
quiescent.dom.time = function() {
  var time__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15354_17708 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15355_17709 = null;
    var count__15356_17710 = 0;
    var i__15357_17711 = 0;
    while (true) {
      if (i__15357_17711 < count__15356_17710) {
        var arg__11908__auto___17712 = cljs.core._nth.call(null, chunk__15355_17709, i__15357_17711);
        a__11907__auto__.push(arg__11908__auto___17712);
        var G__17713 = seq__15354_17708;
        var G__17714 = chunk__15355_17709;
        var G__17715 = count__15356_17710;
        var G__17716 = i__15357_17711 + 1;
        seq__15354_17708 = G__17713;
        chunk__15355_17709 = G__17714;
        count__15356_17710 = G__17715;
        i__15357_17711 = G__17716;
        continue;
      } else {
        var temp__4092__auto___17717 = cljs.core.seq.call(null, seq__15354_17708);
        if (temp__4092__auto___17717) {
          var seq__15354_17718__$1 = temp__4092__auto___17717;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15354_17718__$1)) {
            var c__11077__auto___17719 = cljs.core.chunk_first.call(null, seq__15354_17718__$1);
            var G__17720 = cljs.core.chunk_rest.call(null, seq__15354_17718__$1);
            var G__17721 = c__11077__auto___17719;
            var G__17722 = cljs.core.count.call(null, c__11077__auto___17719);
            var G__17723 = 0;
            seq__15354_17708 = G__17720;
            chunk__15355_17709 = G__17721;
            count__15356_17710 = G__17722;
            i__15357_17711 = G__17723;
            continue;
          } else {
            var arg__11908__auto___17724 = cljs.core.first.call(null, seq__15354_17718__$1);
            a__11907__auto__.push(arg__11908__auto___17724);
            var G__17725 = cljs.core.next.call(null, seq__15354_17718__$1);
            var G__17726 = null;
            var G__17727 = 0;
            var G__17728 = 0;
            seq__15354_17708 = G__17725;
            chunk__15355_17709 = G__17726;
            count__15356_17710 = G__17727;
            i__15357_17711 = G__17728;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.time.apply(null, a__11907__auto__);
  };
  var time = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return time__delegate.call(this, args__11906__auto__);
  };
  time.cljs$lang$maxFixedArity = 0;
  time.cljs$lang$applyTo = function(arglist__17729) {
    var args__11906__auto__ = cljs.core.seq(arglist__17729);
    return time__delegate(args__11906__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
quiescent.dom.title = function() {
  var title__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15362_17730 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15363_17731 = null;
    var count__15364_17732 = 0;
    var i__15365_17733 = 0;
    while (true) {
      if (i__15365_17733 < count__15364_17732) {
        var arg__11908__auto___17734 = cljs.core._nth.call(null, chunk__15363_17731, i__15365_17733);
        a__11907__auto__.push(arg__11908__auto___17734);
        var G__17735 = seq__15362_17730;
        var G__17736 = chunk__15363_17731;
        var G__17737 = count__15364_17732;
        var G__17738 = i__15365_17733 + 1;
        seq__15362_17730 = G__17735;
        chunk__15363_17731 = G__17736;
        count__15364_17732 = G__17737;
        i__15365_17733 = G__17738;
        continue;
      } else {
        var temp__4092__auto___17739 = cljs.core.seq.call(null, seq__15362_17730);
        if (temp__4092__auto___17739) {
          var seq__15362_17740__$1 = temp__4092__auto___17739;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15362_17740__$1)) {
            var c__11077__auto___17741 = cljs.core.chunk_first.call(null, seq__15362_17740__$1);
            var G__17742 = cljs.core.chunk_rest.call(null, seq__15362_17740__$1);
            var G__17743 = c__11077__auto___17741;
            var G__17744 = cljs.core.count.call(null, c__11077__auto___17741);
            var G__17745 = 0;
            seq__15362_17730 = G__17742;
            chunk__15363_17731 = G__17743;
            count__15364_17732 = G__17744;
            i__15365_17733 = G__17745;
            continue;
          } else {
            var arg__11908__auto___17746 = cljs.core.first.call(null, seq__15362_17740__$1);
            a__11907__auto__.push(arg__11908__auto___17746);
            var G__17747 = cljs.core.next.call(null, seq__15362_17740__$1);
            var G__17748 = null;
            var G__17749 = 0;
            var G__17750 = 0;
            seq__15362_17730 = G__17747;
            chunk__15363_17731 = G__17748;
            count__15364_17732 = G__17749;
            i__15365_17733 = G__17750;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.title.apply(null, a__11907__auto__);
  };
  var title = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return title__delegate.call(this, args__11906__auto__);
  };
  title.cljs$lang$maxFixedArity = 0;
  title.cljs$lang$applyTo = function(arglist__17751) {
    var args__11906__auto__ = cljs.core.seq(arglist__17751);
    return title__delegate(args__11906__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
quiescent.dom.tr = function() {
  var tr__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15370_17752 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15371_17753 = null;
    var count__15372_17754 = 0;
    var i__15373_17755 = 0;
    while (true) {
      if (i__15373_17755 < count__15372_17754) {
        var arg__11908__auto___17756 = cljs.core._nth.call(null, chunk__15371_17753, i__15373_17755);
        a__11907__auto__.push(arg__11908__auto___17756);
        var G__17757 = seq__15370_17752;
        var G__17758 = chunk__15371_17753;
        var G__17759 = count__15372_17754;
        var G__17760 = i__15373_17755 + 1;
        seq__15370_17752 = G__17757;
        chunk__15371_17753 = G__17758;
        count__15372_17754 = G__17759;
        i__15373_17755 = G__17760;
        continue;
      } else {
        var temp__4092__auto___17761 = cljs.core.seq.call(null, seq__15370_17752);
        if (temp__4092__auto___17761) {
          var seq__15370_17762__$1 = temp__4092__auto___17761;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15370_17762__$1)) {
            var c__11077__auto___17763 = cljs.core.chunk_first.call(null, seq__15370_17762__$1);
            var G__17764 = cljs.core.chunk_rest.call(null, seq__15370_17762__$1);
            var G__17765 = c__11077__auto___17763;
            var G__17766 = cljs.core.count.call(null, c__11077__auto___17763);
            var G__17767 = 0;
            seq__15370_17752 = G__17764;
            chunk__15371_17753 = G__17765;
            count__15372_17754 = G__17766;
            i__15373_17755 = G__17767;
            continue;
          } else {
            var arg__11908__auto___17768 = cljs.core.first.call(null, seq__15370_17762__$1);
            a__11907__auto__.push(arg__11908__auto___17768);
            var G__17769 = cljs.core.next.call(null, seq__15370_17762__$1);
            var G__17770 = null;
            var G__17771 = 0;
            var G__17772 = 0;
            seq__15370_17752 = G__17769;
            chunk__15371_17753 = G__17770;
            count__15372_17754 = G__17771;
            i__15373_17755 = G__17772;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tr.apply(null, a__11907__auto__);
  };
  var tr = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tr__delegate.call(this, args__11906__auto__);
  };
  tr.cljs$lang$maxFixedArity = 0;
  tr.cljs$lang$applyTo = function(arglist__17773) {
    var args__11906__auto__ = cljs.core.seq(arglist__17773);
    return tr__delegate(args__11906__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
quiescent.dom.track = function() {
  var track__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15378_17774 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15379_17775 = null;
    var count__15380_17776 = 0;
    var i__15381_17777 = 0;
    while (true) {
      if (i__15381_17777 < count__15380_17776) {
        var arg__11908__auto___17778 = cljs.core._nth.call(null, chunk__15379_17775, i__15381_17777);
        a__11907__auto__.push(arg__11908__auto___17778);
        var G__17779 = seq__15378_17774;
        var G__17780 = chunk__15379_17775;
        var G__17781 = count__15380_17776;
        var G__17782 = i__15381_17777 + 1;
        seq__15378_17774 = G__17779;
        chunk__15379_17775 = G__17780;
        count__15380_17776 = G__17781;
        i__15381_17777 = G__17782;
        continue;
      } else {
        var temp__4092__auto___17783 = cljs.core.seq.call(null, seq__15378_17774);
        if (temp__4092__auto___17783) {
          var seq__15378_17784__$1 = temp__4092__auto___17783;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15378_17784__$1)) {
            var c__11077__auto___17785 = cljs.core.chunk_first.call(null, seq__15378_17784__$1);
            var G__17786 = cljs.core.chunk_rest.call(null, seq__15378_17784__$1);
            var G__17787 = c__11077__auto___17785;
            var G__17788 = cljs.core.count.call(null, c__11077__auto___17785);
            var G__17789 = 0;
            seq__15378_17774 = G__17786;
            chunk__15379_17775 = G__17787;
            count__15380_17776 = G__17788;
            i__15381_17777 = G__17789;
            continue;
          } else {
            var arg__11908__auto___17790 = cljs.core.first.call(null, seq__15378_17784__$1);
            a__11907__auto__.push(arg__11908__auto___17790);
            var G__17791 = cljs.core.next.call(null, seq__15378_17784__$1);
            var G__17792 = null;
            var G__17793 = 0;
            var G__17794 = 0;
            seq__15378_17774 = G__17791;
            chunk__15379_17775 = G__17792;
            count__15380_17776 = G__17793;
            i__15381_17777 = G__17794;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.track.apply(null, a__11907__auto__);
  };
  var track = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return track__delegate.call(this, args__11906__auto__);
  };
  track.cljs$lang$maxFixedArity = 0;
  track.cljs$lang$applyTo = function(arglist__17795) {
    var args__11906__auto__ = cljs.core.seq(arglist__17795);
    return track__delegate(args__11906__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
quiescent.dom.u = function() {
  var u__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15386_17796 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15387_17797 = null;
    var count__15388_17798 = 0;
    var i__15389_17799 = 0;
    while (true) {
      if (i__15389_17799 < count__15388_17798) {
        var arg__11908__auto___17800 = cljs.core._nth.call(null, chunk__15387_17797, i__15389_17799);
        a__11907__auto__.push(arg__11908__auto___17800);
        var G__17801 = seq__15386_17796;
        var G__17802 = chunk__15387_17797;
        var G__17803 = count__15388_17798;
        var G__17804 = i__15389_17799 + 1;
        seq__15386_17796 = G__17801;
        chunk__15387_17797 = G__17802;
        count__15388_17798 = G__17803;
        i__15389_17799 = G__17804;
        continue;
      } else {
        var temp__4092__auto___17805 = cljs.core.seq.call(null, seq__15386_17796);
        if (temp__4092__auto___17805) {
          var seq__15386_17806__$1 = temp__4092__auto___17805;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15386_17806__$1)) {
            var c__11077__auto___17807 = cljs.core.chunk_first.call(null, seq__15386_17806__$1);
            var G__17808 = cljs.core.chunk_rest.call(null, seq__15386_17806__$1);
            var G__17809 = c__11077__auto___17807;
            var G__17810 = cljs.core.count.call(null, c__11077__auto___17807);
            var G__17811 = 0;
            seq__15386_17796 = G__17808;
            chunk__15387_17797 = G__17809;
            count__15388_17798 = G__17810;
            i__15389_17799 = G__17811;
            continue;
          } else {
            var arg__11908__auto___17812 = cljs.core.first.call(null, seq__15386_17806__$1);
            a__11907__auto__.push(arg__11908__auto___17812);
            var G__17813 = cljs.core.next.call(null, seq__15386_17806__$1);
            var G__17814 = null;
            var G__17815 = 0;
            var G__17816 = 0;
            seq__15386_17796 = G__17813;
            chunk__15387_17797 = G__17814;
            count__15388_17798 = G__17815;
            i__15389_17799 = G__17816;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.u.apply(null, a__11907__auto__);
  };
  var u = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return u__delegate.call(this, args__11906__auto__);
  };
  u.cljs$lang$maxFixedArity = 0;
  u.cljs$lang$applyTo = function(arglist__17817) {
    var args__11906__auto__ = cljs.core.seq(arglist__17817);
    return u__delegate(args__11906__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
quiescent.dom.ul = function() {
  var ul__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15394_17818 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15395_17819 = null;
    var count__15396_17820 = 0;
    var i__15397_17821 = 0;
    while (true) {
      if (i__15397_17821 < count__15396_17820) {
        var arg__11908__auto___17822 = cljs.core._nth.call(null, chunk__15395_17819, i__15397_17821);
        a__11907__auto__.push(arg__11908__auto___17822);
        var G__17823 = seq__15394_17818;
        var G__17824 = chunk__15395_17819;
        var G__17825 = count__15396_17820;
        var G__17826 = i__15397_17821 + 1;
        seq__15394_17818 = G__17823;
        chunk__15395_17819 = G__17824;
        count__15396_17820 = G__17825;
        i__15397_17821 = G__17826;
        continue;
      } else {
        var temp__4092__auto___17827 = cljs.core.seq.call(null, seq__15394_17818);
        if (temp__4092__auto___17827) {
          var seq__15394_17828__$1 = temp__4092__auto___17827;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15394_17828__$1)) {
            var c__11077__auto___17829 = cljs.core.chunk_first.call(null, seq__15394_17828__$1);
            var G__17830 = cljs.core.chunk_rest.call(null, seq__15394_17828__$1);
            var G__17831 = c__11077__auto___17829;
            var G__17832 = cljs.core.count.call(null, c__11077__auto___17829);
            var G__17833 = 0;
            seq__15394_17818 = G__17830;
            chunk__15395_17819 = G__17831;
            count__15396_17820 = G__17832;
            i__15397_17821 = G__17833;
            continue;
          } else {
            var arg__11908__auto___17834 = cljs.core.first.call(null, seq__15394_17828__$1);
            a__11907__auto__.push(arg__11908__auto___17834);
            var G__17835 = cljs.core.next.call(null, seq__15394_17828__$1);
            var G__17836 = null;
            var G__17837 = 0;
            var G__17838 = 0;
            seq__15394_17818 = G__17835;
            chunk__15395_17819 = G__17836;
            count__15396_17820 = G__17837;
            i__15397_17821 = G__17838;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ul.apply(null, a__11907__auto__);
  };
  var ul = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ul__delegate.call(this, args__11906__auto__);
  };
  ul.cljs$lang$maxFixedArity = 0;
  ul.cljs$lang$applyTo = function(arglist__17839) {
    var args__11906__auto__ = cljs.core.seq(arglist__17839);
    return ul__delegate(args__11906__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
quiescent.dom.var$ = function() {
  var var$__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15402_17840 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15403_17841 = null;
    var count__15404_17842 = 0;
    var i__15405_17843 = 0;
    while (true) {
      if (i__15405_17843 < count__15404_17842) {
        var arg__11908__auto___17844 = cljs.core._nth.call(null, chunk__15403_17841, i__15405_17843);
        a__11907__auto__.push(arg__11908__auto___17844);
        var G__17845 = seq__15402_17840;
        var G__17846 = chunk__15403_17841;
        var G__17847 = count__15404_17842;
        var G__17848 = i__15405_17843 + 1;
        seq__15402_17840 = G__17845;
        chunk__15403_17841 = G__17846;
        count__15404_17842 = G__17847;
        i__15405_17843 = G__17848;
        continue;
      } else {
        var temp__4092__auto___17849 = cljs.core.seq.call(null, seq__15402_17840);
        if (temp__4092__auto___17849) {
          var seq__15402_17850__$1 = temp__4092__auto___17849;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15402_17850__$1)) {
            var c__11077__auto___17851 = cljs.core.chunk_first.call(null, seq__15402_17850__$1);
            var G__17852 = cljs.core.chunk_rest.call(null, seq__15402_17850__$1);
            var G__17853 = c__11077__auto___17851;
            var G__17854 = cljs.core.count.call(null, c__11077__auto___17851);
            var G__17855 = 0;
            seq__15402_17840 = G__17852;
            chunk__15403_17841 = G__17853;
            count__15404_17842 = G__17854;
            i__15405_17843 = G__17855;
            continue;
          } else {
            var arg__11908__auto___17856 = cljs.core.first.call(null, seq__15402_17850__$1);
            a__11907__auto__.push(arg__11908__auto___17856);
            var G__17857 = cljs.core.next.call(null, seq__15402_17850__$1);
            var G__17858 = null;
            var G__17859 = 0;
            var G__17860 = 0;
            seq__15402_17840 = G__17857;
            chunk__15403_17841 = G__17858;
            count__15404_17842 = G__17859;
            i__15405_17843 = G__17860;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.var$.apply(null, a__11907__auto__);
  };
  var var$ = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return var$__delegate.call(this, args__11906__auto__);
  };
  var$.cljs$lang$maxFixedArity = 0;
  var$.cljs$lang$applyTo = function(arglist__17861) {
    var args__11906__auto__ = cljs.core.seq(arglist__17861);
    return var$__delegate(args__11906__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
quiescent.dom.video = function() {
  var video__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15410_17862 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15411_17863 = null;
    var count__15412_17864 = 0;
    var i__15413_17865 = 0;
    while (true) {
      if (i__15413_17865 < count__15412_17864) {
        var arg__11908__auto___17866 = cljs.core._nth.call(null, chunk__15411_17863, i__15413_17865);
        a__11907__auto__.push(arg__11908__auto___17866);
        var G__17867 = seq__15410_17862;
        var G__17868 = chunk__15411_17863;
        var G__17869 = count__15412_17864;
        var G__17870 = i__15413_17865 + 1;
        seq__15410_17862 = G__17867;
        chunk__15411_17863 = G__17868;
        count__15412_17864 = G__17869;
        i__15413_17865 = G__17870;
        continue;
      } else {
        var temp__4092__auto___17871 = cljs.core.seq.call(null, seq__15410_17862);
        if (temp__4092__auto___17871) {
          var seq__15410_17872__$1 = temp__4092__auto___17871;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15410_17872__$1)) {
            var c__11077__auto___17873 = cljs.core.chunk_first.call(null, seq__15410_17872__$1);
            var G__17874 = cljs.core.chunk_rest.call(null, seq__15410_17872__$1);
            var G__17875 = c__11077__auto___17873;
            var G__17876 = cljs.core.count.call(null, c__11077__auto___17873);
            var G__17877 = 0;
            seq__15410_17862 = G__17874;
            chunk__15411_17863 = G__17875;
            count__15412_17864 = G__17876;
            i__15413_17865 = G__17877;
            continue;
          } else {
            var arg__11908__auto___17878 = cljs.core.first.call(null, seq__15410_17872__$1);
            a__11907__auto__.push(arg__11908__auto___17878);
            var G__17879 = cljs.core.next.call(null, seq__15410_17872__$1);
            var G__17880 = null;
            var G__17881 = 0;
            var G__17882 = 0;
            seq__15410_17862 = G__17879;
            chunk__15411_17863 = G__17880;
            count__15412_17864 = G__17881;
            i__15413_17865 = G__17882;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.video.apply(null, a__11907__auto__);
  };
  var video = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return video__delegate.call(this, args__11906__auto__);
  };
  video.cljs$lang$maxFixedArity = 0;
  video.cljs$lang$applyTo = function(arglist__17883) {
    var args__11906__auto__ = cljs.core.seq(arglist__17883);
    return video__delegate(args__11906__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
quiescent.dom.wbr = function() {
  var wbr__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15418_17884 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15419_17885 = null;
    var count__15420_17886 = 0;
    var i__15421_17887 = 0;
    while (true) {
      if (i__15421_17887 < count__15420_17886) {
        var arg__11908__auto___17888 = cljs.core._nth.call(null, chunk__15419_17885, i__15421_17887);
        a__11907__auto__.push(arg__11908__auto___17888);
        var G__17889 = seq__15418_17884;
        var G__17890 = chunk__15419_17885;
        var G__17891 = count__15420_17886;
        var G__17892 = i__15421_17887 + 1;
        seq__15418_17884 = G__17889;
        chunk__15419_17885 = G__17890;
        count__15420_17886 = G__17891;
        i__15421_17887 = G__17892;
        continue;
      } else {
        var temp__4092__auto___17893 = cljs.core.seq.call(null, seq__15418_17884);
        if (temp__4092__auto___17893) {
          var seq__15418_17894__$1 = temp__4092__auto___17893;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15418_17894__$1)) {
            var c__11077__auto___17895 = cljs.core.chunk_first.call(null, seq__15418_17894__$1);
            var G__17896 = cljs.core.chunk_rest.call(null, seq__15418_17894__$1);
            var G__17897 = c__11077__auto___17895;
            var G__17898 = cljs.core.count.call(null, c__11077__auto___17895);
            var G__17899 = 0;
            seq__15418_17884 = G__17896;
            chunk__15419_17885 = G__17897;
            count__15420_17886 = G__17898;
            i__15421_17887 = G__17899;
            continue;
          } else {
            var arg__11908__auto___17900 = cljs.core.first.call(null, seq__15418_17894__$1);
            a__11907__auto__.push(arg__11908__auto___17900);
            var G__17901 = cljs.core.next.call(null, seq__15418_17894__$1);
            var G__17902 = null;
            var G__17903 = 0;
            var G__17904 = 0;
            seq__15418_17884 = G__17901;
            chunk__15419_17885 = G__17902;
            count__15420_17886 = G__17903;
            i__15421_17887 = G__17904;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.wbr.apply(null, a__11907__auto__);
  };
  var wbr = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return wbr__delegate.call(this, args__11906__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 0;
  wbr.cljs$lang$applyTo = function(arglist__17905) {
    var args__11906__auto__ = cljs.core.seq(arglist__17905);
    return wbr__delegate(args__11906__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
quiescent.dom.circle = function() {
  var circle__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15426_17906 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15427_17907 = null;
    var count__15428_17908 = 0;
    var i__15429_17909 = 0;
    while (true) {
      if (i__15429_17909 < count__15428_17908) {
        var arg__11908__auto___17910 = cljs.core._nth.call(null, chunk__15427_17907, i__15429_17909);
        a__11907__auto__.push(arg__11908__auto___17910);
        var G__17911 = seq__15426_17906;
        var G__17912 = chunk__15427_17907;
        var G__17913 = count__15428_17908;
        var G__17914 = i__15429_17909 + 1;
        seq__15426_17906 = G__17911;
        chunk__15427_17907 = G__17912;
        count__15428_17908 = G__17913;
        i__15429_17909 = G__17914;
        continue;
      } else {
        var temp__4092__auto___17915 = cljs.core.seq.call(null, seq__15426_17906);
        if (temp__4092__auto___17915) {
          var seq__15426_17916__$1 = temp__4092__auto___17915;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15426_17916__$1)) {
            var c__11077__auto___17917 = cljs.core.chunk_first.call(null, seq__15426_17916__$1);
            var G__17918 = cljs.core.chunk_rest.call(null, seq__15426_17916__$1);
            var G__17919 = c__11077__auto___17917;
            var G__17920 = cljs.core.count.call(null, c__11077__auto___17917);
            var G__17921 = 0;
            seq__15426_17906 = G__17918;
            chunk__15427_17907 = G__17919;
            count__15428_17908 = G__17920;
            i__15429_17909 = G__17921;
            continue;
          } else {
            var arg__11908__auto___17922 = cljs.core.first.call(null, seq__15426_17916__$1);
            a__11907__auto__.push(arg__11908__auto___17922);
            var G__17923 = cljs.core.next.call(null, seq__15426_17916__$1);
            var G__17924 = null;
            var G__17925 = 0;
            var G__17926 = 0;
            seq__15426_17906 = G__17923;
            chunk__15427_17907 = G__17924;
            count__15428_17908 = G__17925;
            i__15429_17909 = G__17926;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.circle.apply(null, a__11907__auto__);
  };
  var circle = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return circle__delegate.call(this, args__11906__auto__);
  };
  circle.cljs$lang$maxFixedArity = 0;
  circle.cljs$lang$applyTo = function(arglist__17927) {
    var args__11906__auto__ = cljs.core.seq(arglist__17927);
    return circle__delegate(args__11906__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
quiescent.dom.g = function() {
  var g__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15434_17928 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15435_17929 = null;
    var count__15436_17930 = 0;
    var i__15437_17931 = 0;
    while (true) {
      if (i__15437_17931 < count__15436_17930) {
        var arg__11908__auto___17932 = cljs.core._nth.call(null, chunk__15435_17929, i__15437_17931);
        a__11907__auto__.push(arg__11908__auto___17932);
        var G__17933 = seq__15434_17928;
        var G__17934 = chunk__15435_17929;
        var G__17935 = count__15436_17930;
        var G__17936 = i__15437_17931 + 1;
        seq__15434_17928 = G__17933;
        chunk__15435_17929 = G__17934;
        count__15436_17930 = G__17935;
        i__15437_17931 = G__17936;
        continue;
      } else {
        var temp__4092__auto___17937 = cljs.core.seq.call(null, seq__15434_17928);
        if (temp__4092__auto___17937) {
          var seq__15434_17938__$1 = temp__4092__auto___17937;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15434_17938__$1)) {
            var c__11077__auto___17939 = cljs.core.chunk_first.call(null, seq__15434_17938__$1);
            var G__17940 = cljs.core.chunk_rest.call(null, seq__15434_17938__$1);
            var G__17941 = c__11077__auto___17939;
            var G__17942 = cljs.core.count.call(null, c__11077__auto___17939);
            var G__17943 = 0;
            seq__15434_17928 = G__17940;
            chunk__15435_17929 = G__17941;
            count__15436_17930 = G__17942;
            i__15437_17931 = G__17943;
            continue;
          } else {
            var arg__11908__auto___17944 = cljs.core.first.call(null, seq__15434_17938__$1);
            a__11907__auto__.push(arg__11908__auto___17944);
            var G__17945 = cljs.core.next.call(null, seq__15434_17938__$1);
            var G__17946 = null;
            var G__17947 = 0;
            var G__17948 = 0;
            seq__15434_17928 = G__17945;
            chunk__15435_17929 = G__17946;
            count__15436_17930 = G__17947;
            i__15437_17931 = G__17948;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.g.apply(null, a__11907__auto__);
  };
  var g = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return g__delegate.call(this, args__11906__auto__);
  };
  g.cljs$lang$maxFixedArity = 0;
  g.cljs$lang$applyTo = function(arglist__17949) {
    var args__11906__auto__ = cljs.core.seq(arglist__17949);
    return g__delegate(args__11906__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
quiescent.dom.line = function() {
  var line__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15442_17950 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15443_17951 = null;
    var count__15444_17952 = 0;
    var i__15445_17953 = 0;
    while (true) {
      if (i__15445_17953 < count__15444_17952) {
        var arg__11908__auto___17954 = cljs.core._nth.call(null, chunk__15443_17951, i__15445_17953);
        a__11907__auto__.push(arg__11908__auto___17954);
        var G__17955 = seq__15442_17950;
        var G__17956 = chunk__15443_17951;
        var G__17957 = count__15444_17952;
        var G__17958 = i__15445_17953 + 1;
        seq__15442_17950 = G__17955;
        chunk__15443_17951 = G__17956;
        count__15444_17952 = G__17957;
        i__15445_17953 = G__17958;
        continue;
      } else {
        var temp__4092__auto___17959 = cljs.core.seq.call(null, seq__15442_17950);
        if (temp__4092__auto___17959) {
          var seq__15442_17960__$1 = temp__4092__auto___17959;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15442_17960__$1)) {
            var c__11077__auto___17961 = cljs.core.chunk_first.call(null, seq__15442_17960__$1);
            var G__17962 = cljs.core.chunk_rest.call(null, seq__15442_17960__$1);
            var G__17963 = c__11077__auto___17961;
            var G__17964 = cljs.core.count.call(null, c__11077__auto___17961);
            var G__17965 = 0;
            seq__15442_17950 = G__17962;
            chunk__15443_17951 = G__17963;
            count__15444_17952 = G__17964;
            i__15445_17953 = G__17965;
            continue;
          } else {
            var arg__11908__auto___17966 = cljs.core.first.call(null, seq__15442_17960__$1);
            a__11907__auto__.push(arg__11908__auto___17966);
            var G__17967 = cljs.core.next.call(null, seq__15442_17960__$1);
            var G__17968 = null;
            var G__17969 = 0;
            var G__17970 = 0;
            seq__15442_17950 = G__17967;
            chunk__15443_17951 = G__17968;
            count__15444_17952 = G__17969;
            i__15445_17953 = G__17970;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.line.apply(null, a__11907__auto__);
  };
  var line = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return line__delegate.call(this, args__11906__auto__);
  };
  line.cljs$lang$maxFixedArity = 0;
  line.cljs$lang$applyTo = function(arglist__17971) {
    var args__11906__auto__ = cljs.core.seq(arglist__17971);
    return line__delegate(args__11906__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
quiescent.dom.path = function() {
  var path__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15450_17972 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15451_17973 = null;
    var count__15452_17974 = 0;
    var i__15453_17975 = 0;
    while (true) {
      if (i__15453_17975 < count__15452_17974) {
        var arg__11908__auto___17976 = cljs.core._nth.call(null, chunk__15451_17973, i__15453_17975);
        a__11907__auto__.push(arg__11908__auto___17976);
        var G__17977 = seq__15450_17972;
        var G__17978 = chunk__15451_17973;
        var G__17979 = count__15452_17974;
        var G__17980 = i__15453_17975 + 1;
        seq__15450_17972 = G__17977;
        chunk__15451_17973 = G__17978;
        count__15452_17974 = G__17979;
        i__15453_17975 = G__17980;
        continue;
      } else {
        var temp__4092__auto___17981 = cljs.core.seq.call(null, seq__15450_17972);
        if (temp__4092__auto___17981) {
          var seq__15450_17982__$1 = temp__4092__auto___17981;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15450_17982__$1)) {
            var c__11077__auto___17983 = cljs.core.chunk_first.call(null, seq__15450_17982__$1);
            var G__17984 = cljs.core.chunk_rest.call(null, seq__15450_17982__$1);
            var G__17985 = c__11077__auto___17983;
            var G__17986 = cljs.core.count.call(null, c__11077__auto___17983);
            var G__17987 = 0;
            seq__15450_17972 = G__17984;
            chunk__15451_17973 = G__17985;
            count__15452_17974 = G__17986;
            i__15453_17975 = G__17987;
            continue;
          } else {
            var arg__11908__auto___17988 = cljs.core.first.call(null, seq__15450_17982__$1);
            a__11907__auto__.push(arg__11908__auto___17988);
            var G__17989 = cljs.core.next.call(null, seq__15450_17982__$1);
            var G__17990 = null;
            var G__17991 = 0;
            var G__17992 = 0;
            seq__15450_17972 = G__17989;
            chunk__15451_17973 = G__17990;
            count__15452_17974 = G__17991;
            i__15453_17975 = G__17992;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.path.apply(null, a__11907__auto__);
  };
  var path = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return path__delegate.call(this, args__11906__auto__);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__17993) {
    var args__11906__auto__ = cljs.core.seq(arglist__17993);
    return path__delegate(args__11906__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
quiescent.dom.polygon = function() {
  var polygon__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15458_17994 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15459_17995 = null;
    var count__15460_17996 = 0;
    var i__15461_17997 = 0;
    while (true) {
      if (i__15461_17997 < count__15460_17996) {
        var arg__11908__auto___17998 = cljs.core._nth.call(null, chunk__15459_17995, i__15461_17997);
        a__11907__auto__.push(arg__11908__auto___17998);
        var G__17999 = seq__15458_17994;
        var G__18000 = chunk__15459_17995;
        var G__18001 = count__15460_17996;
        var G__18002 = i__15461_17997 + 1;
        seq__15458_17994 = G__17999;
        chunk__15459_17995 = G__18000;
        count__15460_17996 = G__18001;
        i__15461_17997 = G__18002;
        continue;
      } else {
        var temp__4092__auto___18003 = cljs.core.seq.call(null, seq__15458_17994);
        if (temp__4092__auto___18003) {
          var seq__15458_18004__$1 = temp__4092__auto___18003;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15458_18004__$1)) {
            var c__11077__auto___18005 = cljs.core.chunk_first.call(null, seq__15458_18004__$1);
            var G__18006 = cljs.core.chunk_rest.call(null, seq__15458_18004__$1);
            var G__18007 = c__11077__auto___18005;
            var G__18008 = cljs.core.count.call(null, c__11077__auto___18005);
            var G__18009 = 0;
            seq__15458_17994 = G__18006;
            chunk__15459_17995 = G__18007;
            count__15460_17996 = G__18008;
            i__15461_17997 = G__18009;
            continue;
          } else {
            var arg__11908__auto___18010 = cljs.core.first.call(null, seq__15458_18004__$1);
            a__11907__auto__.push(arg__11908__auto___18010);
            var G__18011 = cljs.core.next.call(null, seq__15458_18004__$1);
            var G__18012 = null;
            var G__18013 = 0;
            var G__18014 = 0;
            seq__15458_17994 = G__18011;
            chunk__15459_17995 = G__18012;
            count__15460_17996 = G__18013;
            i__15461_17997 = G__18014;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polygon.apply(null, a__11907__auto__);
  };
  var polygon = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polygon__delegate.call(this, args__11906__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 0;
  polygon.cljs$lang$applyTo = function(arglist__18015) {
    var args__11906__auto__ = cljs.core.seq(arglist__18015);
    return polygon__delegate(args__11906__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
quiescent.dom.polyline = function() {
  var polyline__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15466_18016 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15467_18017 = null;
    var count__15468_18018 = 0;
    var i__15469_18019 = 0;
    while (true) {
      if (i__15469_18019 < count__15468_18018) {
        var arg__11908__auto___18020 = cljs.core._nth.call(null, chunk__15467_18017, i__15469_18019);
        a__11907__auto__.push(arg__11908__auto___18020);
        var G__18021 = seq__15466_18016;
        var G__18022 = chunk__15467_18017;
        var G__18023 = count__15468_18018;
        var G__18024 = i__15469_18019 + 1;
        seq__15466_18016 = G__18021;
        chunk__15467_18017 = G__18022;
        count__15468_18018 = G__18023;
        i__15469_18019 = G__18024;
        continue;
      } else {
        var temp__4092__auto___18025 = cljs.core.seq.call(null, seq__15466_18016);
        if (temp__4092__auto___18025) {
          var seq__15466_18026__$1 = temp__4092__auto___18025;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15466_18026__$1)) {
            var c__11077__auto___18027 = cljs.core.chunk_first.call(null, seq__15466_18026__$1);
            var G__18028 = cljs.core.chunk_rest.call(null, seq__15466_18026__$1);
            var G__18029 = c__11077__auto___18027;
            var G__18030 = cljs.core.count.call(null, c__11077__auto___18027);
            var G__18031 = 0;
            seq__15466_18016 = G__18028;
            chunk__15467_18017 = G__18029;
            count__15468_18018 = G__18030;
            i__15469_18019 = G__18031;
            continue;
          } else {
            var arg__11908__auto___18032 = cljs.core.first.call(null, seq__15466_18026__$1);
            a__11907__auto__.push(arg__11908__auto___18032);
            var G__18033 = cljs.core.next.call(null, seq__15466_18026__$1);
            var G__18034 = null;
            var G__18035 = 0;
            var G__18036 = 0;
            seq__15466_18016 = G__18033;
            chunk__15467_18017 = G__18034;
            count__15468_18018 = G__18035;
            i__15469_18019 = G__18036;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polyline.apply(null, a__11907__auto__);
  };
  var polyline = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polyline__delegate.call(this, args__11906__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 0;
  polyline.cljs$lang$applyTo = function(arglist__18037) {
    var args__11906__auto__ = cljs.core.seq(arglist__18037);
    return polyline__delegate(args__11906__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
quiescent.dom.rect = function() {
  var rect__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15474_18038 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15475_18039 = null;
    var count__15476_18040 = 0;
    var i__15477_18041 = 0;
    while (true) {
      if (i__15477_18041 < count__15476_18040) {
        var arg__11908__auto___18042 = cljs.core._nth.call(null, chunk__15475_18039, i__15477_18041);
        a__11907__auto__.push(arg__11908__auto___18042);
        var G__18043 = seq__15474_18038;
        var G__18044 = chunk__15475_18039;
        var G__18045 = count__15476_18040;
        var G__18046 = i__15477_18041 + 1;
        seq__15474_18038 = G__18043;
        chunk__15475_18039 = G__18044;
        count__15476_18040 = G__18045;
        i__15477_18041 = G__18046;
        continue;
      } else {
        var temp__4092__auto___18047 = cljs.core.seq.call(null, seq__15474_18038);
        if (temp__4092__auto___18047) {
          var seq__15474_18048__$1 = temp__4092__auto___18047;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15474_18048__$1)) {
            var c__11077__auto___18049 = cljs.core.chunk_first.call(null, seq__15474_18048__$1);
            var G__18050 = cljs.core.chunk_rest.call(null, seq__15474_18048__$1);
            var G__18051 = c__11077__auto___18049;
            var G__18052 = cljs.core.count.call(null, c__11077__auto___18049);
            var G__18053 = 0;
            seq__15474_18038 = G__18050;
            chunk__15475_18039 = G__18051;
            count__15476_18040 = G__18052;
            i__15477_18041 = G__18053;
            continue;
          } else {
            var arg__11908__auto___18054 = cljs.core.first.call(null, seq__15474_18048__$1);
            a__11907__auto__.push(arg__11908__auto___18054);
            var G__18055 = cljs.core.next.call(null, seq__15474_18048__$1);
            var G__18056 = null;
            var G__18057 = 0;
            var G__18058 = 0;
            seq__15474_18038 = G__18055;
            chunk__15475_18039 = G__18056;
            count__15476_18040 = G__18057;
            i__15477_18041 = G__18058;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rect.apply(null, a__11907__auto__);
  };
  var rect = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rect__delegate.call(this, args__11906__auto__);
  };
  rect.cljs$lang$maxFixedArity = 0;
  rect.cljs$lang$applyTo = function(arglist__18059) {
    var args__11906__auto__ = cljs.core.seq(arglist__18059);
    return rect__delegate(args__11906__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
quiescent.dom.svg = function() {
  var svg__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__15482_18060 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__15483_18061 = null;
    var count__15484_18062 = 0;
    var i__15485_18063 = 0;
    while (true) {
      if (i__15485_18063 < count__15484_18062) {
        var arg__11908__auto___18064 = cljs.core._nth.call(null, chunk__15483_18061, i__15485_18063);
        a__11907__auto__.push(arg__11908__auto___18064);
        var G__18065 = seq__15482_18060;
        var G__18066 = chunk__15483_18061;
        var G__18067 = count__15484_18062;
        var G__18068 = i__15485_18063 + 1;
        seq__15482_18060 = G__18065;
        chunk__15483_18061 = G__18066;
        count__15484_18062 = G__18067;
        i__15485_18063 = G__18068;
        continue;
      } else {
        var temp__4092__auto___18069 = cljs.core.seq.call(null, seq__15482_18060);
        if (temp__4092__auto___18069) {
          var seq__15482_18070__$1 = temp__4092__auto___18069;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__15482_18070__$1)) {
            var c__11077__auto___18071 = cljs.core.chunk_first.call(null, seq__15482_18070__$1);
            var G__18072 = cljs.core.chunk_rest.call(null, seq__15482_18070__$1);
            var G__18073 = c__11077__auto___18071;
            var G__18074 = cljs.core.count.call(null, c__11077__auto___18071);
            var G__18075 = 0;
            seq__15482_18060 = G__18072;
            chunk__15483_18061 = G__18073;
            count__15484_18062 = G__18074;
            i__15485_18063 = G__18075;
            continue;
          } else {
            var arg__11908__auto___18076 = cljs.core.first.call(null, seq__15482_18070__$1);
            a__11907__auto__.push(arg__11908__auto___18076);
            var G__18077 = cljs.core.next.call(null, seq__15482_18070__$1);
            var G__18078 = null;
            var G__18079 = 0;
            var G__18080 = 0;
            seq__15482_18060 = G__18077;
            chunk__15483_18061 = G__18078;
            count__15484_18062 = G__18079;
            i__15485_18063 = G__18080;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.svg.apply(null, a__11907__auto__);
  };
  var svg = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return svg__delegate.call(this, args__11906__auto__);
  };
  svg.cljs$lang$maxFixedArity = 0;
  svg.cljs$lang$applyTo = function(arglist__18081) {
    var args__11906__auto__ = cljs.core.seq(arglist__18081);
    return svg__delegate(args__11906__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
quiescent.dom.text = function() {
  var text__delegate = function(args__11906__auto__) {
    var a__11907__auto__ = [];
    a__11907__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11906__auto__)));
    var seq__14794_18082 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11906__auto__));
    var chunk__14795_18083 = null;
    var count__14796_18084 = 0;
    var i__14797_18085 = 0;
    while (true) {
      if (i__14797_18085 < count__14796_18084) {
        var arg__11908__auto___18086 = cljs.core._nth.call(null, chunk__14795_18083, i__14797_18085);
        a__11907__auto__.push(arg__11908__auto___18086);
        var G__18087 = seq__14794_18082;
        var G__18088 = chunk__14795_18083;
        var G__18089 = count__14796_18084;
        var G__18090 = i__14797_18085 + 1;
        seq__14794_18082 = G__18087;
        chunk__14795_18083 = G__18088;
        count__14796_18084 = G__18089;
        i__14797_18085 = G__18090;
        continue;
      } else {
        var temp__4092__auto___18091 = cljs.core.seq.call(null, seq__14794_18082);
        if (temp__4092__auto___18091) {
          var seq__14794_18092__$1 = temp__4092__auto___18091;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14794_18092__$1)) {
            var c__11077__auto___18093 = cljs.core.chunk_first.call(null, seq__14794_18092__$1);
            var G__18094 = cljs.core.chunk_rest.call(null, seq__14794_18092__$1);
            var G__18095 = c__11077__auto___18093;
            var G__18096 = cljs.core.count.call(null, c__11077__auto___18093);
            var G__18097 = 0;
            seq__14794_18082 = G__18094;
            chunk__14795_18083 = G__18095;
            count__14796_18084 = G__18096;
            i__14797_18085 = G__18097;
            continue;
          } else {
            var arg__11908__auto___18098 = cljs.core.first.call(null, seq__14794_18092__$1);
            a__11907__auto__.push(arg__11908__auto___18098);
            var G__18099 = cljs.core.next.call(null, seq__14794_18092__$1);
            var G__18100 = null;
            var G__18101 = 0;
            var G__18102 = 0;
            seq__14794_18082 = G__18099;
            chunk__14795_18083 = G__18100;
            count__14796_18084 = G__18101;
            i__14797_18085 = G__18102;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.text.apply(null, a__11907__auto__);
  };
  var text = function(var_args) {
    var args__11906__auto__ = null;
    if (arguments.length > 0) {
      args__11906__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return text__delegate.call(this, args__11906__auto__);
  };
  text.cljs$lang$maxFixedArity = 0;
  text.cljs$lang$applyTo = function(arglist__18103) {
    var args__11906__auto__ = cljs.core.seq(arglist__18103);
    return text__delegate(args__11906__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
goog.provide("todomvc.render");
goog.require("cljs.core");
goog.require("datascript");
goog.require("datascript");
goog.require("quiescent.dom");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("quiescent");
goog.require("todomvc.transact");
goog.require("todomvc.transact");
todomvc.render.enter_key_QMARK_ = function enter_key_QMARK_(evt) {
  return cljs.core._EQ_.call(null, 13, evt.keyCode);
};
todomvc.render.Header = quiescent.component.call(null, function(_, conn) {
  return quiescent.dom.header.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "header"], null), quiescent.dom.h1.call(null, cljs.core.PersistentArrayMap.EMPTY, "todos"), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", 1013907597), "new-todo", new cljs.core.Keyword(null, "placeholder", "placeholder", 1612151013), "What needs to be done?", new cljs.core.Keyword(null, "onKeyDown", 
  "onKeyDown", 1534256180), function(evt) {
    if (todomvc.render.enter_key_QMARK_.call(null, evt)) {
      var text = evt.target.value;
      datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.create_item, text], null)], null));
      return evt.target.value = "";
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "autoFocus", "autoFocus", 2651959259), true], null)));
});
todomvc.render.ItemFilter = quiescent.component.call(null, function(current_filter, this_filter, label, href, conn) {
  return quiescent.dom.li.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "className", "className", 1004015509), cljs.core._EQ_.call(null, current_filter, this_filter) ? "selected" : null, new cljs.core.Keyword(null, "href", "href", 1017115293), href, new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), function() {
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.set_filter, this_filter], null)], null));
  }], null), label));
});
todomvc.render.Filters = quiescent.component.call(null, function(current_filter, conn) {
  return quiescent.dom.ul.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "filters"], null), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, "all", "all", 1014000915), "All", "#/", conn), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, "active", "active", 3885920888), "Active", "#/active", conn), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, 
  "completed", "completed", 3905939901), "Completed", "#/completed", conn));
});
todomvc.render.Footer = quiescent.component.call(null, function(p__74897, conn) {
  var vec__74898 = p__74897;
  var current_filter = cljs.core.nth.call(null, vec__74898, 0, null);
  var items = cljs.core.nth.call(null, vec__74898, 1, null);
  var completed = cljs.core.count.call(null, cljs.core.filter.call(null, new cljs.core.Keyword(null, "completed", "completed", 3905939901), items));
  var left = cljs.core.count.call(null, items) - completed;
  return quiescent.dom.footer.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "footer"], null), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-count"], null), quiescent.dom.strong.call(null, cljs.core.PersistentArrayMap.EMPTY, [cljs.core.str(left), cljs.core.str(" item(s) left")].join(""))), todomvc.render.Filters.call(null, current_filter, conn), 0 < completed ? 
  quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "clear-completed", new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), function() {
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.clear_completed], null)], null));
  }], null), [cljs.core.str("Clear completed ("), cljs.core.str(completed), cljs.core.str(")")].join("")) : null);
});
todomvc.render.class_name = function class_name(classes) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.map.call(null, cljs.core.identity, classes)));
};
todomvc.render.hidden_QMARK_ = function hidden_QMARK_(completed, current_filter) {
  var or__10329__auto__ = function() {
    var and__10317__auto__ = completed;
    if (cljs.core.truth_(and__10317__auto__)) {
      return cljs.core._EQ_.call(null, current_filter, new cljs.core.Keyword(null, "active", "active", 3885920888));
    } else {
      return and__10317__auto__;
    }
  }();
  if (cljs.core.truth_(or__10329__auto__)) {
    return or__10329__auto__;
  } else {
    return cljs.core.not.call(null, completed) && cljs.core._EQ_.call(null, current_filter, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
  }
};
todomvc.render.Item = quiescent.component.call(null, function(p__74899, conn) {
  var vec__74900 = p__74899;
  var map__74901 = cljs.core.nth.call(null, vec__74900, 0, null);
  var map__74901__$1 = cljs.core.seq_QMARK_.call(null, map__74901) ? cljs.core.apply.call(null, cljs.core.hash_map, map__74901) : map__74901;
  var commited = cljs.core.get.call(null, map__74901__$1, new cljs.core.Keyword(null, "commited", "commited", 4706580360));
  var editing = cljs.core.get.call(null, map__74901__$1, new cljs.core.Keyword(null, "editing", "editing", 3420907786));
  var completed = cljs.core.get.call(null, map__74901__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
  var text = cljs.core.get.call(null, map__74901__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
  var id = cljs.core.get.call(null, map__74901__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var current_filter = cljs.core.nth.call(null, vec__74900, 1, null);
  var completed__$1 = cljs.core.boolean$.call(null, completed);
  return quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "key", "key", 1014010321), id, new cljs.core.Keyword(null, "className", "className", 1004015509), todomvc.render.class_name.call(null, cljs.core.PersistentHashSet.fromArray([completed__$1 ? "completed" : null, cljs.core.truth_(todomvc.render.hidden_QMARK_.call(null, completed__$1, current_filter)) ? "hidden" : null, cljs.core.truth_(editing) ? "editing" : null], true)), new cljs.core.Keyword(null, 
  "onDoubleClick", "onDoubleClick", 4144140362), function(_) {
    if (cljs.core.truth_(commited)) {
      return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.start_edit, id], null)], null));
    } else {
      return null;
    }
  }], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", 1004015509), "view"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "className", "className", 1004015509), "toggle", new cljs.core.Keyword(null, "type", "type", 1017479852), "checkbox", new cljs.core.Keyword(null, "checked", "checked", 1756218137), completed__$1, new cljs.core.Keyword(null, "onChange", 
  "onChange", 2050678241), cljs.core.truth_(commited) ? function(_) {
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.toggle_item, id], null)], null));
  } : null], null)), quiescent.dom.label.call(null, cljs.core.PersistentArrayMap.EMPTY, text), cljs.core.not.call(null, commited) ? quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", 1004015509), "sync glyphicon glyphicon-transfer"], null), "") : quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", 1004015509), "destroy", new cljs.core.Keyword(null, 
  "onClick", "onClick", 3956969051), function(_) {
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.remove_item, id], null)], null));
  }], null))), quiescent.dom.input.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "className", "className", 1004015509), "edit", new cljs.core.Keyword(null, "defaultValue", "defaultValue", 4649746210), text, new cljs.core.Keyword(null, "onKeyDown", "onKeyDown", 1534256180), function(evt) {
    if (todomvc.render.enter_key_QMARK_.call(null, evt)) {
      return evt.target.blur();
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "onBlur", "onBlur", 4295401048), function(evt) {
    var text__$1 = evt.target.value;
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.complete_edit, id, text__$1], null)], null));
  }], null), cljs.core.truth_(editing) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "autoFocus", "autoFocus", 2651959259), true], null) : cljs.core.PersistentArrayMap.EMPTY)));
});
todomvc.render.TodoList = quiescent.component.call(null, function(p__74903, conn) {
  var vec__74904 = p__74903;
  var current_filter = cljs.core.nth.call(null, vec__74904, 0, null);
  var items = cljs.core.nth.call(null, vec__74904, 1, null);
  return cljs.core.apply.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-list"], null), cljs.core.map.call(null, function(p1__74902_SHARP_) {
    return todomvc.render.Item.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__74902_SHARP_, current_filter], null), conn);
  }, items));
});
todomvc.render.App = quiescent.component.call(null, function(p__74905, conn) {
  var map__74906 = p__74905;
  var map__74906__$1 = cljs.core.seq_QMARK_.call(null, map__74906) ? cljs.core.apply.call(null, cljs.core.hash_map, map__74906) : map__74906;
  var error = cljs.core.get.call(null, map__74906__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
  var items = cljs.core.get.call(null, map__74906__$1, new cljs.core.Keyword(null, "items", "items", 1114430258));
  var current_filter = cljs.core.get.call(null, map__74906__$1, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582));
  var all_done_QMARK_ = cljs.core.get.call(null, map__74906__$1, new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259));
  return quiescent.dom.div.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.truth_(error) ? quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-error", new cljs.core.Keyword(null, "className", "className", 1004015509), "alert alert-info"], null), "Error occured, reloading page recommended.") : null, quiescent.dom.section.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 
  1013907597), "todoapp"], null), quiescent.dom.div.call(null, cljs.core.PersistentArrayMap.EMPTY, todomvc.render.Header.call(null, null, conn), quiescent.dom.section.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "main"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", 1013907597), "toggle-all", new cljs.core.Keyword(null, "type", "type", 1017479852), "checkbox", new cljs.core.Keyword(null, 
  "checked", "checked", 1756218137), all_done_QMARK_, new cljs.core.Keyword(null, "onChange", "onChange", 2050678241), function() {
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.toggle_all], null)], null));
  }], null)), quiescent.dom.label.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "htmlFor", "htmlFor", 2249940112), "toggle-all"], null), "Mark all as complete"), todomvc.render.TodoList.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [current_filter, items], null), conn)), todomvc.render.Footer.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [current_filter, items], null), 
  conn))));
});
todomvc.render.main = function main(db, conn) {
  return window.requestAnimationFrame(function() {
    var items = cljs.core.sort_by.call(null, new cljs.core.Keyword("db", "id", "db/id", 1014111942), cljs.core.map.call(null, function(p1__74907_SHARP_) {
      return datascript.entity.call(null, db, cljs.core.first.call(null, p1__74907_SHARP_));
    }, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 
    3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", -1640467629, null)], null)], null)], null), db)));
    var state = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259), cljs.core.seq.call(null, items) && cljs.core.every_QMARK_.call(null, new cljs.core.Keyword(null, "completed", "completed", 3905939901), items), new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582), cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 
    1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?filter", "?filter", 1458100784, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_", "_", -1640531432, null), new cljs.core.Keyword(null, "filter", "filter", 4034379498), new cljs.core.Symbol(null, "?filter", 
    "?filter", 1458100784, null)], null)], null)], null), db)), new cljs.core.Keyword(null, "items", "items", 1114430258), items, new cljs.core.Keyword(null, "error", "error", 1110689146), cljs.core.ffirst.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null)], null), new cljs.core.Keyword(null, 
    "where", "where", 1127002201), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "error", "error", 1110689146)], null)], null)], null), db))], null);
    return quiescent.render.call(null, todomvc.render.App.call(null, state, conn), document.getElementById("todopane"));
  });
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length1;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return Math.sqrt(variance);
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.DomHelper");
goog.provide("goog.dom.NodeType");
goog.require("goog.array");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.TagName");
goog.require("goog.dom.classes");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.ASSUME_QUIRKS_MODE = false;
goog.dom.ASSUME_STANDARDS_MODE = false;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  } else {
    if (parent.getElementsByClassName) {
      return parent.getElementsByClassName(className);
    }
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByClass(className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var vh = goog.dom.getViewportSize_(win).height;
    var body = doc.body;
    var docEl = doc.documentElement;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || (goog.global || window);
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && (attributes && (attributes.name || attributes.type))) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        goog.dom.classes.add.apply(null, [element].concat(attributes));
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement;
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(element, text) {
  if ("textContent" in element) {
    element.textContent = text;
  } else {
    if (element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      while (element.lastChild != element.firstChild) {
        element.removeChild(element.lastChild);
      }
      element.firstChild.data = text;
    } else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(String(text)));
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if (attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && (index >= 0 && index < 32768);
  }
  return false;
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || (goog.global.document || document);
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  if (goog.isString(element)) {
    return this.document_.getElementById(element);
  } else {
    return element;
  }
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat";
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("todomvc.services");
goog.require("cljs.core");
goog.require("ajax.core");
goog.require("datascript");
goog.require("datascript");
goog.require("goog.dom");
goog.require("goog.dom");
goog.require("ajax.core");
goog.require("ajax.core");
goog.require("todomvc.transact");
goog.require("todomvc.transact");
todomvc.services.DELETE = function() {
  var DELETE__delegate = function(uri, p__80400) {
    var vec__80402 = p__80400;
    var opts = cljs.core.nth.call(null, vec__80402, 0, null);
    return ajax.core.ajax_request.call(null, uri, "DELETE", ajax.core.transform_opts.call(null, opts));
  };
  var DELETE = function(uri, var_args) {
    var p__80400 = null;
    if (arguments.length > 1) {
      p__80400 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return DELETE__delegate.call(this, uri, p__80400);
  };
  DELETE.cljs$lang$maxFixedArity = 1;
  DELETE.cljs$lang$applyTo = function(arglist__80403) {
    var uri = cljs.core.first(arglist__80403);
    var p__80400 = cljs.core.rest(arglist__80403);
    return DELETE__delegate(uri, p__80400);
  };
  DELETE.cljs$core$IFn$_invoke$arity$variadic = DELETE__delegate;
  return DELETE;
}();
todomvc.services.todos_url = function todos_url() {
  return[cljs.core.str(window.location.pathname), cljs.core.str("/todos")].join("");
};
todomvc.services.csrf_token = function csrf_token() {
  return goog.dom.getElement("csrf-token").getAttribute("value");
};
todomvc.services.error_handler = function error_handler(conn) {
  return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.error, "fail"], null)], null));
};
todomvc.services.handle = function() {
  var method_table__11187__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__11188__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__11189__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__11190__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__11191__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("handle", function(event, args, db, conn) {
    return event;
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__11191__auto__, method_table__11187__auto__, prefer_table__11188__auto__, method_cache__11189__auto__, cached_hierarchy__11190__auto__);
}();
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "create-item", "create-item", 4768804022), function(_, p__80404, db, conn) {
  var vec__80405 = p__80404;
  var temp_id = cljs.core.nth.call(null, vec__80405, 0, null);
  var text = cljs.core.nth.call(null, vec__80405, 1, null);
  return ajax.core.POST.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), temp_id, new cljs.core.Keyword(null, "text", "text", 1017460895), text], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
    var id = (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(res);
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.commit_item, temp_id, id], null)], null));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    console.log([cljs.core.str("FAil res: "), cljs.core.str(res)].join(""));
    return todomvc.services.error_handler.call(null, conn);
  }, new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "complete-edit", "complete-edit", 1152265616), function(event, p__80406, db, conn) {
  var vec__80407 = p__80406;
  var id = cljs.core.nth.call(null, vec__80407, 0, null);
  var text = cljs.core.nth.call(null, vec__80407, 1, null);
  return ajax.core.PUT.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "text", "text", 1017460895), text], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    console.log([cljs.core.str("Succesful res for complete-edit: "), cljs.core.str(res), cljs.core.str(" id is "), cljs.core.str(id), cljs.core.str(" text is "), cljs.core.str(text)].join(""));
    return datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.commit_edit, id], null)], null));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    console.log([cljs.core.str("Fail res: "), cljs.core.str(res)].join(""));
    return todomvc.services.error_handler.call(null, conn);
  }, new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(res) {
    var res_text = res.getResponseText();
    if (cljs.core.count.call(null, res_text) > 0) {
      throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), function(event, p__80408, db, conn) {
  var vec__80409 = p__80408;
  var id = cljs.core.nth.call(null, vec__80409, 0, null);
  var completed = cljs.core.nth.call(null, vec__80409, 1, null);
  return ajax.core.PUT.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "completed", "completed", 3905939901), completed], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    return console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    console.log([cljs.core.str("Fail res: "), cljs.core.str(res)].join(""));
    return todomvc.services.error_handler.call(null, conn);
  }, new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(res) {
    var res_text = res.getResponseText();
    if (cljs.core.count.call(null, res_text) > 0) {
      throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), function(event, p__80410, db, conn) {
  var vec__80411 = p__80410;
  var id = cljs.core.nth.call(null, vec__80411, 0, null);
  return todomvc.services.DELETE.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), id], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    return console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    console.log([cljs.core.str("Fail res: "), cljs.core.str(res)].join(""));
    return todomvc.services.error_handler.call(null, conn);
  }, new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(res) {
    var res_text = res.getResponseText();
    if (cljs.core.count.call(null, res_text) > 0) {
      throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "clear-completed", "clear-completed", 888981053), function(event, p__80412, db, conn) {
  var vec__80413 = p__80412;
  var ids = cljs.core.nth.call(null, vec__80413, 0, null);
  var seq__80414 = cljs.core.seq.call(null, ids);
  var chunk__80415 = null;
  var count__80416 = 0;
  var i__80417 = 0;
  while (true) {
    if (i__80417 < count__80416) {
      var id = cljs.core._nth.call(null, chunk__80415, i__80417);
      todomvc.services.DELETE.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), id], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(seq__80414, chunk__80415, count__80416, i__80417, id) {
        return function(res) {
          return console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
        };
      }(seq__80414, chunk__80415, count__80416, i__80417, id), new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(seq__80414, chunk__80415, count__80416, i__80417, id) {
        return function(res) {
          console.log([cljs.core.str("Fail res: "), cljs.core.str(res)].join(""));
          return todomvc.services.error_handler.call(null, conn);
        };
      }(seq__80414, chunk__80415, count__80416, i__80417, id), new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(seq__80414, chunk__80415, count__80416, i__80417, id) {
        return function(res) {
          var res_text = res.getResponseText();
          if (cljs.core.count.call(null, res_text) > 0) {
            throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
          } else {
            return null;
          }
        };
      }(seq__80414, chunk__80415, count__80416, i__80417, id), new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
      var G__80418 = seq__80414;
      var G__80419 = chunk__80415;
      var G__80420 = count__80416;
      var G__80421 = i__80417 + 1;
      seq__80414 = G__80418;
      chunk__80415 = G__80419;
      count__80416 = G__80420;
      i__80417 = G__80421;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__80414);
      if (temp__4092__auto__) {
        var seq__80414__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__80414__$1)) {
          var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__80414__$1);
          var G__80422 = cljs.core.chunk_rest.call(null, seq__80414__$1);
          var G__80423 = c__11077__auto__;
          var G__80424 = cljs.core.count.call(null, c__11077__auto__);
          var G__80425 = 0;
          seq__80414 = G__80422;
          chunk__80415 = G__80423;
          count__80416 = G__80424;
          i__80417 = G__80425;
          continue;
        } else {
          var id = cljs.core.first.call(null, seq__80414__$1);
          todomvc.services.DELETE.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), id], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(seq__80414, chunk__80415, count__80416, i__80417, id, seq__80414__$1, temp__4092__auto__) {
            return function(res) {
              return console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
            };
          }(seq__80414, chunk__80415, count__80416, i__80417, id, seq__80414__$1, temp__4092__auto__), new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(seq__80414, chunk__80415, count__80416, i__80417, id, seq__80414__$1, temp__4092__auto__) {
            return function(res) {
              console.log([cljs.core.str("Fail res: "), cljs.core.str(res)].join(""));
              return todomvc.services.error_handler.call(null, conn);
            };
          }(seq__80414, chunk__80415, count__80416, i__80417, id, seq__80414__$1, temp__4092__auto__), new cljs.core.Keyword(null, "format", "format", 4040092521), cljs.core.merge.call(null, ajax.core.edn_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function(seq__80414, chunk__80415, count__80416, i__80417, id, seq__80414__$1, temp__4092__auto__) {
            return function(res) {
              var res_text = res.getResponseText();
              if (cljs.core.count.call(null, res_text) > 0) {
                throw new Error([cljs.core.str("Assumed no content response has content: "), cljs.core.str(res_text)].join(""));
              } else {
                return null;
              }
            };
          }(seq__80414, chunk__80415, count__80416, i__80417, id, seq__80414__$1, temp__4092__auto__), new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN (CUSTOM)"], null)), new cljs.core.Keyword(null, "headers", "headers", 1809212152), new cljs.core.PersistentArrayMap(null, 1, ["X-CSRF-Token", todomvc.services.csrf_token.call(null)], null)], null));
          var G__80426 = cljs.core.next.call(null, seq__80414__$1);
          var G__80427 = null;
          var G__80428 = 0;
          var G__80429 = 0;
          seq__80414 = G__80426;
          chunk__80415 = G__80427;
          count__80416 = G__80428;
          i__80417 = G__80429;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "toggle-all", "toggle-all", 4455256858), function(event, _, db, conn) {
  var seq__80430 = cljs.core.seq.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?id", "?id", -1640467629, null), new cljs.core.Symbol(null, "?completed", "?completed", 1756055205, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Symbol(null, "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "id", "id", 1013907597), new cljs.core.Symbol(null, "?id", "?id", 
  -1640467629, null)], null), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "completed", "completed", 3905939901), new cljs.core.Symbol(null, "?completed", "?completed", 1756055205, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null)], null)], null), db, (new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)).cljs$core$IFn$_invoke$arity$1(db)));
  var chunk__80431 = null;
  var count__80432 = 0;
  var i__80433 = 0;
  while (true) {
    if (i__80433 < count__80432) {
      var vec__80434 = cljs.core._nth.call(null, chunk__80431, i__80433);
      var id = cljs.core.nth.call(null, vec__80434, 0, null);
      var completed = cljs.core.nth.call(null, vec__80434, 1, null);
      todomvc.services.handle.call(null, new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, completed], null), db, conn);
      var G__80436 = seq__80430;
      var G__80437 = chunk__80431;
      var G__80438 = count__80432;
      var G__80439 = i__80433 + 1;
      seq__80430 = G__80436;
      chunk__80431 = G__80437;
      count__80432 = G__80438;
      i__80433 = G__80439;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__80430);
      if (temp__4092__auto__) {
        var seq__80430__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__80430__$1)) {
          var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__80430__$1);
          var G__80440 = cljs.core.chunk_rest.call(null, seq__80430__$1);
          var G__80441 = c__11077__auto__;
          var G__80442 = cljs.core.count.call(null, c__11077__auto__);
          var G__80443 = 0;
          seq__80430 = G__80440;
          chunk__80431 = G__80441;
          count__80432 = G__80442;
          i__80433 = G__80443;
          continue;
        } else {
          var vec__80435 = cljs.core.first.call(null, seq__80430__$1);
          var id = cljs.core.nth.call(null, vec__80435, 0, null);
          var completed = cljs.core.nth.call(null, vec__80435, 1, null);
          todomvc.services.handle.call(null, new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, completed], null), db, conn);
          var G__80444 = cljs.core.next.call(null, seq__80430__$1);
          var G__80445 = null;
          var G__80446 = 0;
          var G__80447 = 0;
          seq__80430 = G__80444;
          chunk__80431 = G__80445;
          count__80432 = G__80446;
          i__80433 = G__80447;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "default", "default", 2558708147), function(_, ___$1) {
  return null;
});
todomvc.services.start_services = function start_services(app) {
  var map__80458 = app;
  var map__80458__$1 = cljs.core.seq_QMARK_.call(null, map__80458) ? cljs.core.apply.call(null, cljs.core.hash_map, map__80458) : map__80458;
  var conn = cljs.core.get.call(null, map__80458__$1, new cljs.core.Keyword(null, "conn", "conn", 1016963742));
  datascript.listen_BANG_.call(null, conn, function(p__80459) {
    var map__80460 = p__80459;
    var map__80460__$1 = cljs.core.seq_QMARK_.call(null, map__80460) ? cljs.core.apply.call(null, cljs.core.hash_map, map__80460) : map__80460;
    var report = map__80460__$1;
    var db_after = cljs.core.get.call(null, map__80460__$1, new cljs.core.Keyword(null, "db-after", "db-after", 1658340159));
    var vec__80461 = cljs.core.first.call(null, datascript.q.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "find", "find", 1017047339), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?event", "?event", 259996532, null), new cljs.core.Symbol(null, "?args", "?args", -1579347115, null)], null), new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
    [new cljs.core.Symbol(null, "$", "$", -1640531491, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.Keyword(null, "where", "where", 1127002201), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "event", "event", 1110795788), new cljs.core.Symbol(null, 
    "?event", "?event", 259996532, null), new cljs.core.Symbol(null, "?tx", "?tx", -1640467268, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "?e", "?e", -1640529473, null), new cljs.core.Keyword(null, "args", "args", 1016906831), new cljs.core.Symbol(null, "?args", "?args", -1579347115, null)], null)], null)], null), db_after, (new cljs.core.Keyword(null, "max-tx", "max-tx", 4227685119)).cljs$core$IFn$_invoke$arity$1(db_after)));
    var event = cljs.core.nth.call(null, vec__80461, 0, null);
    var args = cljs.core.nth.call(null, vec__80461, 1, null);
    return todomvc.services.handle.call(null, event, args, db_after, conn);
  });
  return ajax.core.GET.call(null, todomvc.services.todos_url.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    var seq__80462 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "todos", "todos", 1124439135)).cljs$core$IFn$_invoke$arity$1(res));
    var chunk__80463 = null;
    var count__80464 = 0;
    var i__80465 = 0;
    while (true) {
      if (i__80465 < count__80464) {
        var map__80466 = cljs.core._nth.call(null, chunk__80463, i__80465);
        var map__80466__$1 = cljs.core.seq_QMARK_.call(null, map__80466) ? cljs.core.apply.call(null, cljs.core.hash_map, map__80466) : map__80466;
        var todo = map__80466__$1;
        var completed = cljs.core.get.call(null, map__80466__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
        var text = cljs.core.get.call(null, map__80466__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
        var id = cljs.core.get.call(null, map__80466__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
        datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.seed_item, id, text, completed], null)], null));
        var G__80468 = seq__80462;
        var G__80469 = chunk__80463;
        var G__80470 = count__80464;
        var G__80471 = i__80465 + 1;
        seq__80462 = G__80468;
        chunk__80463 = G__80469;
        count__80464 = G__80470;
        i__80465 = G__80471;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__80462);
        if (temp__4092__auto__) {
          var seq__80462__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__80462__$1)) {
            var c__11077__auto__ = cljs.core.chunk_first.call(null, seq__80462__$1);
            var G__80472 = cljs.core.chunk_rest.call(null, seq__80462__$1);
            var G__80473 = c__11077__auto__;
            var G__80474 = cljs.core.count.call(null, c__11077__auto__);
            var G__80475 = 0;
            seq__80462 = G__80472;
            chunk__80463 = G__80473;
            count__80464 = G__80474;
            i__80465 = G__80475;
            continue;
          } else {
            var map__80467 = cljs.core.first.call(null, seq__80462__$1);
            var map__80467__$1 = cljs.core.seq_QMARK_.call(null, map__80467) ? cljs.core.apply.call(null, cljs.core.hash_map, map__80467) : map__80467;
            var todo = map__80467__$1;
            var completed = cljs.core.get.call(null, map__80467__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
            var text = cljs.core.get.call(null, map__80467__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
            var id = cljs.core.get.call(null, map__80467__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
            datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("db.fn", "call", "db.fn/call", 2901959894), todomvc.transact.seed_item, id, text, completed], null)], null));
            var G__80476 = cljs.core.next.call(null, seq__80462__$1);
            var G__80477 = null;
            var G__80478 = 0;
            var G__80479 = 0;
            seq__80462 = G__80476;
            chunk__80463 = G__80477;
            count__80464 = G__80478;
            i__80465 = G__80479;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), function(res) {
    return todomvc.services.error_handler.call(null, conn);
  }], null));
};
goog.provide("todomvc.application");
goog.require("cljs.core");
goog.require("datascript");
goog.require("todomvc.render");
goog.require("todomvc.render");
goog.require("todomvc.transact");
goog.require("todomvc.services");
goog.require("datascript");
goog.require("goog.events");
goog.require("todomvc.transact");
goog.require("goog.events");
goog.require("todomvc.services");
todomvc.application.load_app = function load_app() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "conn", "conn", 1016963742), datascript.create_conn.call(null, cljs.core.PersistentArrayMap.EMPTY), new cljs.core.Keyword(null, "render", "render", 4374279432), todomvc.render.main], null);
};
todomvc.application.main = function main() {
  var map__13068 = todomvc.application.load_app.call(null);
  var map__13068__$1 = cljs.core.seq_QMARK_.call(null, map__13068) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13068) : map__13068;
  var app = map__13068__$1;
  var render = cljs.core.get.call(null, map__13068__$1, new cljs.core.Keyword(null, "render", "render", 4374279432));
  var conn = cljs.core.get.call(null, map__13068__$1, new cljs.core.Keyword(null, "conn", "conn", 1016963742));
  datascript.transact_BANG_.call(null, conn, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("db", "id", "db/id", 1014111942), -1, new cljs.core.Keyword(null, "filter", "filter", 4034379498), cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 3, ["#/", new cljs.core.Keyword(null, "all", "all", 1014000915), "#/active", new cljs.core.Keyword(null, "active", "active", 3885920888), "#/completed", 
  new cljs.core.Keyword(null, "completed", "completed", 3905939901)], null), window.location.hash)], null)], null));
  datascript.listen_BANG_.call(null, conn, function(report) {
    return render.call(null, (new cljs.core.Keyword(null, "db-after", "db-after", 1658340159)).cljs$core$IFn$_invoke$arity$1(report), conn);
  });
  todomvc.services.start_services.call(null, app);
  render.call(null, cljs.core.deref.call(null, conn), conn);
  todomvc.application.app = app;
};
goog.exportSymbol("todomvc.application.main", todomvc.application.main);
