var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2173";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__16577__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__16577 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16577__delegate.call(this, args);
    };
    G__16577.cljs$lang$maxFixedArity = 0;
    G__16577.cljs$lang$applyTo = function(arglist__16578) {
      var args = cljs.core.seq(arglist__16578);
      return G__16577__delegate(args);
    };
    G__16577.cljs$core$IFn$_invoke$arity$variadic = G__16577__delegate;
    return G__16577;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__10250__auto__ = ty;
    if (cljs.core.truth_(and__10250__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__10250__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__11110__auto___16579 = len;
  var i_16580 = 0;
  while (true) {
    if (i_16580 < n__11110__auto___16579) {
      new_arr[i_16580] = arr[i_16580];
      var G__16581 = i_16580 + 1;
      i_16580 = G__16581;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__16582__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__16582 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16582__delegate.call(this, array, i, idxs);
    };
    G__16582.cljs$lang$maxFixedArity = 2;
    G__16582.cljs$lang$applyTo = function(arglist__16583) {
      var array = cljs.core.first(arglist__16583);
      arglist__16583 = cljs.core.next(arglist__16583);
      var i = cljs.core.first(arglist__16583);
      var idxs = cljs.core.rest(arglist__16583);
      return G__16582__delegate(array, i, idxs);
    };
    G__16582.cljs$core$IFn$_invoke$arity$variadic = G__16582__delegate;
    return G__16582;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__16584__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__16584 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16584__delegate.call(this, array, idx, idx2, idxv);
    };
    G__16584.cljs$lang$maxFixedArity = 3;
    G__16584.cljs$lang$applyTo = function(arglist__16585) {
      var array = cljs.core.first(arglist__16585);
      arglist__16585 = cljs.core.next(arglist__16585);
      var idx = cljs.core.first(arglist__16585);
      arglist__16585 = cljs.core.next(arglist__16585);
      var idx2 = cljs.core.first(arglist__16585);
      var idxv = cljs.core.rest(arglist__16585);
      return G__16584__delegate(array, idx, idx2, idxv);
    };
    G__16584.cljs$core$IFn$_invoke$arity$variadic = G__16584__delegate;
    return G__16584;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj16587 = {};
  return obj16587;
}();
cljs.core.IFn = function() {
  var obj16589 = {};
  return obj16589;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__10250__auto__ = this$;
      if (and__10250__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__10889__auto__ = this$ == null ? null : this$;
      return function() {
        var or__10262__auto__ = cljs.core._invoke[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._invoke["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj16591 = {};
  return obj16591;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__10250__auto__ = value;
    if (and__10250__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__10889__auto__ = value == null ? null : value;
    return function() {
      var or__10262__auto__ = cljs.core._clone[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._clone["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj16593 = {};
  return obj16593;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._count[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._count["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj16595 = {};
  return obj16595;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._empty[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._empty["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj16597 = {};
  return obj16597;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._conj[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._conj["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj16599 = {};
  return obj16599;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__10250__auto__ = coll;
      if (and__10250__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__10889__auto__ = coll == null ? null : coll;
      return function() {
        var or__10262__auto__ = cljs.core._nth[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._nth["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__10250__auto__ = coll;
      if (and__10250__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__10889__auto__ = coll == null ? null : coll;
      return function() {
        var or__10262__auto__ = cljs.core._nth[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._nth["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj16601 = {};
  return obj16601;
}();
cljs.core.ISeq = function() {
  var obj16603 = {};
  return obj16603;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._first[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._first["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._rest[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._rest["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj16605 = {};
  return obj16605;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._next[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._next["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj16607 = {};
  return obj16607;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__10250__auto__ = o;
      if (and__10250__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__10889__auto__ = o == null ? null : o;
      return function() {
        var or__10262__auto__ = cljs.core._lookup[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._lookup["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__10250__auto__ = o;
      if (and__10250__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__10889__auto__ = o == null ? null : o;
      return function() {
        var or__10262__auto__ = cljs.core._lookup[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._lookup["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj16609 = {};
  return obj16609;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._assoc[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._assoc["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj16611 = {};
  return obj16611;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._dissoc[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._dissoc["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj16613 = {};
  return obj16613;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._key[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._key["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._val[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._val["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj16615 = {};
  return obj16615;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._disjoin[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._disjoin["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj16617 = {};
  return obj16617;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._peek[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._peek["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._pop[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._pop["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj16619 = {};
  return obj16619;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._assoc_n[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._assoc_n["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj16621 = {};
  return obj16621;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._deref[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._deref["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj16623 = {};
  return obj16623;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj16625 = {};
  return obj16625;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._meta[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._meta["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj16627 = {};
  return obj16627;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._with_meta[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._with_meta["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj16629 = {};
  return obj16629;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__10250__auto__ = coll;
      if (and__10250__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__10889__auto__ = coll == null ? null : coll;
      return function() {
        var or__10262__auto__ = cljs.core._reduce[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._reduce["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__10250__auto__ = coll;
      if (and__10250__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__10889__auto__ = coll == null ? null : coll;
      return function() {
        var or__10262__auto__ = cljs.core._reduce[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._reduce["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj16631 = {};
  return obj16631;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._kv_reduce[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj16633 = {};
  return obj16633;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._equiv[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._equiv["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj16635 = {};
  return obj16635;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._hash[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._hash["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj16637 = {};
  return obj16637;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._seq[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._seq["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj16639 = {};
  return obj16639;
}();
cljs.core.IList = function() {
  var obj16641 = {};
  return obj16641;
}();
cljs.core.IRecord = function() {
  var obj16643 = {};
  return obj16643;
}();
cljs.core.IReversible = function() {
  var obj16645 = {};
  return obj16645;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._rseq[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._rseq["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj16647 = {};
  return obj16647;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._sorted_seq[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._entry_key[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._entry_key["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._comparator[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._comparator["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj16649 = {};
  return obj16649;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__10250__auto__ = writer;
    if (and__10250__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__10889__auto__ = writer == null ? null : writer;
    return function() {
      var or__10262__auto__ = cljs.core._write[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._write["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__10250__auto__ = writer;
    if (and__10250__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__10889__auto__ = writer == null ? null : writer;
    return function() {
      var or__10262__auto__ = cljs.core._flush[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._flush["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj16651 = {};
  return obj16651;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._pr_writer[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._pr_writer["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj16653 = {};
  return obj16653;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__10250__auto__ = d;
    if (and__10250__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__10889__auto__ = d == null ? null : d;
    return function() {
      var or__10262__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj16655 = {};
  return obj16655;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__10250__auto__ = this$;
    if (and__10250__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__10889__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10262__auto__ = cljs.core._notify_watches[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._notify_watches["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__10250__auto__ = this$;
    if (and__10250__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__10889__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10262__auto__ = cljs.core._add_watch[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._add_watch["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__10250__auto__ = this$;
    if (and__10250__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__10889__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10262__auto__ = cljs.core._remove_watch[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._remove_watch["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj16657 = {};
  return obj16657;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._as_transient[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._as_transient["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj16659 = {};
  return obj16659;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__10250__auto__ = tcoll;
    if (and__10250__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__10889__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10262__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__10250__auto__ = tcoll;
    if (and__10250__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__10889__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10262__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj16661 = {};
  return obj16661;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__10250__auto__ = tcoll;
    if (and__10250__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__10889__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10262__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj16663 = {};
  return obj16663;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__10250__auto__ = tcoll;
    if (and__10250__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__10889__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10262__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj16665 = {};
  return obj16665;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__10250__auto__ = tcoll;
    if (and__10250__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__10889__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10262__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__10250__auto__ = tcoll;
    if (and__10250__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__10889__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10262__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj16667 = {};
  return obj16667;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__10250__auto__ = tcoll;
    if (and__10250__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__10889__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__10262__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj16669 = {};
  return obj16669;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__10250__auto__ = x;
    if (and__10250__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__10889__auto__ = x == null ? null : x;
    return function() {
      var or__10262__auto__ = cljs.core._compare[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._compare["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj16671 = {};
  return obj16671;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._drop_first[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._drop_first["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj16673 = {};
  return obj16673;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._chunked_first[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._chunked_first["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._chunked_rest[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj16675 = {};
  return obj16675;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__10250__auto__ = coll;
    if (and__10250__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__10889__auto__ = coll == null ? null : coll;
    return function() {
      var or__10262__auto__ = cljs.core._chunked_next[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._chunked_next["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj16677 = {};
  return obj16677;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__10250__auto__ = x;
    if (and__10250__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__10889__auto__ = x == null ? null : x;
    return function() {
      var or__10262__auto__ = cljs.core._name[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._name["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__10250__auto__ = x;
    if (and__10250__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__10889__auto__ = x == null ? null : x;
    return function() {
      var or__10262__auto__ = cljs.core._namespace[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._namespace["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__10250__auto__ = cljs.core.not.call(null, a.ns);
      if (and__10250__auto__) {
        return b.ns;
      } else {
        return and__10250__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__10673__auto__ = self__._hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__16679 = null;
  var G__16679__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__16679__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__16679 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16679__2.call(this, self__, coll);
      case 3:
        return G__16679__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16679;
}();
cljs.core.Symbol.prototype.apply = function(self__, args16678) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16678)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__16681 = value;
  if (G__16681) {
    var bit__10912__auto__ = G__16681.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__10912__auto__ || G__16681.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__16681.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__16681);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__16681);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16683 = coll;
      if (G__16683) {
        var bit__10905__auto__ = G__16683.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__10905__auto__ || G__16683.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16685 = coll;
      if (G__16685) {
        var bit__10905__auto__ = G__16685.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10905__auto__ || G__16685.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16687 = coll;
      if (G__16687) {
        var bit__10905__auto__ = G__16687.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10905__auto__ || G__16687.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__16689 = coll;
      if (G__16689) {
        var bit__10905__auto__ = G__16689.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__10905__auto__ || G__16689.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__16690__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__16691 = y;
            var G__16692 = cljs.core.first.call(null, more);
            var G__16693 = cljs.core.next.call(null, more);
            x = G__16691;
            y = G__16692;
            more = G__16693;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16690 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16690__delegate.call(this, x, y, more);
    };
    G__16690.cljs$lang$maxFixedArity = 2;
    G__16690.cljs$lang$applyTo = function(arglist__16694) {
      var x = cljs.core.first(arglist__16694);
      arglist__16694 = cljs.core.next(arglist__16694);
      var y = cljs.core.first(arglist__16694);
      var more = cljs.core.rest(arglist__16694);
      return G__16690__delegate(x, y, more);
    };
    G__16690.cljs$core$IFn$_invoke$arity$variadic = G__16690__delegate;
    return G__16690;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__16695 = nval;
            var G__16696 = n + 1;
            val = G__16695;
            n = G__16696;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16697 = nval;
          var G__16698 = n + 1;
          val__$1 = G__16697;
          n = G__16698;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16699 = nval;
          var G__16700 = n + 1;
          val__$1 = G__16699;
          n = G__16700;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__16701 = nval;
            var G__16702 = n + 1;
            val = G__16701;
            n = G__16702;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16703 = nval;
          var G__16704 = n + 1;
          val__$1 = G__16703;
          n = G__16704;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16705 = nval;
          var G__16706 = n + 1;
          val__$1 = G__16705;
          n = G__16706;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__16708 = x;
  if (G__16708) {
    var bit__10912__auto__ = G__16708.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__10912__auto__ || G__16708.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__16708.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__16708);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__16708);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__16710 = x;
  if (G__16710) {
    var bit__10912__auto__ = G__16710.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__10912__auto__ || G__16710.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__16710.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__16710);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__16710);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__16711 = sn;
      s = G__16711;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__16712__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__16713 = conj.call(null, coll, x);
          var G__16714 = cljs.core.first.call(null, xs);
          var G__16715 = cljs.core.next.call(null, xs);
          coll = G__16713;
          x = G__16714;
          xs = G__16715;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__16712 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16712__delegate.call(this, coll, x, xs);
    };
    G__16712.cljs$lang$maxFixedArity = 2;
    G__16712.cljs$lang$applyTo = function(arglist__16716) {
      var coll = cljs.core.first(arglist__16716);
      arglist__16716 = cljs.core.next(arglist__16716);
      var x = cljs.core.first(arglist__16716);
      var xs = cljs.core.rest(arglist__16716);
      return G__16712__delegate(coll, x, xs);
    };
    G__16712.cljs$core$IFn$_invoke$arity$variadic = G__16712__delegate;
    return G__16712;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__16717 = cljs.core.next.call(null, s);
      var G__16718 = acc + 1;
      s = G__16717;
      acc = G__16718;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__16720 = coll;
      if (G__16720) {
        var bit__10905__auto__ = G__16720.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__10905__auto__ || G__16720.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__16721 = cljs.core.next.call(null, coll);
              var G__16722 = n - 1;
              coll = G__16721;
              n = G__16722;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__16723 = cljs.core.next.call(null, coll);
              var G__16724 = n - 1;
              var G__16725 = not_found;
              coll = G__16723;
              n = G__16724;
              not_found = G__16725;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__16730 = coll;
        if (G__16730) {
          var bit__10905__auto__ = G__16730.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__10905__auto__ || G__16730.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__16731 = coll;
                  if (G__16731) {
                    var bit__10912__auto__ = G__16731.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__10912__auto__ || G__16731.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__16731.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16731);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16731);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__16732 = coll;
        if (G__16732) {
          var bit__10905__auto__ = G__16732.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__10905__auto__ || G__16732.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__16733 = coll;
                  if (G__16733) {
                    var bit__10912__auto__ = G__16733.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__10912__auto__ || G__16733.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__16733.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16733);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16733);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__16736 = o;
        if (G__16736) {
          var bit__10905__auto__ = G__16736.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__10905__auto__ || G__16736.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__16737 = o;
        if (G__16737) {
          var bit__10905__auto__ = G__16737.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__10905__auto__ || G__16737.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__16738__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__16739 = ret;
          var G__16740 = cljs.core.first.call(null, kvs);
          var G__16741 = cljs.core.second.call(null, kvs);
          var G__16742 = cljs.core.nnext.call(null, kvs);
          coll = G__16739;
          k = G__16740;
          v = G__16741;
          kvs = G__16742;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__16738 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__16738__delegate.call(this, coll, k, v, kvs);
    };
    G__16738.cljs$lang$maxFixedArity = 3;
    G__16738.cljs$lang$applyTo = function(arglist__16743) {
      var coll = cljs.core.first(arglist__16743);
      arglist__16743 = cljs.core.next(arglist__16743);
      var k = cljs.core.first(arglist__16743);
      arglist__16743 = cljs.core.next(arglist__16743);
      var v = cljs.core.first(arglist__16743);
      var kvs = cljs.core.rest(arglist__16743);
      return G__16738__delegate(coll, k, v, kvs);
    };
    G__16738.cljs$core$IFn$_invoke$arity$variadic = G__16738__delegate;
    return G__16738;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__16744__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__16745 = ret;
            var G__16746 = cljs.core.first.call(null, ks);
            var G__16747 = cljs.core.next.call(null, ks);
            coll = G__16745;
            k = G__16746;
            ks = G__16747;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__16744 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16744__delegate.call(this, coll, k, ks);
    };
    G__16744.cljs$lang$maxFixedArity = 2;
    G__16744.cljs$lang$applyTo = function(arglist__16748) {
      var coll = cljs.core.first(arglist__16748);
      arglist__16748 = cljs.core.next(arglist__16748);
      var k = cljs.core.first(arglist__16748);
      var ks = cljs.core.rest(arglist__16748);
      return G__16744__delegate(coll, k, ks);
    };
    G__16744.cljs$core$IFn$_invoke$arity$variadic = G__16744__delegate;
    return G__16744;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__10262__auto__ = goog.isFunction(f);
  if (or__10262__auto__) {
    return or__10262__auto__;
  } else {
    var G__16752 = f;
    if (G__16752) {
      var bit__10912__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__10262__auto____$1 = bit__10912__auto__;
        if (cljs.core.truth_(or__10262__auto____$1)) {
          return or__10262__auto____$1;
        } else {
          return G__16752.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__16752.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__16752);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__16752);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__16760 = o;
    if (G__16760) {
      var bit__10912__auto__ = G__16760.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__10912__auto__ || G__16760.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__16760.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__16760);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__16760);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t16761 !== "undefined") {
      } else {
        cljs.core.t16761 = function(meta, o, with_meta, meta16762) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta16762 = meta16762;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t16761.cljs$lang$type = true;
        cljs.core.t16761.cljs$lang$ctorStr = "cljs.core/t16761";
        cljs.core.t16761.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
          return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/t16761");
        };
        cljs.core.t16761.prototype.call = function() {
          var G__16765__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__16765 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__16765__delegate.call(this, self__, args);
          };
          G__16765.cljs$lang$maxFixedArity = 1;
          G__16765.cljs$lang$applyTo = function(arglist__16766) {
            var self__ = cljs.core.first(arglist__16766);
            var args = cljs.core.rest(arglist__16766);
            return G__16765__delegate(self__, args);
          };
          G__16765.cljs$core$IFn$_invoke$arity$variadic = G__16765__delegate;
          return G__16765;
        }();
        cljs.core.t16761.prototype.apply = function(self__, args16764) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16764)));
        };
        cljs.core.t16761.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__16767__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__16767 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__16767__delegate.call(this, args);
          };
          G__16767.cljs$lang$maxFixedArity = 0;
          G__16767.cljs$lang$applyTo = function(arglist__16768) {
            var args = cljs.core.seq(arglist__16768);
            return G__16767__delegate(args);
          };
          G__16767.cljs$core$IFn$_invoke$arity$variadic = G__16767__delegate;
          return G__16767;
        }();
        cljs.core.t16761.prototype.cljs$core$Fn$ = true;
        cljs.core.t16761.prototype.cljs$core$IMeta$_meta$arity$1 = function(_16763) {
          var self__ = this;
          var _16763__$1 = this;
          return self__.meta16762;
        };
        cljs.core.t16761.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_16763, meta16762__$1) {
          var self__ = this;
          var _16763__$1 = this;
          return new cljs.core.t16761(self__.meta, self__.o, self__.with_meta, meta16762__$1);
        };
        cljs.core.__GT_t16761 = function __GT_t16761(meta__$1, o__$1, with_meta__$1, meta16762) {
          return new cljs.core.t16761(meta__$1, o__$1, with_meta__$1, meta16762);
        };
      }
      return new cljs.core.t16761(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__10250__auto__ = !(o == null);
    if (and__10250__auto__) {
      var G__16772 = o;
      if (G__16772) {
        var bit__10912__auto__ = G__16772.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__10912__auto__ || G__16772.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__16772.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16772);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__16772);
      }
    } else {
      return and__10250__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__16773__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__16774 = ret;
            var G__16775 = cljs.core.first.call(null, ks);
            var G__16776 = cljs.core.next.call(null, ks);
            coll = G__16774;
            k = G__16775;
            ks = G__16776;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__16773 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16773__delegate.call(this, coll, k, ks);
    };
    G__16773.cljs$lang$maxFixedArity = 2;
    G__16773.cljs$lang$applyTo = function(arglist__16777) {
      var coll = cljs.core.first(arglist__16777);
      arglist__16777 = cljs.core.next(arglist__16777);
      var k = cljs.core.first(arglist__16777);
      var ks = cljs.core.rest(arglist__16777);
      return G__16773__delegate(coll, k, ks);
    };
    G__16773.cljs$core$IFn$_invoke$arity$variadic = G__16773__delegate;
    return G__16773;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj16779 = {};
  return obj16779;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj16783 = {};
      return obj16783;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__16785 = o;
    if (G__16785) {
      var bit__10905__auto__ = G__16785.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__10905__auto__ || G__16785.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16787 = x;
    if (G__16787) {
      var bit__10912__auto__ = G__16787.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__10912__auto__ || G__16787.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__16787.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__16787);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__16787);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16789 = x;
    if (G__16789) {
      var bit__10912__auto__ = G__16789.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__10912__auto__ || G__16789.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__16789.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__16789);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__16789);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__16791 = x;
  if (G__16791) {
    var bit__10912__auto__ = G__16791.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__10912__auto__ || G__16791.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__16791.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__16791);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__16791);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__16793 = x;
  if (G__16793) {
    var bit__10912__auto__ = G__16793.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__10912__auto__ || G__16793.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__16793.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__16793);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__16793);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__16795 = x;
  if (G__16795) {
    var bit__10912__auto__ = G__16795.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__10912__auto__ || G__16795.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__16795.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__16795);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__16795);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__16797 = x;
  if (G__16797) {
    var bit__10912__auto__ = G__16797.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__10912__auto__ || G__16797.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__16797.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__16797);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__16797);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__16799 = x;
    if (G__16799) {
      var bit__10912__auto__ = G__16799.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__10912__auto__ || G__16799.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__16799.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__16799);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__16799);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__16801 = x;
  if (G__16801) {
    var bit__10912__auto__ = G__16801.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__10912__auto__ || G__16801.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__16801.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__16801);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__16801);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__16803 = x;
  if (G__16803) {
    var bit__10905__auto__ = G__16803.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__10905__auto__ || G__16803.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj16807 = {};
    return obj16807;
  };
  var js_obj__1 = function() {
    var G__16808__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__16808 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__16808__delegate.call(this, keyvals);
    };
    G__16808.cljs$lang$maxFixedArity = 0;
    G__16808.cljs$lang$applyTo = function(arglist__16809) {
      var keyvals = cljs.core.seq(arglist__16809);
      return G__16808__delegate(keyvals);
    };
    G__16808.cljs$core$IFn$_invoke$arity$variadic = G__16808__delegate;
    return G__16808;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16810 = i__$1 + 1;
      var G__16811 = j__$1 + 1;
      var G__16812 = len__$1 - 1;
      i__$1 = G__16810;
      j__$1 = G__16811;
      len__$1 = G__16812;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__16813 = i__$1 - 1;
      var G__16814 = j__$1 - 1;
      var G__16815 = len__$1 - 1;
      i__$1 = G__16813;
      j__$1 = G__16814;
      len__$1 = G__16815;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj16817 = {};
  return obj16817;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__16819 = s;
    if (G__16819) {
      var bit__10912__auto__ = G__16819.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__10912__auto__ || G__16819.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__16819.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16819);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__16819);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__16821 = s;
  if (G__16821) {
    var bit__10912__auto__ = G__16821.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__10912__auto__ || G__16821.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__16821.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16821);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__16821);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__10262__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__10262__auto__) {
    return or__10262__auto__;
  } else {
    var G__16825 = f;
    if (G__16825) {
      var bit__10912__auto__ = G__16825.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__10912__auto__ || G__16825.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__16825.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16825);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__16825);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__16826__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__16827 = cljs.core.conj.call(null, s, x__$1);
              var G__16828 = etc;
              s = G__16827;
              xs = G__16828;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__16826 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16826__delegate.call(this, x, y, more);
    };
    G__16826.cljs$lang$maxFixedArity = 2;
    G__16826.cljs$lang$applyTo = function(arglist__16829) {
      var x = cljs.core.first(arglist__16829);
      arglist__16829 = cljs.core.next(arglist__16829);
      var y = cljs.core.first(arglist__16829);
      var more = cljs.core.rest(arglist__16829);
      return G__16826__delegate(x, y, more);
    };
    G__16826.cljs$core$IFn$_invoke$arity$variadic = G__16826__delegate;
    return G__16826;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__10262__auto__ = cljs.core.seq.call(null, coll);
    if (or__10262__auto__) {
      return or__10262__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__16831 = x;
            if (G__16831) {
              var bit__10905__auto__ = G__16831.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__10905__auto__ || G__16831.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__16832 = xs;
        var G__16833 = ys;
        var G__16834 = len;
        var G__16835 = n + 1;
        xs = G__16832;
        ys = G__16833;
        len = G__16834;
        n = G__16835;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__16836 = nval;
          var G__16837 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__16836;
          coll__$1 = G__16837;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__16840 = coll;
      if (G__16840) {
        var bit__10905__auto__ = G__16840.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__10905__auto__ || G__16840.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__16841 = coll;
      if (G__16841) {
        var bit__10905__auto__ = G__16841.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__10905__auto__ || G__16841.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__16842__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__16842 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16842__delegate.call(this, x, y, more);
    };
    G__16842.cljs$lang$maxFixedArity = 2;
    G__16842.cljs$lang$applyTo = function(arglist__16843) {
      var x = cljs.core.first(arglist__16843);
      arglist__16843 = cljs.core.next(arglist__16843);
      var y = cljs.core.first(arglist__16843);
      var more = cljs.core.rest(arglist__16843);
      return G__16842__delegate(x, y, more);
    };
    G__16842.cljs$core$IFn$_invoke$arity$variadic = G__16842__delegate;
    return G__16842;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__16844__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__16844 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16844__delegate.call(this, x, y, more);
    };
    G__16844.cljs$lang$maxFixedArity = 2;
    G__16844.cljs$lang$applyTo = function(arglist__16845) {
      var x = cljs.core.first(arglist__16845);
      arglist__16845 = cljs.core.next(arglist__16845);
      var y = cljs.core.first(arglist__16845);
      var more = cljs.core.rest(arglist__16845);
      return G__16844__delegate(x, y, more);
    };
    G__16844.cljs$core$IFn$_invoke$arity$variadic = G__16844__delegate;
    return G__16844;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__16846__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__16846 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16846__delegate.call(this, x, y, more);
    };
    G__16846.cljs$lang$maxFixedArity = 2;
    G__16846.cljs$lang$applyTo = function(arglist__16847) {
      var x = cljs.core.first(arglist__16847);
      arglist__16847 = cljs.core.next(arglist__16847);
      var y = cljs.core.first(arglist__16847);
      var more = cljs.core.rest(arglist__16847);
      return G__16846__delegate(x, y, more);
    };
    G__16846.cljs$core$IFn$_invoke$arity$variadic = G__16846__delegate;
    return G__16846;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__16848__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__16848 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16848__delegate.call(this, x, y, more);
    };
    G__16848.cljs$lang$maxFixedArity = 2;
    G__16848.cljs$lang$applyTo = function(arglist__16849) {
      var x = cljs.core.first(arglist__16849);
      arglist__16849 = cljs.core.next(arglist__16849);
      var y = cljs.core.first(arglist__16849);
      var more = cljs.core.rest(arglist__16849);
      return G__16848__delegate(x, y, more);
    };
    G__16848.cljs$core$IFn$_invoke$arity$variadic = G__16848__delegate;
    return G__16848;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__16850__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__16851 = y;
            var G__16852 = cljs.core.first.call(null, more);
            var G__16853 = cljs.core.next.call(null, more);
            x = G__16851;
            y = G__16852;
            more = G__16853;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16850 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16850__delegate.call(this, x, y, more);
    };
    G__16850.cljs$lang$maxFixedArity = 2;
    G__16850.cljs$lang$applyTo = function(arglist__16854) {
      var x = cljs.core.first(arglist__16854);
      arglist__16854 = cljs.core.next(arglist__16854);
      var y = cljs.core.first(arglist__16854);
      var more = cljs.core.rest(arglist__16854);
      return G__16850__delegate(x, y, more);
    };
    G__16850.cljs$core$IFn$_invoke$arity$variadic = G__16850__delegate;
    return G__16850;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__16855__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16856 = y;
            var G__16857 = cljs.core.first.call(null, more);
            var G__16858 = cljs.core.next.call(null, more);
            x = G__16856;
            y = G__16857;
            more = G__16858;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16855 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16855__delegate.call(this, x, y, more);
    };
    G__16855.cljs$lang$maxFixedArity = 2;
    G__16855.cljs$lang$applyTo = function(arglist__16859) {
      var x = cljs.core.first(arglist__16859);
      arglist__16859 = cljs.core.next(arglist__16859);
      var y = cljs.core.first(arglist__16859);
      var more = cljs.core.rest(arglist__16859);
      return G__16855__delegate(x, y, more);
    };
    G__16855.cljs$core$IFn$_invoke$arity$variadic = G__16855__delegate;
    return G__16855;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__16860__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__16861 = y;
            var G__16862 = cljs.core.first.call(null, more);
            var G__16863 = cljs.core.next.call(null, more);
            x = G__16861;
            y = G__16862;
            more = G__16863;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16860 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16860__delegate.call(this, x, y, more);
    };
    G__16860.cljs$lang$maxFixedArity = 2;
    G__16860.cljs$lang$applyTo = function(arglist__16864) {
      var x = cljs.core.first(arglist__16864);
      arglist__16864 = cljs.core.next(arglist__16864);
      var y = cljs.core.first(arglist__16864);
      var more = cljs.core.rest(arglist__16864);
      return G__16860__delegate(x, y, more);
    };
    G__16860.cljs$core$IFn$_invoke$arity$variadic = G__16860__delegate;
    return G__16860;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__16865__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__16866 = y;
            var G__16867 = cljs.core.first.call(null, more);
            var G__16868 = cljs.core.next.call(null, more);
            x = G__16866;
            y = G__16867;
            more = G__16868;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16865 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16865__delegate.call(this, x, y, more);
    };
    G__16865.cljs$lang$maxFixedArity = 2;
    G__16865.cljs$lang$applyTo = function(arglist__16869) {
      var x = cljs.core.first(arglist__16869);
      arglist__16869 = cljs.core.next(arglist__16869);
      var y = cljs.core.first(arglist__16869);
      var more = cljs.core.rest(arglist__16869);
      return G__16865__delegate(x, y, more);
    };
    G__16865.cljs$core$IFn$_invoke$arity$variadic = G__16865__delegate;
    return G__16865;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__10569__auto__ = x;
    var y__10570__auto__ = y;
    return x__10569__auto__ > y__10570__auto__ ? x__10569__auto__ : y__10570__auto__;
  };
  var max__3 = function() {
    var G__16870__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__10569__auto__ = x;
        var y__10570__auto__ = y;
        return x__10569__auto__ > y__10570__auto__ ? x__10569__auto__ : y__10570__auto__;
      }(), more);
    };
    var G__16870 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16870__delegate.call(this, x, y, more);
    };
    G__16870.cljs$lang$maxFixedArity = 2;
    G__16870.cljs$lang$applyTo = function(arglist__16871) {
      var x = cljs.core.first(arglist__16871);
      arglist__16871 = cljs.core.next(arglist__16871);
      var y = cljs.core.first(arglist__16871);
      var more = cljs.core.rest(arglist__16871);
      return G__16870__delegate(x, y, more);
    };
    G__16870.cljs$core$IFn$_invoke$arity$variadic = G__16870__delegate;
    return G__16870;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__10576__auto__ = x;
    var y__10577__auto__ = y;
    return x__10576__auto__ < y__10577__auto__ ? x__10576__auto__ : y__10577__auto__;
  };
  var min__3 = function() {
    var G__16872__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__10576__auto__ = x;
        var y__10577__auto__ = y;
        return x__10576__auto__ < y__10577__auto__ ? x__10576__auto__ : y__10577__auto__;
      }(), more);
    };
    var G__16872 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16872__delegate.call(this, x, y, more);
    };
    G__16872.cljs$lang$maxFixedArity = 2;
    G__16872.cljs$lang$applyTo = function(arglist__16873) {
      var x = cljs.core.first(arglist__16873);
      arglist__16873 = cljs.core.next(arglist__16873);
      var y = cljs.core.first(arglist__16873);
      var more = cljs.core.rest(arglist__16873);
      return G__16872__delegate(x, y, more);
    };
    G__16872.cljs$core$IFn$_invoke$arity$variadic = G__16872__delegate;
    return G__16872;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__16874__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__16874 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16874__delegate.call(this, x, y, more);
    };
    G__16874.cljs$lang$maxFixedArity = 2;
    G__16874.cljs$lang$applyTo = function(arglist__16875) {
      var x = cljs.core.first(arglist__16875);
      arglist__16875 = cljs.core.next(arglist__16875);
      var y = cljs.core.first(arglist__16875);
      var more = cljs.core.rest(arglist__16875);
      return G__16874__delegate(x, y, more);
    };
    G__16874.cljs$core$IFn$_invoke$arity$variadic = G__16874__delegate;
    return G__16874;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__16876__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__16876 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16876__delegate.call(this, x, y, more);
    };
    G__16876.cljs$lang$maxFixedArity = 2;
    G__16876.cljs$lang$applyTo = function(arglist__16877) {
      var x = cljs.core.first(arglist__16877);
      arglist__16877 = cljs.core.next(arglist__16877);
      var y = cljs.core.first(arglist__16877);
      var more = cljs.core.rest(arglist__16877);
      return G__16876__delegate(x, y, more);
    };
    G__16876.cljs$core$IFn$_invoke$arity$variadic = G__16876__delegate;
    return G__16876;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__16878__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__16878 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16878__delegate.call(this, x, y, more);
    };
    G__16878.cljs$lang$maxFixedArity = 2;
    G__16878.cljs$lang$applyTo = function(arglist__16879) {
      var x = cljs.core.first(arglist__16879);
      arglist__16879 = cljs.core.next(arglist__16879);
      var y = cljs.core.first(arglist__16879);
      var more = cljs.core.rest(arglist__16879);
      return G__16878__delegate(x, y, more);
    };
    G__16878.cljs$core$IFn$_invoke$arity$variadic = G__16878__delegate;
    return G__16878;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__16880__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__16880 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16880__delegate.call(this, x, y, more);
    };
    G__16880.cljs$lang$maxFixedArity = 2;
    G__16880.cljs$lang$applyTo = function(arglist__16881) {
      var x = cljs.core.first(arglist__16881);
      arglist__16881 = cljs.core.next(arglist__16881);
      var y = cljs.core.first(arglist__16881);
      var more = cljs.core.rest(arglist__16881);
      return G__16880__delegate(x, y, more);
    };
    G__16880.cljs$core$IFn$_invoke$arity$variadic = G__16880__delegate;
    return G__16880;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__16882__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__16882 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16882__delegate.call(this, x, y, more);
    };
    G__16882.cljs$lang$maxFixedArity = 2;
    G__16882.cljs$lang$applyTo = function(arglist__16883) {
      var x = cljs.core.first(arglist__16883);
      arglist__16883 = cljs.core.next(arglist__16883);
      var y = cljs.core.first(arglist__16883);
      var more = cljs.core.rest(arglist__16883);
      return G__16882__delegate(x, y, more);
    };
    G__16882.cljs$core$IFn$_invoke$arity$variadic = G__16882__delegate;
    return G__16882;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__16884__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__16884 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16884__delegate.call(this, x, y, more);
    };
    G__16884.cljs$lang$maxFixedArity = 2;
    G__16884.cljs$lang$applyTo = function(arglist__16885) {
      var x = cljs.core.first(arglist__16885);
      arglist__16885 = cljs.core.next(arglist__16885);
      var y = cljs.core.first(arglist__16885);
      var more = cljs.core.rest(arglist__16885);
      return G__16884__delegate(x, y, more);
    };
    G__16884.cljs$core$IFn$_invoke$arity$variadic = G__16884__delegate;
    return G__16884;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__16886__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__16886 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16886__delegate.call(this, x, y, more);
    };
    G__16886.cljs$lang$maxFixedArity = 2;
    G__16886.cljs$lang$applyTo = function(arglist__16887) {
      var x = cljs.core.first(arglist__16887);
      arglist__16887 = cljs.core.next(arglist__16887);
      var y = cljs.core.first(arglist__16887);
      var more = cljs.core.rest(arglist__16887);
      return G__16886__delegate(x, y, more);
    };
    G__16886.cljs$core$IFn$_invoke$arity$variadic = G__16886__delegate;
    return G__16886;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__16888__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__16889 = y;
            var G__16890 = cljs.core.first.call(null, more);
            var G__16891 = cljs.core.next.call(null, more);
            x = G__16889;
            y = G__16890;
            more = G__16891;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__16888 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16888__delegate.call(this, x, y, more);
    };
    G__16888.cljs$lang$maxFixedArity = 2;
    G__16888.cljs$lang$applyTo = function(arglist__16892) {
      var x = cljs.core.first(arglist__16892);
      arglist__16892 = cljs.core.next(arglist__16892);
      var y = cljs.core.first(arglist__16892);
      var more = cljs.core.rest(arglist__16892);
      return G__16888__delegate(x, y, more);
    };
    G__16888.cljs$core$IFn$_invoke$arity$variadic = G__16888__delegate;
    return G__16888;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__16893 = n__$1 - 1;
      var G__16894 = cljs.core.next.call(null, xs);
      n__$1 = G__16893;
      xs = G__16894;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__16895__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__16896 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__16897 = cljs.core.next.call(null, more);
          sb = G__16896;
          more = G__16897;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__16895 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__16895__delegate.call(this, x, ys);
    };
    G__16895.cljs$lang$maxFixedArity = 1;
    G__16895.cljs$lang$applyTo = function(arglist__16898) {
      var x = cljs.core.first(arglist__16898);
      var ys = cljs.core.rest(arglist__16898);
      return G__16895__delegate(x, ys);
    };
    G__16895.cljs$core$IFn$_invoke$arity$variadic = G__16895__delegate;
    return G__16895;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__16899 = cljs.core.next.call(null, xs);
            var G__16900 = cljs.core.next.call(null, ys);
            xs = G__16899;
            ys = G__16900;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__16901 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__16902 = cljs.core.next.call(null, s);
        res = G__16901;
        s = G__16902;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__16903 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__16904 = cljs.core.next.call(null, s);
      h = G__16903;
      s = G__16904;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__16905 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__16906 = cljs.core.next.call(null, s__$1);
      h = G__16905;
      s__$1 = G__16906;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__16913_16919 = cljs.core.seq.call(null, fn_map);
  var chunk__16914_16920 = null;
  var count__16915_16921 = 0;
  var i__16916_16922 = 0;
  while (true) {
    if (i__16916_16922 < count__16915_16921) {
      var vec__16917_16923 = cljs.core._nth.call(null, chunk__16914_16920, i__16916_16922);
      var key_name_16924 = cljs.core.nth.call(null, vec__16917_16923, 0, null);
      var f_16925 = cljs.core.nth.call(null, vec__16917_16923, 1, null);
      var str_name_16926 = cljs.core.name.call(null, key_name_16924);
      obj[str_name_16926] = f_16925;
      var G__16927 = seq__16913_16919;
      var G__16928 = chunk__16914_16920;
      var G__16929 = count__16915_16921;
      var G__16930 = i__16916_16922 + 1;
      seq__16913_16919 = G__16927;
      chunk__16914_16920 = G__16928;
      count__16915_16921 = G__16929;
      i__16916_16922 = G__16930;
      continue;
    } else {
      var temp__4092__auto___16931 = cljs.core.seq.call(null, seq__16913_16919);
      if (temp__4092__auto___16931) {
        var seq__16913_16932__$1 = temp__4092__auto___16931;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16913_16932__$1)) {
          var c__11010__auto___16933 = cljs.core.chunk_first.call(null, seq__16913_16932__$1);
          var G__16934 = cljs.core.chunk_rest.call(null, seq__16913_16932__$1);
          var G__16935 = c__11010__auto___16933;
          var G__16936 = cljs.core.count.call(null, c__11010__auto___16933);
          var G__16937 = 0;
          seq__16913_16919 = G__16934;
          chunk__16914_16920 = G__16935;
          count__16915_16921 = G__16936;
          i__16916_16922 = G__16937;
          continue;
        } else {
          var vec__16918_16938 = cljs.core.first.call(null, seq__16913_16932__$1);
          var key_name_16939 = cljs.core.nth.call(null, vec__16918_16938, 0, null);
          var f_16940 = cljs.core.nth.call(null, vec__16918_16938, 1, null);
          var str_name_16941 = cljs.core.name.call(null, key_name_16939);
          obj[str_name_16941] = f_16940;
          var G__16942 = cljs.core.next.call(null, seq__16913_16932__$1);
          var G__16943 = null;
          var G__16944 = 0;
          var G__16945 = 0;
          seq__16913_16919 = G__16942;
          chunk__16914_16920 = G__16943;
          count__16915_16921 = G__16944;
          i__16916_16922 = G__16945;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__16947 = coll;
  if (G__16947) {
    var bit__10912__auto__ = G__16947.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__10912__auto__ || G__16947.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__16947.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16947);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__16947);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__16948 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__16948;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__16949 = i - 1;
        var G__16950 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__16949;
        r = G__16950;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__16951) {
    var xs = cljs.core.seq(arglist__16951);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__10262__auto__ = coll == null;
    if (or__10262__auto__) {
      return or__10262__auto__;
    } else {
      var G__16955 = coll;
      if (G__16955) {
        var bit__10905__auto__ = G__16955.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__10905__auto__ || G__16955.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__16957 = x;
  if (G__16957) {
    var bit__10912__auto__ = G__16957.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__10912__auto__ || G__16957.cljs$core$IList$) {
      return true;
    } else {
      if (!G__16957.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16957);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__16957);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__16959 = null;
  var G__16959__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__16959__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__16959 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16959__2.call(this, self__, coll);
      case 3:
        return G__16959__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__16959;
}();
cljs.core.Keyword.prototype.apply = function(self__, args16958) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args16958)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__16961 = x;
    if (G__16961) {
      var bit__10905__auto__ = G__16961.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__10905__auto__ || G__16961.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__16962 = ls.sval();
        ls = G__16962;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__16964 = s;
    if (G__16964) {
      var bit__10905__auto__ = G__16964.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__10905__auto__ || G__16964.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__16965 = cljs.core.next.call(null, s__$1);
      s__$1 = G__16965;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_16966 = 0;
  var xs_16967 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_16967) {
      ret[i_16966] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_16967));
      var G__16968 = i_16966 + 1;
      var G__16969 = cljs.core.next.call(null, xs_16967);
      i_16966 = G__16968;
      xs_16967 = G__16969;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16970 = i + 1;
          var G__16971 = cljs.core.next.call(null, s__$1);
          i = G__16970;
          s__$1 = G__16971;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11110__auto___16972 = size;
      var i_16973 = 0;
      while (true) {
        if (i_16973 < n__11110__auto___16972) {
          a[i_16973] = init_val_or_seq;
          var G__16974 = i_16973 + 1;
          i_16973 = G__16974;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16975 = i + 1;
          var G__16976 = cljs.core.next.call(null, s__$1);
          i = G__16975;
          s__$1 = G__16976;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11110__auto___16977 = size;
      var i_16978 = 0;
      while (true) {
        if (i_16978 < n__11110__auto___16977) {
          a[i_16978] = init_val_or_seq;
          var G__16979 = i_16978 + 1;
          i_16978 = G__16979;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16980 = i + 1;
          var G__16981 = cljs.core.next.call(null, s__$1);
          i = G__16980;
          s__$1 = G__16981;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11110__auto___16982 = size;
      var i_16983 = 0;
      while (true) {
        if (i_16983 < n__11110__auto___16982) {
          a[i_16983] = init_val_or_seq;
          var G__16984 = i_16983 + 1;
          i_16983 = G__16984;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__16985 = i + 1;
          var G__16986 = cljs.core.next.call(null, s__$1);
          i = G__16985;
          s__$1 = G__16986;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__11110__auto___16987 = size;
      var i_16988 = 0;
      while (true) {
        if (i_16988 < n__11110__auto___16987) {
          a[i_16988] = init_val_or_seq;
          var G__16989 = i_16988 + 1;
          i_16988 = G__16989;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__16990 = cljs.core.next.call(null, s__$1);
        var G__16991 = i - 1;
        var G__16992 = sum + 1;
        s__$1 = G__16990;
        i = G__16991;
        sum = G__16992;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__16993__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__16993 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16993__delegate.call(this, x, y, zs);
    };
    G__16993.cljs$lang$maxFixedArity = 2;
    G__16993.cljs$lang$applyTo = function(arglist__16994) {
      var x = cljs.core.first(arglist__16994);
      arglist__16994 = cljs.core.next(arglist__16994);
      var y = cljs.core.first(arglist__16994);
      var zs = cljs.core.rest(arglist__16994);
      return G__16993__delegate(x, y, zs);
    };
    G__16993.cljs$core$IFn$_invoke$arity$variadic = G__16993__delegate;
    return G__16993;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__16995__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__16995 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__16995__delegate.call(this, a, b, c, d, more);
    };
    G__16995.cljs$lang$maxFixedArity = 4;
    G__16995.cljs$lang$applyTo = function(arglist__16996) {
      var a = cljs.core.first(arglist__16996);
      arglist__16996 = cljs.core.next(arglist__16996);
      var b = cljs.core.first(arglist__16996);
      arglist__16996 = cljs.core.next(arglist__16996);
      var c = cljs.core.first(arglist__16996);
      arglist__16996 = cljs.core.next(arglist__16996);
      var d = cljs.core.first(arglist__16996);
      var more = cljs.core.rest(arglist__16996);
      return G__16995__delegate(a, b, c, d, more);
    };
    G__16995.cljs$core$IFn$_invoke$arity$variadic = G__16995__delegate;
    return G__16995;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__16997__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__16998 = ntcoll;
          var G__16999 = cljs.core.first.call(null, vals);
          var G__17000 = cljs.core.next.call(null, vals);
          tcoll = G__16998;
          val = G__16999;
          vals = G__17000;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__16997 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__16997__delegate.call(this, tcoll, val, vals);
    };
    G__16997.cljs$lang$maxFixedArity = 2;
    G__16997.cljs$lang$applyTo = function(arglist__17001) {
      var tcoll = cljs.core.first(arglist__17001);
      arglist__17001 = cljs.core.next(arglist__17001);
      var val = cljs.core.first(arglist__17001);
      var vals = cljs.core.rest(arglist__17001);
      return G__16997__delegate(tcoll, val, vals);
    };
    G__16997.cljs$core$IFn$_invoke$arity$variadic = G__16997__delegate;
    return G__16997;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__17002__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__17003 = ntcoll;
          var G__17004 = cljs.core.first.call(null, kvs);
          var G__17005 = cljs.core.second.call(null, kvs);
          var G__17006 = cljs.core.nnext.call(null, kvs);
          tcoll = G__17003;
          key = G__17004;
          val = G__17005;
          kvs = G__17006;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17002 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17002__delegate.call(this, tcoll, key, val, kvs);
    };
    G__17002.cljs$lang$maxFixedArity = 3;
    G__17002.cljs$lang$applyTo = function(arglist__17007) {
      var tcoll = cljs.core.first(arglist__17007);
      arglist__17007 = cljs.core.next(arglist__17007);
      var key = cljs.core.first(arglist__17007);
      arglist__17007 = cljs.core.next(arglist__17007);
      var val = cljs.core.first(arglist__17007);
      var kvs = cljs.core.rest(arglist__17007);
      return G__17002__delegate(tcoll, key, val, kvs);
    };
    G__17002.cljs$core$IFn$_invoke$arity$variadic = G__17002__delegate;
    return G__17002;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__17008__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__17009 = ntcoll;
          var G__17010 = cljs.core.first.call(null, ks);
          var G__17011 = cljs.core.next.call(null, ks);
          tcoll = G__17009;
          key = G__17010;
          ks = G__17011;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17008 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17008__delegate.call(this, tcoll, key, ks);
    };
    G__17008.cljs$lang$maxFixedArity = 2;
    G__17008.cljs$lang$applyTo = function(arglist__17012) {
      var tcoll = cljs.core.first(arglist__17012);
      arglist__17012 = cljs.core.next(arglist__17012);
      var key = cljs.core.first(arglist__17012);
      var ks = cljs.core.rest(arglist__17012);
      return G__17008__delegate(tcoll, key, ks);
    };
    G__17008.cljs$core$IFn$_invoke$arity$variadic = G__17008__delegate;
    return G__17008;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__17013__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__17014 = ntcoll;
          var G__17015 = cljs.core.first.call(null, vals);
          var G__17016 = cljs.core.next.call(null, vals);
          tcoll = G__17014;
          val = G__17015;
          vals = G__17016;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__17013 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17013__delegate.call(this, tcoll, val, vals);
    };
    G__17013.cljs$lang$maxFixedArity = 2;
    G__17013.cljs$lang$applyTo = function(arglist__17017) {
      var tcoll = cljs.core.first(arglist__17017);
      arglist__17017 = cljs.core.next(arglist__17017);
      var val = cljs.core.first(arglist__17017);
      var vals = cljs.core.rest(arglist__17017);
      return G__17013__delegate(tcoll, val, vals);
    };
    G__17013.cljs$core$IFn$_invoke$arity$variadic = G__17013__delegate;
    return G__17013;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__17018__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__17018 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__17018__delegate.call(this, f, a, b, c, d, args);
    };
    G__17018.cljs$lang$maxFixedArity = 5;
    G__17018.cljs$lang$applyTo = function(arglist__17019) {
      var f = cljs.core.first(arglist__17019);
      arglist__17019 = cljs.core.next(arglist__17019);
      var a = cljs.core.first(arglist__17019);
      arglist__17019 = cljs.core.next(arglist__17019);
      var b = cljs.core.first(arglist__17019);
      arglist__17019 = cljs.core.next(arglist__17019);
      var c = cljs.core.first(arglist__17019);
      arglist__17019 = cljs.core.next(arglist__17019);
      var d = cljs.core.first(arglist__17019);
      var args = cljs.core.rest(arglist__17019);
      return G__17018__delegate(f, a, b, c, d, args);
    };
    G__17018.cljs$core$IFn$_invoke$arity$variadic = G__17018__delegate;
    return G__17018;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__17020__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__17020 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__17020__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__17020.cljs$lang$maxFixedArity = 6;
    G__17020.cljs$lang$applyTo = function(arglist__17021) {
      var obj = cljs.core.first(arglist__17021);
      arglist__17021 = cljs.core.next(arglist__17021);
      var f = cljs.core.first(arglist__17021);
      arglist__17021 = cljs.core.next(arglist__17021);
      var a = cljs.core.first(arglist__17021);
      arglist__17021 = cljs.core.next(arglist__17021);
      var b = cljs.core.first(arglist__17021);
      arglist__17021 = cljs.core.next(arglist__17021);
      var c = cljs.core.first(arglist__17021);
      arglist__17021 = cljs.core.next(arglist__17021);
      var d = cljs.core.first(arglist__17021);
      var args = cljs.core.rest(arglist__17021);
      return G__17020__delegate(obj, f, a, b, c, d, args);
    };
    G__17020.cljs$core$IFn$_invoke$arity$variadic = G__17020__delegate;
    return G__17020;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__17022__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__17022 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17022__delegate.call(this, x, y, more);
    };
    G__17022.cljs$lang$maxFixedArity = 2;
    G__17022.cljs$lang$applyTo = function(arglist__17023) {
      var x = cljs.core.first(arglist__17023);
      arglist__17023 = cljs.core.next(arglist__17023);
      var y = cljs.core.first(arglist__17023);
      var more = cljs.core.rest(arglist__17023);
      return G__17022__delegate(x, y, more);
    };
    G__17022.cljs$core$IFn$_invoke$arity$variadic = G__17022__delegate;
    return G__17022;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__17024 = pred;
        var G__17025 = cljs.core.next.call(null, coll);
        pred = G__17024;
        coll = G__17025;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__10262__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        var G__17026 = pred;
        var G__17027 = cljs.core.next.call(null, coll);
        pred = G__17026;
        coll = G__17027;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__17028 = null;
    var G__17028__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__17028__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__17028__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__17028__3 = function() {
      var G__17029__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__17029 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__17029__delegate.call(this, x, y, zs);
      };
      G__17029.cljs$lang$maxFixedArity = 2;
      G__17029.cljs$lang$applyTo = function(arglist__17030) {
        var x = cljs.core.first(arglist__17030);
        arglist__17030 = cljs.core.next(arglist__17030);
        var y = cljs.core.first(arglist__17030);
        var zs = cljs.core.rest(arglist__17030);
        return G__17029__delegate(x, y, zs);
      };
      G__17029.cljs$core$IFn$_invoke$arity$variadic = G__17029__delegate;
      return G__17029;
    }();
    G__17028 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__17028__0.call(this);
        case 1:
          return G__17028__1.call(this, x);
        case 2:
          return G__17028__2.call(this, x, y);
        default:
          return G__17028__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17028.cljs$lang$maxFixedArity = 2;
    G__17028.cljs$lang$applyTo = G__17028__3.cljs$lang$applyTo;
    return G__17028;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__17031__delegate = function(args) {
      return x;
    };
    var G__17031 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17031__delegate.call(this, args);
    };
    G__17031.cljs$lang$maxFixedArity = 0;
    G__17031.cljs$lang$applyTo = function(arglist__17032) {
      var args = cljs.core.seq(arglist__17032);
      return G__17031__delegate(args);
    };
    G__17031.cljs$core$IFn$_invoke$arity$variadic = G__17031__delegate;
    return G__17031;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__17033 = null;
      var G__17033__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__17033__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__17033__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__17033__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__17033__4 = function() {
        var G__17034__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__17034 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17034__delegate.call(this, x, y, z, args);
        };
        G__17034.cljs$lang$maxFixedArity = 3;
        G__17034.cljs$lang$applyTo = function(arglist__17035) {
          var x = cljs.core.first(arglist__17035);
          arglist__17035 = cljs.core.next(arglist__17035);
          var y = cljs.core.first(arglist__17035);
          arglist__17035 = cljs.core.next(arglist__17035);
          var z = cljs.core.first(arglist__17035);
          var args = cljs.core.rest(arglist__17035);
          return G__17034__delegate(x, y, z, args);
        };
        G__17034.cljs$core$IFn$_invoke$arity$variadic = G__17034__delegate;
        return G__17034;
      }();
      G__17033 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17033__0.call(this);
          case 1:
            return G__17033__1.call(this, x);
          case 2:
            return G__17033__2.call(this, x, y);
          case 3:
            return G__17033__3.call(this, x, y, z);
          default:
            return G__17033__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17033.cljs$lang$maxFixedArity = 3;
      G__17033.cljs$lang$applyTo = G__17033__4.cljs$lang$applyTo;
      return G__17033;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__17036 = null;
      var G__17036__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__17036__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__17036__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__17036__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__17036__4 = function() {
        var G__17037__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__17037 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17037__delegate.call(this, x, y, z, args);
        };
        G__17037.cljs$lang$maxFixedArity = 3;
        G__17037.cljs$lang$applyTo = function(arglist__17038) {
          var x = cljs.core.first(arglist__17038);
          arglist__17038 = cljs.core.next(arglist__17038);
          var y = cljs.core.first(arglist__17038);
          arglist__17038 = cljs.core.next(arglist__17038);
          var z = cljs.core.first(arglist__17038);
          var args = cljs.core.rest(arglist__17038);
          return G__17037__delegate(x, y, z, args);
        };
        G__17037.cljs$core$IFn$_invoke$arity$variadic = G__17037__delegate;
        return G__17037;
      }();
      G__17036 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17036__0.call(this);
          case 1:
            return G__17036__1.call(this, x);
          case 2:
            return G__17036__2.call(this, x, y);
          case 3:
            return G__17036__3.call(this, x, y, z);
          default:
            return G__17036__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17036.cljs$lang$maxFixedArity = 3;
      G__17036.cljs$lang$applyTo = G__17036__4.cljs$lang$applyTo;
      return G__17036;
    }();
  };
  var comp__4 = function() {
    var G__17039__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__17040__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__17041 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__17042 = cljs.core.next.call(null, fs__$2);
              ret = G__17041;
              fs__$2 = G__17042;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__17040 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__17040__delegate.call(this, args);
        };
        G__17040.cljs$lang$maxFixedArity = 0;
        G__17040.cljs$lang$applyTo = function(arglist__17043) {
          var args = cljs.core.seq(arglist__17043);
          return G__17040__delegate(args);
        };
        G__17040.cljs$core$IFn$_invoke$arity$variadic = G__17040__delegate;
        return G__17040;
      }();
    };
    var G__17039 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17039__delegate.call(this, f1, f2, f3, fs);
    };
    G__17039.cljs$lang$maxFixedArity = 3;
    G__17039.cljs$lang$applyTo = function(arglist__17044) {
      var f1 = cljs.core.first(arglist__17044);
      arglist__17044 = cljs.core.next(arglist__17044);
      var f2 = cljs.core.first(arglist__17044);
      arglist__17044 = cljs.core.next(arglist__17044);
      var f3 = cljs.core.first(arglist__17044);
      var fs = cljs.core.rest(arglist__17044);
      return G__17039__delegate(f1, f2, f3, fs);
    };
    G__17039.cljs$core$IFn$_invoke$arity$variadic = G__17039__delegate;
    return G__17039;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__17045__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__17045 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__17045__delegate.call(this, args);
      };
      G__17045.cljs$lang$maxFixedArity = 0;
      G__17045.cljs$lang$applyTo = function(arglist__17046) {
        var args = cljs.core.seq(arglist__17046);
        return G__17045__delegate(args);
      };
      G__17045.cljs$core$IFn$_invoke$arity$variadic = G__17045__delegate;
      return G__17045;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__17047__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__17047 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__17047__delegate.call(this, args);
      };
      G__17047.cljs$lang$maxFixedArity = 0;
      G__17047.cljs$lang$applyTo = function(arglist__17048) {
        var args = cljs.core.seq(arglist__17048);
        return G__17047__delegate(args);
      };
      G__17047.cljs$core$IFn$_invoke$arity$variadic = G__17047__delegate;
      return G__17047;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__17049__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__17049 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__17049__delegate.call(this, args);
      };
      G__17049.cljs$lang$maxFixedArity = 0;
      G__17049.cljs$lang$applyTo = function(arglist__17050) {
        var args = cljs.core.seq(arglist__17050);
        return G__17049__delegate(args);
      };
      G__17049.cljs$core$IFn$_invoke$arity$variadic = G__17049__delegate;
      return G__17049;
    }();
  };
  var partial__5 = function() {
    var G__17051__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__17052__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__17052 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__17052__delegate.call(this, args);
        };
        G__17052.cljs$lang$maxFixedArity = 0;
        G__17052.cljs$lang$applyTo = function(arglist__17053) {
          var args = cljs.core.seq(arglist__17053);
          return G__17052__delegate(args);
        };
        G__17052.cljs$core$IFn$_invoke$arity$variadic = G__17052__delegate;
        return G__17052;
      }();
    };
    var G__17051 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17051__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__17051.cljs$lang$maxFixedArity = 4;
    G__17051.cljs$lang$applyTo = function(arglist__17054) {
      var f = cljs.core.first(arglist__17054);
      arglist__17054 = cljs.core.next(arglist__17054);
      var arg1 = cljs.core.first(arglist__17054);
      arglist__17054 = cljs.core.next(arglist__17054);
      var arg2 = cljs.core.first(arglist__17054);
      arglist__17054 = cljs.core.next(arglist__17054);
      var arg3 = cljs.core.first(arglist__17054);
      var more = cljs.core.rest(arglist__17054);
      return G__17051__delegate(f, arg1, arg2, arg3, more);
    };
    G__17051.cljs$core$IFn$_invoke$arity$variadic = G__17051__delegate;
    return G__17051;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__17055 = null;
      var G__17055__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__17055__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__17055__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__17055__4 = function() {
        var G__17056__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__17056 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17056__delegate.call(this, a, b, c, ds);
        };
        G__17056.cljs$lang$maxFixedArity = 3;
        G__17056.cljs$lang$applyTo = function(arglist__17057) {
          var a = cljs.core.first(arglist__17057);
          arglist__17057 = cljs.core.next(arglist__17057);
          var b = cljs.core.first(arglist__17057);
          arglist__17057 = cljs.core.next(arglist__17057);
          var c = cljs.core.first(arglist__17057);
          var ds = cljs.core.rest(arglist__17057);
          return G__17056__delegate(a, b, c, ds);
        };
        G__17056.cljs$core$IFn$_invoke$arity$variadic = G__17056__delegate;
        return G__17056;
      }();
      G__17055 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__17055__1.call(this, a);
          case 2:
            return G__17055__2.call(this, a, b);
          case 3:
            return G__17055__3.call(this, a, b, c);
          default:
            return G__17055__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17055.cljs$lang$maxFixedArity = 3;
      G__17055.cljs$lang$applyTo = G__17055__4.cljs$lang$applyTo;
      return G__17055;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__17058 = null;
      var G__17058__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__17058__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__17058__4 = function() {
        var G__17059__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__17059 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17059__delegate.call(this, a, b, c, ds);
        };
        G__17059.cljs$lang$maxFixedArity = 3;
        G__17059.cljs$lang$applyTo = function(arglist__17060) {
          var a = cljs.core.first(arglist__17060);
          arglist__17060 = cljs.core.next(arglist__17060);
          var b = cljs.core.first(arglist__17060);
          arglist__17060 = cljs.core.next(arglist__17060);
          var c = cljs.core.first(arglist__17060);
          var ds = cljs.core.rest(arglist__17060);
          return G__17059__delegate(a, b, c, ds);
        };
        G__17059.cljs$core$IFn$_invoke$arity$variadic = G__17059__delegate;
        return G__17059;
      }();
      G__17058 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__17058__2.call(this, a, b);
          case 3:
            return G__17058__3.call(this, a, b, c);
          default:
            return G__17058__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17058.cljs$lang$maxFixedArity = 3;
      G__17058.cljs$lang$applyTo = G__17058__4.cljs$lang$applyTo;
      return G__17058;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__17061 = null;
      var G__17061__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__17061__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__17061__4 = function() {
        var G__17062__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__17062 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17062__delegate.call(this, a, b, c, ds);
        };
        G__17062.cljs$lang$maxFixedArity = 3;
        G__17062.cljs$lang$applyTo = function(arglist__17063) {
          var a = cljs.core.first(arglist__17063);
          arglist__17063 = cljs.core.next(arglist__17063);
          var b = cljs.core.first(arglist__17063);
          arglist__17063 = cljs.core.next(arglist__17063);
          var c = cljs.core.first(arglist__17063);
          var ds = cljs.core.rest(arglist__17063);
          return G__17062__delegate(a, b, c, ds);
        };
        G__17062.cljs$core$IFn$_invoke$arity$variadic = G__17062__delegate;
        return G__17062;
      }();
      G__17061 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__17061__2.call(this, a, b);
          case 3:
            return G__17061__3.call(this, a, b, c);
          default:
            return G__17061__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17061.cljs$lang$maxFixedArity = 3;
      G__17061.cljs$lang$applyTo = G__17061__4.cljs$lang$applyTo;
      return G__17061;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11110__auto___17064 = size;
          var i_17065 = 0;
          while (true) {
            if (i_17065 < n__11110__auto___17064) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_17065, cljs.core._nth.call(null, c, i_17065)));
              var G__17066 = i_17065 + 1;
              i_17065 = G__17066;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__11110__auto___17067 = size;
        var i_17068 = 0;
        while (true) {
          if (i_17068 < n__11110__auto___17067) {
            var x_17069 = f.call(null, cljs.core._nth.call(null, c, i_17068));
            if (x_17069 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_17069);
            }
            var G__17070 = i_17068 + 1;
            i_17068 = G__17070;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11110__auto___17071 = size;
          var i_17072 = 0;
          while (true) {
            if (i_17072 < n__11110__auto___17071) {
              var x_17073 = f.call(null, idx + i_17072, cljs.core._nth.call(null, c, i_17072));
              if (x_17073 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_17073);
              }
              var G__17074 = i_17072 + 1;
              i_17072 = G__17074;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10250__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__10250__auto__)) {
            return p.call(null, y);
          } else {
            return and__10250__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10250__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__10250__auto__)) {
            var and__10250__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__10250__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__10250__auto____$1;
            }
          } else {
            return and__10250__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__17081__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__17081 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17081__delegate.call(this, x, y, z, args);
        };
        G__17081.cljs$lang$maxFixedArity = 3;
        G__17081.cljs$lang$applyTo = function(arglist__17082) {
          var x = cljs.core.first(arglist__17082);
          arglist__17082 = cljs.core.next(arglist__17082);
          var y = cljs.core.first(arglist__17082);
          arglist__17082 = cljs.core.next(arglist__17082);
          var z = cljs.core.first(arglist__17082);
          var args = cljs.core.rest(arglist__17082);
          return G__17081__delegate(x, y, z, args);
        };
        G__17081.cljs$core$IFn$_invoke$arity$variadic = G__17081__delegate;
        return G__17081;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__10250__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10250__auto__)) {
            return p2.call(null, x);
          } else {
            return and__10250__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10250__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10250__auto__)) {
            var and__10250__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__10250__auto____$1)) {
              var and__10250__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__10250__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__10250__auto____$2;
              }
            } else {
              return and__10250__auto____$1;
            }
          } else {
            return and__10250__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10250__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10250__auto__)) {
            var and__10250__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__10250__auto____$1)) {
              var and__10250__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__10250__auto____$2)) {
                var and__10250__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__10250__auto____$3)) {
                  var and__10250__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10250__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__10250__auto____$4;
                  }
                } else {
                  return and__10250__auto____$3;
                }
              } else {
                return and__10250__auto____$2;
              }
            } else {
              return and__10250__auto____$1;
            }
          } else {
            return and__10250__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__17083__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__17075_SHARP_) {
            var and__10250__auto__ = p1.call(null, p1__17075_SHARP_);
            if (cljs.core.truth_(and__10250__auto__)) {
              return p2.call(null, p1__17075_SHARP_);
            } else {
              return and__10250__auto__;
            }
          }, args));
        };
        var G__17083 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17083__delegate.call(this, x, y, z, args);
        };
        G__17083.cljs$lang$maxFixedArity = 3;
        G__17083.cljs$lang$applyTo = function(arglist__17084) {
          var x = cljs.core.first(arglist__17084);
          arglist__17084 = cljs.core.next(arglist__17084);
          var y = cljs.core.first(arglist__17084);
          arglist__17084 = cljs.core.next(arglist__17084);
          var z = cljs.core.first(arglist__17084);
          var args = cljs.core.rest(arglist__17084);
          return G__17083__delegate(x, y, z, args);
        };
        G__17083.cljs$core$IFn$_invoke$arity$variadic = G__17083__delegate;
        return G__17083;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__10250__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10250__auto__)) {
            var and__10250__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10250__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__10250__auto____$1;
            }
          } else {
            return and__10250__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__10250__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10250__auto__)) {
            var and__10250__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10250__auto____$1)) {
              var and__10250__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__10250__auto____$2)) {
                var and__10250__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__10250__auto____$3)) {
                  var and__10250__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10250__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__10250__auto____$4;
                  }
                } else {
                  return and__10250__auto____$3;
                }
              } else {
                return and__10250__auto____$2;
              }
            } else {
              return and__10250__auto____$1;
            }
          } else {
            return and__10250__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__10250__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__10250__auto__)) {
            var and__10250__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__10250__auto____$1)) {
              var and__10250__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__10250__auto____$2)) {
                var and__10250__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__10250__auto____$3)) {
                  var and__10250__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__10250__auto____$4)) {
                    var and__10250__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__10250__auto____$5)) {
                      var and__10250__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__10250__auto____$6)) {
                        var and__10250__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__10250__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__10250__auto____$7;
                        }
                      } else {
                        return and__10250__auto____$6;
                      }
                    } else {
                      return and__10250__auto____$5;
                    }
                  } else {
                    return and__10250__auto____$4;
                  }
                } else {
                  return and__10250__auto____$3;
                }
              } else {
                return and__10250__auto____$2;
              }
            } else {
              return and__10250__auto____$1;
            }
          } else {
            return and__10250__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__17085__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__17076_SHARP_) {
            var and__10250__auto__ = p1.call(null, p1__17076_SHARP_);
            if (cljs.core.truth_(and__10250__auto__)) {
              var and__10250__auto____$1 = p2.call(null, p1__17076_SHARP_);
              if (cljs.core.truth_(and__10250__auto____$1)) {
                return p3.call(null, p1__17076_SHARP_);
              } else {
                return and__10250__auto____$1;
              }
            } else {
              return and__10250__auto__;
            }
          }, args));
        };
        var G__17085 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17085__delegate.call(this, x, y, z, args);
        };
        G__17085.cljs$lang$maxFixedArity = 3;
        G__17085.cljs$lang$applyTo = function(arglist__17086) {
          var x = cljs.core.first(arglist__17086);
          arglist__17086 = cljs.core.next(arglist__17086);
          var y = cljs.core.first(arglist__17086);
          arglist__17086 = cljs.core.next(arglist__17086);
          var z = cljs.core.first(arglist__17086);
          var args = cljs.core.rest(arglist__17086);
          return G__17085__delegate(x, y, z, args);
        };
        G__17085.cljs$core$IFn$_invoke$arity$variadic = G__17085__delegate;
        return G__17085;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__17087__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__17077_SHARP_) {
            return p1__17077_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__17078_SHARP_) {
            var and__10250__auto__ = p1__17078_SHARP_.call(null, x);
            if (cljs.core.truth_(and__10250__auto__)) {
              return p1__17078_SHARP_.call(null, y);
            } else {
              return and__10250__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__17079_SHARP_) {
            var and__10250__auto__ = p1__17079_SHARP_.call(null, x);
            if (cljs.core.truth_(and__10250__auto__)) {
              var and__10250__auto____$1 = p1__17079_SHARP_.call(null, y);
              if (cljs.core.truth_(and__10250__auto____$1)) {
                return p1__17079_SHARP_.call(null, z);
              } else {
                return and__10250__auto____$1;
              }
            } else {
              return and__10250__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__17088__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__17080_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__17080_SHARP_, args);
            }, ps__$1));
          };
          var G__17088 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__17088__delegate.call(this, x, y, z, args);
          };
          G__17088.cljs$lang$maxFixedArity = 3;
          G__17088.cljs$lang$applyTo = function(arglist__17089) {
            var x = cljs.core.first(arglist__17089);
            arglist__17089 = cljs.core.next(arglist__17089);
            var y = cljs.core.first(arglist__17089);
            arglist__17089 = cljs.core.next(arglist__17089);
            var z = cljs.core.first(arglist__17089);
            var args = cljs.core.rest(arglist__17089);
            return G__17088__delegate(x, y, z, args);
          };
          G__17088.cljs$core$IFn$_invoke$arity$variadic = G__17088__delegate;
          return G__17088;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__17087 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17087__delegate.call(this, p1, p2, p3, ps);
    };
    G__17087.cljs$lang$maxFixedArity = 3;
    G__17087.cljs$lang$applyTo = function(arglist__17090) {
      var p1 = cljs.core.first(arglist__17090);
      arglist__17090 = cljs.core.next(arglist__17090);
      var p2 = cljs.core.first(arglist__17090);
      arglist__17090 = cljs.core.next(arglist__17090);
      var p3 = cljs.core.first(arglist__17090);
      var ps = cljs.core.rest(arglist__17090);
      return G__17087__delegate(p1, p2, p3, ps);
    };
    G__17087.cljs$core$IFn$_invoke$arity$variadic = G__17087__delegate;
    return G__17087;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__10262__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__10262__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__10262__auto____$1)) {
            return or__10262__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__17097__delegate = function(x, y, z, args) {
          var or__10262__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__10262__auto__)) {
            return or__10262__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__17097 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17097__delegate.call(this, x, y, z, args);
        };
        G__17097.cljs$lang$maxFixedArity = 3;
        G__17097.cljs$lang$applyTo = function(arglist__17098) {
          var x = cljs.core.first(arglist__17098);
          arglist__17098 = cljs.core.next(arglist__17098);
          var y = cljs.core.first(arglist__17098);
          arglist__17098 = cljs.core.next(arglist__17098);
          var z = cljs.core.first(arglist__17098);
          var args = cljs.core.rest(arglist__17098);
          return G__17097__delegate(x, y, z, args);
        };
        G__17097.cljs$core$IFn$_invoke$arity$variadic = G__17097__delegate;
        return G__17097;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__10262__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__10262__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__10262__auto____$1)) {
            return or__10262__auto____$1;
          } else {
            var or__10262__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__10262__auto____$2)) {
              return or__10262__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__10262__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__10262__auto____$1)) {
            return or__10262__auto____$1;
          } else {
            var or__10262__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__10262__auto____$2)) {
              return or__10262__auto____$2;
            } else {
              var or__10262__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__10262__auto____$3)) {
                return or__10262__auto____$3;
              } else {
                var or__10262__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10262__auto____$4)) {
                  return or__10262__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__17099__delegate = function(x, y, z, args) {
          var or__10262__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__10262__auto__)) {
            return or__10262__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__17091_SHARP_) {
              var or__10262__auto____$1 = p1.call(null, p1__17091_SHARP_);
              if (cljs.core.truth_(or__10262__auto____$1)) {
                return or__10262__auto____$1;
              } else {
                return p2.call(null, p1__17091_SHARP_);
              }
            }, args);
          }
        };
        var G__17099 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17099__delegate.call(this, x, y, z, args);
        };
        G__17099.cljs$lang$maxFixedArity = 3;
        G__17099.cljs$lang$applyTo = function(arglist__17100) {
          var x = cljs.core.first(arglist__17100);
          arglist__17100 = cljs.core.next(arglist__17100);
          var y = cljs.core.first(arglist__17100);
          arglist__17100 = cljs.core.next(arglist__17100);
          var z = cljs.core.first(arglist__17100);
          var args = cljs.core.rest(arglist__17100);
          return G__17099__delegate(x, y, z, args);
        };
        G__17099.cljs$core$IFn$_invoke$arity$variadic = G__17099__delegate;
        return G__17099;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__10262__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10262__auto____$1)) {
            return or__10262__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__10262__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10262__auto____$1)) {
            return or__10262__auto____$1;
          } else {
            var or__10262__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__10262__auto____$2)) {
              return or__10262__auto____$2;
            } else {
              var or__10262__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__10262__auto____$3)) {
                return or__10262__auto____$3;
              } else {
                var or__10262__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10262__auto____$4)) {
                  return or__10262__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__10262__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__10262__auto____$1)) {
            return or__10262__auto____$1;
          } else {
            var or__10262__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__10262__auto____$2)) {
              return or__10262__auto____$2;
            } else {
              var or__10262__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__10262__auto____$3)) {
                return or__10262__auto____$3;
              } else {
                var or__10262__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__10262__auto____$4)) {
                  return or__10262__auto____$4;
                } else {
                  var or__10262__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__10262__auto____$5)) {
                    return or__10262__auto____$5;
                  } else {
                    var or__10262__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__10262__auto____$6)) {
                      return or__10262__auto____$6;
                    } else {
                      var or__10262__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__10262__auto____$7)) {
                        return or__10262__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__17101__delegate = function(x, y, z, args) {
          var or__10262__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__10262__auto__)) {
            return or__10262__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__17092_SHARP_) {
              var or__10262__auto____$1 = p1.call(null, p1__17092_SHARP_);
              if (cljs.core.truth_(or__10262__auto____$1)) {
                return or__10262__auto____$1;
              } else {
                var or__10262__auto____$2 = p2.call(null, p1__17092_SHARP_);
                if (cljs.core.truth_(or__10262__auto____$2)) {
                  return or__10262__auto____$2;
                } else {
                  return p3.call(null, p1__17092_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__17101 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17101__delegate.call(this, x, y, z, args);
        };
        G__17101.cljs$lang$maxFixedArity = 3;
        G__17101.cljs$lang$applyTo = function(arglist__17102) {
          var x = cljs.core.first(arglist__17102);
          arglist__17102 = cljs.core.next(arglist__17102);
          var y = cljs.core.first(arglist__17102);
          arglist__17102 = cljs.core.next(arglist__17102);
          var z = cljs.core.first(arglist__17102);
          var args = cljs.core.rest(arglist__17102);
          return G__17101__delegate(x, y, z, args);
        };
        G__17101.cljs$core$IFn$_invoke$arity$variadic = G__17101__delegate;
        return G__17101;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__17103__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__17093_SHARP_) {
            return p1__17093_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__17094_SHARP_) {
            var or__10262__auto__ = p1__17094_SHARP_.call(null, x);
            if (cljs.core.truth_(or__10262__auto__)) {
              return or__10262__auto__;
            } else {
              return p1__17094_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__17095_SHARP_) {
            var or__10262__auto__ = p1__17095_SHARP_.call(null, x);
            if (cljs.core.truth_(or__10262__auto__)) {
              return or__10262__auto__;
            } else {
              var or__10262__auto____$1 = p1__17095_SHARP_.call(null, y);
              if (cljs.core.truth_(or__10262__auto____$1)) {
                return or__10262__auto____$1;
              } else {
                return p1__17095_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__17104__delegate = function(x, y, z, args) {
            var or__10262__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__10262__auto__)) {
              return or__10262__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__17096_SHARP_) {
                return cljs.core.some.call(null, p1__17096_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__17104 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__17104__delegate.call(this, x, y, z, args);
          };
          G__17104.cljs$lang$maxFixedArity = 3;
          G__17104.cljs$lang$applyTo = function(arglist__17105) {
            var x = cljs.core.first(arglist__17105);
            arglist__17105 = cljs.core.next(arglist__17105);
            var y = cljs.core.first(arglist__17105);
            arglist__17105 = cljs.core.next(arglist__17105);
            var z = cljs.core.first(arglist__17105);
            var args = cljs.core.rest(arglist__17105);
            return G__17104__delegate(x, y, z, args);
          };
          G__17104.cljs$core$IFn$_invoke$arity$variadic = G__17104__delegate;
          return G__17104;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__17103 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17103__delegate.call(this, p1, p2, p3, ps);
    };
    G__17103.cljs$lang$maxFixedArity = 3;
    G__17103.cljs$lang$applyTo = function(arglist__17106) {
      var p1 = cljs.core.first(arglist__17106);
      arglist__17106 = cljs.core.next(arglist__17106);
      var p2 = cljs.core.first(arglist__17106);
      arglist__17106 = cljs.core.next(arglist__17106);
      var p3 = cljs.core.first(arglist__17106);
      var ps = cljs.core.rest(arglist__17106);
      return G__17103__delegate(p1, p2, p3, ps);
    };
    G__17103.cljs$core$IFn$_invoke$arity$variadic = G__17103__delegate;
    return G__17103;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__11110__auto___17108 = size;
          var i_17109 = 0;
          while (true) {
            if (i_17109 < n__11110__auto___17108) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_17109)));
              var G__17110 = i_17109 + 1;
              i_17109 = G__17110;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__17111__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__17107_SHARP_) {
        return cljs.core.apply.call(null, f, p1__17107_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__17111 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17111__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__17111.cljs$lang$maxFixedArity = 4;
    G__17111.cljs$lang$applyTo = function(arglist__17112) {
      var f = cljs.core.first(arglist__17112);
      arglist__17112 = cljs.core.next(arglist__17112);
      var c1 = cljs.core.first(arglist__17112);
      arglist__17112 = cljs.core.next(arglist__17112);
      var c2 = cljs.core.first(arglist__17112);
      arglist__17112 = cljs.core.next(arglist__17112);
      var c3 = cljs.core.first(arglist__17112);
      var colls = cljs.core.rest(arglist__17112);
      return G__17111__delegate(f, c1, c2, c3, colls);
    };
    G__17111.cljs$core$IFn$_invoke$arity$variadic = G__17111__delegate;
    return G__17111;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__17113 = n__$1 - 1;
        var G__17114 = cljs.core.rest.call(null, s);
        n__$1 = G__17113;
        coll__$1 = G__17114;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__17115 = cljs.core.next.call(null, s);
      var G__17116 = cljs.core.next.call(null, lead);
      s = G__17115;
      lead = G__17116;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__10250__auto__ = s;
        if (and__10250__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__10250__auto__;
        }
      }())) {
        var G__17117 = pred__$1;
        var G__17118 = cljs.core.rest.call(null, s);
        pred__$1 = G__17117;
        coll__$1 = G__17118;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__17119__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__17119 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17119__delegate.call(this, c1, c2, colls);
    };
    G__17119.cljs$lang$maxFixedArity = 2;
    G__17119.cljs$lang$applyTo = function(arglist__17120) {
      var c1 = cljs.core.first(arglist__17120);
      arglist__17120 = cljs.core.next(arglist__17120);
      var c2 = cljs.core.first(arglist__17120);
      var colls = cljs.core.rest(arglist__17120);
      return G__17119__delegate(c1, c2, colls);
    };
    G__17119.cljs$core$IFn$_invoke$arity$variadic = G__17119__delegate;
    return G__17119;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__17121__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__17121 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__17121__delegate.call(this, f, coll, colls);
    };
    G__17121.cljs$lang$maxFixedArity = 2;
    G__17121.cljs$lang$applyTo = function(arglist__17122) {
      var f = cljs.core.first(arglist__17122);
      arglist__17122 = cljs.core.next(arglist__17122);
      var coll = cljs.core.first(arglist__17122);
      var colls = cljs.core.rest(arglist__17122);
      return G__17121__delegate(f, coll, colls);
    };
    G__17121.cljs$core$IFn$_invoke$arity$variadic = G__17121__delegate;
    return G__17121;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__11110__auto___17123 = size;
        var i_17124 = 0;
        while (true) {
          if (i_17124 < n__11110__auto___17123) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_17124)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_17124));
            } else {
            }
            var G__17125 = i_17124 + 1;
            i_17124 = G__17125;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__17126_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__17126_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__17128 = to;
      if (G__17128) {
        var bit__10905__auto__ = G__17128.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__10905__auto__ || G__17128.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__17129__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__17129 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17129__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__17129.cljs$lang$maxFixedArity = 4;
    G__17129.cljs$lang$applyTo = function(arglist__17130) {
      var f = cljs.core.first(arglist__17130);
      arglist__17130 = cljs.core.next(arglist__17130);
      var c1 = cljs.core.first(arglist__17130);
      arglist__17130 = cljs.core.next(arglist__17130);
      var c2 = cljs.core.first(arglist__17130);
      arglist__17130 = cljs.core.next(arglist__17130);
      var c3 = cljs.core.first(arglist__17130);
      var colls = cljs.core.rest(arglist__17130);
      return G__17129__delegate(f, c1, c2, c3, colls);
    };
    G__17129.cljs$core$IFn$_invoke$arity$variadic = G__17129__delegate;
    return G__17129;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__17132 = m__$1;
          if (G__17132) {
            var bit__10912__auto__ = G__17132.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__10912__auto__ || G__17132.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__17132.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__17132);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__17132);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__17133 = sentinel;
            var G__17134 = m__$2;
            var G__17135 = cljs.core.next.call(null, ks__$1);
            sentinel = G__17133;
            m__$1 = G__17134;
            ks__$1 = G__17135;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__17136, v) {
  var vec__17138 = p__17136;
  var k = cljs.core.nth.call(null, vec__17138, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__17138, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__17139, f) {
    var vec__17149 = p__17139;
    var k = cljs.core.nth.call(null, vec__17149, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17149, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__17140, f, a) {
    var vec__17150 = p__17140;
    var k = cljs.core.nth.call(null, vec__17150, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17150, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__17141, f, a, b) {
    var vec__17151 = p__17141;
    var k = cljs.core.nth.call(null, vec__17151, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17151, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__17142, f, a, b, c) {
    var vec__17152 = p__17142;
    var k = cljs.core.nth.call(null, vec__17152, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__17152, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__17154__delegate = function(m, p__17143, f, a, b, c, args) {
      var vec__17153 = p__17143;
      var k = cljs.core.nth.call(null, vec__17153, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__17153, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__17154 = function(m, p__17143, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__17154__delegate.call(this, m, p__17143, f, a, b, c, args);
    };
    G__17154.cljs$lang$maxFixedArity = 6;
    G__17154.cljs$lang$applyTo = function(arglist__17155) {
      var m = cljs.core.first(arglist__17155);
      arglist__17155 = cljs.core.next(arglist__17155);
      var p__17143 = cljs.core.first(arglist__17155);
      arglist__17155 = cljs.core.next(arglist__17155);
      var f = cljs.core.first(arglist__17155);
      arglist__17155 = cljs.core.next(arglist__17155);
      var a = cljs.core.first(arglist__17155);
      arglist__17155 = cljs.core.next(arglist__17155);
      var b = cljs.core.first(arglist__17155);
      arglist__17155 = cljs.core.next(arglist__17155);
      var c = cljs.core.first(arglist__17155);
      var args = cljs.core.rest(arglist__17155);
      return G__17154__delegate(m, p__17143, f, a, b, c, args);
    };
    G__17154.cljs$core$IFn$_invoke$arity$variadic = G__17154__delegate;
    return G__17154;
  }();
  update_in = function(m, p__17143, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__17143, f);
      case 4:
        return update_in__4.call(this, m, p__17143, f, a);
      case 5:
        return update_in__5.call(this, m, p__17143, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__17143, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__17143, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__10832__auto__, writer__10833__auto__, opts__10834__auto__) {
  return cljs.core._write.call(null, writer__10833__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__17156 = ll - 5;
      var G__17157 = r;
      ll = G__17156;
      ret = G__17157;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__17158 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__17159 = level - 5;
          node = G__17158;
          level = G__17159;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__17161 = null;
  var G__17161__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__17161__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__17161 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17161__2.call(this, self__, k);
      case 3:
        return G__17161__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17161;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args17160) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17160)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__17162 = j + 1;
              var G__17163 = init__$2;
              j = G__17162;
              init__$1 = G__17163;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__17164 = i + step_init[0];
        i = G__17164;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__11110__auto___17165 = len;
    var i_17166 = 0;
    while (true) {
      if (i_17166 < n__11110__auto___17165) {
        new_tail[i_17166] = self__.tail[i_17166];
        var G__17167 = i_17166 + 1;
        i_17166 = G__17167;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__17168 = i + 1;
        var G__17169 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__17168;
        out = G__17169;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__17170) {
    var args = cljs.core.seq(arglist__17170);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.call = function() {
  var G__17172 = null;
  var G__17172__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__17172__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__17172 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17172__2.call(this, self__, k);
      case 3:
        return G__17172__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17172;
}();
cljs.core.Subvec.prototype.apply = function(self__, args17171) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17171)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__10569__auto__ = self__.end;
    var y__10570__auto__ = v_pos + 1;
    return x__10569__auto__ > y__10570__auto__ ? x__10569__auto__ : y__10570__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__17173 = meta;
      var G__17174 = v.v;
      var G__17175 = v.start + start;
      var G__17176 = v.start + end;
      var G__17177 = __hash;
      meta = G__17173;
      v = G__17174;
      start = G__17175;
      end = G__17176;
      __hash = G__17177;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj17181 = {};
    return obj17181;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__17182 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__17183 = level - 5;
          node = G__17182;
          level = G__17183;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__17185 = null;
  var G__17185__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17185__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17185 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17185__2.call(this, self__, k);
      case 3:
        return G__17185__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17185;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args17184) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17184)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__10262__auto__ = self__.rear;
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__10262__auto__ = self__.front;
    if (cljs.core.truth_(or__10262__auto__)) {
      return or__10262__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__17186 = i + incr;
        i = G__17186;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__17187 = i + 1;
      var G__17188 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__17187;
      out = G__17188;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj17192 = {};
    return obj17192;
  }();
  var l = ks.length;
  var i_17193 = 0;
  while (true) {
    if (i_17193 < l) {
      var k_17194 = ks[i_17193];
      new_obj[k_17194] = obj[k_17194];
      var G__17195 = i_17193 + 1;
      i_17193 = G__17195;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__17198 = null;
  var G__17198__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17198__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17198 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17198__2.call(this, self__, k);
      case 3:
        return G__17198__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17198;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args17197) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17197)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__17199 = cljs.core.rest.call(null, keys__$1);
        var G__17200 = init__$2;
        keys__$1 = G__17199;
        init__$1 = G__17200;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__17196_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__17196_SHARP_, self__.strobj[p1__17196_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj17202 = {};
  return obj17202;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17203 = i + 2;
          i = G__17203;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17204 = i + 2;
          i = G__17204;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17205 = i + 2;
          i = G__17205;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17206 = i + 2;
          i = G__17206;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__17207 = i + 2;
          i = G__17207;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_17208 = 0;
  while (true) {
    if (i_17208 < l) {
      narr[i_17208] = arr[i_17208];
      var G__17209 = i_17208 + 1;
      i_17208 = G__17209;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj17212 = {};
    return obj17212;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__17213 = cljs.core.aclone.call(null, self__.arr);
          G__17213[idx + 1] = v;
          return G__17213;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__17214 = null;
  var G__17214__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17214__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17214 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17214__2.call(this, self__, k);
      case 3:
        return G__17214__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17214;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args17210) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17210)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__17215 = i + 2;
        var G__17216 = init__$2;
        i = G__17215;
        init__$1 = G__17216;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__17217 = s + 2;
            var G__17218 = d;
            s = G__17217;
            d = G__17218;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__17219 = s + 2;
              var G__17220 = d + 2;
              s = G__17219;
              d = G__17220;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__17221 = i + 2;
        var G__17222 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__17221;
        ret = G__17222;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__17223_17225 = self__.arr;
      G__17223_17225.pop();
      G__17223_17225.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__17224 = o;
      if (G__17224) {
        var bit__10912__auto__ = G__17224.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__10912__auto__ || G__17224.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__17224.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__17224);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__17224);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__17226 = cljs.core.next.call(null, es);
          var G__17227 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__17226;
          tcoll__$2 = G__17227;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__17228 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__17229 = i + 2;
      out = G__17228;
      i = G__17229;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__10832__auto__, writer__10833__auto__, opts__10834__auto__) {
  return cljs.core._write.call(null, writer__10833__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__17232 = cljs.core.aclone.call(null, arr);
    G__17232[i] = a;
    return G__17232;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__17233 = cljs.core.aclone.call(null, arr);
    G__17233[i] = a;
    G__17233[j] = b;
    return G__17233;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__17234 = i + 2;
        var G__17235 = init__$2;
        i = G__17234;
        init__$1 = G__17235;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_17236 = 0;
        var j_17237 = 0;
        while (true) {
          if (i_17236 < 32) {
            if ((self__.bitmap >>> i_17236 & 1) === 0) {
              var G__17238 = i_17236 + 1;
              var G__17239 = j_17237;
              i_17236 = G__17238;
              j_17237 = G__17239;
              continue;
            } else {
              nodes[i_17236] = !(self__.arr[j_17237] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_17237]), self__.arr[j_17237], self__.arr[j_17237 + 1], added_leaf_QMARK_) : self__.arr[j_17237 + 1];
              var G__17240 = i_17236 + 1;
              var G__17241 = j_17237 + 2;
              i_17236 = G__17240;
              j_17237 = G__17241;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_17242 = 0;
      var j_17243 = 0;
      while (true) {
        if (i_17242 < 32) {
          if ((self__.bitmap >>> i_17242 & 1) === 0) {
            var G__17244 = i_17242 + 1;
            var G__17245 = j_17243;
            i_17242 = G__17244;
            j_17243 = G__17245;
            continue;
          } else {
            nodes[i_17242] = !(self__.arr[j_17243] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_17243]), self__.arr[j_17243], self__.arr[j_17243 + 1], added_leaf_QMARK_) : self__.arr[j_17243 + 1];
            var G__17246 = i_17242 + 1;
            var G__17247 = j_17243 + 2;
            i_17242 = G__17246;
            j_17243 = G__17247;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__17248 = i + 1;
        var G__17249 = j + 2;
        var G__17250 = bitmap | 1 << i;
        i = G__17248;
        j = G__17249;
        bitmap = G__17250;
        continue;
      } else {
        var G__17251 = i + 1;
        var G__17252 = j;
        var G__17253 = bitmap;
        i = G__17251;
        j = G__17252;
        bitmap = G__17253;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__17254 = i + 1;
          var G__17255 = init__$2;
          i = G__17254;
          init__$1 = G__17255;
          continue;
        }
      } else {
        var G__17256 = i + 1;
        var G__17257 = init__$1;
        i = G__17256;
        init__$1 = G__17257;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__17258 = i + 2;
        i = G__17258;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__17259 = j + 2;
                j = G__17259;
                continue;
              }
            } else {
              var G__17260 = j + 2;
              j = G__17260;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__17261 = j + 1;
              j = G__17261;
              continue;
            }
          } else {
            var G__17262 = j + 1;
            j = G__17262;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj17265 = {};
    return obj17265;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__17266 = null;
  var G__17266__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17266__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17266 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17266__2.call(this, self__, k);
      case 3:
        return G__17266__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17266;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args17263) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17263)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__17267 = i + 1;
      var G__17268 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__17267;
      out = G__17268;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__17269 = o;
      if (G__17269) {
        var bit__10912__auto__ = G__17269.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__10912__auto__ || G__17269.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__17269.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__17269);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__17269);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__17270 = cljs.core.next.call(null, es);
          var G__17271 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__17270;
          tcoll__$1 = G__17271;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__17272 = ascending_QMARK_ ? t.left : t.right;
      var G__17273 = cljs.core.conj.call(null, stack__$1, t);
      t = G__17272;
      stack__$1 = G__17273;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__17275 = null;
  var G__17275__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17275__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17275 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17275__2.call(this, self__, k);
      case 3:
        return G__17275__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17275;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args17274) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17274)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__17277 = null;
  var G__17277__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17277__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17277 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17277__2.call(this, self__, k);
      case 3:
        return G__17277__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17277;
}();
cljs.core.RedNode.prototype.apply = function(self__, args17276) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17276)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__17279 = null;
  var G__17279__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17279__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17279 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17279__2.call(this, self__, k);
      case 3:
        return G__17279__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17279;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args17278) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17278)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__17280 = t.left;
          t = G__17280;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__17281 = t.right;
            t = G__17281;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__17282 = cljs.core.conj.call(null, stack, t);
              var G__17283 = t.left;
              stack = G__17282;
              t = G__17283;
              continue;
            } else {
              var G__17284 = stack;
              var G__17285 = t.right;
              stack = G__17284;
              t = G__17285;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__17286 = cljs.core.conj.call(null, stack, t);
                var G__17287 = t.right;
                stack = G__17286;
                t = G__17287;
                continue;
              } else {
                var G__17288 = stack;
                var G__17289 = t.left;
                stack = G__17288;
                t = G__17289;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__17290 = cljs.core.nnext.call(null, in$);
        var G__17291 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__17290;
        out = G__17291;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__17292) {
    var keyvals = cljs.core.seq(arglist__17292);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__17293) {
    var keyvals = cljs.core.seq(arglist__17293);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj17297 = {};
      return obj17297;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__17298 = cljs.core.nnext.call(null, kvs);
        kvs = G__17298;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__17299) {
    var keyvals = cljs.core.seq(arglist__17299);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__17300 = cljs.core.nnext.call(null, in$);
        var G__17301 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__17300;
        out = G__17301;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__17302) {
    var keyvals = cljs.core.seq(arglist__17302);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__17303 = cljs.core.nnext.call(null, in$);
        var G__17304 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__17303;
        out = G__17304;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__17305) {
    var comparator = cljs.core.first(arglist__17305);
    var keyvals = cljs.core.rest(arglist__17305);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17306 = self__.mseq;
    if (G__17306) {
      var bit__10912__auto__ = G__17306.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10912__auto__ || G__17306.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17306.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17306);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17306);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17307 = self__.mseq;
    if (G__17307) {
      var bit__10912__auto__ = G__17307.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10912__auto__ || G__17307.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17307.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17307);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17307);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17308 = self__.mseq;
    if (G__17308) {
      var bit__10912__auto__ = G__17308.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10912__auto__ || G__17308.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17308.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17308);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17308);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17309 = self__.mseq;
    if (G__17309) {
      var bit__10912__auto__ = G__17309.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__10912__auto__ || G__17309.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17309.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17309);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__17309);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__17310_SHARP_, p2__17311_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__10262__auto__ = p1__17310_SHARP_;
          if (cljs.core.truth_(or__10262__auto__)) {
            return or__10262__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__17311_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__17312) {
    var maps = cljs.core.seq(arglist__17312);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__10262__auto__ = m1;
            if (cljs.core.truth_(or__10262__auto__)) {
              return or__10262__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__17313) {
    var f = cljs.core.first(arglist__17313);
    var maps = cljs.core.rest(arglist__17313);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__17314 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__17315 = cljs.core.next.call(null, keys);
      ret = G__17314;
      keys = G__17315;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__17318 = null;
  var G__17318__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17318__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17318 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17318__2.call(this, self__, k);
      case 3:
        return G__17318__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17318;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args17317) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17317)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__17316_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__17316_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__17319 = i + 1;
        var G__17320 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__17319;
        out = G__17320;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__17321 = i + 1;
        var G__17322 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__17321;
        out = G__17322;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__17324 = null;
  var G__17324__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__17324__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__17324 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17324__2.call(this, self__, k);
      case 3:
        return G__17324__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17324;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args17323) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17323)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__17327 = null;
  var G__17327__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17327__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17327 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17327__2.call(this, self__, k);
      case 3:
        return G__17327__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__17327;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args17326) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args17326)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__17325_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__17325_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__11104__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__11104__auto__.length) {
        var G__17328 = i + 1;
        var G__17329 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__17328;
        res = G__17329;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__17330 = cljs.core._next.call(null, in$__$1);
            var G__17331 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__17330;
            out = G__17331;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__17332__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__17332 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17332__delegate.call(this, keys);
    };
    G__17332.cljs$lang$maxFixedArity = 0;
    G__17332.cljs$lang$applyTo = function(arglist__17333) {
      var keys = cljs.core.seq(arglist__17333);
      return G__17332__delegate(keys);
    };
    G__17332.cljs$core$IFn$_invoke$arity$variadic = G__17332__delegate;
    return G__17332;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__17334) {
    var keys = cljs.core.seq(arglist__17334);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__17335) {
    var comparator = cljs.core.first(arglist__17335);
    var keys = cljs.core.rest(arglist__17335);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__17336_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__17336_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__17336_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__17343, seen__$1) {
        while (true) {
          var vec__17344 = p__17343;
          var f = cljs.core.nth.call(null, vec__17344, 0, null);
          var xs__$1 = vec__17344;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__17345 = cljs.core.rest.call(null, s);
              var G__17346 = seen__$1;
              p__17343 = G__17345;
              seen__$1 = G__17346;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__17347 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__17348 = cljs.core.next.call(null, s__$1);
      ret = G__17347;
      s__$1 = G__17348;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__17350 = x;
    if (G__17350) {
      var bit__10905__auto__ = G__17350.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__10905__auto__ || G__17350.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__17351 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__17352 = cljs.core.next.call(null, ks);
      var G__17353 = cljs.core.next.call(null, vs);
      map = G__17351;
      ks = G__17352;
      vs = G__17353;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__17356__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__17354_SHARP_, p2__17355_SHARP_) {
        return max_key.call(null, k, p1__17354_SHARP_, p2__17355_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__17356 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17356__delegate.call(this, k, x, y, more);
    };
    G__17356.cljs$lang$maxFixedArity = 3;
    G__17356.cljs$lang$applyTo = function(arglist__17357) {
      var k = cljs.core.first(arglist__17357);
      arglist__17357 = cljs.core.next(arglist__17357);
      var x = cljs.core.first(arglist__17357);
      arglist__17357 = cljs.core.next(arglist__17357);
      var y = cljs.core.first(arglist__17357);
      var more = cljs.core.rest(arglist__17357);
      return G__17356__delegate(k, x, y, more);
    };
    G__17356.cljs$core$IFn$_invoke$arity$variadic = G__17356__delegate;
    return G__17356;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__17360__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__17358_SHARP_, p2__17359_SHARP_) {
        return min_key.call(null, k, p1__17358_SHARP_, p2__17359_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__17360 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17360__delegate.call(this, k, x, y, more);
    };
    G__17360.cljs$lang$maxFixedArity = 3;
    G__17360.cljs$lang$applyTo = function(arglist__17361) {
      var k = cljs.core.first(arglist__17361);
      arglist__17361 = cljs.core.next(arglist__17361);
      var x = cljs.core.first(arglist__17361);
      arglist__17361 = cljs.core.next(arglist__17361);
      var y = cljs.core.first(arglist__17361);
      var more = cljs.core.rest(arglist__17361);
      return G__17360__delegate(k, x, y, more);
    };
    G__17360.cljs$core$IFn$_invoke$arity$variadic = G__17360__delegate;
    return G__17360;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__17364 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__17364, 0, null);
        var s = vec__17364;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__17365 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__17365, 0, null);
      var s = vec__17365;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__17368 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__17368, 0, null);
        var s = vec__17368;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__17369 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__17369, 0, null);
      var s = vec__17369;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__17370_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__17370_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__17381 = null;
      var G__17381__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__17381__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__17381__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__17381__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__17381__4 = function() {
        var G__17382__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__17382 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17382__delegate.call(this, x, y, z, args);
        };
        G__17382.cljs$lang$maxFixedArity = 3;
        G__17382.cljs$lang$applyTo = function(arglist__17383) {
          var x = cljs.core.first(arglist__17383);
          arglist__17383 = cljs.core.next(arglist__17383);
          var y = cljs.core.first(arglist__17383);
          arglist__17383 = cljs.core.next(arglist__17383);
          var z = cljs.core.first(arglist__17383);
          var args = cljs.core.rest(arglist__17383);
          return G__17382__delegate(x, y, z, args);
        };
        G__17382.cljs$core$IFn$_invoke$arity$variadic = G__17382__delegate;
        return G__17382;
      }();
      G__17381 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17381__0.call(this);
          case 1:
            return G__17381__1.call(this, x);
          case 2:
            return G__17381__2.call(this, x, y);
          case 3:
            return G__17381__3.call(this, x, y, z);
          default:
            return G__17381__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17381.cljs$lang$maxFixedArity = 3;
      G__17381.cljs$lang$applyTo = G__17381__4.cljs$lang$applyTo;
      return G__17381;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__17384 = null;
      var G__17384__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__17384__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__17384__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__17384__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__17384__4 = function() {
        var G__17385__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__17385 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17385__delegate.call(this, x, y, z, args);
        };
        G__17385.cljs$lang$maxFixedArity = 3;
        G__17385.cljs$lang$applyTo = function(arglist__17386) {
          var x = cljs.core.first(arglist__17386);
          arglist__17386 = cljs.core.next(arglist__17386);
          var y = cljs.core.first(arglist__17386);
          arglist__17386 = cljs.core.next(arglist__17386);
          var z = cljs.core.first(arglist__17386);
          var args = cljs.core.rest(arglist__17386);
          return G__17385__delegate(x, y, z, args);
        };
        G__17385.cljs$core$IFn$_invoke$arity$variadic = G__17385__delegate;
        return G__17385;
      }();
      G__17384 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17384__0.call(this);
          case 1:
            return G__17384__1.call(this, x);
          case 2:
            return G__17384__2.call(this, x, y);
          case 3:
            return G__17384__3.call(this, x, y, z);
          default:
            return G__17384__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17384.cljs$lang$maxFixedArity = 3;
      G__17384.cljs$lang$applyTo = G__17384__4.cljs$lang$applyTo;
      return G__17384;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__17387 = null;
      var G__17387__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__17387__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__17387__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__17387__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__17387__4 = function() {
        var G__17388__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__17388 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__17388__delegate.call(this, x, y, z, args);
        };
        G__17388.cljs$lang$maxFixedArity = 3;
        G__17388.cljs$lang$applyTo = function(arglist__17389) {
          var x = cljs.core.first(arglist__17389);
          arglist__17389 = cljs.core.next(arglist__17389);
          var y = cljs.core.first(arglist__17389);
          arglist__17389 = cljs.core.next(arglist__17389);
          var z = cljs.core.first(arglist__17389);
          var args = cljs.core.rest(arglist__17389);
          return G__17388__delegate(x, y, z, args);
        };
        G__17388.cljs$core$IFn$_invoke$arity$variadic = G__17388__delegate;
        return G__17388;
      }();
      G__17387 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17387__0.call(this);
          case 1:
            return G__17387__1.call(this, x);
          case 2:
            return G__17387__2.call(this, x, y);
          case 3:
            return G__17387__3.call(this, x, y, z);
          default:
            return G__17387__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17387.cljs$lang$maxFixedArity = 3;
      G__17387.cljs$lang$applyTo = G__17387__4.cljs$lang$applyTo;
      return G__17387;
    }();
  };
  var juxt__4 = function() {
    var G__17390__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__17391 = null;
        var G__17391__0 = function() {
          return cljs.core.reduce.call(null, function(p1__17371_SHARP_, p2__17372_SHARP_) {
            return cljs.core.conj.call(null, p1__17371_SHARP_, p2__17372_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17391__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__17373_SHARP_, p2__17374_SHARP_) {
            return cljs.core.conj.call(null, p1__17373_SHARP_, p2__17374_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17391__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__17375_SHARP_, p2__17376_SHARP_) {
            return cljs.core.conj.call(null, p1__17375_SHARP_, p2__17376_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17391__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__17377_SHARP_, p2__17378_SHARP_) {
            return cljs.core.conj.call(null, p1__17377_SHARP_, p2__17378_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17391__4 = function() {
          var G__17392__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__17379_SHARP_, p2__17380_SHARP_) {
              return cljs.core.conj.call(null, p1__17379_SHARP_, cljs.core.apply.call(null, p2__17380_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__17392 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__17392__delegate.call(this, x, y, z, args);
          };
          G__17392.cljs$lang$maxFixedArity = 3;
          G__17392.cljs$lang$applyTo = function(arglist__17393) {
            var x = cljs.core.first(arglist__17393);
            arglist__17393 = cljs.core.next(arglist__17393);
            var y = cljs.core.first(arglist__17393);
            arglist__17393 = cljs.core.next(arglist__17393);
            var z = cljs.core.first(arglist__17393);
            var args = cljs.core.rest(arglist__17393);
            return G__17392__delegate(x, y, z, args);
          };
          G__17392.cljs$core$IFn$_invoke$arity$variadic = G__17392__delegate;
          return G__17392;
        }();
        G__17391 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__17391__0.call(this);
            case 1:
              return G__17391__1.call(this, x);
            case 2:
              return G__17391__2.call(this, x, y);
            case 3:
              return G__17391__3.call(this, x, y, z);
            default:
              return G__17391__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17391.cljs$lang$maxFixedArity = 3;
        G__17391.cljs$lang$applyTo = G__17391__4.cljs$lang$applyTo;
        return G__17391;
      }();
    };
    var G__17390 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__17390__delegate.call(this, f, g, h, fs);
    };
    G__17390.cljs$lang$maxFixedArity = 3;
    G__17390.cljs$lang$applyTo = function(arglist__17394) {
      var f = cljs.core.first(arglist__17394);
      arglist__17394 = cljs.core.next(arglist__17394);
      var g = cljs.core.first(arglist__17394);
      arglist__17394 = cljs.core.next(arglist__17394);
      var h = cljs.core.first(arglist__17394);
      var fs = cljs.core.rest(arglist__17394);
      return G__17390__delegate(f, g, h, fs);
    };
    G__17390.cljs$core$IFn$_invoke$arity$variadic = G__17390__delegate;
    return G__17390;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__17395 = cljs.core.next.call(null, coll);
        coll = G__17395;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__17396 = n - 1;
        var G__17397 = cljs.core.next.call(null, coll);
        n = G__17396;
        coll = G__17397;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__17399 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__17399, 0, null);
  var flags = cljs.core.nth.call(null, vec__17399, 1, null);
  var pattern = cljs.core.nth.call(null, vec__17399, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_17401 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_17402__$1 = cljs.core.next.call(null, coll);
      var n_17403 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_17402__$1 && (n_17403 == null || !(n_17403 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_17402__$1), writer, opts);
          var G__17404 = cljs.core.next.call(null, coll_17402__$1);
          var G__17405 = n_17403 - 1;
          coll_17402__$1 = G__17404;
          n_17403 = G__17405;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_17401;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__17410 = cljs.core.seq.call(null, ss);
    var chunk__17411 = null;
    var count__17412 = 0;
    var i__17413 = 0;
    while (true) {
      if (i__17413 < count__17412) {
        var s = cljs.core._nth.call(null, chunk__17411, i__17413);
        cljs.core._write.call(null, writer, s);
        var G__17414 = seq__17410;
        var G__17415 = chunk__17411;
        var G__17416 = count__17412;
        var G__17417 = i__17413 + 1;
        seq__17410 = G__17414;
        chunk__17411 = G__17415;
        count__17412 = G__17416;
        i__17413 = G__17417;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__17410);
        if (temp__4092__auto__) {
          var seq__17410__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17410__$1)) {
            var c__11010__auto__ = cljs.core.chunk_first.call(null, seq__17410__$1);
            var G__17418 = cljs.core.chunk_rest.call(null, seq__17410__$1);
            var G__17419 = c__11010__auto__;
            var G__17420 = cljs.core.count.call(null, c__11010__auto__);
            var G__17421 = 0;
            seq__17410 = G__17418;
            chunk__17411 = G__17419;
            count__17412 = G__17420;
            i__17413 = G__17421;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__17410__$1);
            cljs.core._write.call(null, writer, s);
            var G__17422 = cljs.core.next.call(null, seq__17410__$1);
            var G__17423 = null;
            var G__17424 = 0;
            var G__17425 = 0;
            seq__17410 = G__17422;
            chunk__17411 = G__17423;
            count__17412 = G__17424;
            i__17413 = G__17425;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__17426) {
    var writer = cljs.core.first(arglist__17426);
    var ss = cljs.core.rest(arglist__17426);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj17428 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj17428;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__10250__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__10250__auto__)) {
            var and__10250__auto____$1 = function() {
              var G__17434 = obj;
              if (G__17434) {
                var bit__10912__auto__ = G__17434.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__10912__auto__ || G__17434.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__17434.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__17434);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__17434);
              }
            }();
            if (and__10250__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__10250__auto____$1;
            }
          } else {
            return and__10250__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__17435 = obj;
              if (G__17435) {
                var bit__10905__auto__ = G__17435.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__10905__auto__ || G__17435.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__17437 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__17437;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__17436 = obj;
                              if (G__17436) {
                                var bit__10912__auto__ = G__17436.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__10912__auto__ || G__17436.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__17436.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__17436);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__17436);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__17442 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__17443 = null;
  var count__17444 = 0;
  var i__17445 = 0;
  while (true) {
    if (i__17445 < count__17444) {
      var obj = cljs.core._nth.call(null, chunk__17443, i__17445);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__17446 = seq__17442;
      var G__17447 = chunk__17443;
      var G__17448 = count__17444;
      var G__17449 = i__17445 + 1;
      seq__17442 = G__17446;
      chunk__17443 = G__17447;
      count__17444 = G__17448;
      i__17445 = G__17449;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__17442);
      if (temp__4092__auto__) {
        var seq__17442__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17442__$1)) {
          var c__11010__auto__ = cljs.core.chunk_first.call(null, seq__17442__$1);
          var G__17450 = cljs.core.chunk_rest.call(null, seq__17442__$1);
          var G__17451 = c__11010__auto__;
          var G__17452 = cljs.core.count.call(null, c__11010__auto__);
          var G__17453 = 0;
          seq__17442 = G__17450;
          chunk__17443 = G__17451;
          count__17444 = G__17452;
          i__17445 = G__17453;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__17442__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__17454 = cljs.core.next.call(null, seq__17442__$1);
          var G__17455 = null;
          var G__17456 = 0;
          var G__17457 = 0;
          seq__17442 = G__17454;
          chunk__17443 = G__17455;
          count__17444 = G__17456;
          i__17445 = G__17457;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__17458) {
    var objs = cljs.core.seq(arglist__17458);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__17459) {
    var objs = cljs.core.seq(arglist__17459);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__17460) {
    var objs = cljs.core.seq(arglist__17460);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__17461) {
    var objs = cljs.core.seq(arglist__17461);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__17462) {
    var objs = cljs.core.seq(arglist__17462);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__17463) {
    var objs = cljs.core.seq(arglist__17463);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__17464) {
    var objs = cljs.core.seq(arglist__17464);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__17465) {
    var objs = cljs.core.seq(arglist__17465);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj17467 = {};
  return obj17467;
}();
cljs.core.IReset = function() {
  var obj17469 = {};
  return obj17469;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__10250__auto__ = o;
    if (and__10250__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__10889__auto__ = o == null ? null : o;
    return function() {
      var or__10262__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj17471 = {};
  return obj17471;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__10250__auto__ = o;
      if (and__10250__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__10889__auto__ = o == null ? null : o;
      return function() {
        var or__10262__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__10250__auto__ = o;
      if (and__10250__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__10889__auto__ = o == null ? null : o;
      return function() {
        var or__10262__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__10250__auto__ = o;
      if (and__10250__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__10889__auto__ = o == null ? null : o;
      return function() {
        var or__10262__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__10250__auto__ = o;
      if (and__10250__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__10889__auto__ = o == null ? null : o;
      return function() {
        var or__10262__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__17472 = cljs.core.seq.call(null, self__.watches);
  var chunk__17473 = null;
  var count__17474 = 0;
  var i__17475 = 0;
  while (true) {
    if (i__17475 < count__17474) {
      var vec__17476 = cljs.core._nth.call(null, chunk__17473, i__17475);
      var key = cljs.core.nth.call(null, vec__17476, 0, null);
      var f = cljs.core.nth.call(null, vec__17476, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__17478 = seq__17472;
      var G__17479 = chunk__17473;
      var G__17480 = count__17474;
      var G__17481 = i__17475 + 1;
      seq__17472 = G__17478;
      chunk__17473 = G__17479;
      count__17474 = G__17480;
      i__17475 = G__17481;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__17472);
      if (temp__4092__auto__) {
        var seq__17472__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__17472__$1)) {
          var c__11010__auto__ = cljs.core.chunk_first.call(null, seq__17472__$1);
          var G__17482 = cljs.core.chunk_rest.call(null, seq__17472__$1);
          var G__17483 = c__11010__auto__;
          var G__17484 = cljs.core.count.call(null, c__11010__auto__);
          var G__17485 = 0;
          seq__17472 = G__17482;
          chunk__17473 = G__17483;
          count__17474 = G__17484;
          i__17475 = G__17485;
          continue;
        } else {
          var vec__17477 = cljs.core.first.call(null, seq__17472__$1);
          var key = cljs.core.nth.call(null, vec__17477, 0, null);
          var f = cljs.core.nth.call(null, vec__17477, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__17486 = cljs.core.next.call(null, seq__17472__$1);
          var G__17487 = null;
          var G__17488 = 0;
          var G__17489 = 0;
          seq__17472 = G__17486;
          chunk__17473 = G__17487;
          count__17474 = G__17488;
          i__17475 = G__17489;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__17493__delegate = function(x, p__17490) {
      var map__17492 = p__17490;
      var map__17492__$1 = cljs.core.seq_QMARK_.call(null, map__17492) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17492) : map__17492;
      var validator = cljs.core.get.call(null, map__17492__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__17492__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__17493 = function(x, var_args) {
      var p__17490 = null;
      if (arguments.length > 1) {
        p__17490 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17493__delegate.call(this, x, p__17490);
    };
    G__17493.cljs$lang$maxFixedArity = 1;
    G__17493.cljs$lang$applyTo = function(arglist__17494) {
      var x = cljs.core.first(arglist__17494);
      var p__17490 = cljs.core.rest(arglist__17494);
      return G__17493__delegate(x, p__17490);
    };
    G__17493.cljs$core$IFn$_invoke$arity$variadic = G__17493__delegate;
    return G__17493;
  }();
  atom = function(x, var_args) {
    var p__17490 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__17495__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__17495 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__17495__delegate.call(this, a, f, x, y, more);
    };
    G__17495.cljs$lang$maxFixedArity = 4;
    G__17495.cljs$lang$applyTo = function(arglist__17496) {
      var a = cljs.core.first(arglist__17496);
      arglist__17496 = cljs.core.next(arglist__17496);
      var f = cljs.core.first(arglist__17496);
      arglist__17496 = cljs.core.next(arglist__17496);
      var x = cljs.core.first(arglist__17496);
      arglist__17496 = cljs.core.next(arglist__17496);
      var y = cljs.core.first(arglist__17496);
      var more = cljs.core.rest(arglist__17496);
      return G__17495__delegate(a, f, x, y, more);
    };
    G__17495.cljs$core$IFn$_invoke$arity$variadic = G__17495__delegate;
    return G__17495;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__17497) {
    var iref = cljs.core.first(arglist__17497);
    arglist__17497 = cljs.core.next(arglist__17497);
    var f = cljs.core.first(arglist__17497);
    var args = cljs.core.rest(arglist__17497);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__17498) {
    var map__17499 = p__17498;
    var map__17499__$1 = cljs.core.seq_QMARK_.call(null, map__17499) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17499) : map__17499;
    var curr_state = map__17499__$1;
    var done = cljs.core.get.call(null, map__17499__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj17501 = {};
  return obj17501;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__10250__auto__ = x;
    if (and__10250__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__10889__auto__ = x == null ? null : x;
    return function() {
      var or__10262__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__10250__auto__ = x;
    if (and__10250__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__10889__auto__ = x == null ? null : x;
    return function() {
      var or__10262__auto__ = cljs.core._key__GT_js[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__17503 = k;
    if (G__17503) {
      var bit__10912__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__10262__auto__ = bit__10912__auto__;
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          return G__17503.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__17503.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__17503);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__17503);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__17517 = x;
      if (G__17517) {
        var bit__10912__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__10262__auto__ = bit__10912__auto__;
          if (cljs.core.truth_(or__10262__auto__)) {
            return or__10262__auto__;
          } else {
            return G__17517.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__17517.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__17517);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__17517);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj17519 = {};
              return obj17519;
            }();
            var seq__17520_17530 = cljs.core.seq.call(null, x);
            var chunk__17521_17531 = null;
            var count__17522_17532 = 0;
            var i__17523_17533 = 0;
            while (true) {
              if (i__17523_17533 < count__17522_17532) {
                var vec__17524_17534 = cljs.core._nth.call(null, chunk__17521_17531, i__17523_17533);
                var k_17535 = cljs.core.nth.call(null, vec__17524_17534, 0, null);
                var v_17536 = cljs.core.nth.call(null, vec__17524_17534, 1, null);
                m[cljs.core.key__GT_js.call(null, k_17535)] = clj__GT_js.call(null, v_17536);
                var G__17537 = seq__17520_17530;
                var G__17538 = chunk__17521_17531;
                var G__17539 = count__17522_17532;
                var G__17540 = i__17523_17533 + 1;
                seq__17520_17530 = G__17537;
                chunk__17521_17531 = G__17538;
                count__17522_17532 = G__17539;
                i__17523_17533 = G__17540;
                continue;
              } else {
                var temp__4092__auto___17541 = cljs.core.seq.call(null, seq__17520_17530);
                if (temp__4092__auto___17541) {
                  var seq__17520_17542__$1 = temp__4092__auto___17541;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__17520_17542__$1)) {
                    var c__11010__auto___17543 = cljs.core.chunk_first.call(null, seq__17520_17542__$1);
                    var G__17544 = cljs.core.chunk_rest.call(null, seq__17520_17542__$1);
                    var G__17545 = c__11010__auto___17543;
                    var G__17546 = cljs.core.count.call(null, c__11010__auto___17543);
                    var G__17547 = 0;
                    seq__17520_17530 = G__17544;
                    chunk__17521_17531 = G__17545;
                    count__17522_17532 = G__17546;
                    i__17523_17533 = G__17547;
                    continue;
                  } else {
                    var vec__17525_17548 = cljs.core.first.call(null, seq__17520_17542__$1);
                    var k_17549 = cljs.core.nth.call(null, vec__17525_17548, 0, null);
                    var v_17550 = cljs.core.nth.call(null, vec__17525_17548, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_17549)] = clj__GT_js.call(null, v_17550);
                    var G__17551 = cljs.core.next.call(null, seq__17520_17542__$1);
                    var G__17552 = null;
                    var G__17553 = 0;
                    var G__17554 = 0;
                    seq__17520_17530 = G__17551;
                    chunk__17521_17531 = G__17552;
                    count__17522_17532 = G__17553;
                    i__17523_17533 = G__17554;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__17526_17555 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__17527_17556 = null;
              var count__17528_17557 = 0;
              var i__17529_17558 = 0;
              while (true) {
                if (i__17529_17558 < count__17528_17557) {
                  var x_17559__$1 = cljs.core._nth.call(null, chunk__17527_17556, i__17529_17558);
                  arr.push(x_17559__$1);
                  var G__17560 = seq__17526_17555;
                  var G__17561 = chunk__17527_17556;
                  var G__17562 = count__17528_17557;
                  var G__17563 = i__17529_17558 + 1;
                  seq__17526_17555 = G__17560;
                  chunk__17527_17556 = G__17561;
                  count__17528_17557 = G__17562;
                  i__17529_17558 = G__17563;
                  continue;
                } else {
                  var temp__4092__auto___17564 = cljs.core.seq.call(null, seq__17526_17555);
                  if (temp__4092__auto___17564) {
                    var seq__17526_17565__$1 = temp__4092__auto___17564;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__17526_17565__$1)) {
                      var c__11010__auto___17566 = cljs.core.chunk_first.call(null, seq__17526_17565__$1);
                      var G__17567 = cljs.core.chunk_rest.call(null, seq__17526_17565__$1);
                      var G__17568 = c__11010__auto___17566;
                      var G__17569 = cljs.core.count.call(null, c__11010__auto___17566);
                      var G__17570 = 0;
                      seq__17526_17555 = G__17567;
                      chunk__17527_17556 = G__17568;
                      count__17528_17557 = G__17569;
                      i__17529_17558 = G__17570;
                      continue;
                    } else {
                      var x_17571__$1 = cljs.core.first.call(null, seq__17526_17565__$1);
                      arr.push(x_17571__$1);
                      var G__17572 = cljs.core.next.call(null, seq__17526_17565__$1);
                      var G__17573 = null;
                      var G__17574 = 0;
                      var G__17575 = 0;
                      seq__17526_17555 = G__17572;
                      chunk__17527_17556 = G__17573;
                      count__17528_17557 = G__17574;
                      i__17529_17558 = G__17575;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj17577 = {};
  return obj17577;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__10250__auto__ = x;
    if (and__10250__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__10889__auto__ = x == null ? null : x;
    return function() {
      var or__10262__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__17598__delegate = function(x, opts) {
      if (function() {
        var G__17588 = x;
        if (G__17588) {
          var bit__10912__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__10262__auto__ = bit__10912__auto__;
            if (cljs.core.truth_(or__10262__auto__)) {
              return or__10262__auto__;
            } else {
              return G__17588.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__17588.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__17588);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__17588);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__17589 = opts;
          var map__17589__$1 = cljs.core.seq_QMARK_.call(null, map__17589) ? cljs.core.apply.call(null, cljs.core.hash_map, map__17589) : map__17589;
          var keywordize_keys = cljs.core.get.call(null, map__17589__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__17589, map__17589__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__10979__auto__ = function(map__17589, map__17589__$1, keywordize_keys, keyfn) {
                          return function iter__17594(s__17595) {
                            return new cljs.core.LazySeq(null, function(map__17589, map__17589__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__17595__$1 = s__17595;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__17595__$1);
                                  if (temp__4092__auto__) {
                                    var s__17595__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__17595__$2)) {
                                      var c__10977__auto__ = cljs.core.chunk_first.call(null, s__17595__$2);
                                      var size__10978__auto__ = cljs.core.count.call(null, c__10977__auto__);
                                      var b__17597 = cljs.core.chunk_buffer.call(null, size__10978__auto__);
                                      if (function() {
                                        var i__17596 = 0;
                                        while (true) {
                                          if (i__17596 < size__10978__auto__) {
                                            var k = cljs.core._nth.call(null, c__10977__auto__, i__17596);
                                            cljs.core.chunk_append.call(null, b__17597, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__17599 = i__17596 + 1;
                                            i__17596 = G__17599;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__17597), iter__17594.call(null, cljs.core.chunk_rest.call(null, s__17595__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__17597), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__17595__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__17594.call(null, cljs.core.rest.call(null, s__17595__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__17589, map__17589__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__17589, map__17589__$1, keywordize_keys, keyfn);
                        return iter__10979__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__17589, map__17589__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__17598 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17598__delegate.call(this, x, opts);
    };
    G__17598.cljs$lang$maxFixedArity = 1;
    G__17598.cljs$lang$applyTo = function(arglist__17600) {
      var x = cljs.core.first(arglist__17600);
      var opts = cljs.core.rest(arglist__17600);
      return G__17598__delegate(x, opts);
    };
    G__17598.cljs$core$IFn$_invoke$arity$variadic = G__17598__delegate;
    return G__17598;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__17601__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__17601 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__17601__delegate.call(this, args);
    };
    G__17601.cljs$lang$maxFixedArity = 0;
    G__17601.cljs$lang$applyTo = function(arglist__17602) {
      var args = cljs.core.seq(arglist__17602);
      return G__17601__delegate(args);
    };
    G__17601.cljs$core$IFn$_invoke$arity$variadic = G__17601__delegate;
    return G__17601;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__17603 = ret;
        f = G__17603;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__17604__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__17604 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__17604__delegate.call(this, f, args);
    };
    G__17604.cljs$lang$maxFixedArity = 1;
    G__17604.cljs$lang$applyTo = function(arglist__17605) {
      var f = cljs.core.first(arglist__17605);
      var args = cljs.core.rest(arglist__17605);
      return G__17604__delegate(f, args);
    };
    G__17604.cljs$core$IFn$_invoke$arity$variadic = G__17604__delegate;
    return G__17604;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__17606) {
    var f = cljs.core.first(arglist__17606);
    var args = cljs.core.rest(arglist__17606);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__10262__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__10262__auto__) {
      return or__10262__auto__;
    } else {
      var or__10262__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__10262__auto____$1) {
        return or__10262__auto____$1;
      } else {
        var and__10250__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__10250__auto__) {
          var and__10250__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__10250__auto____$1) {
            var and__10250__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__10250__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__17607 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__17608 = i + 1;
                  ret = G__17607;
                  i = G__17608;
                  continue;
                }
                break;
              }
            } else {
              return and__10250__auto____$2;
            }
          } else {
            return and__10250__auto____$1;
          }
        } else {
          return and__10250__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__10262__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__10262__auto__)) {
      return or__10262__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__17609_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__17609_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__17609_SHARP_), cljs.core.second.call(null, p1__17609_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__17610_SHARP_, p2__17611_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__17610_SHARP_, p2__17611_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__10262__auto__ = cljs.core.truth_(function() {
    var and__10250__auto__ = xprefs;
    if (cljs.core.truth_(and__10250__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__10250__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__10262__auto__)) {
    return or__10262__auto__;
  } else {
    var or__10262__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__17612 = cljs.core.rest.call(null, ps);
          ps = G__17612;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__10262__auto____$1)) {
      return or__10262__auto____$1;
    } else {
      var or__10262__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__17613 = cljs.core.rest.call(null, ps);
            ps = G__17613;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__10262__auto____$2)) {
        return or__10262__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__10262__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__10262__auto__)) {
    return or__10262__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__17616) {
    var vec__17617 = p__17616;
    var k = cljs.core.nth.call(null, vec__17617, 0, null);
    var _ = cljs.core.nth.call(null, vec__17617, 1, null);
    var e = vec__17617;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__10262__auto__ = be == null;
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj17619 = {};
  return obj17619;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__10250__auto__ = mf;
    if (and__10250__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__10889__auto__ = mf == null ? null : mf;
    return function() {
      var or__10262__auto__ = cljs.core._reset[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._reset["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__10250__auto__ = mf;
    if (and__10250__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__10889__auto__ = mf == null ? null : mf;
    return function() {
      var or__10262__auto__ = cljs.core._add_method[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._add_method["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__10250__auto__ = mf;
    if (and__10250__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__10889__auto__ = mf == null ? null : mf;
    return function() {
      var or__10262__auto__ = cljs.core._remove_method[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._remove_method["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__10250__auto__ = mf;
    if (and__10250__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__10889__auto__ = mf == null ? null : mf;
    return function() {
      var or__10262__auto__ = cljs.core._prefer_method[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._prefer_method["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__10250__auto__ = mf;
    if (and__10250__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__10889__auto__ = mf == null ? null : mf;
    return function() {
      var or__10262__auto__ = cljs.core._get_method[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._get_method["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__10250__auto__ = mf;
    if (and__10250__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__10889__auto__ = mf == null ? null : mf;
    return function() {
      var or__10262__auto__ = cljs.core._methods[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._methods["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__10250__auto__ = mf;
    if (and__10250__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__10889__auto__ = mf == null ? null : mf;
    return function() {
      var or__10262__auto__ = cljs.core._prefers[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._prefers["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__10250__auto__ = mf;
    if (and__10250__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__10889__auto__ = mf == null ? null : mf;
    return function() {
      var or__10262__auto__ = cljs.core._dispatch[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core._dispatch["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__17620__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__17620 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__17620__delegate.call(this, _, args);
  };
  G__17620.cljs$lang$maxFixedArity = 1;
  G__17620.cljs$lang$applyTo = function(arglist__17621) {
    var _ = cljs.core.first(arglist__17621);
    var args = cljs.core.rest(arglist__17621);
    return G__17620__delegate(_, args);
  };
  G__17620.cljs$core$IFn$_invoke$arity$variadic = G__17620__delegate;
  return G__17620;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__10832__auto__, writer__10833__auto__, opts__10834__auto__) {
  return cljs.core._write.call(null, writer__10833__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("todomvc.transact");
goog.require("cljs.core");
todomvc.transact.update_item = function update_item(state, id, f) {
  return cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), function(items) {
    return cljs.core.map.call(null, function(p1__16551_SHARP_) {
      if (cljs.core._EQ_.call(null, id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(p1__16551_SHARP_))) {
        return f.call(null, p1__16551_SHARP_);
      } else {
        return p1__16551_SHARP_;
      }
    }, items);
  });
};
todomvc.transact.handle = function() {
  var method_table__11120__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__11121__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__11122__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__11123__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__11124__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("handle", function(state, trans) {
    return cljs.core.first.call(null, trans);
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__11124__auto__, method_table__11120__auto__, prefer_table__11121__auto__, method_cache__11122__auto__, cached_hierarchy__11123__auto__);
}();
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "set-filter", "set-filter", 2331384501), function(state, p__16552) {
  var vec__16553 = p__16552;
  var _ = cljs.core.nth.call(null, vec__16553, 0, null);
  var this_filter = cljs.core.nth.call(null, vec__16553, 1, null);
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582), this_filter);
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "add-item", "add-item", 4026553393), function(p__16554, p__16555) {
  var map__16556 = p__16554;
  var map__16556__$1 = cljs.core.seq_QMARK_.call(null, map__16556) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16556) : map__16556;
  var state = map__16556__$1;
  var next_id = cljs.core.get.call(null, map__16556__$1, new cljs.core.Keyword(null, "next-id", "next-id", 2860930471));
  var vec__16557 = p__16555;
  var _ = cljs.core.nth.call(null, vec__16557, 0, null);
  var id = cljs.core.nth.call(null, vec__16557, 1, null);
  var text = cljs.core.nth.call(null, vec__16557, 2, null);
  return cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), cljs.core.conj, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "text", "text", 1017460895), text, new cljs.core.Keyword(null, "commited", "commited", 4706580360), false], null));
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), function(state, p__16559) {
  var vec__16560 = p__16559;
  var _ = cljs.core.nth.call(null, vec__16560, 0, null);
  var id = cljs.core.nth.call(null, vec__16560, 1, null);
  return cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), function(items) {
    return cljs.core.remove.call(null, function(p1__16558_SHARP_) {
      return cljs.core._EQ_.call(null, id, (new cljs.core.Keyword(null, "id", "id", 1013907597)).cljs$core$IFn$_invoke$arity$1(p1__16558_SHARP_));
    }, items);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), function(state, p__16562) {
  var vec__16563 = p__16562;
  var _ = cljs.core.nth.call(null, vec__16563, 0, null);
  var id = cljs.core.nth.call(null, vec__16563, 1, null);
  return todomvc.transact.update_item.call(null, state, id, function(p1__16561_SHARP_) {
    return cljs.core.update_in.call(null, p1__16561_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "completed", "completed", 3905939901)], null), cljs.core.not);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "clear-completed", "clear-completed", 888981053), function(state, _) {
  return cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), function(items) {
    return cljs.core.remove.call(null, function(p1__16564_SHARP_) {
      return(new cljs.core.Keyword(null, "completed", "completed", 3905939901)).cljs$core$IFn$_invoke$arity$1(p1__16564_SHARP_);
    }, items);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "start-edit", "start-edit", 3689098247), function(state, p__16566) {
  var vec__16567 = p__16566;
  var _ = cljs.core.nth.call(null, vec__16567, 0, null);
  var id = cljs.core.nth.call(null, vec__16567, 1, null);
  return todomvc.transact.update_item.call(null, state, id, function(p1__16565_SHARP_) {
    return cljs.core.assoc.call(null, p1__16565_SHARP_, new cljs.core.Keyword(null, "editing", "editing", 3420907786), true);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "complete-edit", "complete-edit", 1152265616), function(state, p__16569) {
  var vec__16570 = p__16569;
  var _ = cljs.core.nth.call(null, vec__16570, 0, null);
  var id = cljs.core.nth.call(null, vec__16570, 1, null);
  var text = cljs.core.nth.call(null, vec__16570, 2, null);
  return todomvc.transact.update_item.call(null, state, id, function(p1__16568_SHARP_) {
    return cljs.core.assoc.call(null, p1__16568_SHARP_, new cljs.core.Keyword(null, "editing", "editing", 3420907786), false, new cljs.core.Keyword(null, "text", "text", 1017460895), text);
  });
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "toggle-all", "toggle-all", 4455256858), function(p__16572, _) {
  var map__16573 = p__16572;
  var map__16573__$1 = cljs.core.seq_QMARK_.call(null, map__16573) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16573) : map__16573;
  var state = map__16573__$1;
  var items = cljs.core.get.call(null, map__16573__$1, new cljs.core.Keyword(null, "items", "items", 1114430258));
  var target = !cljs.core.every_QMARK_.call(null, new cljs.core.Keyword(null, "completed", "completed", 3905939901), items);
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "items", "items", 1114430258), cljs.core.map.call(null, function(p1__16571_SHARP_) {
    return cljs.core.assoc.call(null, p1__16571_SHARP_, new cljs.core.Keyword(null, "completed", "completed", 3905939901), target);
  }, items));
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "error", "error", 1110689146), function(state, _) {
  console.log([cljs.core.str("hahahah"), cljs.core.str(state)].join(""));
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "error", "error", 1110689146), true);
});
cljs.core._add_method.call(null, todomvc.transact.handle, new cljs.core.Keyword(null, "default", "default", 2558708147), function(state, _) {
  return state;
});
todomvc.transact.all_done_QMARK_ = function all_done_QMARK_(p__16574) {
  var map__16576 = p__16574;
  var map__16576__$1 = cljs.core.seq_QMARK_.call(null, map__16576) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16576) : map__16576;
  var state = map__16576__$1;
  var items = cljs.core.get.call(null, map__16576__$1, new cljs.core.Keyword(null, "items", "items", 1114430258));
  return cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259), cljs.core.every_QMARK_.call(null, new cljs.core.Keyword(null, "completed", "completed", 3905939901), items));
};
todomvc.transact.initial_state = function initial_state() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259), true, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582), new cljs.core.Keyword(null, "all", "all", 1014000915), new cljs.core.Keyword(null, "items", "items", 1114430258), cljs.core.PersistentVector.EMPTY], null);
};
todomvc.transact.main = function main(state, transaction) {
  return todomvc.transact.all_done_QMARK_.call(null, cljs.core.update_in.call(null, todomvc.transact.handle.call(null, state, transaction), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "items", "items", 1114430258)], null), cljs.core.vec));
};
todomvc.transact.try_transactions = function try_transactions(transactions) {
  return cljs.core.reduce.call(null, todomvc.transact.main, todomvc.transact.initial_state.call(null), transactions);
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose;
goog.disposable.IDisposable.prototype.isDisposed;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    this.creationStack = (new Error).stack;
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.debug.errorHandlerWeakDep");
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn, opt_tracers) {
  return fn;
}};
goog.provide("goog.userAgent");
goog.require("goog.string");
goog.userAgent.ASSUME_IE = false;
goog.userAgent.ASSUME_GECKO = false;
goog.userAgent.ASSUME_WEBKIT = false;
goog.userAgent.ASSUME_MOBILE_WEBKIT = false;
goog.userAgent.ASSUME_OPERA = false;
goog.userAgent.ASSUME_ANY_VERSION = false;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || (goog.userAgent.ASSUME_GECKO || (goog.userAgent.ASSUME_MOBILE_WEBKIT || (goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA)));
goog.userAgent.getUserAgentString = function() {
  return goog.global["navigator"] ? goog.global["navigator"].userAgent : null;
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"];
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = false;
  goog.userAgent.detectedIe_ = false;
  goog.userAgent.detectedWebkit_ = false;
  goog.userAgent.detectedMobile_ = false;
  goog.userAgent.detectedGecko_ = false;
  var ua;
  if (!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = ua.indexOf("Opera") == 0;
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && ua.indexOf("MSIE") != -1;
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && ua.indexOf("WebKit") != -1;
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && ua.indexOf("Mobile") != -1;
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && (!goog.userAgent.detectedWebkit_ && navigator.product == "Gecko");
  }
};
if (!goog.userAgent.BROWSER_KNOWN_) {
  goog.userAgent.init_();
}
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = false;
goog.userAgent.ASSUME_WINDOWS = false;
goog.userAgent.ASSUME_LINUX = false;
goog.userAgent.ASSUME_X11 = false;
goog.userAgent.ASSUME_ANDROID = false;
goog.userAgent.ASSUME_IPHONE = false;
goog.userAgent.ASSUME_IPAD = false;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || (goog.userAgent.ASSUME_WINDOWS || (goog.userAgent.ASSUME_LINUX || (goog.userAgent.ASSUME_X11 || (goog.userAgent.ASSUME_ANDROID || (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD)))));
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf("Android") >= 0;
  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf("iPhone") >= 0;
  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf("iPad") >= 0;
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    version = typeof operaVersion == "function" ? operaVersion() : operaVersion;
  } else {
    if (goog.userAgent.GECKO) {
      re = /rv\:([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.IE) {
        re = /MSIE\s+([^\);]+)(\)|;)/;
      } else {
        if (goog.userAgent.WEBKIT) {
          re = /WebKit\/(\S+)/;
        }
      }
    }
    if (re) {
      var arr = re.exec(goog.userAgent.getUserAgentString());
      version = arr ? arr[1] : "";
    }
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || (goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0));
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || (goog.userAgent.IE && goog.userAgent.isVersion("8") || (goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"))), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || (!!(goog.global["document"] && (document.documentElement && "ontouchstart" in document.documentElement)) || !!(goog.global["navigator"] && goog.global["navigator"]["msMaxTouchPoints"]))};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.target = opt_target;
  this.currentTarget = this.target;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = false;
goog.events.Event.prototype.defaultPrevented = false;
goog.events.Event.prototype.returnValue_ = true;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.currentTarget;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = false;
goog.events.BrowserEvent.prototype.altKey = false;
goog.events.BrowserEvent.prototype.shiftKey = false;
goog.events.BrowserEvent.prototype.metaKey = false;
goog.events.BrowserEvent.prototype.state;
goog.events.BrowserEvent.prototype.platformModifierKey = false;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
  delete this.propagationStopped_;
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && (goog.userAgent.MAC && this.ctrlKey));
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.EventWrapper");
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.events.EventWrapper.prototype.unlisten = function(src, listener, opt_capt, opt_scope, opt_eventHandler) {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventLike");
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = false;
goog.events.Listenable.IMPLEMENTED_BY_PROP_ = "__closure_listenable";
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function() {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
};
goog.events.Listener.ENABLE_MONITORING = false;
goog.events.Listener.prototype.isFunctionListener_;
goog.events.Listener.prototype.listener;
goog.events.Listener.prototype.proxy;
goog.events.Listener.prototype.src;
goog.events.Listener.prototype.type;
goog.events.Listener.prototype.capture;
goog.events.Listener.prototype.handler;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = false;
goog.events.Listener.prototype.callOnce = false;
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.isFunction(listener)) {
    this.isFunctionListener_ = true;
  } else {
    if (listener && (listener.handleEvent && goog.isFunction(listener.handleEvent))) {
      this.isFunctionListener_ = false;
    } else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = false;
  this.key = goog.events.ListenableKey.reserveKey();
  this.removed = false;
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  if (this.isFunctionListener_) {
    return this.listener.call(this.handler || this.src, eventObject);
  }
  return this.listener.handleEvent.call(this.listener, eventObject);
};
goog.provide("goog.events");
goog.provide("goog.events.Key");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.debug.errorHandlerWeakDep");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventWrapper");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.require("goog.userAgent");
goog.events.Key;
goog.events.ListenableType;
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listen((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, false, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    map[type] = {count_:0, remaining_:0};
  }
  map = map[type];
  if (!(capture in map)) {
    map[capture] = {count_:0, remaining_:0};
    map.count_++;
  }
  map = map[capture];
  var srcUid = goog.getUid(src);
  var listenerArray, listenerObj;
  map.remaining_++;
  if (!map[srcUid]) {
    listenerArray = map[srcUid] = [];
    map.count_++;
  } else {
    listenerArray = map[srcUid];
    for (var i = 0;i < listenerArray.length;i++) {
      listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if (listenerObj.removed) {
          break;
        }
        if (!callOnce) {
          listenerArray[i].callOnce = false;
        }
        return listenerArray[i];
      }
    }
  }
  var proxy = goog.events.getProxy();
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  proxy.src = src;
  proxy.listener = listenerObj;
  listenerArray.push(listenerObj);
  if (!goog.events.sources_[srcUid]) {
    goog.events.sources_[srcUid] = [];
  }
  goog.events.sources_[srcUid].push(listenerObj);
  if (src.addEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.addEventListener(type, proxy, capture);
    }
  } else {
    src.attachEvent(goog.events.getOnString_(type), proxy);
  }
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  var listenableKey;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    listenableKey = src.listenOnce((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  } else {
    listenableKey = goog.events.listen_((src), type, listener, true, opt_capt, opt_handler);
  }
  var key = listenableKey.key;
  goog.events.listeners_[key] = listenableKey;
  return key;
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), goog.events.wrapListener_(listener), opt_capt, opt_handler);
  }
  var capture = !!opt_capt;
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (!listenerArray) {
    return false;
  }
  for (var i = 0;i < listenerArray.length;i++) {
    if (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler)) {
      return goog.events.unlistenByKey(listenerArray[i].key);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  var listener = goog.events.listeners_[key];
  if (!listener) {
    return false;
  }
  if (listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  var capture = listener.capture;
  if (src.removeEventListener) {
    if (src == goog.global || !src.customEvent_) {
      src.removeEventListener(type, proxy, capture);
    }
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  var srcUid = goog.getUid(src);
  if (goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    if (sourcesArray.length == 0) {
      delete goog.events.sources_[srcUid];
    }
  }
  listener.removed = true;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  if (listenerArray) {
    listenerArray.needsCleanup_ = true;
    goog.events.cleanUp_(type, capture, srcUid, listenerArray);
  }
  delete goog.events.listeners_[key];
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.cleanUp = function(listenableKey) {
  delete goog.events.listeners_[listenableKey.key];
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if (!listenerArray.locked_) {
    if (listenerArray.needsCleanup_) {
      for (var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
        if (listenerArray[oldIndex].removed) {
          var proxy = listenerArray[oldIndex].proxy;
          proxy.src = null;
          continue;
        }
        if (oldIndex != newIndex) {
          listenerArray[newIndex] = listenerArray[oldIndex];
        }
        newIndex++;
      }
      listenerArray.length = newIndex;
      listenerArray.needsCleanup_ = false;
      if (newIndex == 0) {
        delete goog.events.listenerTree_[type][capture][srcUid];
        goog.events.listenerTree_[type][capture].count_--;
        if (goog.events.listenerTree_[type][capture].count_ == 0) {
          delete goog.events.listenerTree_[type][capture];
          goog.events.listenerTree_[type].count_--;
        }
        if (goog.events.listenerTree_[type].count_ == 0) {
          delete goog.events.listenerTree_[type];
        }
      }
    }
  }
};
goog.events.removeAll = function(opt_obj, opt_type) {
  var count = 0;
  var noObj = opt_obj == null;
  var noType = opt_type == null;
  if (!noObj) {
    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && (opt_obj && goog.events.Listenable.isImplementedBy(opt_obj))) {
      return opt_obj.removeAllListeners(opt_type);
    }
    var srcUid = goog.getUid((opt_obj));
    if (goog.events.sources_[srcUid]) {
      var sourcesArray = goog.events.sources_[srcUid];
      for (var i = sourcesArray.length - 1;i >= 0;i--) {
        var listener = sourcesArray[i];
        if (noType || opt_type == listener.type) {
          goog.events.unlistenByKey(listener.key);
          count++;
        }
      }
    }
  } else {
    goog.object.forEach(goog.events.listeners_, function(listener, key) {
      goog.events.unlistenByKey(key);
      count++;
    });
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    return goog.events.getListeners_(obj, type, capture) || [];
  }
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      map = map[capture];
      var objUid = goog.getUid(obj);
      if (map[objUid]) {
        return map[objUid];
      }
    }
  }
  return null;
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt;
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener((type), goog.events.wrapListener_(listener), capture, opt_handler);
  }
  var listenerArray = goog.events.getListeners_(src, type, capture);
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;i++) {
      if (!listenerArray[i].removed && (listenerArray[i].listener == listener && (listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler))) {
        return listenerArray[i];
      }
    }
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var objUid = goog.getUid(obj);
  var listeners = goog.events.sources_[objUid];
  if (listeners) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    if (hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && (!!map[opt_capture] && objUid in map[opt_capture]);
    } else {
      if (!(hasType || hasCapture)) {
        return true;
      } else {
        return goog.array.some(listeners, function(listener) {
          return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture;
        });
      }
    }
  }
  return false;
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE && goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  var map = goog.events.listenerTree_;
  if (type in map) {
    map = map[type];
    if (capture in map) {
      return goog.events.fireListeners_(map[capture], obj, type, capture, eventObject);
    }
  }
  return true;
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1;
  var objUid = goog.getUid(obj);
  if (map[objUid]) {
    var remaining = --map.remaining_;
    var listenerArray = map[objUid];
    if (!listenerArray.locked_) {
      listenerArray.locked_ = 1;
    } else {
      listenerArray.locked_++;
    }
    try {
      var length = listenerArray.length;
      for (var i = 0;i < length;i++) {
        var listener = listenerArray[i];
        if (listener && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    } finally {
      map.remaining_ = Math.max(remaining, map.remaining_);
      listenerArray.locked_--;
      goog.events.cleanUp_(type, capture, objUid, listenerArray);
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener.key);
  }
  return listener.handleEvent(eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_);
};
goog.events.dispatchEvent = function(src, e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    return src.dispatchEvent(e);
  }
  var type = e.type || e;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  if (goog.isString(e)) {
    e = new goog.events.Event(e, src);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event((type), src);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || src;
    }
  }
  var rv = 1, ancestors;
  map = map[type];
  var hasCapture = true in map;
  var targetsMap;
  if (hasCapture) {
    ancestors = [];
    for (var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent);
    }
    targetsMap = map[true];
    targetsMap.remaining_ = targetsMap.count_;
    for (var i = ancestors.length - 1;!e.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
      e.currentTarget = ancestors[i];
      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, true, e) && e.returnValue_ != false;
    }
  }
  var hasBubble = false in map;
  if (hasBubble) {
    targetsMap = map[false];
    targetsMap.remaining_ = targetsMap.count_;
    if (hasCapture) {
      for (var i = 0;!e.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
        e.currentTarget = ancestors[i];
        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, false, e) && e.returnValue_ != false;
      }
    } else {
      for (var current = src;!e.propagationStopped_ && (current && targetsMap.remaining_);current = current.getParentEventTarget()) {
        e.currentTarget = current;
        rv &= goog.events.fireListeners_(targetsMap, current, e.type, false, e) && e.returnValue_ != false;
      }
    }
  }
  return Boolean(rv);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  var type = listener.type;
  var map = goog.events.listenerTree_;
  if (!(type in map)) {
    return true;
  }
  map = map[type];
  var retval, targetsMap;
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var hasCapture = true in map;
    var hasBubble = false in map;
    if (hasCapture) {
      if (goog.events.isMarkedIeEvent_(ieEvent)) {
        return true;
      }
      goog.events.markIeEvent_(ieEvent);
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, (this));
    retval = true;
    try {
      if (hasCapture) {
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        targetsMap = map[true];
        targetsMap.remaining_ = targetsMap.count_;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && (i >= 0 && targetsMap.remaining_);i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, true, evt);
        }
        if (hasBubble) {
          targetsMap = map[false];
          targetsMap.remaining_ = targetsMap.count_;
          for (var i = 0;!evt.propagationStopped_ && (i < ancestors.length && targetsMap.remaining_);i++) {
            evt.currentTarget = ancestors[i];
            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, false, evt);
          }
        }
      } else {
        retval = goog.events.fireListener(listener, evt);
      }
    } finally {
      if (ancestors) {
        ancestors.length = 0;
      }
    }
    return retval;
  }
  var be = new goog.events.BrowserEvent(opt_evt, (this));
  retval = goog.events.fireListener(listener, be);
  return retval;
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener_ = function(listener) {
  if (goog.isFunction(listener)) {
    return listener;
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_] || (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
    return listener.handleEvent(e);
  });
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.eventTargetListeners_ = {};
    this.reallyDisposed_ = false;
    this.actualEventTarget_ = this;
  }
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.Listenable.addImplementation(goog.events.EventTarget);
}
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.customEvent_ = true;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    if (this.reallyDisposed_) {
      return true;
    }
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
      ancestorsTree = [];
      var ancestorCount = 1;
      for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
        ancestorsTree.push(ancestor);
        goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
      }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
  } else {
    return goog.events.dispatchEvent(this, e);
  }
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
    this.removeAllListeners();
    this.reallyDisposed_ = true;
  } else {
    goog.events.removeAll(this);
  }
  this.parentEventTarget_ = null;
};
if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {
  goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, false, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
    return this.listenInternal_(type, listener, true, opt_useCapture, opt_listenerScope);
  };
  goog.events.EventTarget.prototype.listenInternal_ = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not listen on disposed object.");
    var listenerArray = this.eventTargetListeners_[type] || (this.eventTargetListeners_[type] = []);
    var listenerObj;
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      listenerObj = listenerArray[index];
      if (!callOnce) {
        listenerObj.callOnce = false;
      }
      return listenerObj;
    }
    listenerObj = new goog.events.Listener;
    listenerObj.init(listener, null, this, type, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
    return listenerObj;
  };
  goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var listenerArray = this.eventTargetListeners_[type];
    var index = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
      var listenerObj = listenerArray[index];
      goog.events.cleanUp(listenerObj);
      listenerObj.removed = true;
      return goog.array.removeAt(listenerArray, index);
    }
    return false;
  };
  goog.events.EventTarget.prototype.unlistenByKey = function(key) {
    var type = key.type;
    if (!(type in this.eventTargetListeners_)) {
      return false;
    }
    var removed = goog.array.remove(this.eventTargetListeners_[type], key);
    if (removed) {
      goog.events.cleanUp(key);
      key.removed = true;
    }
    return removed;
  };
  goog.events.EventTarget.prototype.removeAllListeners = function(opt_type, opt_capture) {
    var count = 0;
    for (var type in this.eventTargetListeners_) {
      if (!opt_type || type == opt_type) {
        var listenerArray = this.eventTargetListeners_[type];
        for (var i = 0;i < listenerArray.length;i++) {
          ++count;
          goog.events.cleanUp(listenerArray[i]);
          listenerArray[i].removed = true;
        }
        listenerArray.length = 0;
      }
    }
    return count;
  };
  goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
    goog.asserts.assert(!this.reallyDisposed_, "Can not fire listeners after dispose() completed.");
    if (!(type in this.eventTargetListeners_)) {
      return true;
    }
    var rv = true;
    var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);
    for (var i = 0;i < listenerArray.length;++i) {
      var listener = listenerArray[i];
      if (listener && (!listener.removed && listener.capture == capture)) {
        if (listener.callOnce) {
          this.unlistenByKey(listener);
        }
        rv = listener.handleEvent(eventObject) !== false && rv;
      }
    }
    return rv && eventObject.returnValue_ != false;
  };
  goog.events.EventTarget.prototype.getListeners = function(type, capture) {
    var listenerArray = this.eventTargetListeners_[type];
    var rv = [];
    if (listenerArray) {
      for (var i = 0;i < listenerArray.length;++i) {
        var listenerObj = listenerArray[i];
        if (listenerObj.capture == capture) {
          rv.push(listenerObj);
        }
      }
    }
    return rv;
  };
  goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
    var listenerArray = this.eventTargetListeners_[type];
    var i = -1;
    if (listenerArray) {
      i = goog.events.EventTarget.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
  };
  goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.eventTargetListeners_, function(listenersArray, type) {
      for (var i = 0;i < listenersArray.length;++i) {
        if ((!hasType || listenersArray[i].type == opt_type) && (!hasCapture || listenersArray[i].capture == opt_capture)) {
          return true;
        }
      }
      return false;
    });
  };
  goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
    this.actualEventTarget_ = target;
  };
  goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
      e = new goog.events.Event(e, target);
    } else {
      if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
      } else {
        e.target = e.target || target;
      }
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
      for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, true, e) && rv;
      }
    }
    if (!e.propagationStopped_) {
      currentTarget = e.currentTarget = target;
      rv = currentTarget.fireListeners(type, true, e) && rv;
      if (!e.propagationStopped_) {
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    if (opt_ancestorsTree) {
      for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
        currentTarget = e.currentTarget = opt_ancestorsTree[i];
        rv = currentTarget.fireListeners(type, false, e) && rv;
      }
    }
    return rv;
  };
  goog.events.EventTarget.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.listener == listener && (listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope)) {
        return i;
      }
    }
    return-1;
  };
}
;goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.iter");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      return f.call(opt_obj, val, undefined, iterator);
    }
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var args = arguments;
  var length = args.length;
  var i = 0;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if (i >= length) {
        throw goog.iter.StopIteration;
      }
      var current = goog.iter.toIterator(args[i]);
      return current.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      } else {
        i++;
        return this.next();
      }
    }
  };
  return newIter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    while (true) {
      b1 = b2 = false;
      var val1 = iterable1.next();
      b1 = true;
      var val2 = iterable2.next();
      b2 = true;
      if (val1 != val2) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    } else {
      if (b1 && !b2) {
        return false;
      }
      if (!b2) {
        try {
          val2 = iterable2.next();
          return false;
        } catch (ex1) {
          if (ex1 !== goog.iter.StopIteration) {
            throw ex1;
          }
          return true;
        }
      }
    }
  }
  return false;
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.require("goog.structs");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line);
    }
    logFunc({message:message, fileName:url, line:line});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var previous = new goog.structs.Set;
  var str = [];
  var helper = function(obj, space) {
    var nestspace = space + "  ";
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (previous.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  previous.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "");
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || (err.line || "Not available");
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || (err.filename || (err.sourceURL || (goog.global["$googDebugFname"] || href)));
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || (!err.lineNumber || (!err.fileName || !err.stack))) {
    return{"message":err.message, "name":err.name, "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = typeof err == "string" ? Error(err) : err;
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(arguments.callee.caller);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Logger = function(name) {
  this.name_ = name;
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = true;
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    if (!this.handlers_) {
      this.handlers_ = [];
    }
    this.handlers_.push(handler);
  } else {
    goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootHandlers_.push(handler);
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler);
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    this.level_ = level;
  } else {
    goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
    goog.debug.Logger.rootLevel_ = level;
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (this.isLoggable(level)) {
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger("");
    goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.json");
goog.provide("goog.json.Serializer");
goog.json.isValid_ = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = function(s) {
  var o = String(s);
  if (goog.json.isValid_(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XmlHttpFactory");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.net.XmlHttp.ASSUME_NATIVE_XHR = false;
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory((factory), (optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && (typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined")) {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && (pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "\x26", key, "\x3d", goog.string.urlEncode(value)]);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || (followingChar == goog.uri.utils.CharCode_.EQUAL || (followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH))) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.Logger");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.events.EventTarget.call(this);
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.debug.Logger.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);
  }
  goog.events.listen(x, goog.net.EventType.READY, goog.partial(goog.net.XhrIo.cleanupSend_, x));
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.cleanupSend_ = function(XhrIo) {
  XhrIo.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);
};
goog.net.XhrIo.prototype.active_ = false;
goog.net.XhrIo.prototype.xhr_ = null;
goog.net.XhrIo.prototype.xhrOptions_ = null;
goog.net.XhrIo.prototype.lastUri_ = "";
goog.net.XhrIo.prototype.lastMethod_ = "";
goog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
goog.net.XhrIo.prototype.lastError_ = "";
goog.net.XhrIo.prototype.errorDispatched_ = false;
goog.net.XhrIo.prototype.inSend_ = false;
goog.net.XhrIo.prototype.inOpen_ = false;
goog.net.XhrIo.prototype.inAbort_ = false;
goog.net.XhrIo.prototype.timeoutInterval_ = 0;
goog.net.XhrIo.prototype.timeoutId_ = null;
goog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
goog.net.XhrIo.prototype.withCredentials_ = false;
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    this.logger_.fine(this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, url, true);
    this.inOpen_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (method == "POST" && (!headers.containsKey(goog.net.XhrIo.CONTENT_TYPE_HEADER) && !contentIsFormData)) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  goog.structs.forEach(headers, function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (this.timeoutInterval_ > 0) {
      this.logger_.fine(this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete"));
      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.timeout_, this), this.timeoutInterval_);
    }
    this.logger_.fine(this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    this.logger_.fine(this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      this.logger_.fine(this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    this.logger_.fine(this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.superClass_.disposeInternal.call(this);
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (!this.inOpen_ && (!this.inSend_ && !this.inAbort_)) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && (this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2)) {
      this.logger_.fine(this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.defaultTimerObject.setTimeout(goog.bind(this.onReadyStateChange_, this), 0);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        this.logger_.fine(this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (this.timeoutId_) {
      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);
      this.timeoutId_ = null;
    }
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      this.logger_.severe("Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    this.logger_.warning("Can not get status: " + e.message);
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    this.logger_.fine("Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    this.logger_.fine("Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    this.logger_.fine("Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    this.logger_.fine("Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    this.logger_.severe("Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    this.logger_.fine("Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (opt_key) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  goog.structs.forEach(this.keyMap_, function(value, key, map) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    goog.structs.forEach(this.keyMap_, function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj23817 = {};
  return obj23817;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__10250__auto__ = port;
    if (and__10250__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__10889__auto__ = port == null ? null : port;
    return function() {
      var or__10262__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj23819 = {};
  return obj23819;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn0_handler) {
  if (function() {
    var and__10250__auto__ = port;
    if (and__10250__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn0_handler);
  } else {
    var x__10889__auto__ = port == null ? null : port;
    return function() {
      var or__10262__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn0_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj23821 = {};
  return obj23821;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__10250__auto__ = chan;
    if (and__10250__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__10889__auto__ = chan == null ? null : chan;
    return function() {
      var or__10262__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj23823 = {};
  return obj23823;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__10250__auto__ = h;
    if (and__10250__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__10889__auto__ = h == null ? null : h;
    return function() {
      var or__10262__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__10250__auto__ = h;
    if (and__10250__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__10889__auto__ = h == null ? null : h;
    return function() {
      var or__10262__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj23825 = {};
  return obj23825;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__10250__auto__ = b;
    if (and__10250__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__10889__auto__ = b == null ? null : b;
    return function() {
      var or__10262__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__10250__auto__ = b;
    if (and__10250__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__10889__auto__ = b == null ? null : b;
    return function() {
      var or__10262__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__10250__auto__ = b;
    if (and__10250__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__10889__auto__ = b == null ? null : b;
    return function() {
      var or__10262__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj23827 = {};
  return obj23827;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__23839 = cnt + 1;
      cnt = G__23839;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__11110__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__11110__auto__) {
      var v_23840 = this$.pop();
      if (keep_QMARK_.call(null, v_23840)) {
        this$.unshift(v_23840);
      } else {
      }
      var G__23841 = x + 1;
      x = G__23841;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", -1640531465, null), new cljs.core.Symbol(null, "n", "n", -1640531417, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't add to a full buffer"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -1337857039, null), new cljs.core.Symbol(null, "this", "this", -1636972457, null)))))].join(""));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_23828 = 0;
  while (true) {
    var m_23829 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_23829 == null) {
    } else {
      m_23829.call(null);
      if (count_23828 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__23830 = count_23828 + 1;
        count_23828 = G__23830;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__10250__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__10250__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__10250__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.elements_ = [];
};
goog.structs.Queue.prototype.head_ = 0;
goog.structs.Queue.prototype.tail_ = 0;
goog.structs.Queue.prototype.enqueue = function(element) {
  this.elements_[this.tail_++] = element;
};
goog.structs.Queue.prototype.dequeue = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  var result = this.elements_[this.head_];
  delete this.elements_[this.head_];
  this.head_++;
  return result;
};
goog.structs.Queue.prototype.peek = function() {
  if (this.head_ == this.tail_) {
    return undefined;
  }
  return this.elements_[this.head_];
};
goog.structs.Queue.prototype.getCount = function() {
  return this.tail_ - this.head_;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return this.tail_ - this.head_ == 0;
};
goog.structs.Queue.prototype.clear = function() {
  this.elements_.length = 0;
  this.head_ = 0;
  this.tail_ = 0;
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.elements_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.indexOf(this.elements_, obj);
  if (index < 0) {
    return false;
  }
  if (index == this.head_) {
    this.dequeue();
  } else {
    goog.array.removeAt(this.elements_, index);
    this.tail_--;
  }
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  return this.elements_.slice(this.head_, this.tail_);
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = (this.freeQueue_.dequeue());
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject((freeQueue.dequeue()));
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject((freeQueue.dequeue()));
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.prototype.delayTimeout_;
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    goog.structs.forEach(headers, function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", 4635210724));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t23845 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t23845 = function(f, fn_handler, meta23846) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta23846 = meta23846;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t23845.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t23845.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t23845";
    cljs.core.async.impl.ioc_helpers.t23845.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
      return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.ioc-helpers/t23845");
    };
    cljs.core.async.impl.ioc_helpers.t23845.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t23845.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t23845.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t23845.prototype.cljs$core$IMeta$_meta$arity$1 = function(_23847) {
      var self__ = this;
      var _23847__$1 = this;
      return self__.meta23846;
    };
    cljs.core.async.impl.ioc_helpers.t23845.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_23847, meta23846__$1) {
      var self__ = this;
      var _23847__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t23845(self__.f, self__.fn_handler, meta23846__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t23845 = function __GT_t23845(f__$1, fn_handler__$1, meta23846) {
      return new cljs.core.async.impl.ioc_helpers.t23845(f__$1, fn_handler__$1, meta23846);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t23845(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e23849) {
    if (e23849 instanceof Object) {
      var ex = e23849;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e23849;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_23852_23854 = state;
    statearr_23852_23854[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_23852_23854[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_23853_23855 = state;
    statearr_23853_23855[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_23853_23855[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4090__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
    var statearr_23858_23860 = state;
    statearr_23858_23860[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = null;
    statearr_23858_23860[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var cb = temp__4090__auto__;
    var statearr_23859_23861 = state;
    statearr_23859_23861[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_23859_23861[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__23862) {
    var map__23867 = p__23862;
    var map__23867__$1 = cljs.core.seq_QMARK_.call(null, map__23867) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23867) : map__23867;
    var opts = map__23867__$1;
    var statearr_23868_23871 = state;
    statearr_23868_23871[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4092__auto__ = cljs.core.async.do_alts.call(null, function(val) {
      var statearr_23869_23872 = state;
      statearr_23869_23872[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    }, ports, opts);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var cb = temp__4092__auto__;
      var statearr_23870_23873 = state;
      statearr_23870_23873[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__23862 = null;
    if (arguments.length > 3) {
      p__23862 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__23862);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__23874) {
    var state = cljs.core.first(arglist__23874);
    arglist__23874 = cljs.core.next(arglist__23874);
    var cont_block = cljs.core.first(arglist__23874);
    arglist__23874 = cljs.core.next(arglist__23874);
    var ports = cljs.core.first(arglist__23874);
    var p__23862 = cljs.core.rest(arglist__23874);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__23862);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function() {
      return null;
    }));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__10843__auto__) {
  var self__ = this;
  var this__10843__auto____$1 = this;
  var h__10673__auto__ = self__.__hash;
  if (!(h__10673__auto__ == null)) {
    return h__10673__auto__;
  } else {
    var h__10673__auto____$1 = cljs.core.hash_imap.call(null, this__10843__auto____$1);
    self__.__hash = h__10673__auto____$1;
    return h__10673__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__10848__auto__, k__10849__auto__) {
  var self__ = this;
  var this__10848__auto____$1 = this;
  return cljs.core._lookup.call(null, this__10848__auto____$1, k__10849__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__10850__auto__, k23876, else__10851__auto__) {
  var self__ = this;
  var this__10850__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k23876, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893))) {
    return self__.catch_block;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k23876, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687))) {
      return self__.catch_exception;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k23876, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429))) {
        return self__.finally_block;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k23876, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097))) {
          return self__.continue_block;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k23876, new cljs.core.Keyword(null, "prev", "prev", 1017353637))) {
            return self__.prev;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.get.call(null, self__.__extmap, k23876, else__10851__auto__);
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__10855__auto__, k__10856__auto__, G__23875) {
  var self__ = this;
  var this__10855__auto____$1 = this;
  var pred__23878 = cljs.core.keyword_identical_QMARK_;
  var expr__23879 = k__10856__auto__;
  if (cljs.core.truth_(pred__23878.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), expr__23879))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__23875, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__23878.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), expr__23879))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__23875, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__23878.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), expr__23879))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__23875, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__23878.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), expr__23879))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__23875, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__23878.call(null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), expr__23879))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__23875, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__10856__auto__, G__23875), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__10862__auto__, writer__10863__auto__, opts__10864__auto__) {
  var self__ = this;
  var this__10862__auto____$1 = this;
  var pr_pair__10865__auto__ = function(keyval__10866__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__10863__auto__, cljs.core.pr_writer, "", " ", "", opts__10864__auto__, keyval__10866__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__10863__auto__, pr_pair__10865__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__10864__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__10853__auto__, entry__10854__auto__) {
  var self__ = this;
  var this__10853__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__10854__auto__)) {
    return cljs.core._assoc.call(null, this__10853__auto____$1, cljs.core._nth.call(null, entry__10854__auto__, 0), cljs.core._nth.call(null, entry__10854__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__10853__auto____$1, entry__10854__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__10860__auto__) {
  var self__ = this;
  var this__10860__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", 1017353637), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__10852__auto__) {
  var self__ = this;
  var this__10852__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__10844__auto__, other__10845__auto__) {
  var self__ = this;
  var this__10844__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__10250__auto__ = other__10845__auto__;
    if (cljs.core.truth_(and__10250__auto__)) {
      return this__10844__auto____$1.constructor === other__10845__auto__.constructor && cljs.core.equiv_map.call(null, this__10844__auto____$1, other__10845__auto__);
    } else {
      return and__10250__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__10847__auto__, G__23875) {
  var self__ = this;
  var this__10847__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__23875, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__10842__auto__) {
  var self__ = this;
  var this__10842__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__10846__auto__) {
  var self__ = this;
  var this__10846__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__10857__auto__, k__10858__auto__) {
  var self__ = this;
  var this__10857__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null, new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), null, new cljs.core.Keyword(null, "prev", "prev", 1017353637), 
  null], null), null), k__10858__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__10857__auto____$1), self__.__meta), k__10858__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__10858__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__10882__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__10882__auto__, writer__10883__auto__) {
  return cljs.core._write.call(null, writer__10883__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__23877) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(G__23877), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(G__23877), (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(G__23877), (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(G__23877), 
  (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(G__23877), null, cljs.core.dissoc.call(null, G__23877, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097), new cljs.core.Keyword(null, "prev", "prev", 1017353637)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_23882 = state;
  statearr_23882[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_23882;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__10250__auto__ = exception;
      if (cljs.core.truth_(and__10250__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__10250__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__10250__auto__ = exception;
        if (cljs.core.truth_(and__10250__auto__)) {
          var and__10250__auto____$1 = catch_block;
          if (cljs.core.truth_(and__10250__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__10250__auto____$1;
          }
        } else {
          return and__10250__auto__;
        }
      }())) {
        var statearr_23888 = state;
        statearr_23888[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_23888[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_23888[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_23888[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 2343862893), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", 1686480687), null);
        return statearr_23888;
      } else {
        if (cljs.core.truth_(function() {
          var and__10250__auto__ = exception;
          if (cljs.core.truth_(and__10250__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__10250__auto__;
          }
        }())) {
          var statearr_23889_23893 = state;
          statearr_23889_23893[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__23894 = state;
          state = G__23894;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__10250__auto__ = exception;
            if (cljs.core.truth_(and__10250__auto__)) {
              var and__10250__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__10250__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__10250__auto____$1;
              }
            } else {
              return and__10250__auto__;
            }
          }())) {
            var statearr_23890 = state;
            statearr_23890[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_23890[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
            return statearr_23890;
          } else {
            if (cljs.core.truth_(function() {
              var and__10250__auto__ = cljs.core.not.call(null, exception);
              if (and__10250__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__10250__auto__;
              }
            }())) {
              var statearr_23891 = state;
              statearr_23891[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_23891[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429), null);
              return statearr_23891;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 2846533429)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_23892 = state;
                statearr_23892[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", 1486987097)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_23892[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", 1017353637)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_23892;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No matching clause"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, false))].join(""));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t23834 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t23834 = function(val, box, meta23835) {
      this.val = val;
      this.box = box;
      this.meta23835 = meta23835;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t23834.cljs$lang$type = true;
    cljs.core.async.impl.channels.t23834.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t23834";
    cljs.core.async.impl.channels.t23834.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
      return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.channels/t23834");
    };
    cljs.core.async.impl.channels.t23834.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t23834.prototype.cljs$core$IMeta$_meta$arity$1 = function(_23836) {
      var self__ = this;
      var _23836__$1 = this;
      return self__.meta23835;
    };
    cljs.core.async.impl.channels.t23834.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_23836, meta23835__$1) {
      var self__ = this;
      var _23836__$1 = this;
      return new cljs.core.async.impl.channels.t23834(self__.val, self__.box, meta23835__$1);
    };
    cljs.core.async.impl.channels.__GT_t23834 = function __GT_t23834(val__$1, box__$1, meta23835) {
      return new cljs.core.async.impl.channels.t23834(val__$1, box__$1, meta23835);
    };
  }
  return new cljs.core.async.impl.channels.t23834(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__10832__auto__, writer__10833__auto__, opts__10834__auto__) {
  return cljs.core._write.call(null, writer__10833__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_23837 = self__.takes.pop();
      if (taker_23837 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_23837)) {
          var take_cb_23838 = cljs.core.async.impl.protocols.commit.call(null, taker_23837);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_23838, taker_23837) {
            return function() {
              return take_cb_23838.call(null, null);
            };
          }(take_cb_23838, taker_23837));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      return cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, put_cb);
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 1395928862, null), new cljs.core.Symbol(null, 
              "takes", "takes", -1530407291, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", -1640422260, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", -1637150201, null), new cljs.core.Symbol(null, "val", "val", -1640415014, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, null);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker));
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, null);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", -1640531467, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            1395928862, null), new cljs.core.Symbol(null, "puts", "puts", -1637078787, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", -1989946393, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, null);
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__23792 = level + 1;
        level = G__23792;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_23793 = 0;
    while (true) {
      if (i_23793 < arr.length) {
        arr[i_23793] = null;
        var G__23794 = i_23793 + 1;
        i_23793 = G__23794;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4090__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var x_SINGLEQUOTE_ = temp__4090__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__23795 = x_SINGLEQUOTE_;
                x__$1 = G__23795;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__23796 = x__$1;
        var G__23797 = k;
        var G__23798 = level - 1;
        var G__23799 = update;
        x = G__23796;
        k = G__23797;
        level = G__23798;
        update = G__23799;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function iter(node) {
    return new cljs.core.LazySeq(null, function() {
      if (node == null) {
        return null;
      } else {
        return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
      }
    }, null, null);
  };
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_23800 = self__.level + 1;
      while (true) {
        if (i_23800 <= new_level + 1) {
          update[i_23800] = self__.header;
          var G__23801 = i_23800 + 1;
          i_23800 = G__23801;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_23802 = 0;
    while (true) {
      if (i_23802 <= self__.level) {
        var links_23803 = update[i_23802].forward;
        if (links_23803[i_23802] === x__$1) {
          links_23803[i_23802] = x__$1.forward[i_23802];
          var G__23804 = i_23802 + 1;
          i_23802 = G__23804;
          continue;
        } else {
          var G__23805 = i_23802 + 1;
          i_23802 = G__23805;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__23806 = x_SINGLEQUOTE_;
              x__$1 = G__23806;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__23807 = nx;
        var G__23808 = level__$1 - 1;
        x = G__23807;
        level__$1 = G__23808;
        continue;
      } else {
        var G__23809 = x;
        var G__23810 = level__$1 - 1;
        x = G__23809;
        level__$1 = G__23810;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__23811 = x_SINGLEQUOTE_;
              x__$1 = G__23811;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__23812 = nx;
        var G__23813 = level__$1 - 1;
        x = G__23812;
        level__$1 = G__23813;
        continue;
      } else {
        var G__23814 = x;
        var G__23815 = level__$1 - 1;
        x = G__23814;
        level__$1 = G__23815;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__10262__auto__ = cljs.core.truth_(function() {
    var and__10250__auto__ = me;
    if (cljs.core.truth_(and__10250__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__10250__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__10262__auto__)) {
    return or__10262__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function() {
      cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
      return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
    }, msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.ioc_helpers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t21241 !== "undefined") {
  } else {
    cljs.core.async.t21241 = function(f, fn_handler, meta21242) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta21242 = meta21242;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21241.cljs$lang$type = true;
    cljs.core.async.t21241.cljs$lang$ctorStr = "cljs.core.async/t21241";
    cljs.core.async.t21241.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
      return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t21241");
    };
    cljs.core.async.t21241.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t21241.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t21241.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t21241.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21243) {
      var self__ = this;
      var _21243__$1 = this;
      return self__.meta21242;
    };
    cljs.core.async.t21241.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21243, meta21242__$1) {
      var self__ = this;
      var _21243__$1 = this;
      return new cljs.core.async.t21241(self__.f, self__.fn_handler, meta21242__$1);
    };
    cljs.core.async.__GT_t21241 = function __GT_t21241(f__$1, fn_handler__$1, meta21242) {
      return new cljs.core.async.t21241(f__$1, fn_handler__$1, meta21242);
    };
  }
  return new cljs.core.async.t21241(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__21245 = buff;
  if (G__21245) {
    var bit__10912__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__10262__auto__ = bit__10912__auto__;
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return G__21245.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__21245.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__21245);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__21245);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3c! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_21246 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_21246);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function() {
          return fn1.call(null, val_21246);
        });
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop() {
  return null;
};
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("\x3e! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    return put_BANG_.call(null, port, val, cljs.core.async.nop);
  };
  var put_BANG___3 = function(port, val, fn0) {
    return put_BANG_.call(null, port, val, fn0, true);
  };
  var put_BANG___4 = function(port, val, fn0, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn0));
    if (cljs.core.truth_(function() {
      var and__10250__auto__ = ret;
      if (cljs.core.truth_(and__10250__auto__)) {
        return cljs.core.not_EQ_.call(null, fn0, cljs.core.async.nop);
      } else {
        return and__10250__auto__;
      }
    }())) {
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn0.call(null);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, fn0);
      }
    } else {
    }
    return null;
  };
  put_BANG_ = function(port, val, fn0, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn0);
      case 4:
        return put_BANG___4.call(this, port, val, fn0, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__11110__auto___21247 = n;
  var x_21248 = 0;
  while (true) {
    if (x_21248 < n__11110__auto___21247) {
      a[x_21248] = 0;
      var G__21249 = x_21248 + 1;
      x_21248 = G__21249;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__21250 = i + 1;
      i = G__21250;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t21254 !== "undefined") {
  } else {
    cljs.core.async.t21254 = function(flag, alt_flag, meta21255) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta21255 = meta21255;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21254.cljs$lang$type = true;
    cljs.core.async.t21254.cljs$lang$ctorStr = "cljs.core.async/t21254";
    cljs.core.async.t21254.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
      return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t21254");
    };
    cljs.core.async.t21254.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t21254.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.deref.call(null, self__.flag);
    };
    cljs.core.async.t21254.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.reset_BANG_.call(null, self__.flag, null);
      return true;
    };
    cljs.core.async.t21254.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21256) {
      var self__ = this;
      var _21256__$1 = this;
      return self__.meta21255;
    };
    cljs.core.async.t21254.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21256, meta21255__$1) {
      var self__ = this;
      var _21256__$1 = this;
      return new cljs.core.async.t21254(self__.flag, self__.alt_flag, meta21255__$1);
    };
    cljs.core.async.__GT_t21254 = function __GT_t21254(flag__$1, alt_flag__$1, meta21255) {
      return new cljs.core.async.t21254(flag__$1, alt_flag__$1, meta21255);
    };
  }
  return new cljs.core.async.t21254(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t21260 !== "undefined") {
  } else {
    cljs.core.async.t21260 = function(cb, flag, alt_handler, meta21261) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta21261 = meta21261;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21260.cljs$lang$type = true;
    cljs.core.async.t21260.cljs$lang$ctorStr = "cljs.core.async/t21260";
    cljs.core.async.t21260.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
      return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t21260");
    };
    cljs.core.async.t21260.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t21260.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t21260.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t21260.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21262) {
      var self__ = this;
      var _21262__$1 = this;
      return self__.meta21261;
    };
    cljs.core.async.t21260.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21262, meta21261__$1) {
      var self__ = this;
      var _21262__$1 = this;
      return new cljs.core.async.t21260(self__.cb, self__.flag, self__.alt_handler, meta21261__$1);
    };
    cljs.core.async.__GT_t21260 = function __GT_t21260(cb__$1, flag__$1, alt_handler__$1, meta21261) {
      return new cljs.core.async.t21260(cb__$1, flag__$1, alt_handler__$1, meta21261);
    };
  }
  return new cljs.core.async.t21260(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 4143410454)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function() {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__21263_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__21263_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__10262__auto__ = wport;
            if (cljs.core.truth_(or__10262__auto__)) {
              return or__10262__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__21264 = i + 1;
          i = G__21264;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__10262__auto__ = ret;
  if (cljs.core.truth_(or__10262__auto__)) {
    return or__10262__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", 2558708147))) {
      var temp__4092__auto__ = function() {
        var and__10250__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__10250__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__10250__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4092__auto__)) {
        var got = temp__4092__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", 2558708147)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", 2558708147)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__21265) {
    var map__21267 = p__21265;
    var map__21267__$1 = cljs.core.seq_QMARK_.call(null, map__21267) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21267) : map__21267;
    var opts = map__21267__$1;
    if (null) {
      return null;
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("alts! used not in (go ...) block"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, null))].join(""));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__21265 = null;
    if (arguments.length > 1) {
      p__21265 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__21265);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__21268) {
    var ports = cljs.core.first(arglist__21268);
    var p__21265 = cljs.core.rest(arglist__21268);
    return alts_BANG___delegate(ports, p__21265);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t21276 !== "undefined") {
  } else {
    cljs.core.async.t21276 = function(ch, f, map_LT_, meta21277) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta21277 = meta21277;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21276.cljs$lang$type = true;
    cljs.core.async.t21276.cljs$lang$ctorStr = "cljs.core.async/t21276";
    cljs.core.async.t21276.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
      return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t21276");
    };
    cljs.core.async.t21276.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t21276.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
    };
    cljs.core.async.t21276.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t21276.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t21279 !== "undefined") {
        } else {
          cljs.core.async.t21279 = function(fn1, _, meta21277, ch, f, map_LT_, meta21280) {
            this.fn1 = fn1;
            this._ = _;
            this.meta21277 = meta21277;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta21280 = meta21280;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t21279.cljs$lang$type = true;
          cljs.core.async.t21279.cljs$lang$ctorStr = "cljs.core.async/t21279";
          cljs.core.async.t21279.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
            return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t21279");
          };
          cljs.core.async.t21279.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t21279.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
          };
          cljs.core.async.t21279.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
          };
          cljs.core.async.t21279.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$3) {
            var self__ = this;
            var ___$4 = this;
            var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
            return function(f1, ___$4) {
              return function(p1__21269_SHARP_) {
                return f1.call(null, p1__21269_SHARP_ == null ? null : self__.f.call(null, p1__21269_SHARP_));
              };
            }(f1, ___$4);
          };
          cljs.core.async.t21279.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21281) {
            var self__ = this;
            var _21281__$1 = this;
            return self__.meta21280;
          };
          cljs.core.async.t21279.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21281, meta21280__$1) {
            var self__ = this;
            var _21281__$1 = this;
            return new cljs.core.async.t21279(self__.fn1, self__._, self__.meta21277, self__.ch, self__.f, self__.map_LT_, meta21280__$1);
          };
          cljs.core.async.__GT_t21279 = function __GT_t21279(fn1__$1, ___$2, meta21277__$1, ch__$2, f__$2, map_LT___$2, meta21280) {
            return new cljs.core.async.t21279(fn1__$1, ___$2, meta21277__$1, ch__$2, f__$2, map_LT___$2, meta21280);
          };
        }
        return new cljs.core.async.t21279(fn1, ___$1, self__.meta21277, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__10250__auto__ = ret;
        if (cljs.core.truth_(and__10250__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__10250__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t21276.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t21276.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t21276.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21278) {
      var self__ = this;
      var _21278__$1 = this;
      return self__.meta21277;
    };
    cljs.core.async.t21276.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21278, meta21277__$1) {
      var self__ = this;
      var _21278__$1 = this;
      return new cljs.core.async.t21276(self__.ch, self__.f, self__.map_LT_, meta21277__$1);
    };
    cljs.core.async.__GT_t21276 = function __GT_t21276(ch__$1, f__$1, map_LT___$1, meta21277) {
      return new cljs.core.async.t21276(ch__$1, f__$1, map_LT___$1, meta21277);
    };
  }
  return new cljs.core.async.t21276(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t21285 !== "undefined") {
  } else {
    cljs.core.async.t21285 = function(ch, f, map_GT_, meta21286) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta21286 = meta21286;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21285.cljs$lang$type = true;
    cljs.core.async.t21285.cljs$lang$ctorStr = "cljs.core.async/t21285";
    cljs.core.async.t21285.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
      return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t21285");
    };
    cljs.core.async.t21285.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t21285.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn0);
    };
    cljs.core.async.t21285.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t21285.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t21285.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t21285.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t21285.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21287) {
      var self__ = this;
      var _21287__$1 = this;
      return self__.meta21286;
    };
    cljs.core.async.t21285.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21287, meta21286__$1) {
      var self__ = this;
      var _21287__$1 = this;
      return new cljs.core.async.t21285(self__.ch, self__.f, self__.map_GT_, meta21286__$1);
    };
    cljs.core.async.__GT_t21285 = function __GT_t21285(ch__$1, f__$1, map_GT___$1, meta21286) {
      return new cljs.core.async.t21285(ch__$1, f__$1, map_GT___$1, meta21286);
    };
  }
  return new cljs.core.async.t21285(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t21291 !== "undefined") {
  } else {
    cljs.core.async.t21291 = function(ch, p, filter_GT_, meta21292) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta21292 = meta21292;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t21291.cljs$lang$type = true;
    cljs.core.async.t21291.cljs$lang$ctorStr = "cljs.core.async/t21291";
    cljs.core.async.t21291.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
      return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t21291");
    };
    cljs.core.async.t21291.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t21291.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn0) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn0);
      } else {
        return cljs.core.async.impl.channels.box.call(null, null);
      }
    };
    cljs.core.async.t21291.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t21291.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t21291.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t21291.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t21291.prototype.cljs$core$IMeta$_meta$arity$1 = function(_21293) {
      var self__ = this;
      var _21293__$1 = this;
      return self__.meta21292;
    };
    cljs.core.async.t21291.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_21293, meta21292__$1) {
      var self__ = this;
      var _21293__$1 = this;
      return new cljs.core.async.t21291(self__.ch, self__.p, self__.filter_GT_, meta21292__$1);
    };
    cljs.core.async.__GT_t21291 = function __GT_t21291(ch__$1, p__$1, filter_GT___$1, meta21292) {
      return new cljs.core.async.t21291(ch__$1, p__$1, filter_GT___$1, meta21292);
    };
  }
  return new cljs.core.async.t21291(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13886__auto___21376 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_21355) {
          var state_val_21356 = state_21355[1];
          if (state_val_21356 === 1) {
            var state_21355__$1 = state_21355;
            var statearr_21357_21377 = state_21355__$1;
            statearr_21357_21377[2] = null;
            statearr_21357_21377[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_21356 === 2) {
              var state_21355__$1 = state_21355;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21355__$1, 4, ch);
            } else {
              if (state_val_21356 === 3) {
                var inst_21353 = state_21355[2];
                var state_21355__$1 = state_21355;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21355__$1, inst_21353);
              } else {
                if (state_val_21356 === 4) {
                  var inst_21337 = state_21355[7];
                  var inst_21337__$1 = state_21355[2];
                  var inst_21338 = inst_21337__$1 == null;
                  var state_21355__$1 = function() {
                    var statearr_21358 = state_21355;
                    statearr_21358[7] = inst_21337__$1;
                    return statearr_21358;
                  }();
                  if (cljs.core.truth_(inst_21338)) {
                    var statearr_21359_21378 = state_21355__$1;
                    statearr_21359_21378[1] = 5;
                  } else {
                    var statearr_21360_21379 = state_21355__$1;
                    statearr_21360_21379[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21356 === 5) {
                    var inst_21340 = cljs.core.async.close_BANG_.call(null, out);
                    var state_21355__$1 = state_21355;
                    var statearr_21361_21380 = state_21355__$1;
                    statearr_21361_21380[2] = inst_21340;
                    statearr_21361_21380[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21356 === 6) {
                      var inst_21337 = state_21355[7];
                      var inst_21342 = p.call(null, inst_21337);
                      var state_21355__$1 = state_21355;
                      if (cljs.core.truth_(inst_21342)) {
                        var statearr_21362_21381 = state_21355__$1;
                        statearr_21362_21381[1] = 8;
                      } else {
                        var statearr_21363_21382 = state_21355__$1;
                        statearr_21363_21382[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21356 === 7) {
                        var inst_21351 = state_21355[2];
                        var state_21355__$1 = state_21355;
                        var statearr_21364_21383 = state_21355__$1;
                        statearr_21364_21383[2] = inst_21351;
                        statearr_21364_21383[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21356 === 8) {
                          var inst_21337 = state_21355[7];
                          var state_21355__$1 = state_21355;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21355__$1, 11, out, inst_21337);
                        } else {
                          if (state_val_21356 === 9) {
                            var state_21355__$1 = state_21355;
                            var statearr_21365_21384 = state_21355__$1;
                            statearr_21365_21384[2] = null;
                            statearr_21365_21384[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_21356 === 10) {
                              var inst_21348 = state_21355[2];
                              var state_21355__$1 = function() {
                                var statearr_21366 = state_21355;
                                statearr_21366[8] = inst_21348;
                                return statearr_21366;
                              }();
                              var statearr_21367_21385 = state_21355__$1;
                              statearr_21367_21385[2] = null;
                              statearr_21367_21385[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_21356 === 11) {
                                var inst_21345 = state_21355[2];
                                var state_21355__$1 = state_21355;
                                var statearr_21368_21386 = state_21355__$1;
                                statearr_21368_21386[2] = inst_21345;
                                statearr_21368_21386[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_21372 = [null, null, null, null, null, null, null, null, null];
              statearr_21372[0] = state_machine__13817__auto__;
              statearr_21372[1] = 1;
              return statearr_21372;
            };
            var state_machine__13817__auto____1 = function(state_21355) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_21355);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e21373) {
                    if (e21373 instanceof Object) {
                      var ex__13820__auto__ = e21373;
                      var statearr_21374_21387 = state_21355;
                      statearr_21374_21387[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21355);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e21373;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__21388 = state_21355;
                  state_21355 = G__21388;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_21355) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_21355);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_21375 = f__13887__auto__.call(null);
        statearr_21375[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___21376;
        return statearr_21375;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__13886__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13887__auto__ = function() {
      var switch__13816__auto__ = function(state_21540) {
        var state_val_21541 = state_21540[1];
        if (state_val_21541 === 1) {
          var state_21540__$1 = state_21540;
          var statearr_21542_21579 = state_21540__$1;
          statearr_21542_21579[2] = null;
          statearr_21542_21579[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_21541 === 2) {
            var state_21540__$1 = state_21540;
            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21540__$1, 4, in$);
          } else {
            if (state_val_21541 === 3) {
              var inst_21538 = state_21540[2];
              var state_21540__$1 = state_21540;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21540__$1, inst_21538);
            } else {
              if (state_val_21541 === 4) {
                var inst_21486 = state_21540[7];
                var inst_21486__$1 = state_21540[2];
                var inst_21487 = inst_21486__$1 == null;
                var state_21540__$1 = function() {
                  var statearr_21543 = state_21540;
                  statearr_21543[7] = inst_21486__$1;
                  return statearr_21543;
                }();
                if (cljs.core.truth_(inst_21487)) {
                  var statearr_21544_21580 = state_21540__$1;
                  statearr_21544_21580[1] = 5;
                } else {
                  var statearr_21545_21581 = state_21540__$1;
                  statearr_21545_21581[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21541 === 5) {
                  var inst_21489 = cljs.core.async.close_BANG_.call(null, out);
                  var state_21540__$1 = state_21540;
                  var statearr_21546_21582 = state_21540__$1;
                  statearr_21546_21582[2] = inst_21489;
                  statearr_21546_21582[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21541 === 6) {
                    var inst_21486 = state_21540[7];
                    var inst_21491 = f.call(null, inst_21486);
                    var inst_21496 = cljs.core.seq.call(null, inst_21491);
                    var inst_21497 = inst_21496;
                    var inst_21498 = null;
                    var inst_21499 = 0;
                    var inst_21500 = 0;
                    var state_21540__$1 = function() {
                      var statearr_21547 = state_21540;
                      statearr_21547[8] = inst_21499;
                      statearr_21547[9] = inst_21498;
                      statearr_21547[10] = inst_21497;
                      statearr_21547[11] = inst_21500;
                      return statearr_21547;
                    }();
                    var statearr_21548_21583 = state_21540__$1;
                    statearr_21548_21583[2] = null;
                    statearr_21548_21583[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21541 === 7) {
                      var inst_21536 = state_21540[2];
                      var state_21540__$1 = state_21540;
                      var statearr_21549_21584 = state_21540__$1;
                      statearr_21549_21584[2] = inst_21536;
                      statearr_21549_21584[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21541 === 8) {
                        var inst_21499 = state_21540[8];
                        var inst_21500 = state_21540[11];
                        var inst_21502 = inst_21500 < inst_21499;
                        var inst_21503 = inst_21502;
                        var state_21540__$1 = state_21540;
                        if (cljs.core.truth_(inst_21503)) {
                          var statearr_21550_21585 = state_21540__$1;
                          statearr_21550_21585[1] = 10;
                        } else {
                          var statearr_21551_21586 = state_21540__$1;
                          statearr_21551_21586[1] = 11;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21541 === 9) {
                          var inst_21533 = state_21540[2];
                          var state_21540__$1 = function() {
                            var statearr_21552 = state_21540;
                            statearr_21552[12] = inst_21533;
                            return statearr_21552;
                          }();
                          var statearr_21553_21587 = state_21540__$1;
                          statearr_21553_21587[2] = null;
                          statearr_21553_21587[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21541 === 10) {
                            var inst_21498 = state_21540[9];
                            var inst_21500 = state_21540[11];
                            var inst_21505 = cljs.core._nth.call(null, inst_21498, inst_21500);
                            var state_21540__$1 = state_21540;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21540__$1, 13, out, inst_21505);
                          } else {
                            if (state_val_21541 === 11) {
                              var inst_21497 = state_21540[10];
                              var inst_21511 = state_21540[13];
                              var inst_21511__$1 = cljs.core.seq.call(null, inst_21497);
                              var state_21540__$1 = function() {
                                var statearr_21557 = state_21540;
                                statearr_21557[13] = inst_21511__$1;
                                return statearr_21557;
                              }();
                              if (inst_21511__$1) {
                                var statearr_21558_21588 = state_21540__$1;
                                statearr_21558_21588[1] = 14;
                              } else {
                                var statearr_21559_21589 = state_21540__$1;
                                statearr_21559_21589[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_21541 === 12) {
                                var inst_21531 = state_21540[2];
                                var state_21540__$1 = state_21540;
                                var statearr_21560_21590 = state_21540__$1;
                                statearr_21560_21590[2] = inst_21531;
                                statearr_21560_21590[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_21541 === 13) {
                                  var inst_21499 = state_21540[8];
                                  var inst_21498 = state_21540[9];
                                  var inst_21497 = state_21540[10];
                                  var inst_21500 = state_21540[11];
                                  var inst_21507 = state_21540[2];
                                  var inst_21508 = inst_21500 + 1;
                                  var tmp21554 = inst_21499;
                                  var tmp21555 = inst_21498;
                                  var tmp21556 = inst_21497;
                                  var inst_21497__$1 = tmp21556;
                                  var inst_21498__$1 = tmp21555;
                                  var inst_21499__$1 = tmp21554;
                                  var inst_21500__$1 = inst_21508;
                                  var state_21540__$1 = function() {
                                    var statearr_21561 = state_21540;
                                    statearr_21561[8] = inst_21499__$1;
                                    statearr_21561[14] = inst_21507;
                                    statearr_21561[9] = inst_21498__$1;
                                    statearr_21561[10] = inst_21497__$1;
                                    statearr_21561[11] = inst_21500__$1;
                                    return statearr_21561;
                                  }();
                                  var statearr_21562_21591 = state_21540__$1;
                                  statearr_21562_21591[2] = null;
                                  statearr_21562_21591[1] = 8;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_21541 === 14) {
                                    var inst_21511 = state_21540[13];
                                    var inst_21513 = cljs.core.chunked_seq_QMARK_.call(null, inst_21511);
                                    var state_21540__$1 = state_21540;
                                    if (inst_21513) {
                                      var statearr_21563_21592 = state_21540__$1;
                                      statearr_21563_21592[1] = 17;
                                    } else {
                                      var statearr_21564_21593 = state_21540__$1;
                                      statearr_21564_21593[1] = 18;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_21541 === 15) {
                                      var state_21540__$1 = state_21540;
                                      var statearr_21565_21594 = state_21540__$1;
                                      statearr_21565_21594[2] = null;
                                      statearr_21565_21594[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_21541 === 16) {
                                        var inst_21529 = state_21540[2];
                                        var state_21540__$1 = state_21540;
                                        var statearr_21566_21595 = state_21540__$1;
                                        statearr_21566_21595[2] = inst_21529;
                                        statearr_21566_21595[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_21541 === 17) {
                                          var inst_21511 = state_21540[13];
                                          var inst_21515 = cljs.core.chunk_first.call(null, inst_21511);
                                          var inst_21516 = cljs.core.chunk_rest.call(null, inst_21511);
                                          var inst_21517 = cljs.core.count.call(null, inst_21515);
                                          var inst_21497 = inst_21516;
                                          var inst_21498 = inst_21515;
                                          var inst_21499 = inst_21517;
                                          var inst_21500 = 0;
                                          var state_21540__$1 = function() {
                                            var statearr_21567 = state_21540;
                                            statearr_21567[8] = inst_21499;
                                            statearr_21567[9] = inst_21498;
                                            statearr_21567[10] = inst_21497;
                                            statearr_21567[11] = inst_21500;
                                            return statearr_21567;
                                          }();
                                          var statearr_21568_21596 = state_21540__$1;
                                          statearr_21568_21596[2] = null;
                                          statearr_21568_21596[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_21541 === 18) {
                                            var inst_21511 = state_21540[13];
                                            var inst_21520 = cljs.core.first.call(null, inst_21511);
                                            var state_21540__$1 = state_21540;
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21540__$1, 20, out, inst_21520);
                                          } else {
                                            if (state_val_21541 === 19) {
                                              var inst_21526 = state_21540[2];
                                              var state_21540__$1 = state_21540;
                                              var statearr_21569_21597 = state_21540__$1;
                                              statearr_21569_21597[2] = inst_21526;
                                              statearr_21569_21597[1] = 16;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_21541 === 20) {
                                                var inst_21511 = state_21540[13];
                                                var inst_21522 = state_21540[2];
                                                var inst_21523 = cljs.core.next.call(null, inst_21511);
                                                var inst_21497 = inst_21523;
                                                var inst_21498 = null;
                                                var inst_21499 = 0;
                                                var inst_21500 = 0;
                                                var state_21540__$1 = function() {
                                                  var statearr_21570 = state_21540;
                                                  statearr_21570[8] = inst_21499;
                                                  statearr_21570[9] = inst_21498;
                                                  statearr_21570[10] = inst_21497;
                                                  statearr_21570[15] = inst_21522;
                                                  statearr_21570[11] = inst_21500;
                                                  return statearr_21570;
                                                }();
                                                var statearr_21571_21598 = state_21540__$1;
                                                statearr_21571_21598[2] = null;
                                                statearr_21571_21598[1] = 8;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13816__auto__) {
        return function() {
          var state_machine__13817__auto__ = null;
          var state_machine__13817__auto____0 = function() {
            var statearr_21575 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_21575[0] = state_machine__13817__auto__;
            statearr_21575[1] = 1;
            return statearr_21575;
          };
          var state_machine__13817__auto____1 = function(state_21540) {
            while (true) {
              var ret_value__13818__auto__ = function() {
                try {
                  while (true) {
                    var result__13819__auto__ = switch__13816__auto__.call(null, state_21540);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13819__auto__;
                    }
                    break;
                  }
                } catch (e21576) {
                  if (e21576 instanceof Object) {
                    var ex__13820__auto__ = e21576;
                    var statearr_21577_21599 = state_21540;
                    statearr_21577_21599[5] = ex__13820__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21540);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e21576;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__21600 = state_21540;
                state_21540 = G__21600;
                continue;
              } else {
                return ret_value__13818__auto__;
              }
              break;
            }
          };
          state_machine__13817__auto__ = function(state_21540) {
            switch(arguments.length) {
              case 0:
                return state_machine__13817__auto____0.call(this);
              case 1:
                return state_machine__13817__auto____1.call(this, state_21540);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
          return state_machine__13817__auto__;
        }();
      }(switch__13816__auto__);
    }();
    var state__13888__auto__ = function() {
      var statearr_21578 = f__13887__auto__.call(null);
      statearr_21578[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto__;
      return statearr_21578;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
  });
  return c__13886__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__13886__auto___21681 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_21660) {
          var state_val_21661 = state_21660[1];
          if (state_val_21661 === 1) {
            var state_21660__$1 = state_21660;
            var statearr_21662_21682 = state_21660__$1;
            statearr_21662_21682[2] = null;
            statearr_21662_21682[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_21661 === 2) {
              var state_21660__$1 = state_21660;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21660__$1, 4, from);
            } else {
              if (state_val_21661 === 3) {
                var inst_21658 = state_21660[2];
                var state_21660__$1 = state_21660;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21660__$1, inst_21658);
              } else {
                if (state_val_21661 === 4) {
                  var inst_21643 = state_21660[7];
                  var inst_21643__$1 = state_21660[2];
                  var inst_21644 = inst_21643__$1 == null;
                  var state_21660__$1 = function() {
                    var statearr_21663 = state_21660;
                    statearr_21663[7] = inst_21643__$1;
                    return statearr_21663;
                  }();
                  if (cljs.core.truth_(inst_21644)) {
                    var statearr_21664_21683 = state_21660__$1;
                    statearr_21664_21683[1] = 5;
                  } else {
                    var statearr_21665_21684 = state_21660__$1;
                    statearr_21665_21684[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21661 === 5) {
                    var state_21660__$1 = state_21660;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_21666_21685 = state_21660__$1;
                      statearr_21666_21685[1] = 8;
                    } else {
                      var statearr_21667_21686 = state_21660__$1;
                      statearr_21667_21686[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21661 === 6) {
                      var inst_21643 = state_21660[7];
                      var state_21660__$1 = state_21660;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21660__$1, 11, to, inst_21643);
                    } else {
                      if (state_val_21661 === 7) {
                        var inst_21656 = state_21660[2];
                        var state_21660__$1 = state_21660;
                        var statearr_21668_21687 = state_21660__$1;
                        statearr_21668_21687[2] = inst_21656;
                        statearr_21668_21687[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21661 === 8) {
                          var inst_21647 = cljs.core.async.close_BANG_.call(null, to);
                          var state_21660__$1 = state_21660;
                          var statearr_21669_21688 = state_21660__$1;
                          statearr_21669_21688[2] = inst_21647;
                          statearr_21669_21688[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21661 === 9) {
                            var state_21660__$1 = state_21660;
                            var statearr_21670_21689 = state_21660__$1;
                            statearr_21670_21689[2] = null;
                            statearr_21670_21689[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_21661 === 10) {
                              var inst_21650 = state_21660[2];
                              var state_21660__$1 = state_21660;
                              var statearr_21671_21690 = state_21660__$1;
                              statearr_21671_21690[2] = inst_21650;
                              statearr_21671_21690[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_21661 === 11) {
                                var inst_21653 = state_21660[2];
                                var state_21660__$1 = function() {
                                  var statearr_21672 = state_21660;
                                  statearr_21672[8] = inst_21653;
                                  return statearr_21672;
                                }();
                                var statearr_21673_21691 = state_21660__$1;
                                statearr_21673_21691[2] = null;
                                statearr_21673_21691[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_21677 = [null, null, null, null, null, null, null, null, null];
              statearr_21677[0] = state_machine__13817__auto__;
              statearr_21677[1] = 1;
              return statearr_21677;
            };
            var state_machine__13817__auto____1 = function(state_21660) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_21660);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e21678) {
                    if (e21678 instanceof Object) {
                      var ex__13820__auto__ = e21678;
                      var statearr_21679_21692 = state_21660;
                      statearr_21679_21692[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21660);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e21678;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__21693 = state_21660;
                  state_21660 = G__21693;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_21660) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_21660);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_21680 = f__13887__auto__.call(null);
        statearr_21680[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___21681;
        return statearr_21680;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__13886__auto___21780 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_21758) {
          var state_val_21759 = state_21758[1];
          if (state_val_21759 === 1) {
            var state_21758__$1 = state_21758;
            var statearr_21760_21781 = state_21758__$1;
            statearr_21760_21781[2] = null;
            statearr_21760_21781[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_21759 === 2) {
              var state_21758__$1 = state_21758;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21758__$1, 4, ch);
            } else {
              if (state_val_21759 === 3) {
                var inst_21756 = state_21758[2];
                var state_21758__$1 = state_21758;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21758__$1, inst_21756);
              } else {
                if (state_val_21759 === 4) {
                  var inst_21739 = state_21758[7];
                  var inst_21739__$1 = state_21758[2];
                  var inst_21740 = inst_21739__$1 == null;
                  var state_21758__$1 = function() {
                    var statearr_21761 = state_21758;
                    statearr_21761[7] = inst_21739__$1;
                    return statearr_21761;
                  }();
                  if (cljs.core.truth_(inst_21740)) {
                    var statearr_21762_21782 = state_21758__$1;
                    statearr_21762_21782[1] = 5;
                  } else {
                    var statearr_21763_21783 = state_21758__$1;
                    statearr_21763_21783[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_21759 === 5) {
                    var inst_21742 = cljs.core.async.close_BANG_.call(null, tc);
                    var inst_21743 = cljs.core.async.close_BANG_.call(null, fc);
                    var state_21758__$1 = function() {
                      var statearr_21764 = state_21758;
                      statearr_21764[8] = inst_21742;
                      return statearr_21764;
                    }();
                    var statearr_21765_21784 = state_21758__$1;
                    statearr_21765_21784[2] = inst_21743;
                    statearr_21765_21784[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21759 === 6) {
                      var inst_21739 = state_21758[7];
                      var inst_21745 = p.call(null, inst_21739);
                      var state_21758__$1 = state_21758;
                      if (cljs.core.truth_(inst_21745)) {
                        var statearr_21766_21785 = state_21758__$1;
                        statearr_21766_21785[1] = 9;
                      } else {
                        var statearr_21767_21786 = state_21758__$1;
                        statearr_21767_21786[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21759 === 7) {
                        var inst_21754 = state_21758[2];
                        var state_21758__$1 = state_21758;
                        var statearr_21768_21787 = state_21758__$1;
                        statearr_21768_21787[2] = inst_21754;
                        statearr_21768_21787[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21759 === 8) {
                          var inst_21751 = state_21758[2];
                          var state_21758__$1 = function() {
                            var statearr_21769 = state_21758;
                            statearr_21769[9] = inst_21751;
                            return statearr_21769;
                          }();
                          var statearr_21770_21788 = state_21758__$1;
                          statearr_21770_21788[2] = null;
                          statearr_21770_21788[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21759 === 9) {
                            var state_21758__$1 = state_21758;
                            var statearr_21771_21789 = state_21758__$1;
                            statearr_21771_21789[2] = tc;
                            statearr_21771_21789[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_21759 === 10) {
                              var state_21758__$1 = state_21758;
                              var statearr_21772_21790 = state_21758__$1;
                              statearr_21772_21790[2] = fc;
                              statearr_21772_21790[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_21759 === 11) {
                                var inst_21739 = state_21758[7];
                                var inst_21749 = state_21758[2];
                                var state_21758__$1 = state_21758;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21758__$1, 8, inst_21749, inst_21739);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_21776 = [null, null, null, null, null, null, null, null, null, null];
              statearr_21776[0] = state_machine__13817__auto__;
              statearr_21776[1] = 1;
              return statearr_21776;
            };
            var state_machine__13817__auto____1 = function(state_21758) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_21758);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e21777) {
                    if (e21777 instanceof Object) {
                      var ex__13820__auto__ = e21777;
                      var statearr_21778_21791 = state_21758;
                      statearr_21778_21791[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21758);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e21777;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__21792 = state_21758;
                  state_21758 = G__21792;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_21758) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_21758);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_21779 = f__13887__auto__.call(null);
        statearr_21779[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___21780;
        return statearr_21779;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__13886__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13887__auto__ = function() {
      var switch__13816__auto__ = function(state_21839) {
        var state_val_21840 = state_21839[1];
        if (state_val_21840 === 7) {
          var inst_21835 = state_21839[2];
          var state_21839__$1 = state_21839;
          var statearr_21841_21857 = state_21839__$1;
          statearr_21841_21857[2] = inst_21835;
          statearr_21841_21857[1] = 3;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_21840 === 6) {
            var inst_21825 = state_21839[7];
            var inst_21828 = state_21839[8];
            var inst_21832 = f.call(null, inst_21825, inst_21828);
            var inst_21825__$1 = inst_21832;
            var state_21839__$1 = function() {
              var statearr_21842 = state_21839;
              statearr_21842[7] = inst_21825__$1;
              return statearr_21842;
            }();
            var statearr_21843_21858 = state_21839__$1;
            statearr_21843_21858[2] = null;
            statearr_21843_21858[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_21840 === 5) {
              var inst_21825 = state_21839[7];
              var state_21839__$1 = state_21839;
              var statearr_21844_21859 = state_21839__$1;
              statearr_21844_21859[2] = inst_21825;
              statearr_21844_21859[1] = 7;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_21840 === 4) {
                var inst_21828 = state_21839[8];
                var inst_21828__$1 = state_21839[2];
                var inst_21829 = inst_21828__$1 == null;
                var state_21839__$1 = function() {
                  var statearr_21845 = state_21839;
                  statearr_21845[8] = inst_21828__$1;
                  return statearr_21845;
                }();
                if (cljs.core.truth_(inst_21829)) {
                  var statearr_21846_21860 = state_21839__$1;
                  statearr_21846_21860[1] = 5;
                } else {
                  var statearr_21847_21861 = state_21839__$1;
                  statearr_21847_21861[1] = 6;
                }
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_21840 === 3) {
                  var inst_21837 = state_21839[2];
                  var state_21839__$1 = state_21839;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21839__$1, inst_21837);
                } else {
                  if (state_val_21840 === 2) {
                    var state_21839__$1 = state_21839;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21839__$1, 4, ch);
                  } else {
                    if (state_val_21840 === 1) {
                      var inst_21825 = init;
                      var state_21839__$1 = function() {
                        var statearr_21848 = state_21839;
                        statearr_21848[7] = inst_21825;
                        return statearr_21848;
                      }();
                      var statearr_21849_21862 = state_21839__$1;
                      statearr_21849_21862[2] = null;
                      statearr_21849_21862[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13816__auto__) {
        return function() {
          var state_machine__13817__auto__ = null;
          var state_machine__13817__auto____0 = function() {
            var statearr_21853 = [null, null, null, null, null, null, null, null, null];
            statearr_21853[0] = state_machine__13817__auto__;
            statearr_21853[1] = 1;
            return statearr_21853;
          };
          var state_machine__13817__auto____1 = function(state_21839) {
            while (true) {
              var ret_value__13818__auto__ = function() {
                try {
                  while (true) {
                    var result__13819__auto__ = switch__13816__auto__.call(null, state_21839);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13819__auto__;
                    }
                    break;
                  }
                } catch (e21854) {
                  if (e21854 instanceof Object) {
                    var ex__13820__auto__ = e21854;
                    var statearr_21855_21863 = state_21839;
                    statearr_21855_21863[5] = ex__13820__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21839);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e21854;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__21864 = state_21839;
                state_21839 = G__21864;
                continue;
              } else {
                return ret_value__13818__auto__;
              }
              break;
            }
          };
          state_machine__13817__auto__ = function(state_21839) {
            switch(arguments.length) {
              case 0:
                return state_machine__13817__auto____0.call(this);
              case 1:
                return state_machine__13817__auto____1.call(this, state_21839);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
          return state_machine__13817__auto__;
        }();
      }(switch__13816__auto__);
    }();
    var state__13888__auto__ = function() {
      var statearr_21856 = f__13887__auto__.call(null);
      statearr_21856[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto__;
      return statearr_21856;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
  });
  return c__13886__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__13886__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_21926) {
          var state_val_21927 = state_21926[1];
          if (state_val_21927 === 1) {
            var inst_21906 = cljs.core.seq.call(null, coll);
            var inst_21907 = inst_21906;
            var state_21926__$1 = function() {
              var statearr_21928 = state_21926;
              statearr_21928[7] = inst_21907;
              return statearr_21928;
            }();
            var statearr_21929_21947 = state_21926__$1;
            statearr_21929_21947[2] = null;
            statearr_21929_21947[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_21927 === 2) {
              var inst_21907 = state_21926[7];
              var state_21926__$1 = state_21926;
              if (cljs.core.truth_(inst_21907)) {
                var statearr_21930_21948 = state_21926__$1;
                statearr_21930_21948[1] = 4;
              } else {
                var statearr_21931_21949 = state_21926__$1;
                statearr_21931_21949[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_21927 === 3) {
                var inst_21924 = state_21926[2];
                var state_21926__$1 = state_21926;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21926__$1, inst_21924);
              } else {
                if (state_val_21927 === 4) {
                  var inst_21907 = state_21926[7];
                  var inst_21910 = cljs.core.first.call(null, inst_21907);
                  var state_21926__$1 = state_21926;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21926__$1, 7, ch, inst_21910);
                } else {
                  if (state_val_21927 === 5) {
                    var state_21926__$1 = state_21926;
                    if (cljs.core.truth_(close_QMARK_)) {
                      var statearr_21932_21950 = state_21926__$1;
                      statearr_21932_21950[1] = 8;
                    } else {
                      var statearr_21933_21951 = state_21926__$1;
                      statearr_21933_21951[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_21927 === 6) {
                      var inst_21922 = state_21926[2];
                      var state_21926__$1 = state_21926;
                      var statearr_21934_21952 = state_21926__$1;
                      statearr_21934_21952[2] = inst_21922;
                      statearr_21934_21952[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_21927 === 7) {
                        var inst_21907 = state_21926[7];
                        var inst_21912 = state_21926[2];
                        var inst_21913 = cljs.core.next.call(null, inst_21907);
                        var inst_21907__$1 = inst_21913;
                        var state_21926__$1 = function() {
                          var statearr_21935 = state_21926;
                          statearr_21935[8] = inst_21912;
                          statearr_21935[7] = inst_21907__$1;
                          return statearr_21935;
                        }();
                        var statearr_21936_21953 = state_21926__$1;
                        statearr_21936_21953[2] = null;
                        statearr_21936_21953[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_21927 === 8) {
                          var inst_21917 = cljs.core.async.close_BANG_.call(null, ch);
                          var state_21926__$1 = state_21926;
                          var statearr_21937_21954 = state_21926__$1;
                          statearr_21937_21954[2] = inst_21917;
                          statearr_21937_21954[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_21927 === 9) {
                            var state_21926__$1 = state_21926;
                            var statearr_21938_21955 = state_21926__$1;
                            statearr_21938_21955[2] = null;
                            statearr_21938_21955[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_21927 === 10) {
                              var inst_21920 = state_21926[2];
                              var state_21926__$1 = state_21926;
                              var statearr_21939_21956 = state_21926__$1;
                              statearr_21939_21956[2] = inst_21920;
                              statearr_21939_21956[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_21943 = [null, null, null, null, null, null, null, null, null];
              statearr_21943[0] = state_machine__13817__auto__;
              statearr_21943[1] = 1;
              return statearr_21943;
            };
            var state_machine__13817__auto____1 = function(state_21926) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_21926);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e21944) {
                    if (e21944 instanceof Object) {
                      var ex__13820__auto__ = e21944;
                      var statearr_21945_21957 = state_21926;
                      statearr_21945_21957[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21926);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e21944;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__21958 = state_21926;
                  state_21926 = G__21958;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_21926) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_21926);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_21946 = f__13887__auto__.call(null);
        statearr_21946[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto__;
        return statearr_21946;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return c__13886__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj21960 = {};
  return obj21960;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__10250__auto__ = _;
    if (and__10250__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__10889__auto__ = _ == null ? null : _;
    return function() {
      var or__10262__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj21962 = {};
  return obj21962;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__10250__auto__ = m;
    if (and__10250__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__10889__auto__ = m == null ? null : m;
    return function() {
      var or__10262__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__10250__auto__ = m;
    if (and__10250__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__10889__auto__ = m == null ? null : m;
    return function() {
      var or__10262__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__10250__auto__ = m;
    if (and__10250__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__10889__auto__ = m == null ? null : m;
    return function() {
      var or__10262__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t22186 !== "undefined") {
    } else {
      cljs.core.async.t22186 = function(cs, ch, mult, meta22187) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta22187 = meta22187;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t22186.cljs$lang$type = true;
      cljs.core.async.t22186.cljs$lang$ctorStr = "cljs.core.async/t22186";
      cljs.core.async.t22186.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
          return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t22186");
        };
      }(cs);
      cljs.core.async.t22186.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t22186.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t22186.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t22186.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t22186.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t22186.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t22186.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_22188) {
          var self__ = this;
          var _22188__$1 = this;
          return self__.meta22187;
        };
      }(cs);
      cljs.core.async.t22186.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_22188, meta22187__$1) {
          var self__ = this;
          var _22188__$1 = this;
          return new cljs.core.async.t22186(self__.cs, self__.ch, self__.mult, meta22187__$1);
        };
      }(cs);
      cljs.core.async.__GT_t22186 = function(cs) {
        return function __GT_t22186(cs__$1, ch__$1, mult__$1, meta22187) {
          return new cljs.core.async.t22186(cs__$1, ch__$1, mult__$1, meta22187);
        };
      }(cs);
    }
    return new cljs.core.async.t22186(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function() {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__13886__auto___22409 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13887__auto__ = function() {
      var switch__13816__auto__ = function(state_22323) {
        var state_val_22324 = state_22323[1];
        if (state_val_22324 === 32) {
          var inst_22267 = state_22323[7];
          var inst_22191 = state_22323[8];
          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_22323, 31, Object, null, 30);
          var inst_22274 = cljs.core.async.put_BANG_.call(null, inst_22267, inst_22191, done);
          var state_22323__$1 = state_22323;
          var statearr_22325_22410 = state_22323__$1;
          statearr_22325_22410[2] = inst_22274;
          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22323__$1);
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_22324 === 1) {
            var state_22323__$1 = state_22323;
            var statearr_22326_22411 = state_22323__$1;
            statearr_22326_22411[2] = null;
            statearr_22326_22411[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_22324 === 33) {
              var inst_22280 = state_22323[9];
              var inst_22282 = cljs.core.chunked_seq_QMARK_.call(null, inst_22280);
              var state_22323__$1 = state_22323;
              if (inst_22282) {
                var statearr_22327_22412 = state_22323__$1;
                statearr_22327_22412[1] = 36;
              } else {
                var statearr_22328_22413 = state_22323__$1;
                statearr_22328_22413[1] = 37;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_22324 === 2) {
                var state_22323__$1 = state_22323;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22323__$1, 4, ch);
              } else {
                if (state_val_22324 === 34) {
                  var state_22323__$1 = state_22323;
                  var statearr_22329_22414 = state_22323__$1;
                  statearr_22329_22414[2] = null;
                  statearr_22329_22414[1] = 35;
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_22324 === 3) {
                    var inst_22321 = state_22323[2];
                    var state_22323__$1 = state_22323;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22323__$1, inst_22321);
                  } else {
                    if (state_val_22324 === 35) {
                      var inst_22305 = state_22323[2];
                      var state_22323__$1 = state_22323;
                      var statearr_22330_22415 = state_22323__$1;
                      statearr_22330_22415[2] = inst_22305;
                      statearr_22330_22415[1] = 29;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_22324 === 4) {
                        var inst_22191 = state_22323[8];
                        var inst_22191__$1 = state_22323[2];
                        var inst_22192 = inst_22191__$1 == null;
                        var state_22323__$1 = function() {
                          var statearr_22331 = state_22323;
                          statearr_22331[8] = inst_22191__$1;
                          return statearr_22331;
                        }();
                        if (cljs.core.truth_(inst_22192)) {
                          var statearr_22332_22416 = state_22323__$1;
                          statearr_22332_22416[1] = 5;
                        } else {
                          var statearr_22333_22417 = state_22323__$1;
                          statearr_22333_22417[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_22324 === 36) {
                          var inst_22280 = state_22323[9];
                          var inst_22284 = cljs.core.chunk_first.call(null, inst_22280);
                          var inst_22285 = cljs.core.chunk_rest.call(null, inst_22280);
                          var inst_22286 = cljs.core.count.call(null, inst_22284);
                          var inst_22259 = inst_22285;
                          var inst_22260 = inst_22284;
                          var inst_22261 = inst_22286;
                          var inst_22262 = 0;
                          var state_22323__$1 = function() {
                            var statearr_22334 = state_22323;
                            statearr_22334[10] = inst_22261;
                            statearr_22334[11] = inst_22262;
                            statearr_22334[12] = inst_22260;
                            statearr_22334[13] = inst_22259;
                            return statearr_22334;
                          }();
                          var statearr_22335_22418 = state_22323__$1;
                          statearr_22335_22418[2] = null;
                          statearr_22335_22418[1] = 25;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_22324 === 5) {
                            var inst_22198 = cljs.core.deref.call(null, cs);
                            var inst_22199 = cljs.core.seq.call(null, inst_22198);
                            var inst_22200 = inst_22199;
                            var inst_22201 = null;
                            var inst_22202 = 0;
                            var inst_22203 = 0;
                            var state_22323__$1 = function() {
                              var statearr_22336 = state_22323;
                              statearr_22336[14] = inst_22203;
                              statearr_22336[15] = inst_22202;
                              statearr_22336[16] = inst_22201;
                              statearr_22336[17] = inst_22200;
                              return statearr_22336;
                            }();
                            var statearr_22337_22419 = state_22323__$1;
                            statearr_22337_22419[2] = null;
                            statearr_22337_22419[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_22324 === 37) {
                              var inst_22280 = state_22323[9];
                              var inst_22289 = cljs.core.first.call(null, inst_22280);
                              var state_22323__$1 = function() {
                                var statearr_22338 = state_22323;
                                statearr_22338[18] = inst_22289;
                                return statearr_22338;
                              }();
                              var statearr_22339_22420 = state_22323__$1;
                              statearr_22339_22420[2] = null;
                              statearr_22339_22420[1] = 41;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_22324 === 6) {
                                var inst_22251 = state_22323[19];
                                var inst_22250 = cljs.core.deref.call(null, cs);
                                var inst_22251__$1 = cljs.core.keys.call(null, inst_22250);
                                var inst_22252 = cljs.core.count.call(null, inst_22251__$1);
                                var inst_22253 = cljs.core.reset_BANG_.call(null, dctr, inst_22252);
                                var inst_22258 = cljs.core.seq.call(null, inst_22251__$1);
                                var inst_22259 = inst_22258;
                                var inst_22260 = null;
                                var inst_22261 = 0;
                                var inst_22262 = 0;
                                var state_22323__$1 = function() {
                                  var statearr_22340 = state_22323;
                                  statearr_22340[10] = inst_22261;
                                  statearr_22340[11] = inst_22262;
                                  statearr_22340[12] = inst_22260;
                                  statearr_22340[13] = inst_22259;
                                  statearr_22340[20] = inst_22253;
                                  statearr_22340[19] = inst_22251__$1;
                                  return statearr_22340;
                                }();
                                var statearr_22341_22421 = state_22323__$1;
                                statearr_22341_22421[2] = null;
                                statearr_22341_22421[1] = 25;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_22324 === 38) {
                                  var inst_22302 = state_22323[2];
                                  var state_22323__$1 = state_22323;
                                  var statearr_22342_22422 = state_22323__$1;
                                  statearr_22342_22422[2] = inst_22302;
                                  statearr_22342_22422[1] = 35;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_22324 === 7) {
                                    var inst_22319 = state_22323[2];
                                    var state_22323__$1 = state_22323;
                                    var statearr_22343_22423 = state_22323__$1;
                                    statearr_22343_22423[2] = inst_22319;
                                    statearr_22343_22423[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_22324 === 39) {
                                      var inst_22280 = state_22323[9];
                                      var inst_22298 = state_22323[2];
                                      var inst_22299 = cljs.core.next.call(null, inst_22280);
                                      var inst_22259 = inst_22299;
                                      var inst_22260 = null;
                                      var inst_22261 = 0;
                                      var inst_22262 = 0;
                                      var state_22323__$1 = function() {
                                        var statearr_22344 = state_22323;
                                        statearr_22344[10] = inst_22261;
                                        statearr_22344[11] = inst_22262;
                                        statearr_22344[12] = inst_22260;
                                        statearr_22344[13] = inst_22259;
                                        statearr_22344[21] = inst_22298;
                                        return statearr_22344;
                                      }();
                                      var statearr_22345_22424 = state_22323__$1;
                                      statearr_22345_22424[2] = null;
                                      statearr_22345_22424[1] = 25;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_22324 === 8) {
                                        var inst_22203 = state_22323[14];
                                        var inst_22202 = state_22323[15];
                                        var inst_22205 = inst_22203 < inst_22202;
                                        var inst_22206 = inst_22205;
                                        var state_22323__$1 = state_22323;
                                        if (cljs.core.truth_(inst_22206)) {
                                          var statearr_22346_22425 = state_22323__$1;
                                          statearr_22346_22425[1] = 10;
                                        } else {
                                          var statearr_22347_22426 = state_22323__$1;
                                          statearr_22347_22426[1] = 11;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_22324 === 40) {
                                          var inst_22289 = state_22323[18];
                                          var inst_22290 = state_22323[2];
                                          var inst_22291 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var inst_22292 = cljs.core.async.untap_STAR_.call(null, m, inst_22289);
                                          var state_22323__$1 = function() {
                                            var statearr_22348 = state_22323;
                                            statearr_22348[22] = inst_22291;
                                            statearr_22348[23] = inst_22290;
                                            return statearr_22348;
                                          }();
                                          var statearr_22349_22427 = state_22323__$1;
                                          statearr_22349_22427[2] = inst_22292;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22323__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_22324 === 9) {
                                            var inst_22248 = state_22323[2];
                                            var state_22323__$1 = state_22323;
                                            var statearr_22350_22428 = state_22323__$1;
                                            statearr_22350_22428[2] = inst_22248;
                                            statearr_22350_22428[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_22324 === 41) {
                                              var inst_22191 = state_22323[8];
                                              var inst_22289 = state_22323[18];
                                              var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_22323, 40, Object, null, 39);
                                              var inst_22296 = cljs.core.async.put_BANG_.call(null, inst_22289, inst_22191, done);
                                              var state_22323__$1 = state_22323;
                                              var statearr_22351_22429 = state_22323__$1;
                                              statearr_22351_22429[2] = inst_22296;
                                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22323__$1);
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_22324 === 10) {
                                                var inst_22203 = state_22323[14];
                                                var inst_22201 = state_22323[16];
                                                var inst_22209 = cljs.core._nth.call(null, inst_22201, inst_22203);
                                                var inst_22210 = cljs.core.nth.call(null, inst_22209, 0, null);
                                                var inst_22211 = cljs.core.nth.call(null, inst_22209, 1, null);
                                                var state_22323__$1 = function() {
                                                  var statearr_22352 = state_22323;
                                                  statearr_22352[24] = inst_22210;
                                                  return statearr_22352;
                                                }();
                                                if (cljs.core.truth_(inst_22211)) {
                                                  var statearr_22353_22430 = state_22323__$1;
                                                  statearr_22353_22430[1] = 13;
                                                } else {
                                                  var statearr_22354_22431 = state_22323__$1;
                                                  statearr_22354_22431[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_22324 === 42) {
                                                  var state_22323__$1 = state_22323;
                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22323__$1, 45, dchan);
                                                } else {
                                                  if (state_val_22324 === 11) {
                                                    var inst_22220 = state_22323[25];
                                                    var inst_22200 = state_22323[17];
                                                    var inst_22220__$1 = cljs.core.seq.call(null, inst_22200);
                                                    var state_22323__$1 = function() {
                                                      var statearr_22355 = state_22323;
                                                      statearr_22355[25] = inst_22220__$1;
                                                      return statearr_22355;
                                                    }();
                                                    if (inst_22220__$1) {
                                                      var statearr_22356_22432 = state_22323__$1;
                                                      statearr_22356_22432[1] = 16;
                                                    } else {
                                                      var statearr_22357_22433 = state_22323__$1;
                                                      statearr_22357_22433[1] = 17;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_22324 === 43) {
                                                      var state_22323__$1 = state_22323;
                                                      var statearr_22358_22434 = state_22323__$1;
                                                      statearr_22358_22434[2] = null;
                                                      statearr_22358_22434[1] = 44;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_22324 === 12) {
                                                        var inst_22246 = state_22323[2];
                                                        var state_22323__$1 = state_22323;
                                                        var statearr_22359_22435 = state_22323__$1;
                                                        statearr_22359_22435[2] = inst_22246;
                                                        statearr_22359_22435[1] = 9;
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_22324 === 44) {
                                                          var inst_22316 = state_22323[2];
                                                          var state_22323__$1 = function() {
                                                            var statearr_22360 = state_22323;
                                                            statearr_22360[26] = inst_22316;
                                                            return statearr_22360;
                                                          }();
                                                          var statearr_22361_22436 = state_22323__$1;
                                                          statearr_22361_22436[2] = null;
                                                          statearr_22361_22436[1] = 2;
                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                        } else {
                                                          if (state_val_22324 === 13) {
                                                            var inst_22210 = state_22323[24];
                                                            var inst_22213 = cljs.core.async.close_BANG_.call(null, inst_22210);
                                                            var state_22323__$1 = state_22323;
                                                            var statearr_22362_22437 = state_22323__$1;
                                                            statearr_22362_22437[2] = inst_22213;
                                                            statearr_22362_22437[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            if (state_val_22324 === 45) {
                                                              var inst_22313 = state_22323[2];
                                                              var state_22323__$1 = state_22323;
                                                              var statearr_22366_22438 = state_22323__$1;
                                                              statearr_22366_22438[2] = inst_22313;
                                                              statearr_22366_22438[1] = 44;
                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                            } else {
                                                              if (state_val_22324 === 14) {
                                                                var state_22323__$1 = state_22323;
                                                                var statearr_22367_22439 = state_22323__$1;
                                                                statearr_22367_22439[2] = null;
                                                                statearr_22367_22439[1] = 15;
                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                              } else {
                                                                if (state_val_22324 === 15) {
                                                                  var inst_22203 = state_22323[14];
                                                                  var inst_22202 = state_22323[15];
                                                                  var inst_22201 = state_22323[16];
                                                                  var inst_22200 = state_22323[17];
                                                                  var inst_22216 = state_22323[2];
                                                                  var inst_22217 = inst_22203 + 1;
                                                                  var tmp22363 = inst_22202;
                                                                  var tmp22364 = inst_22201;
                                                                  var tmp22365 = inst_22200;
                                                                  var inst_22200__$1 = tmp22365;
                                                                  var inst_22201__$1 = tmp22364;
                                                                  var inst_22202__$1 = tmp22363;
                                                                  var inst_22203__$1 = inst_22217;
                                                                  var state_22323__$1 = function() {
                                                                    var statearr_22368 = state_22323;
                                                                    statearr_22368[27] = inst_22216;
                                                                    statearr_22368[14] = inst_22203__$1;
                                                                    statearr_22368[15] = inst_22202__$1;
                                                                    statearr_22368[16] = inst_22201__$1;
                                                                    statearr_22368[17] = inst_22200__$1;
                                                                    return statearr_22368;
                                                                  }();
                                                                  var statearr_22369_22440 = state_22323__$1;
                                                                  statearr_22369_22440[2] = null;
                                                                  statearr_22369_22440[1] = 8;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                } else {
                                                                  if (state_val_22324 === 16) {
                                                                    var inst_22220 = state_22323[25];
                                                                    var inst_22222 = cljs.core.chunked_seq_QMARK_.call(null, inst_22220);
                                                                    var state_22323__$1 = state_22323;
                                                                    if (inst_22222) {
                                                                      var statearr_22370_22441 = state_22323__$1;
                                                                      statearr_22370_22441[1] = 19;
                                                                    } else {
                                                                      var statearr_22371_22442 = state_22323__$1;
                                                                      statearr_22371_22442[1] = 20;
                                                                    }
                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                  } else {
                                                                    if (state_val_22324 === 17) {
                                                                      var state_22323__$1 = state_22323;
                                                                      var statearr_22372_22443 = state_22323__$1;
                                                                      statearr_22372_22443[2] = null;
                                                                      statearr_22372_22443[1] = 18;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                    } else {
                                                                      if (state_val_22324 === 18) {
                                                                        var inst_22244 = state_22323[2];
                                                                        var state_22323__$1 = state_22323;
                                                                        var statearr_22373_22444 = state_22323__$1;
                                                                        statearr_22373_22444[2] = inst_22244;
                                                                        statearr_22373_22444[1] = 12;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                      } else {
                                                                        if (state_val_22324 === 19) {
                                                                          var inst_22220 = state_22323[25];
                                                                          var inst_22224 = cljs.core.chunk_first.call(null, inst_22220);
                                                                          var inst_22225 = cljs.core.chunk_rest.call(null, inst_22220);
                                                                          var inst_22226 = cljs.core.count.call(null, inst_22224);
                                                                          var inst_22200 = inst_22225;
                                                                          var inst_22201 = inst_22224;
                                                                          var inst_22202 = inst_22226;
                                                                          var inst_22203 = 0;
                                                                          var state_22323__$1 = function() {
                                                                            var statearr_22374 = state_22323;
                                                                            statearr_22374[14] = inst_22203;
                                                                            statearr_22374[15] = inst_22202;
                                                                            statearr_22374[16] = inst_22201;
                                                                            statearr_22374[17] = inst_22200;
                                                                            return statearr_22374;
                                                                          }();
                                                                          var statearr_22375_22445 = state_22323__$1;
                                                                          statearr_22375_22445[2] = null;
                                                                          statearr_22375_22445[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                        } else {
                                                                          if (state_val_22324 === 20) {
                                                                            var inst_22220 = state_22323[25];
                                                                            var inst_22230 = cljs.core.first.call(null, inst_22220);
                                                                            var inst_22231 = cljs.core.nth.call(null, inst_22230, 0, null);
                                                                            var inst_22232 = cljs.core.nth.call(null, inst_22230, 1, null);
                                                                            var state_22323__$1 = function() {
                                                                              var statearr_22376 = state_22323;
                                                                              statearr_22376[28] = inst_22231;
                                                                              return statearr_22376;
                                                                            }();
                                                                            if (cljs.core.truth_(inst_22232)) {
                                                                              var statearr_22377_22446 = state_22323__$1;
                                                                              statearr_22377_22446[1] = 22;
                                                                            } else {
                                                                              var statearr_22378_22447 = state_22323__$1;
                                                                              statearr_22378_22447[1] = 23;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                          } else {
                                                                            if (state_val_22324 === 21) {
                                                                              var inst_22241 = state_22323[2];
                                                                              var state_22323__$1 = state_22323;
                                                                              var statearr_22379_22448 = state_22323__$1;
                                                                              statearr_22379_22448[2] = inst_22241;
                                                                              statearr_22379_22448[1] = 18;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                            } else {
                                                                              if (state_val_22324 === 22) {
                                                                                var inst_22231 = state_22323[28];
                                                                                var inst_22234 = cljs.core.async.close_BANG_.call(null, inst_22231);
                                                                                var state_22323__$1 = state_22323;
                                                                                var statearr_22380_22449 = state_22323__$1;
                                                                                statearr_22380_22449[2] = inst_22234;
                                                                                statearr_22380_22449[1] = 24;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                              } else {
                                                                                if (state_val_22324 === 23) {
                                                                                  var state_22323__$1 = state_22323;
                                                                                  var statearr_22381_22450 = state_22323__$1;
                                                                                  statearr_22381_22450[2] = null;
                                                                                  statearr_22381_22450[1] = 24;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                } else {
                                                                                  if (state_val_22324 === 24) {
                                                                                    var inst_22220 = state_22323[25];
                                                                                    var inst_22237 = state_22323[2];
                                                                                    var inst_22238 = cljs.core.next.call(null, inst_22220);
                                                                                    var inst_22200 = inst_22238;
                                                                                    var inst_22201 = null;
                                                                                    var inst_22202 = 0;
                                                                                    var inst_22203 = 0;
                                                                                    var state_22323__$1 = function() {
                                                                                      var statearr_22382 = state_22323;
                                                                                      statearr_22382[14] = inst_22203;
                                                                                      statearr_22382[15] = inst_22202;
                                                                                      statearr_22382[16] = inst_22201;
                                                                                      statearr_22382[29] = inst_22237;
                                                                                      statearr_22382[17] = inst_22200;
                                                                                      return statearr_22382;
                                                                                    }();
                                                                                    var statearr_22383_22451 = state_22323__$1;
                                                                                    statearr_22383_22451[2] = null;
                                                                                    statearr_22383_22451[1] = 8;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                  } else {
                                                                                    if (state_val_22324 === 25) {
                                                                                      var inst_22261 = state_22323[10];
                                                                                      var inst_22262 = state_22323[11];
                                                                                      var inst_22264 = inst_22262 < inst_22261;
                                                                                      var inst_22265 = inst_22264;
                                                                                      var state_22323__$1 = state_22323;
                                                                                      if (cljs.core.truth_(inst_22265)) {
                                                                                        var statearr_22384_22452 = state_22323__$1;
                                                                                        statearr_22384_22452[1] = 27;
                                                                                      } else {
                                                                                        var statearr_22385_22453 = state_22323__$1;
                                                                                        statearr_22385_22453[1] = 28;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                    } else {
                                                                                      if (state_val_22324 === 26) {
                                                                                        var inst_22251 = state_22323[19];
                                                                                        var inst_22309 = state_22323[2];
                                                                                        var inst_22310 = cljs.core.seq.call(null, inst_22251);
                                                                                        var state_22323__$1 = function() {
                                                                                          var statearr_22386 = state_22323;
                                                                                          statearr_22386[30] = inst_22309;
                                                                                          return statearr_22386;
                                                                                        }();
                                                                                        if (inst_22310) {
                                                                                          var statearr_22387_22454 = state_22323__$1;
                                                                                          statearr_22387_22454[1] = 42;
                                                                                        } else {
                                                                                          var statearr_22388_22455 = state_22323__$1;
                                                                                          statearr_22388_22455[1] = 43;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                      } else {
                                                                                        if (state_val_22324 === 27) {
                                                                                          var inst_22262 = state_22323[11];
                                                                                          var inst_22260 = state_22323[12];
                                                                                          var inst_22267 = cljs.core._nth.call(null, inst_22260, inst_22262);
                                                                                          var state_22323__$1 = function() {
                                                                                            var statearr_22389 = state_22323;
                                                                                            statearr_22389[7] = inst_22267;
                                                                                            return statearr_22389;
                                                                                          }();
                                                                                          var statearr_22390_22456 = state_22323__$1;
                                                                                          statearr_22390_22456[2] = null;
                                                                                          statearr_22390_22456[1] = 32;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                        } else {
                                                                                          if (state_val_22324 === 28) {
                                                                                            var inst_22259 = state_22323[13];
                                                                                            var inst_22280 = state_22323[9];
                                                                                            var inst_22280__$1 = cljs.core.seq.call(null, inst_22259);
                                                                                            var state_22323__$1 = function() {
                                                                                              var statearr_22394 = state_22323;
                                                                                              statearr_22394[9] = inst_22280__$1;
                                                                                              return statearr_22394;
                                                                                            }();
                                                                                            if (inst_22280__$1) {
                                                                                              var statearr_22395_22457 = state_22323__$1;
                                                                                              statearr_22395_22457[1] = 33;
                                                                                            } else {
                                                                                              var statearr_22396_22458 = state_22323__$1;
                                                                                              statearr_22396_22458[1] = 34;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                          } else {
                                                                                            if (state_val_22324 === 29) {
                                                                                              var inst_22307 = state_22323[2];
                                                                                              var state_22323__$1 = state_22323;
                                                                                              var statearr_22397_22459 = state_22323__$1;
                                                                                              statearr_22397_22459[2] = inst_22307;
                                                                                              statearr_22397_22459[1] = 26;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                            } else {
                                                                                              if (state_val_22324 === 30) {
                                                                                                var inst_22261 = state_22323[10];
                                                                                                var inst_22262 = state_22323[11];
                                                                                                var inst_22260 = state_22323[12];
                                                                                                var inst_22259 = state_22323[13];
                                                                                                var inst_22276 = state_22323[2];
                                                                                                var inst_22277 = inst_22262 + 1;
                                                                                                var tmp22391 = inst_22261;
                                                                                                var tmp22392 = inst_22260;
                                                                                                var tmp22393 = inst_22259;
                                                                                                var inst_22259__$1 = tmp22393;
                                                                                                var inst_22260__$1 = tmp22392;
                                                                                                var inst_22261__$1 = tmp22391;
                                                                                                var inst_22262__$1 = inst_22277;
                                                                                                var state_22323__$1 = function() {
                                                                                                  var statearr_22398 = state_22323;
                                                                                                  statearr_22398[10] = inst_22261__$1;
                                                                                                  statearr_22398[11] = inst_22262__$1;
                                                                                                  statearr_22398[12] = inst_22260__$1;
                                                                                                  statearr_22398[31] = inst_22276;
                                                                                                  statearr_22398[13] = inst_22259__$1;
                                                                                                  return statearr_22398;
                                                                                                }();
                                                                                                var statearr_22399_22460 = state_22323__$1;
                                                                                                statearr_22399_22460[2] = null;
                                                                                                statearr_22399_22460[1] = 25;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                              } else {
                                                                                                if (state_val_22324 === 31) {
                                                                                                  var inst_22267 = state_22323[7];
                                                                                                  var inst_22268 = state_22323[2];
                                                                                                  var inst_22269 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                                                                                  var inst_22270 = cljs.core.async.untap_STAR_.call(null, m, inst_22267);
                                                                                                  var state_22323__$1 = function() {
                                                                                                    var statearr_22400 = state_22323;
                                                                                                    statearr_22400[32] = inst_22269;
                                                                                                    statearr_22400[33] = inst_22268;
                                                                                                    return statearr_22400;
                                                                                                  }();
                                                                                                  var statearr_22401_22461 = state_22323__$1;
                                                                                                  statearr_22401_22461[2] = inst_22270;
                                                                                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22323__$1);
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                                                                } else {
                                                                                                  return null;
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13816__auto__) {
        return function() {
          var state_machine__13817__auto__ = null;
          var state_machine__13817__auto____0 = function() {
            var statearr_22405 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_22405[0] = state_machine__13817__auto__;
            statearr_22405[1] = 1;
            return statearr_22405;
          };
          var state_machine__13817__auto____1 = function(state_22323) {
            while (true) {
              var ret_value__13818__auto__ = function() {
                try {
                  while (true) {
                    var result__13819__auto__ = switch__13816__auto__.call(null, state_22323);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13819__auto__;
                    }
                    break;
                  }
                } catch (e22406) {
                  if (e22406 instanceof Object) {
                    var ex__13820__auto__ = e22406;
                    var statearr_22407_22462 = state_22323;
                    statearr_22407_22462[5] = ex__13820__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22323);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e22406;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__22463 = state_22323;
                state_22323 = G__22463;
                continue;
              } else {
                return ret_value__13818__auto__;
              }
              break;
            }
          };
          state_machine__13817__auto__ = function(state_22323) {
            switch(arguments.length) {
              case 0:
                return state_machine__13817__auto____0.call(this);
              case 1:
                return state_machine__13817__auto____1.call(this, state_22323);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
          return state_machine__13817__auto__;
        }();
      }(switch__13816__auto__);
    }();
    var state__13888__auto__ = function() {
      var statearr_22408 = f__13887__auto__.call(null);
      statearr_22408[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___22409;
      return statearr_22408;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
  });
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj22465 = {};
  return obj22465;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__10250__auto__ = m;
    if (and__10250__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__10889__auto__ = m == null ? null : m;
    return function() {
      var or__10262__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__10250__auto__ = m;
    if (and__10250__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__10889__auto__ = m == null ? null : m;
    return function() {
      var or__10262__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__10250__auto__ = m;
    if (and__10250__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__10889__auto__ = m == null ? null : m;
    return function() {
      var or__10262__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__10250__auto__ = m;
    if (and__10250__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__10889__auto__ = m == null ? null : m;
    return function() {
      var or__10262__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__10250__auto__ = m;
    if (and__10250__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__10889__auto__ = m == null ? null : m;
    return function() {
      var or__10262__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", 1120344424), null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", 1017440337));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", 1017440337), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", 1120344424), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1123523302), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1017267595), chs), new cljs.core.Keyword(null, "reads", "reads", 1122290959), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", 1120344424)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t22575 !== "undefined") {
    } else {
      cljs.core.async.t22575 = function(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, meta22576) {
        this.pick = pick;
        this.out = out;
        this.attrs = attrs;
        this.cs = cs;
        this.calc_state = calc_state;
        this.solo_modes = solo_modes;
        this.mix = mix;
        this.changed = changed;
        this.change = change;
        this.solo_mode = solo_mode;
        this.meta22576 = meta22576;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t22575.cljs$lang$type = true;
      cljs.core.async.t22575.cljs$lang$ctorStr = "cljs.core.async/t22575";
      cljs.core.async.t22575.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
          return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t22575");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t22575.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t22575.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t22575.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t22575.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t22575.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t22575.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", -1162732933, null), new cljs.core.Symbol(null, "mode", "mode", -1637174436, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t22575.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t22575.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t22575.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_22577) {
          var self__ = this;
          var _22577__$1 = this;
          return self__.meta22576;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t22575.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_22577, meta22576__$1) {
          var self__ = this;
          var _22577__$1 = this;
          return new cljs.core.async.t22575(self__.pick, self__.out, self__.attrs, self__.cs, self__.calc_state, self__.solo_modes, self__.mix, self__.changed, self__.change, self__.solo_mode, meta22576__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t22575 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t22575(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta22576) {
          return new cljs.core.async.t22575(pick__$1, out__$1, attrs__$1, cs__$1, calc_state__$1, solo_modes__$1, mix__$1, changed__$1, change__$1, solo_mode__$1, meta22576);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t22575(pick, out, attrs, cs, calc_state, solo_modes, mix, changed, change, solo_mode, null);
  }();
  var c__13886__auto___22684 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13887__auto__ = function() {
      var switch__13816__auto__ = function(state_22642) {
        var state_val_22643 = state_22642[1];
        if (state_val_22643 === 1) {
          var inst_22581 = state_22642[7];
          var inst_22581__$1 = calc_state.call(null);
          var inst_22582 = cljs.core.seq_QMARK_.call(null, inst_22581__$1);
          var state_22642__$1 = function() {
            var statearr_22644 = state_22642;
            statearr_22644[7] = inst_22581__$1;
            return statearr_22644;
          }();
          if (inst_22582) {
            var statearr_22645_22685 = state_22642__$1;
            statearr_22645_22685[1] = 2;
          } else {
            var statearr_22646_22686 = state_22642__$1;
            statearr_22646_22686[1] = 3;
          }
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_22643 === 2) {
            var inst_22581 = state_22642[7];
            var inst_22584 = cljs.core.apply.call(null, cljs.core.hash_map, inst_22581);
            var state_22642__$1 = state_22642;
            var statearr_22647_22687 = state_22642__$1;
            statearr_22647_22687[2] = inst_22584;
            statearr_22647_22687[1] = 4;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_22643 === 3) {
              var inst_22581 = state_22642[7];
              var state_22642__$1 = state_22642;
              var statearr_22648_22688 = state_22642__$1;
              statearr_22648_22688[2] = inst_22581;
              statearr_22648_22688[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_22643 === 4) {
                var inst_22581 = state_22642[7];
                var inst_22587 = state_22642[2];
                var inst_22588 = cljs.core.get.call(null, inst_22587, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                var inst_22589 = cljs.core.get.call(null, inst_22587, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                var inst_22590 = cljs.core.get.call(null, inst_22587, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                var inst_22591 = inst_22581;
                var state_22642__$1 = function() {
                  var statearr_22649 = state_22642;
                  statearr_22649[8] = inst_22588;
                  statearr_22649[9] = inst_22589;
                  statearr_22649[10] = inst_22591;
                  statearr_22649[11] = inst_22590;
                  return statearr_22649;
                }();
                var statearr_22650_22689 = state_22642__$1;
                statearr_22650_22689[2] = null;
                statearr_22650_22689[1] = 5;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_22643 === 5) {
                  var inst_22591 = state_22642[10];
                  var inst_22594 = cljs.core.seq_QMARK_.call(null, inst_22591);
                  var state_22642__$1 = state_22642;
                  if (inst_22594) {
                    var statearr_22651_22690 = state_22642__$1;
                    statearr_22651_22690[1] = 7;
                  } else {
                    var statearr_22652_22691 = state_22642__$1;
                    statearr_22652_22691[1] = 8;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_22643 === 6) {
                    var inst_22640 = state_22642[2];
                    var state_22642__$1 = state_22642;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22642__$1, inst_22640);
                  } else {
                    if (state_val_22643 === 7) {
                      var inst_22591 = state_22642[10];
                      var inst_22596 = cljs.core.apply.call(null, cljs.core.hash_map, inst_22591);
                      var state_22642__$1 = state_22642;
                      var statearr_22653_22692 = state_22642__$1;
                      statearr_22653_22692[2] = inst_22596;
                      statearr_22653_22692[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_22643 === 8) {
                        var inst_22591 = state_22642[10];
                        var state_22642__$1 = state_22642;
                        var statearr_22654_22693 = state_22642__$1;
                        statearr_22654_22693[2] = inst_22591;
                        statearr_22654_22693[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_22643 === 9) {
                          var inst_22599 = state_22642[12];
                          var inst_22599__$1 = state_22642[2];
                          var inst_22600 = cljs.core.get.call(null, inst_22599__$1, new cljs.core.Keyword(null, "reads", "reads", 1122290959));
                          var inst_22601 = cljs.core.get.call(null, inst_22599__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1118168300));
                          var inst_22602 = cljs.core.get.call(null, inst_22599__$1, new cljs.core.Keyword(null, "solos", "solos", 1123523302));
                          var state_22642__$1 = function() {
                            var statearr_22655 = state_22642;
                            statearr_22655[13] = inst_22601;
                            statearr_22655[14] = inst_22602;
                            statearr_22655[12] = inst_22599__$1;
                            return statearr_22655;
                          }();
                          return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_22642__$1, 10, inst_22600);
                        } else {
                          if (state_val_22643 === 10) {
                            var inst_22606 = state_22642[15];
                            var inst_22607 = state_22642[16];
                            var inst_22605 = state_22642[2];
                            var inst_22606__$1 = cljs.core.nth.call(null, inst_22605, 0, null);
                            var inst_22607__$1 = cljs.core.nth.call(null, inst_22605, 1, null);
                            var inst_22608 = inst_22606__$1 == null;
                            var inst_22609 = cljs.core._EQ_.call(null, inst_22607__$1, change);
                            var inst_22610 = inst_22608 || inst_22609;
                            var state_22642__$1 = function() {
                              var statearr_22656 = state_22642;
                              statearr_22656[15] = inst_22606__$1;
                              statearr_22656[16] = inst_22607__$1;
                              return statearr_22656;
                            }();
                            if (cljs.core.truth_(inst_22610)) {
                              var statearr_22657_22694 = state_22642__$1;
                              statearr_22657_22694[1] = 11;
                            } else {
                              var statearr_22658_22695 = state_22642__$1;
                              statearr_22658_22695[1] = 12;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_22643 === 11) {
                              var inst_22606 = state_22642[15];
                              var inst_22612 = inst_22606 == null;
                              var state_22642__$1 = state_22642;
                              if (cljs.core.truth_(inst_22612)) {
                                var statearr_22659_22696 = state_22642__$1;
                                statearr_22659_22696[1] = 14;
                              } else {
                                var statearr_22660_22697 = state_22642__$1;
                                statearr_22660_22697[1] = 15;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_22643 === 12) {
                                var inst_22621 = state_22642[17];
                                var inst_22607 = state_22642[16];
                                var inst_22602 = state_22642[14];
                                var inst_22621__$1 = inst_22602.call(null, inst_22607);
                                var state_22642__$1 = function() {
                                  var statearr_22661 = state_22642;
                                  statearr_22661[17] = inst_22621__$1;
                                  return statearr_22661;
                                }();
                                if (cljs.core.truth_(inst_22621__$1)) {
                                  var statearr_22662_22698 = state_22642__$1;
                                  statearr_22662_22698[1] = 17;
                                } else {
                                  var statearr_22663_22699 = state_22642__$1;
                                  statearr_22663_22699[1] = 18;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_22643 === 13) {
                                  var inst_22638 = state_22642[2];
                                  var state_22642__$1 = state_22642;
                                  var statearr_22664_22700 = state_22642__$1;
                                  statearr_22664_22700[2] = inst_22638;
                                  statearr_22664_22700[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_22643 === 14) {
                                    var inst_22607 = state_22642[16];
                                    var inst_22614 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_22607);
                                    var state_22642__$1 = state_22642;
                                    var statearr_22665_22701 = state_22642__$1;
                                    statearr_22665_22701[2] = inst_22614;
                                    statearr_22665_22701[1] = 16;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_22643 === 15) {
                                      var state_22642__$1 = state_22642;
                                      var statearr_22666_22702 = state_22642__$1;
                                      statearr_22666_22702[2] = null;
                                      statearr_22666_22702[1] = 16;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_22643 === 16) {
                                        var inst_22617 = state_22642[2];
                                        var inst_22618 = calc_state.call(null);
                                        var inst_22591 = inst_22618;
                                        var state_22642__$1 = function() {
                                          var statearr_22667 = state_22642;
                                          statearr_22667[10] = inst_22591;
                                          statearr_22667[18] = inst_22617;
                                          return statearr_22667;
                                        }();
                                        var statearr_22668_22703 = state_22642__$1;
                                        statearr_22668_22703[2] = null;
                                        statearr_22668_22703[1] = 5;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_22643 === 17) {
                                          var inst_22621 = state_22642[17];
                                          var state_22642__$1 = state_22642;
                                          var statearr_22669_22704 = state_22642__$1;
                                          statearr_22669_22704[2] = inst_22621;
                                          statearr_22669_22704[1] = 19;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_22643 === 18) {
                                            var inst_22607 = state_22642[16];
                                            var inst_22601 = state_22642[13];
                                            var inst_22602 = state_22642[14];
                                            var inst_22624 = cljs.core.empty_QMARK_.call(null, inst_22602);
                                            var inst_22625 = inst_22601.call(null, inst_22607);
                                            var inst_22626 = cljs.core.not.call(null, inst_22625);
                                            var inst_22627 = inst_22624 && inst_22626;
                                            var state_22642__$1 = state_22642;
                                            var statearr_22670_22705 = state_22642__$1;
                                            statearr_22670_22705[2] = inst_22627;
                                            statearr_22670_22705[1] = 19;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_22643 === 19) {
                                              var inst_22629 = state_22642[2];
                                              var state_22642__$1 = state_22642;
                                              if (cljs.core.truth_(inst_22629)) {
                                                var statearr_22671_22706 = state_22642__$1;
                                                statearr_22671_22706[1] = 20;
                                              } else {
                                                var statearr_22672_22707 = state_22642__$1;
                                                statearr_22672_22707[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_22643 === 20) {
                                                var inst_22606 = state_22642[15];
                                                var state_22642__$1 = state_22642;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22642__$1, 23, out, inst_22606);
                                              } else {
                                                if (state_val_22643 === 21) {
                                                  var state_22642__$1 = state_22642;
                                                  var statearr_22673_22708 = state_22642__$1;
                                                  statearr_22673_22708[2] = null;
                                                  statearr_22673_22708[1] = 22;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_22643 === 22) {
                                                    var inst_22599 = state_22642[12];
                                                    var inst_22635 = state_22642[2];
                                                    var inst_22591 = inst_22599;
                                                    var state_22642__$1 = function() {
                                                      var statearr_22674 = state_22642;
                                                      statearr_22674[10] = inst_22591;
                                                      statearr_22674[19] = inst_22635;
                                                      return statearr_22674;
                                                    }();
                                                    var statearr_22675_22709 = state_22642__$1;
                                                    statearr_22675_22709[2] = null;
                                                    statearr_22675_22709[1] = 5;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_22643 === 23) {
                                                      var inst_22632 = state_22642[2];
                                                      var state_22642__$1 = state_22642;
                                                      var statearr_22676_22710 = state_22642__$1;
                                                      statearr_22676_22710[2] = inst_22632;
                                                      statearr_22676_22710[1] = 22;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13816__auto__) {
        return function() {
          var state_machine__13817__auto__ = null;
          var state_machine__13817__auto____0 = function() {
            var statearr_22680 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_22680[0] = state_machine__13817__auto__;
            statearr_22680[1] = 1;
            return statearr_22680;
          };
          var state_machine__13817__auto____1 = function(state_22642) {
            while (true) {
              var ret_value__13818__auto__ = function() {
                try {
                  while (true) {
                    var result__13819__auto__ = switch__13816__auto__.call(null, state_22642);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13819__auto__;
                    }
                    break;
                  }
                } catch (e22681) {
                  if (e22681 instanceof Object) {
                    var ex__13820__auto__ = e22681;
                    var statearr_22682_22711 = state_22642;
                    statearr_22682_22711[5] = ex__13820__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22642);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e22681;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__22712 = state_22642;
                state_22642 = G__22712;
                continue;
              } else {
                return ret_value__13818__auto__;
              }
              break;
            }
          };
          state_machine__13817__auto__ = function(state_22642) {
            switch(arguments.length) {
              case 0:
                return state_machine__13817__auto____0.call(this);
              case 1:
                return state_machine__13817__auto____1.call(this, state_22642);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
          return state_machine__13817__auto__;
        }();
      }(switch__13816__auto__);
    }();
    var state__13888__auto__ = function() {
      var statearr_22683 = f__13887__auto__.call(null);
      statearr_22683[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___22684;
      return statearr_22683;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
  });
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj22714 = {};
  return obj22714;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__10250__auto__ = p;
    if (and__10250__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__10889__auto__ = p == null ? null : p;
    return function() {
      var or__10262__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__10250__auto__ = p;
    if (and__10250__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__10889__auto__ = p == null ? null : p;
    return function() {
      var or__10262__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__10250__auto__ = p;
      if (and__10250__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__10889__auto__ = p == null ? null : p;
      return function() {
        var or__10262__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__10250__auto__ = p;
      if (and__10250__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__10250__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__10889__auto__ = p == null ? null : p;
      return function() {
        var or__10262__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__10889__auto__)];
        if (or__10262__auto__) {
          return or__10262__auto__;
        } else {
          var or__10262__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__10262__auto____$1) {
            return or__10262__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__10262__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__10262__auto__)) {
          return or__10262__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__10262__auto__, mults) {
            return function(p1__22715_SHARP_) {
              if (cljs.core.truth_(p1__22715_SHARP_.call(null, topic))) {
                return p1__22715_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__22715_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__10262__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t22840 !== "undefined") {
      } else {
        cljs.core.async.t22840 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta22841) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta22841 = meta22841;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t22840.cljs$lang$type = true;
        cljs.core.async.t22840.cljs$lang$ctorStr = "cljs.core.async/t22840";
        cljs.core.async.t22840.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
            return cljs.core._write.call(null, writer__10830__auto__, "cljs.core.async/t22840");
          };
        }(mults, ensure_mult);
        cljs.core.async.t22840.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t22840.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t22840.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4092__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4092__auto__)) {
              var m = temp__4092__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t22840.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t22840.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t22840.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t22840.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t22840.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_22842) {
            var self__ = this;
            var _22842__$1 = this;
            return self__.meta22841;
          };
        }(mults, ensure_mult);
        cljs.core.async.t22840.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_22842, meta22841__$1) {
            var self__ = this;
            var _22842__$1 = this;
            return new cljs.core.async.t22840(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta22841__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t22840 = function(mults, ensure_mult) {
          return function __GT_t22840(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta22841) {
            return new cljs.core.async.t22840(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta22841);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t22840(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__13886__auto___22964 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_22916) {
          var state_val_22917 = state_22916[1];
          if (state_val_22917 === 1) {
            var state_22916__$1 = state_22916;
            var statearr_22918_22965 = state_22916__$1;
            statearr_22918_22965[2] = null;
            statearr_22918_22965[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_22917 === 2) {
              var state_22916__$1 = state_22916;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22916__$1, 4, ch);
            } else {
              if (state_val_22917 === 3) {
                var inst_22914 = state_22916[2];
                var state_22916__$1 = state_22916;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22916__$1, inst_22914);
              } else {
                if (state_val_22917 === 4) {
                  var inst_22845 = state_22916[7];
                  var inst_22845__$1 = state_22916[2];
                  var inst_22846 = inst_22845__$1 == null;
                  var state_22916__$1 = function() {
                    var statearr_22919 = state_22916;
                    statearr_22919[7] = inst_22845__$1;
                    return statearr_22919;
                  }();
                  if (cljs.core.truth_(inst_22846)) {
                    var statearr_22920_22966 = state_22916__$1;
                    statearr_22920_22966[1] = 5;
                  } else {
                    var statearr_22921_22967 = state_22916__$1;
                    statearr_22921_22967[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_22917 === 5) {
                    var inst_22852 = cljs.core.deref.call(null, mults);
                    var inst_22853 = cljs.core.vals.call(null, inst_22852);
                    var inst_22854 = cljs.core.seq.call(null, inst_22853);
                    var inst_22855 = inst_22854;
                    var inst_22856 = null;
                    var inst_22857 = 0;
                    var inst_22858 = 0;
                    var state_22916__$1 = function() {
                      var statearr_22922 = state_22916;
                      statearr_22922[8] = inst_22855;
                      statearr_22922[9] = inst_22857;
                      statearr_22922[10] = inst_22856;
                      statearr_22922[11] = inst_22858;
                      return statearr_22922;
                    }();
                    var statearr_22923_22968 = state_22916__$1;
                    statearr_22923_22968[2] = null;
                    statearr_22923_22968[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_22917 === 6) {
                      var inst_22845 = state_22916[7];
                      var inst_22895 = state_22916[12];
                      var inst_22893 = state_22916[13];
                      var inst_22893__$1 = topic_fn.call(null, inst_22845);
                      var inst_22894 = cljs.core.deref.call(null, mults);
                      var inst_22895__$1 = cljs.core.get.call(null, inst_22894, inst_22893__$1);
                      var state_22916__$1 = function() {
                        var statearr_22924 = state_22916;
                        statearr_22924[12] = inst_22895__$1;
                        statearr_22924[13] = inst_22893__$1;
                        return statearr_22924;
                      }();
                      if (cljs.core.truth_(inst_22895__$1)) {
                        var statearr_22925_22969 = state_22916__$1;
                        statearr_22925_22969[1] = 19;
                      } else {
                        var statearr_22926_22970 = state_22916__$1;
                        statearr_22926_22970[1] = 20;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_22917 === 7) {
                        var inst_22912 = state_22916[2];
                        var state_22916__$1 = state_22916;
                        var statearr_22927_22971 = state_22916__$1;
                        statearr_22927_22971[2] = inst_22912;
                        statearr_22927_22971[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_22917 === 8) {
                          var inst_22857 = state_22916[9];
                          var inst_22858 = state_22916[11];
                          var inst_22860 = inst_22858 < inst_22857;
                          var inst_22861 = inst_22860;
                          var state_22916__$1 = state_22916;
                          if (cljs.core.truth_(inst_22861)) {
                            var statearr_22931_22972 = state_22916__$1;
                            statearr_22931_22972[1] = 10;
                          } else {
                            var statearr_22932_22973 = state_22916__$1;
                            statearr_22932_22973[1] = 11;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_22917 === 9) {
                            var inst_22891 = state_22916[2];
                            var state_22916__$1 = state_22916;
                            var statearr_22933_22974 = state_22916__$1;
                            statearr_22933_22974[2] = inst_22891;
                            statearr_22933_22974[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_22917 === 10) {
                              var inst_22855 = state_22916[8];
                              var inst_22857 = state_22916[9];
                              var inst_22856 = state_22916[10];
                              var inst_22858 = state_22916[11];
                              var inst_22863 = cljs.core._nth.call(null, inst_22856, inst_22858);
                              var inst_22864 = cljs.core.async.muxch_STAR_.call(null, inst_22863);
                              var inst_22865 = cljs.core.async.close_BANG_.call(null, inst_22864);
                              var inst_22866 = inst_22858 + 1;
                              var tmp22928 = inst_22855;
                              var tmp22929 = inst_22857;
                              var tmp22930 = inst_22856;
                              var inst_22855__$1 = tmp22928;
                              var inst_22856__$1 = tmp22930;
                              var inst_22857__$1 = tmp22929;
                              var inst_22858__$1 = inst_22866;
                              var state_22916__$1 = function() {
                                var statearr_22934 = state_22916;
                                statearr_22934[14] = inst_22865;
                                statearr_22934[8] = inst_22855__$1;
                                statearr_22934[9] = inst_22857__$1;
                                statearr_22934[10] = inst_22856__$1;
                                statearr_22934[11] = inst_22858__$1;
                                return statearr_22934;
                              }();
                              var statearr_22935_22975 = state_22916__$1;
                              statearr_22935_22975[2] = null;
                              statearr_22935_22975[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_22917 === 11) {
                                var inst_22855 = state_22916[8];
                                var inst_22869 = state_22916[15];
                                var inst_22869__$1 = cljs.core.seq.call(null, inst_22855);
                                var state_22916__$1 = function() {
                                  var statearr_22936 = state_22916;
                                  statearr_22936[15] = inst_22869__$1;
                                  return statearr_22936;
                                }();
                                if (inst_22869__$1) {
                                  var statearr_22937_22976 = state_22916__$1;
                                  statearr_22937_22976[1] = 13;
                                } else {
                                  var statearr_22938_22977 = state_22916__$1;
                                  statearr_22938_22977[1] = 14;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_22917 === 12) {
                                  var inst_22889 = state_22916[2];
                                  var state_22916__$1 = state_22916;
                                  var statearr_22939_22978 = state_22916__$1;
                                  statearr_22939_22978[2] = inst_22889;
                                  statearr_22939_22978[1] = 9;
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_22917 === 13) {
                                    var inst_22869 = state_22916[15];
                                    var inst_22871 = cljs.core.chunked_seq_QMARK_.call(null, inst_22869);
                                    var state_22916__$1 = state_22916;
                                    if (inst_22871) {
                                      var statearr_22940_22979 = state_22916__$1;
                                      statearr_22940_22979[1] = 16;
                                    } else {
                                      var statearr_22941_22980 = state_22916__$1;
                                      statearr_22941_22980[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_22917 === 14) {
                                      var state_22916__$1 = state_22916;
                                      var statearr_22942_22981 = state_22916__$1;
                                      statearr_22942_22981[2] = null;
                                      statearr_22942_22981[1] = 15;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_22917 === 15) {
                                        var inst_22887 = state_22916[2];
                                        var state_22916__$1 = state_22916;
                                        var statearr_22943_22982 = state_22916__$1;
                                        statearr_22943_22982[2] = inst_22887;
                                        statearr_22943_22982[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_22917 === 16) {
                                          var inst_22869 = state_22916[15];
                                          var inst_22873 = cljs.core.chunk_first.call(null, inst_22869);
                                          var inst_22874 = cljs.core.chunk_rest.call(null, inst_22869);
                                          var inst_22875 = cljs.core.count.call(null, inst_22873);
                                          var inst_22855 = inst_22874;
                                          var inst_22856 = inst_22873;
                                          var inst_22857 = inst_22875;
                                          var inst_22858 = 0;
                                          var state_22916__$1 = function() {
                                            var statearr_22944 = state_22916;
                                            statearr_22944[8] = inst_22855;
                                            statearr_22944[9] = inst_22857;
                                            statearr_22944[10] = inst_22856;
                                            statearr_22944[11] = inst_22858;
                                            return statearr_22944;
                                          }();
                                          var statearr_22945_22983 = state_22916__$1;
                                          statearr_22945_22983[2] = null;
                                          statearr_22945_22983[1] = 8;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          if (state_val_22917 === 17) {
                                            var inst_22869 = state_22916[15];
                                            var inst_22878 = cljs.core.first.call(null, inst_22869);
                                            var inst_22879 = cljs.core.async.muxch_STAR_.call(null, inst_22878);
                                            var inst_22880 = cljs.core.async.close_BANG_.call(null, inst_22879);
                                            var inst_22881 = cljs.core.next.call(null, inst_22869);
                                            var inst_22855 = inst_22881;
                                            var inst_22856 = null;
                                            var inst_22857 = 0;
                                            var inst_22858 = 0;
                                            var state_22916__$1 = function() {
                                              var statearr_22946 = state_22916;
                                              statearr_22946[8] = inst_22855;
                                              statearr_22946[9] = inst_22857;
                                              statearr_22946[10] = inst_22856;
                                              statearr_22946[16] = inst_22880;
                                              statearr_22946[11] = inst_22858;
                                              return statearr_22946;
                                            }();
                                            var statearr_22947_22984 = state_22916__$1;
                                            statearr_22947_22984[2] = null;
                                            statearr_22947_22984[1] = 8;
                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                          } else {
                                            if (state_val_22917 === 18) {
                                              var inst_22884 = state_22916[2];
                                              var state_22916__$1 = state_22916;
                                              var statearr_22948_22985 = state_22916__$1;
                                              statearr_22948_22985[2] = inst_22884;
                                              statearr_22948_22985[1] = 15;
                                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                            } else {
                                              if (state_val_22917 === 19) {
                                                var state_22916__$1 = state_22916;
                                                var statearr_22949_22986 = state_22916__$1;
                                                statearr_22949_22986[2] = null;
                                                statearr_22949_22986[1] = 24;
                                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                              } else {
                                                if (state_val_22917 === 20) {
                                                  var state_22916__$1 = state_22916;
                                                  var statearr_22950_22987 = state_22916__$1;
                                                  statearr_22950_22987[2] = null;
                                                  statearr_22950_22987[1] = 21;
                                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                } else {
                                                  if (state_val_22917 === 21) {
                                                    var inst_22909 = state_22916[2];
                                                    var state_22916__$1 = function() {
                                                      var statearr_22951 = state_22916;
                                                      statearr_22951[17] = inst_22909;
                                                      return statearr_22951;
                                                    }();
                                                    var statearr_22952_22988 = state_22916__$1;
                                                    statearr_22952_22988[2] = null;
                                                    statearr_22952_22988[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                  } else {
                                                    if (state_val_22917 === 22) {
                                                      var inst_22906 = state_22916[2];
                                                      var state_22916__$1 = state_22916;
                                                      var statearr_22953_22989 = state_22916__$1;
                                                      statearr_22953_22989[2] = inst_22906;
                                                      statearr_22953_22989[1] = 21;
                                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                    } else {
                                                      if (state_val_22917 === 23) {
                                                        var inst_22893 = state_22916[13];
                                                        var inst_22897 = state_22916[2];
                                                        var inst_22898 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_22893);
                                                        var state_22916__$1 = function() {
                                                          var statearr_22954 = state_22916;
                                                          statearr_22954[18] = inst_22897;
                                                          return statearr_22954;
                                                        }();
                                                        var statearr_22955_22990 = state_22916__$1;
                                                        statearr_22955_22990[2] = inst_22898;
                                                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22916__$1);
                                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                      } else {
                                                        if (state_val_22917 === 24) {
                                                          var inst_22845 = state_22916[7];
                                                          var inst_22895 = state_22916[12];
                                                          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_22916, 23, Object, null, 22);
                                                          var inst_22902 = cljs.core.async.muxch_STAR_.call(null, inst_22895);
                                                          var state_22916__$1 = state_22916;
                                                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22916__$1, 25, inst_22902, inst_22845);
                                                        } else {
                                                          if (state_val_22917 === 25) {
                                                            var inst_22904 = state_22916[2];
                                                            var state_22916__$1 = state_22916;
                                                            var statearr_22956_22991 = state_22916__$1;
                                                            statearr_22956_22991[2] = inst_22904;
                                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22916__$1);
                                                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_22960 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_22960[0] = state_machine__13817__auto__;
              statearr_22960[1] = 1;
              return statearr_22960;
            };
            var state_machine__13817__auto____1 = function(state_22916) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_22916);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e22961) {
                    if (e22961 instanceof Object) {
                      var ex__13820__auto__ = e22961;
                      var statearr_22962_22992 = state_22916;
                      statearr_22962_22992[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22916);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e22961;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__22993 = state_22916;
                  state_22916 = G__22993;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_22916) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_22916);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_22963 = f__13887__auto__.call(null);
        statearr_22963[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___22964;
        return statearr_22963;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__13886__auto___23130 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_23100) {
          var state_val_23101 = state_23100[1];
          if (state_val_23101 === 1) {
            var state_23100__$1 = state_23100;
            var statearr_23102_23131 = state_23100__$1;
            statearr_23102_23131[2] = null;
            statearr_23102_23131[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23101 === 2) {
              var inst_23063 = cljs.core.reset_BANG_.call(null, dctr, cnt);
              var inst_23064 = 0;
              var state_23100__$1 = function() {
                var statearr_23103 = state_23100;
                statearr_23103[7] = inst_23064;
                statearr_23103[8] = inst_23063;
                return statearr_23103;
              }();
              var statearr_23104_23132 = state_23100__$1;
              statearr_23104_23132[2] = null;
              statearr_23104_23132[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_23101 === 3) {
                var inst_23098 = state_23100[2];
                var state_23100__$1 = state_23100;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23100__$1, inst_23098);
              } else {
                if (state_val_23101 === 4) {
                  var inst_23064 = state_23100[7];
                  var inst_23066 = inst_23064 < cnt;
                  var state_23100__$1 = state_23100;
                  if (cljs.core.truth_(inst_23066)) {
                    var statearr_23105_23133 = state_23100__$1;
                    statearr_23105_23133[1] = 6;
                  } else {
                    var statearr_23106_23134 = state_23100__$1;
                    statearr_23106_23134[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_23101 === 5) {
                    var inst_23084 = state_23100[2];
                    var state_23100__$1 = function() {
                      var statearr_23107 = state_23100;
                      statearr_23107[9] = inst_23084;
                      return statearr_23107;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23100__$1, 12, dchan);
                  } else {
                    if (state_val_23101 === 6) {
                      var state_23100__$1 = state_23100;
                      var statearr_23108_23135 = state_23100__$1;
                      statearr_23108_23135[2] = null;
                      statearr_23108_23135[1] = 11;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23101 === 7) {
                        var state_23100__$1 = state_23100;
                        var statearr_23109_23136 = state_23100__$1;
                        statearr_23109_23136[2] = null;
                        statearr_23109_23136[1] = 8;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23101 === 8) {
                          var inst_23082 = state_23100[2];
                          var state_23100__$1 = state_23100;
                          var statearr_23110_23137 = state_23100__$1;
                          statearr_23110_23137[2] = inst_23082;
                          statearr_23110_23137[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_23101 === 9) {
                            var inst_23064 = state_23100[7];
                            var inst_23077 = state_23100[2];
                            var inst_23078 = inst_23064 + 1;
                            var inst_23064__$1 = inst_23078;
                            var state_23100__$1 = function() {
                              var statearr_23111 = state_23100;
                              statearr_23111[10] = inst_23077;
                              statearr_23111[7] = inst_23064__$1;
                              return statearr_23111;
                            }();
                            var statearr_23112_23138 = state_23100__$1;
                            statearr_23112_23138[2] = null;
                            statearr_23112_23138[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_23101 === 10) {
                              var inst_23068 = state_23100[2];
                              var inst_23069 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                              var state_23100__$1 = function() {
                                var statearr_23113 = state_23100;
                                statearr_23113[11] = inst_23068;
                                return statearr_23113;
                              }();
                              var statearr_23114_23139 = state_23100__$1;
                              statearr_23114_23139[2] = inst_23069;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23100__$1);
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23101 === 11) {
                                var inst_23064 = state_23100[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_23100, 10, Object, null, 9);
                                var inst_23073 = chs__$1.call(null, inst_23064);
                                var inst_23074 = done.call(null, inst_23064);
                                var inst_23075 = cljs.core.async.take_BANG_.call(null, inst_23073, inst_23074);
                                var state_23100__$1 = state_23100;
                                var statearr_23115_23140 = state_23100__$1;
                                statearr_23115_23140[2] = inst_23075;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23100__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_23101 === 12) {
                                  var inst_23086 = state_23100[12];
                                  var inst_23086__$1 = state_23100[2];
                                  var inst_23087 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_23086__$1);
                                  var state_23100__$1 = function() {
                                    var statearr_23116 = state_23100;
                                    statearr_23116[12] = inst_23086__$1;
                                    return statearr_23116;
                                  }();
                                  if (cljs.core.truth_(inst_23087)) {
                                    var statearr_23117_23141 = state_23100__$1;
                                    statearr_23117_23141[1] = 13;
                                  } else {
                                    var statearr_23118_23142 = state_23100__$1;
                                    statearr_23118_23142[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                } else {
                                  if (state_val_23101 === 13) {
                                    var inst_23089 = cljs.core.async.close_BANG_.call(null, out);
                                    var state_23100__$1 = state_23100;
                                    var statearr_23119_23143 = state_23100__$1;
                                    statearr_23119_23143[2] = inst_23089;
                                    statearr_23119_23143[1] = 15;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_23101 === 14) {
                                      var inst_23086 = state_23100[12];
                                      var inst_23091 = cljs.core.apply.call(null, f, inst_23086);
                                      var state_23100__$1 = state_23100;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23100__$1, 16, out, inst_23091);
                                    } else {
                                      if (state_val_23101 === 15) {
                                        var inst_23096 = state_23100[2];
                                        var state_23100__$1 = state_23100;
                                        var statearr_23120_23144 = state_23100__$1;
                                        statearr_23120_23144[2] = inst_23096;
                                        statearr_23120_23144[1] = 3;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        if (state_val_23101 === 16) {
                                          var inst_23093 = state_23100[2];
                                          var state_23100__$1 = function() {
                                            var statearr_23121 = state_23100;
                                            statearr_23121[13] = inst_23093;
                                            return statearr_23121;
                                          }();
                                          var statearr_23122_23145 = state_23100__$1;
                                          statearr_23122_23145[2] = null;
                                          statearr_23122_23145[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_23126 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_23126[0] = state_machine__13817__auto__;
              statearr_23126[1] = 1;
              return statearr_23126;
            };
            var state_machine__13817__auto____1 = function(state_23100) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_23100);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e23127) {
                    if (e23127 instanceof Object) {
                      var ex__13820__auto__ = e23127;
                      var statearr_23128_23146 = state_23100;
                      statearr_23128_23146[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23100);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23127;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23147 = state_23100;
                  state_23100 = G__23147;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_23100) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_23100);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_23129 = f__13887__auto__.call(null);
        statearr_23129[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___23130;
        return statearr_23129;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13886__auto___23255 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_23231) {
          var state_val_23232 = state_23231[1];
          if (state_val_23232 === 1) {
            var inst_23202 = cljs.core.vec.call(null, chs);
            var inst_23203 = inst_23202;
            var state_23231__$1 = function() {
              var statearr_23233 = state_23231;
              statearr_23233[7] = inst_23203;
              return statearr_23233;
            }();
            var statearr_23234_23256 = state_23231__$1;
            statearr_23234_23256[2] = null;
            statearr_23234_23256[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23232 === 2) {
              var inst_23203 = state_23231[7];
              var inst_23205 = cljs.core.count.call(null, inst_23203);
              var inst_23206 = inst_23205 > 0;
              var state_23231__$1 = state_23231;
              if (cljs.core.truth_(inst_23206)) {
                var statearr_23235_23257 = state_23231__$1;
                statearr_23235_23257[1] = 4;
              } else {
                var statearr_23236_23258 = state_23231__$1;
                statearr_23236_23258[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_23232 === 3) {
                var inst_23229 = state_23231[2];
                var state_23231__$1 = state_23231;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23231__$1, inst_23229);
              } else {
                if (state_val_23232 === 4) {
                  var inst_23203 = state_23231[7];
                  var state_23231__$1 = state_23231;
                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_23231__$1, 7, inst_23203);
                } else {
                  if (state_val_23232 === 5) {
                    var inst_23225 = cljs.core.async.close_BANG_.call(null, out);
                    var state_23231__$1 = state_23231;
                    var statearr_23237_23259 = state_23231__$1;
                    statearr_23237_23259[2] = inst_23225;
                    statearr_23237_23259[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_23232 === 6) {
                      var inst_23227 = state_23231[2];
                      var state_23231__$1 = state_23231;
                      var statearr_23238_23260 = state_23231__$1;
                      statearr_23238_23260[2] = inst_23227;
                      statearr_23238_23260[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23232 === 7) {
                        var inst_23210 = state_23231[8];
                        var inst_23211 = state_23231[9];
                        var inst_23210__$1 = state_23231[2];
                        var inst_23211__$1 = cljs.core.nth.call(null, inst_23210__$1, 0, null);
                        var inst_23212 = cljs.core.nth.call(null, inst_23210__$1, 1, null);
                        var inst_23213 = inst_23211__$1 == null;
                        var state_23231__$1 = function() {
                          var statearr_23239 = state_23231;
                          statearr_23239[8] = inst_23210__$1;
                          statearr_23239[10] = inst_23212;
                          statearr_23239[9] = inst_23211__$1;
                          return statearr_23239;
                        }();
                        if (cljs.core.truth_(inst_23213)) {
                          var statearr_23240_23261 = state_23231__$1;
                          statearr_23240_23261[1] = 8;
                        } else {
                          var statearr_23241_23262 = state_23231__$1;
                          statearr_23241_23262[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23232 === 8) {
                          var inst_23203 = state_23231[7];
                          var inst_23210 = state_23231[8];
                          var inst_23212 = state_23231[10];
                          var inst_23211 = state_23231[9];
                          var inst_23215 = function() {
                            var c = inst_23212;
                            var v = inst_23211;
                            var vec__23208 = inst_23210;
                            var cs = inst_23203;
                            return function(c, v, vec__23208, cs, inst_23203, inst_23210, inst_23212, inst_23211, state_val_23232) {
                              return function(p1__23148_SHARP_) {
                                return cljs.core.not_EQ_.call(null, c, p1__23148_SHARP_);
                              };
                            }(c, v, vec__23208, cs, inst_23203, inst_23210, inst_23212, inst_23211, state_val_23232);
                          }();
                          var inst_23216 = cljs.core.filterv.call(null, inst_23215, inst_23203);
                          var inst_23203__$1 = inst_23216;
                          var state_23231__$1 = function() {
                            var statearr_23242 = state_23231;
                            statearr_23242[7] = inst_23203__$1;
                            return statearr_23242;
                          }();
                          var statearr_23243_23263 = state_23231__$1;
                          statearr_23243_23263[2] = null;
                          statearr_23243_23263[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_23232 === 9) {
                            var inst_23211 = state_23231[9];
                            var state_23231__$1 = state_23231;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23231__$1, 11, out, inst_23211);
                          } else {
                            if (state_val_23232 === 10) {
                              var inst_23223 = state_23231[2];
                              var state_23231__$1 = state_23231;
                              var statearr_23245_23264 = state_23231__$1;
                              statearr_23245_23264[2] = inst_23223;
                              statearr_23245_23264[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23232 === 11) {
                                var inst_23203 = state_23231[7];
                                var inst_23220 = state_23231[2];
                                var tmp23244 = inst_23203;
                                var inst_23203__$1 = tmp23244;
                                var state_23231__$1 = function() {
                                  var statearr_23246 = state_23231;
                                  statearr_23246[7] = inst_23203__$1;
                                  statearr_23246[11] = inst_23220;
                                  return statearr_23246;
                                }();
                                var statearr_23247_23265 = state_23231__$1;
                                statearr_23247_23265[2] = null;
                                statearr_23247_23265[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_23251 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_23251[0] = state_machine__13817__auto__;
              statearr_23251[1] = 1;
              return statearr_23251;
            };
            var state_machine__13817__auto____1 = function(state_23231) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_23231);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e23252) {
                    if (e23252 instanceof Object) {
                      var ex__13820__auto__ = e23252;
                      var statearr_23253_23266 = state_23231;
                      statearr_23253_23266[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23231);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23252;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23267 = state_23231;
                  state_23231 = G__23267;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_23231) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_23231);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_23254 = f__13887__auto__.call(null);
        statearr_23254[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___23255;
        return statearr_23254;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13886__auto___23360 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_23337) {
          var state_val_23338 = state_23337[1];
          if (state_val_23338 === 1) {
            var inst_23314 = 0;
            var state_23337__$1 = function() {
              var statearr_23339 = state_23337;
              statearr_23339[7] = inst_23314;
              return statearr_23339;
            }();
            var statearr_23340_23361 = state_23337__$1;
            statearr_23340_23361[2] = null;
            statearr_23340_23361[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23338 === 2) {
              var inst_23314 = state_23337[7];
              var inst_23316 = inst_23314 < n;
              var state_23337__$1 = state_23337;
              if (cljs.core.truth_(inst_23316)) {
                var statearr_23341_23362 = state_23337__$1;
                statearr_23341_23362[1] = 4;
              } else {
                var statearr_23342_23363 = state_23337__$1;
                statearr_23342_23363[1] = 5;
              }
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_23338 === 3) {
                var inst_23334 = state_23337[2];
                var inst_23335 = cljs.core.async.close_BANG_.call(null, out);
                var state_23337__$1 = function() {
                  var statearr_23343 = state_23337;
                  statearr_23343[8] = inst_23334;
                  return statearr_23343;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23337__$1, inst_23335);
              } else {
                if (state_val_23338 === 4) {
                  var state_23337__$1 = state_23337;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23337__$1, 7, ch);
                } else {
                  if (state_val_23338 === 5) {
                    var state_23337__$1 = state_23337;
                    var statearr_23344_23364 = state_23337__$1;
                    statearr_23344_23364[2] = null;
                    statearr_23344_23364[1] = 6;
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_23338 === 6) {
                      var inst_23332 = state_23337[2];
                      var state_23337__$1 = state_23337;
                      var statearr_23345_23365 = state_23337__$1;
                      statearr_23345_23365[2] = inst_23332;
                      statearr_23345_23365[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23338 === 7) {
                        var inst_23319 = state_23337[9];
                        var inst_23319__$1 = state_23337[2];
                        var inst_23320 = inst_23319__$1 == null;
                        var inst_23321 = cljs.core.not.call(null, inst_23320);
                        var state_23337__$1 = function() {
                          var statearr_23346 = state_23337;
                          statearr_23346[9] = inst_23319__$1;
                          return statearr_23346;
                        }();
                        if (inst_23321) {
                          var statearr_23347_23366 = state_23337__$1;
                          statearr_23347_23366[1] = 8;
                        } else {
                          var statearr_23348_23367 = state_23337__$1;
                          statearr_23348_23367[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23338 === 8) {
                          var inst_23319 = state_23337[9];
                          var state_23337__$1 = state_23337;
                          return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23337__$1, 11, out, inst_23319);
                        } else {
                          if (state_val_23338 === 9) {
                            var state_23337__$1 = state_23337;
                            var statearr_23349_23368 = state_23337__$1;
                            statearr_23349_23368[2] = null;
                            statearr_23349_23368[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                          } else {
                            if (state_val_23338 === 10) {
                              var inst_23329 = state_23337[2];
                              var state_23337__$1 = state_23337;
                              var statearr_23350_23369 = state_23337__$1;
                              statearr_23350_23369[2] = inst_23329;
                              statearr_23350_23369[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23338 === 11) {
                                var inst_23314 = state_23337[7];
                                var inst_23324 = state_23337[2];
                                var inst_23325 = inst_23314 + 1;
                                var inst_23314__$1 = inst_23325;
                                var state_23337__$1 = function() {
                                  var statearr_23351 = state_23337;
                                  statearr_23351[10] = inst_23324;
                                  statearr_23351[7] = inst_23314__$1;
                                  return statearr_23351;
                                }();
                                var statearr_23352_23370 = state_23337__$1;
                                statearr_23352_23370[2] = null;
                                statearr_23352_23370[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_23356 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_23356[0] = state_machine__13817__auto__;
              statearr_23356[1] = 1;
              return statearr_23356;
            };
            var state_machine__13817__auto____1 = function(state_23337) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_23337);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e23357) {
                    if (e23357 instanceof Object) {
                      var ex__13820__auto__ = e23357;
                      var statearr_23358_23371 = state_23337;
                      statearr_23358_23371[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23337);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23357;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23372 = state_23337;
                  state_23337 = G__23372;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_23337) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_23337);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_23359 = f__13887__auto__.call(null);
        statearr_23359[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___23360;
        return statearr_23359;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13886__auto___23469 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_23444) {
          var state_val_23445 = state_23444[1];
          if (state_val_23445 === 1) {
            var inst_23421 = null;
            var state_23444__$1 = function() {
              var statearr_23446 = state_23444;
              statearr_23446[7] = inst_23421;
              return statearr_23446;
            }();
            var statearr_23447_23470 = state_23444__$1;
            statearr_23447_23470[2] = null;
            statearr_23447_23470[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23445 === 2) {
              var state_23444__$1 = state_23444;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23444__$1, 4, ch);
            } else {
              if (state_val_23445 === 3) {
                var inst_23441 = state_23444[2];
                var inst_23442 = cljs.core.async.close_BANG_.call(null, out);
                var state_23444__$1 = function() {
                  var statearr_23448 = state_23444;
                  statearr_23448[8] = inst_23441;
                  return statearr_23448;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23444__$1, inst_23442);
              } else {
                if (state_val_23445 === 4) {
                  var inst_23424 = state_23444[9];
                  var inst_23424__$1 = state_23444[2];
                  var inst_23425 = inst_23424__$1 == null;
                  var inst_23426 = cljs.core.not.call(null, inst_23425);
                  var state_23444__$1 = function() {
                    var statearr_23449 = state_23444;
                    statearr_23449[9] = inst_23424__$1;
                    return statearr_23449;
                  }();
                  if (inst_23426) {
                    var statearr_23450_23471 = state_23444__$1;
                    statearr_23450_23471[1] = 5;
                  } else {
                    var statearr_23451_23472 = state_23444__$1;
                    statearr_23451_23472[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_23445 === 5) {
                    var inst_23424 = state_23444[9];
                    var inst_23421 = state_23444[7];
                    var inst_23428 = cljs.core._EQ_.call(null, inst_23424, inst_23421);
                    var state_23444__$1 = state_23444;
                    if (inst_23428) {
                      var statearr_23452_23473 = state_23444__$1;
                      statearr_23452_23473[1] = 8;
                    } else {
                      var statearr_23453_23474 = state_23444__$1;
                      statearr_23453_23474[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_23445 === 6) {
                      var state_23444__$1 = state_23444;
                      var statearr_23455_23475 = state_23444__$1;
                      statearr_23455_23475[2] = null;
                      statearr_23455_23475[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23445 === 7) {
                        var inst_23439 = state_23444[2];
                        var state_23444__$1 = state_23444;
                        var statearr_23456_23476 = state_23444__$1;
                        statearr_23456_23476[2] = inst_23439;
                        statearr_23456_23476[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23445 === 8) {
                          var inst_23421 = state_23444[7];
                          var tmp23454 = inst_23421;
                          var inst_23421__$1 = tmp23454;
                          var state_23444__$1 = function() {
                            var statearr_23457 = state_23444;
                            statearr_23457[7] = inst_23421__$1;
                            return statearr_23457;
                          }();
                          var statearr_23458_23477 = state_23444__$1;
                          statearr_23458_23477[2] = null;
                          statearr_23458_23477[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_23445 === 9) {
                            var inst_23424 = state_23444[9];
                            var state_23444__$1 = state_23444;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23444__$1, 11, out, inst_23424);
                          } else {
                            if (state_val_23445 === 10) {
                              var inst_23436 = state_23444[2];
                              var state_23444__$1 = state_23444;
                              var statearr_23459_23478 = state_23444__$1;
                              statearr_23459_23478[2] = inst_23436;
                              statearr_23459_23478[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23445 === 11) {
                                var inst_23424 = state_23444[9];
                                var inst_23433 = state_23444[2];
                                var inst_23421 = inst_23424;
                                var state_23444__$1 = function() {
                                  var statearr_23460 = state_23444;
                                  statearr_23460[10] = inst_23433;
                                  statearr_23460[7] = inst_23421;
                                  return statearr_23460;
                                }();
                                var statearr_23461_23479 = state_23444__$1;
                                statearr_23461_23479[2] = null;
                                statearr_23461_23479[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_23465 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_23465[0] = state_machine__13817__auto__;
              statearr_23465[1] = 1;
              return statearr_23465;
            };
            var state_machine__13817__auto____1 = function(state_23444) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_23444);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e23466) {
                    if (e23466 instanceof Object) {
                      var ex__13820__auto__ = e23466;
                      var statearr_23467_23480 = state_23444;
                      statearr_23467_23480[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23444);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23466;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23481 = state_23444;
                  state_23444 = G__23481;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_23444) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_23444);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_23468 = f__13887__auto__.call(null);
        statearr_23468[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___23469;
        return statearr_23468;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13886__auto___23616 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_23586) {
          var state_val_23587 = state_23586[1];
          if (state_val_23587 === 1) {
            var inst_23549 = new Array(n);
            var inst_23550 = inst_23549;
            var inst_23551 = 0;
            var state_23586__$1 = function() {
              var statearr_23588 = state_23586;
              statearr_23588[7] = inst_23550;
              statearr_23588[8] = inst_23551;
              return statearr_23588;
            }();
            var statearr_23589_23617 = state_23586__$1;
            statearr_23589_23617[2] = null;
            statearr_23589_23617[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23587 === 2) {
              var state_23586__$1 = state_23586;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23586__$1, 4, ch);
            } else {
              if (state_val_23587 === 3) {
                var inst_23584 = state_23586[2];
                var state_23586__$1 = state_23586;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23586__$1, inst_23584);
              } else {
                if (state_val_23587 === 4) {
                  var inst_23554 = state_23586[9];
                  var inst_23554__$1 = state_23586[2];
                  var inst_23555 = inst_23554__$1 == null;
                  var inst_23556 = cljs.core.not.call(null, inst_23555);
                  var state_23586__$1 = function() {
                    var statearr_23590 = state_23586;
                    statearr_23590[9] = inst_23554__$1;
                    return statearr_23590;
                  }();
                  if (inst_23556) {
                    var statearr_23591_23618 = state_23586__$1;
                    statearr_23591_23618[1] = 5;
                  } else {
                    var statearr_23592_23619 = state_23586__$1;
                    statearr_23592_23619[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_23587 === 5) {
                    var inst_23550 = state_23586[7];
                    var inst_23551 = state_23586[8];
                    var inst_23559 = state_23586[10];
                    var inst_23554 = state_23586[9];
                    var inst_23558 = inst_23550[inst_23551] = inst_23554;
                    var inst_23559__$1 = inst_23551 + 1;
                    var inst_23560 = inst_23559__$1 < n;
                    var state_23586__$1 = function() {
                      var statearr_23593 = state_23586;
                      statearr_23593[11] = inst_23558;
                      statearr_23593[10] = inst_23559__$1;
                      return statearr_23593;
                    }();
                    if (cljs.core.truth_(inst_23560)) {
                      var statearr_23594_23620 = state_23586__$1;
                      statearr_23594_23620[1] = 8;
                    } else {
                      var statearr_23595_23621 = state_23586__$1;
                      statearr_23595_23621[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_23587 === 6) {
                      var inst_23551 = state_23586[8];
                      var inst_23572 = inst_23551 > 0;
                      var state_23586__$1 = state_23586;
                      if (cljs.core.truth_(inst_23572)) {
                        var statearr_23597_23622 = state_23586__$1;
                        statearr_23597_23622[1] = 12;
                      } else {
                        var statearr_23598_23623 = state_23586__$1;
                        statearr_23598_23623[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23587 === 7) {
                        var inst_23582 = state_23586[2];
                        var state_23586__$1 = state_23586;
                        var statearr_23599_23624 = state_23586__$1;
                        statearr_23599_23624[2] = inst_23582;
                        statearr_23599_23624[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23587 === 8) {
                          var inst_23550 = state_23586[7];
                          var inst_23559 = state_23586[10];
                          var tmp23596 = inst_23550;
                          var inst_23550__$1 = tmp23596;
                          var inst_23551 = inst_23559;
                          var state_23586__$1 = function() {
                            var statearr_23600 = state_23586;
                            statearr_23600[7] = inst_23550__$1;
                            statearr_23600[8] = inst_23551;
                            return statearr_23600;
                          }();
                          var statearr_23601_23625 = state_23586__$1;
                          statearr_23601_23625[2] = null;
                          statearr_23601_23625[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_23587 === 9) {
                            var inst_23550 = state_23586[7];
                            var inst_23564 = cljs.core.vec.call(null, inst_23550);
                            var state_23586__$1 = state_23586;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23586__$1, 11, out, inst_23564);
                          } else {
                            if (state_val_23587 === 10) {
                              var inst_23570 = state_23586[2];
                              var state_23586__$1 = state_23586;
                              var statearr_23602_23626 = state_23586__$1;
                              statearr_23602_23626[2] = inst_23570;
                              statearr_23602_23626[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23587 === 11) {
                                var inst_23566 = state_23586[2];
                                var inst_23567 = new Array(n);
                                var inst_23550 = inst_23567;
                                var inst_23551 = 0;
                                var state_23586__$1 = function() {
                                  var statearr_23603 = state_23586;
                                  statearr_23603[7] = inst_23550;
                                  statearr_23603[8] = inst_23551;
                                  statearr_23603[12] = inst_23566;
                                  return statearr_23603;
                                }();
                                var statearr_23604_23627 = state_23586__$1;
                                statearr_23604_23627[2] = null;
                                statearr_23604_23627[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_23587 === 12) {
                                  var inst_23550 = state_23586[7];
                                  var inst_23574 = cljs.core.vec.call(null, inst_23550);
                                  var state_23586__$1 = state_23586;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23586__$1, 15, out, inst_23574);
                                } else {
                                  if (state_val_23587 === 13) {
                                    var state_23586__$1 = state_23586;
                                    var statearr_23605_23628 = state_23586__$1;
                                    statearr_23605_23628[2] = null;
                                    statearr_23605_23628[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_23587 === 14) {
                                      var inst_23579 = state_23586[2];
                                      var inst_23580 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_23586__$1 = function() {
                                        var statearr_23606 = state_23586;
                                        statearr_23606[13] = inst_23579;
                                        return statearr_23606;
                                      }();
                                      var statearr_23607_23629 = state_23586__$1;
                                      statearr_23607_23629[2] = inst_23580;
                                      statearr_23607_23629[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_23587 === 15) {
                                        var inst_23576 = state_23586[2];
                                        var state_23586__$1 = state_23586;
                                        var statearr_23608_23630 = state_23586__$1;
                                        statearr_23608_23630[2] = inst_23576;
                                        statearr_23608_23630[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_23612 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_23612[0] = state_machine__13817__auto__;
              statearr_23612[1] = 1;
              return statearr_23612;
            };
            var state_machine__13817__auto____1 = function(state_23586) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_23586);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e23613) {
                    if (e23613 instanceof Object) {
                      var ex__13820__auto__ = e23613;
                      var statearr_23614_23631 = state_23586;
                      statearr_23614_23631[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23586);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23613;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23632 = state_23586;
                  state_23586 = G__23632;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_23586) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_23586);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_23615 = f__13887__auto__.call(null);
        statearr_23615[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___23616;
        return statearr_23615;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__13886__auto___23775 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function() {
      var f__13887__auto__ = function() {
        var switch__13816__auto__ = function(state_23745) {
          var state_val_23746 = state_23745[1];
          if (state_val_23746 === 1) {
            var inst_23704 = [];
            var inst_23705 = inst_23704;
            var inst_23706 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538);
            var state_23745__$1 = function() {
              var statearr_23747 = state_23745;
              statearr_23747[7] = inst_23706;
              statearr_23747[8] = inst_23705;
              return statearr_23747;
            }();
            var statearr_23748_23776 = state_23745__$1;
            statearr_23748_23776[2] = null;
            statearr_23748_23776[1] = 2;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_23746 === 2) {
              var state_23745__$1 = state_23745;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23745__$1, 4, ch);
            } else {
              if (state_val_23746 === 3) {
                var inst_23743 = state_23745[2];
                var state_23745__$1 = state_23745;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23745__$1, inst_23743);
              } else {
                if (state_val_23746 === 4) {
                  var inst_23709 = state_23745[9];
                  var inst_23709__$1 = state_23745[2];
                  var inst_23710 = inst_23709__$1 == null;
                  var inst_23711 = cljs.core.not.call(null, inst_23710);
                  var state_23745__$1 = function() {
                    var statearr_23749 = state_23745;
                    statearr_23749[9] = inst_23709__$1;
                    return statearr_23749;
                  }();
                  if (inst_23711) {
                    var statearr_23750_23777 = state_23745__$1;
                    statearr_23750_23777[1] = 5;
                  } else {
                    var statearr_23751_23778 = state_23745__$1;
                    statearr_23751_23778[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                } else {
                  if (state_val_23746 === 5) {
                    var inst_23713 = state_23745[10];
                    var inst_23706 = state_23745[7];
                    var inst_23709 = state_23745[9];
                    var inst_23713__$1 = f.call(null, inst_23709);
                    var inst_23714 = cljs.core._EQ_.call(null, inst_23713__$1, inst_23706);
                    var inst_23715 = cljs.core.keyword_identical_QMARK_.call(null, inst_23706, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", 4382193538));
                    var inst_23716 = inst_23714 || inst_23715;
                    var state_23745__$1 = function() {
                      var statearr_23752 = state_23745;
                      statearr_23752[10] = inst_23713__$1;
                      return statearr_23752;
                    }();
                    if (cljs.core.truth_(inst_23716)) {
                      var statearr_23753_23779 = state_23745__$1;
                      statearr_23753_23779[1] = 8;
                    } else {
                      var statearr_23754_23780 = state_23745__$1;
                      statearr_23754_23780[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_23746 === 6) {
                      var inst_23705 = state_23745[8];
                      var inst_23730 = inst_23705.length;
                      var inst_23731 = inst_23730 > 0;
                      var state_23745__$1 = state_23745;
                      if (cljs.core.truth_(inst_23731)) {
                        var statearr_23756_23781 = state_23745__$1;
                        statearr_23756_23781[1] = 12;
                      } else {
                        var statearr_23757_23782 = state_23745__$1;
                        statearr_23757_23782[1] = 13;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_23746 === 7) {
                        var inst_23741 = state_23745[2];
                        var state_23745__$1 = state_23745;
                        var statearr_23758_23783 = state_23745__$1;
                        statearr_23758_23783[2] = inst_23741;
                        statearr_23758_23783[1] = 3;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        if (state_val_23746 === 8) {
                          var inst_23713 = state_23745[10];
                          var inst_23705 = state_23745[8];
                          var inst_23709 = state_23745[9];
                          var inst_23718 = inst_23705.push(inst_23709);
                          var tmp23755 = inst_23705;
                          var inst_23705__$1 = tmp23755;
                          var inst_23706 = inst_23713;
                          var state_23745__$1 = function() {
                            var statearr_23759 = state_23745;
                            statearr_23759[7] = inst_23706;
                            statearr_23759[8] = inst_23705__$1;
                            statearr_23759[11] = inst_23718;
                            return statearr_23759;
                          }();
                          var statearr_23760_23784 = state_23745__$1;
                          statearr_23760_23784[2] = null;
                          statearr_23760_23784[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                        } else {
                          if (state_val_23746 === 9) {
                            var inst_23705 = state_23745[8];
                            var inst_23721 = cljs.core.vec.call(null, inst_23705);
                            var state_23745__$1 = state_23745;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23745__$1, 11, out, inst_23721);
                          } else {
                            if (state_val_23746 === 10) {
                              var inst_23728 = state_23745[2];
                              var state_23745__$1 = state_23745;
                              var statearr_23761_23785 = state_23745__$1;
                              statearr_23761_23785[2] = inst_23728;
                              statearr_23761_23785[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                            } else {
                              if (state_val_23746 === 11) {
                                var inst_23713 = state_23745[10];
                                var inst_23709 = state_23745[9];
                                var inst_23723 = state_23745[2];
                                var inst_23724 = [];
                                var inst_23725 = inst_23724.push(inst_23709);
                                var inst_23705 = inst_23724;
                                var inst_23706 = inst_23713;
                                var state_23745__$1 = function() {
                                  var statearr_23762 = state_23745;
                                  statearr_23762[12] = inst_23725;
                                  statearr_23762[7] = inst_23706;
                                  statearr_23762[8] = inst_23705;
                                  statearr_23762[13] = inst_23723;
                                  return statearr_23762;
                                }();
                                var statearr_23763_23786 = state_23745__$1;
                                statearr_23763_23786[2] = null;
                                statearr_23763_23786[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                              } else {
                                if (state_val_23746 === 12) {
                                  var inst_23705 = state_23745[8];
                                  var inst_23733 = cljs.core.vec.call(null, inst_23705);
                                  var state_23745__$1 = state_23745;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23745__$1, 15, out, inst_23733);
                                } else {
                                  if (state_val_23746 === 13) {
                                    var state_23745__$1 = state_23745;
                                    var statearr_23764_23787 = state_23745__$1;
                                    statearr_23764_23787[2] = null;
                                    statearr_23764_23787[1] = 14;
                                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                  } else {
                                    if (state_val_23746 === 14) {
                                      var inst_23738 = state_23745[2];
                                      var inst_23739 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_23745__$1 = function() {
                                        var statearr_23765 = state_23745;
                                        statearr_23765[14] = inst_23738;
                                        return statearr_23765;
                                      }();
                                      var statearr_23766_23788 = state_23745__$1;
                                      statearr_23766_23788[2] = inst_23739;
                                      statearr_23766_23788[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                    } else {
                                      if (state_val_23746 === 15) {
                                        var inst_23735 = state_23745[2];
                                        var state_23745__$1 = state_23745;
                                        var statearr_23767_23789 = state_23745__$1;
                                        statearr_23767_23789[2] = inst_23735;
                                        statearr_23767_23789[1] = 14;
                                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        return function(switch__13816__auto__) {
          return function() {
            var state_machine__13817__auto__ = null;
            var state_machine__13817__auto____0 = function() {
              var statearr_23771 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_23771[0] = state_machine__13817__auto__;
              statearr_23771[1] = 1;
              return statearr_23771;
            };
            var state_machine__13817__auto____1 = function(state_23745) {
              while (true) {
                var ret_value__13818__auto__ = function() {
                  try {
                    while (true) {
                      var result__13819__auto__ = switch__13816__auto__.call(null, state_23745);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                        continue;
                      } else {
                        return result__13819__auto__;
                      }
                      break;
                    }
                  } catch (e23772) {
                    if (e23772 instanceof Object) {
                      var ex__13820__auto__ = e23772;
                      var statearr_23773_23790 = state_23745;
                      statearr_23773_23790[5] = ex__13820__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23745);
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        throw e23772;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                  var G__23791 = state_23745;
                  state_23745 = G__23791;
                  continue;
                } else {
                  return ret_value__13818__auto__;
                }
                break;
              }
            };
            state_machine__13817__auto__ = function(state_23745) {
              switch(arguments.length) {
                case 0:
                  return state_machine__13817__auto____0.call(this);
                case 1:
                  return state_machine__13817__auto____1.call(this, state_23745);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
            state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
            return state_machine__13817__auto__;
          }();
        }(switch__13816__auto__);
      }();
      var state__13888__auto__ = function() {
        var statearr_23774 = f__13887__auto__.call(null);
        statearr_23774[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto___23775;
        return statearr_23774;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
    });
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.array");
goog.require("goog.events");
goog.require("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = [];
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (!goog.isArray(type)) {
    goog.events.EventHandler.typeArray_[0] = (type);
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var key = (goog.events.listen(src, type[i], opt_fn || this, opt_capture || false, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var key = (goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this)));
    this.keys_.push(key);
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  return this.keys_.length;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || (this.handler_ || this));
    if (listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key);
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || (this.handler_ || this), this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0;
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.base(this);
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = request.xhrLite = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && (!request.getCompleted() && !request.hasReachedMaxRetries())) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || (xhrIo.isSuccess() || request.hasReachedMaxRetries())) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  var requests = this.requests_;
  goog.structs.forEach(requests, function(value, key) {
    value.dispose();
  });
  requests.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
  this.xhrLite = (xhrIo);
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  goog.Disposable.call(this);
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.inherits(goog.net.XhrManager.Request, goog.Disposable);
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrManager.Request.prototype.disposeInternal = function() {
  goog.net.XhrManager.Request.superClass_.disposeInternal.call(this);
  delete this.xhrEventCallback_;
  delete this.completeCallback_;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__24065 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__24065;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__24069 = cljs.core._EQ_;
    var expr__24070 = limit;
    if (cljs.core.truth_(pred__24069.call(null, 1, expr__24070))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__24069.call(null, 2, expr__24070))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__24072 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__24073 = limit__$1 - 1;
            var G__24074 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__24072;
            limit__$1 = G__24073;
            parts = G__24074;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__24075 = index - 1;
        index = G__24075;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___24076 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___24076)) {
        var replacement_24077 = temp__4090__auto___24076;
        buffer.append([cljs.core.str(replacement_24077)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__24078 = index + 1;
      index = G__24078;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj23963 = {};
  return obj23963;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__10250__auto__ = reader;
    if (and__10250__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__10889__auto__ = reader == null ? null : reader;
    return function() {
      var or__10262__auto__ = cljs.reader.read_char[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.reader.read_char["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__10250__auto__ = reader;
    if (and__10250__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__10889__auto__ = reader == null ? null : reader;
    return function() {
      var or__10262__auto__ = cljs.reader.unread[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.reader.unread["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__10829__auto__, writer__10830__auto__, opt__10831__auto__) {
  return cljs.core._write.call(null, writer__10830__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__10262__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__10262__auto__)) {
    return or__10262__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__23964) {
    var rdr = cljs.core.first(arglist__23964);
    var msg = cljs.core.rest(arglist__23964);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__10250__auto__ = !(ch === "#");
  if (and__10250__auto__) {
    var and__10250__auto____$1 = !(ch === "'");
    if (and__10250__auto____$1) {
      var and__10250__auto____$2 = !(ch === ":");
      if (and__10250__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__10250__auto____$2;
      }
    } else {
      return and__10250__auto____$1;
    }
  } else {
    return and__10250__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__23965 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__23966 = cljs.reader.read_char.call(null, rdr);
      sb = G__23965;
      ch = G__23966;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__23967 = cljs.reader.read_char.call(null, rdr);
      ch = G__23967;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__23968 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__23968;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__23969 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__23969;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__10262__auto__ = ch == null;
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__10262__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__23970 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__23971 = cljs.reader.read_char.call(null, reader);
      buffer = G__23970;
      ch = G__23971;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__23972 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__23973 = cljs.reader.read_char.call(null, reader);
        buffer = G__23972;
        ch = G__23973;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__23974 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__23975 = cljs.reader.read_char.call(null, reader);
            buffer = G__23974;
            ch = G__23975;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__23977 = o;
    if (G__23977) {
      var bit__10912__auto__ = G__23977.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__10912__auto__ || G__23977.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__23977.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__23977);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__23977);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__23978 = reader;
        var G__23979 = eof_is_error;
        var G__23980 = sentinel;
        var G__23981 = is_recursive;
        reader = G__23978;
        eof_is_error = G__23979;
        sentinel = G__23980;
        is_recursive = G__23981;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__23982 = cljs.reader.read_comment.call(null, reader, ch);
          var G__23983 = eof_is_error;
          var G__23984 = sentinel;
          var G__23985 = is_recursive;
          reader = G__23982;
          eof_is_error = G__23983;
          sentinel = G__23984;
          is_recursive = G__23985;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__23986 = reader;
              var G__23987 = eof_is_error;
              var G__23988 = sentinel;
              var G__23989 = is_recursive;
              reader = G__23986;
              eof_is_error = G__23987;
              sentinel = G__23988;
              is_recursive = G__23989;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__23990 = b.append("0");
            b = G__23990;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__23992 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__23992, 0, null);
  var years = cljs.core.nth.call(null, vec__23992, 1, null);
  var months = cljs.core.nth.call(null, vec__23992, 2, null);
  var days = cljs.core.nth.call(null, vec__23992, 3, null);
  var hours = cljs.core.nth.call(null, vec__23992, 4, null);
  var minutes = cljs.core.nth.call(null, vec__23992, 5, null);
  var seconds = cljs.core.nth.call(null, vec__23992, 6, null);
  var fraction = cljs.core.nth.call(null, vec__23992, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__23992, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__23992, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__23992, 10, null);
  var v = vec__23992;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__10262__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__10262__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__10262__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__10262__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__10262__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__10262__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__10262__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__10262__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__23994 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__23994, 0, null);
    var months = cljs.core.nth.call(null, vec__23994, 1, null);
    var days = cljs.core.nth.call(null, vec__23994, 2, null);
    var hours = cljs.core.nth.call(null, vec__23994, 3, null);
    var minutes = cljs.core.nth.call(null, vec__23994, 4, null);
    var seconds = cljs.core.nth.call(null, vec__23994, 5, null);
    var ms = cljs.core.nth.call(null, vec__23994, 6, null);
    var offset = cljs.core.nth.call(null, vec__23994, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__24007_24019 = cljs.core.seq.call(null, form);
    var chunk__24008_24020 = null;
    var count__24009_24021 = 0;
    var i__24010_24022 = 0;
    while (true) {
      if (i__24010_24022 < count__24009_24021) {
        var x_24023 = cljs.core._nth.call(null, chunk__24008_24020, i__24010_24022);
        arr.push(x_24023);
        var G__24024 = seq__24007_24019;
        var G__24025 = chunk__24008_24020;
        var G__24026 = count__24009_24021;
        var G__24027 = i__24010_24022 + 1;
        seq__24007_24019 = G__24024;
        chunk__24008_24020 = G__24025;
        count__24009_24021 = G__24026;
        i__24010_24022 = G__24027;
        continue;
      } else {
        var temp__4092__auto___24028 = cljs.core.seq.call(null, seq__24007_24019);
        if (temp__4092__auto___24028) {
          var seq__24007_24029__$1 = temp__4092__auto___24028;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__24007_24029__$1)) {
            var c__11010__auto___24030 = cljs.core.chunk_first.call(null, seq__24007_24029__$1);
            var G__24031 = cljs.core.chunk_rest.call(null, seq__24007_24029__$1);
            var G__24032 = c__11010__auto___24030;
            var G__24033 = cljs.core.count.call(null, c__11010__auto___24030);
            var G__24034 = 0;
            seq__24007_24019 = G__24031;
            chunk__24008_24020 = G__24032;
            count__24009_24021 = G__24033;
            i__24010_24022 = G__24034;
            continue;
          } else {
            var x_24035 = cljs.core.first.call(null, seq__24007_24029__$1);
            arr.push(x_24035);
            var G__24036 = cljs.core.next.call(null, seq__24007_24029__$1);
            var G__24037 = null;
            var G__24038 = 0;
            var G__24039 = 0;
            seq__24007_24019 = G__24036;
            chunk__24008_24020 = G__24037;
            count__24009_24021 = G__24038;
            i__24010_24022 = G__24039;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj24012 = {};
        return obj24012;
      }();
      var seq__24013_24040 = cljs.core.seq.call(null, form);
      var chunk__24014_24041 = null;
      var count__24015_24042 = 0;
      var i__24016_24043 = 0;
      while (true) {
        if (i__24016_24043 < count__24015_24042) {
          var vec__24017_24044 = cljs.core._nth.call(null, chunk__24014_24041, i__24016_24043);
          var k_24045 = cljs.core.nth.call(null, vec__24017_24044, 0, null);
          var v_24046 = cljs.core.nth.call(null, vec__24017_24044, 1, null);
          obj[cljs.core.name.call(null, k_24045)] = v_24046;
          var G__24047 = seq__24013_24040;
          var G__24048 = chunk__24014_24041;
          var G__24049 = count__24015_24042;
          var G__24050 = i__24016_24043 + 1;
          seq__24013_24040 = G__24047;
          chunk__24014_24041 = G__24048;
          count__24015_24042 = G__24049;
          i__24016_24043 = G__24050;
          continue;
        } else {
          var temp__4092__auto___24051 = cljs.core.seq.call(null, seq__24013_24040);
          if (temp__4092__auto___24051) {
            var seq__24013_24052__$1 = temp__4092__auto___24051;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__24013_24052__$1)) {
              var c__11010__auto___24053 = cljs.core.chunk_first.call(null, seq__24013_24052__$1);
              var G__24054 = cljs.core.chunk_rest.call(null, seq__24013_24052__$1);
              var G__24055 = c__11010__auto___24053;
              var G__24056 = cljs.core.count.call(null, c__11010__auto___24053);
              var G__24057 = 0;
              seq__24013_24040 = G__24054;
              chunk__24014_24041 = G__24055;
              count__24015_24042 = G__24056;
              i__24016_24043 = G__24057;
              continue;
            } else {
              var vec__24018_24058 = cljs.core.first.call(null, seq__24013_24052__$1);
              var k_24059 = cljs.core.nth.call(null, vec__24018_24058, 0, null);
              var v_24060 = cljs.core.nth.call(null, vec__24018_24058, 1, null);
              obj[cljs.core.name.call(null, k_24059)] = v_24060;
              var G__24061 = cljs.core.next.call(null, seq__24013_24052__$1);
              var G__24062 = null;
              var G__24063 = 0;
              var G__24064 = 0;
              seq__24013_24040 = G__24061;
              chunk__24014_24041 = G__24062;
              count__24015_24042 = G__24063;
              i__24016_24043 = G__24064;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.json.Serializer");
goog.require("goog.net.XhrManager");
goog.require("goog.Uri.QueryData");
goog.require("goog.events");
goog.require("goog.net.XhrManager");
goog.require("cljs.reader");
goog.require("goog.net.EventType");
goog.require("goog.structs");
goog.require("goog.Uri.QueryData");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("goog.structs");
goog.require("cljs.reader");
goog.require("goog.Uri");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIo");
goog.require("goog.events");
goog.require("goog.Uri");
ajax.core.AjaxImpl = function() {
  var obj23896 = {};
  return obj23896;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__10250__auto__ = this$;
    if (and__10250__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__10250__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__10889__auto__ = this$ == null ? null : this$;
    return function() {
      var or__10262__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__10889__auto__)];
      if (or__10262__auto__) {
        return or__10262__auto__;
      } else {
        var or__10262__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__10262__auto____$1) {
          return or__10262__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__23897) {
  var map__23898 = p__23897;
  var map__23898__$1 = cljs.core.seq_QMARK_.call(null, map__23898) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23898) : map__23898;
  var timeout = cljs.core.get.call(null, map__23898__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var this$__$1 = this;
  var G__23899 = this$__$1;
  goog.events.listen(G__23899, goog.net.EventType.COMPLETE, handler);
  G__23899.send(uri, method, body, headers, timeout);
  return G__23899;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__23900) {
  var map__23901 = p__23900;
  var map__23901__$1 = cljs.core.seq_QMARK_.call(null, map__23901) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23901) : map__23901;
  var max_retries = cljs.core.get.call(null, map__23901__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", 902021455));
  var priority = cljs.core.get.call(null, map__23901__$1, new cljs.core.Keyword(null, "priority", "priority", 4143410454));
  var timeout = cljs.core.get.call(null, map__23901__$1, new cljs.core.Keyword(null, "timeout", "timeout", 3994960083));
  var id = cljs.core.get.call(null, map__23901__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, headers, priority, handler, max_retries);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, xhrio.getResponseText());
};
ajax.core.edn_response_format = function edn_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", 3584325486), "EDN"], null);
};
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/edn"], null);
};
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.read_text = function read_text(xhrio) {
  return xhrio.getResponseText();
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function raw_response_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), ajax.core.read_text, new cljs.core.Keyword(null, "description", "description", 3584325486), "raw text"], null);
};
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", 1127304017), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400), "application/json"], null);
};
ajax.core.json_response_format = function json_response_format(p__23902) {
  var map__23904 = p__23902;
  var map__23904__$1 = cljs.core.seq_QMARK_.call(null, map__23904) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23904) : map__23904;
  var keywords_QMARK_ = cljs.core.get.call(null, map__23904__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 4346628423));
  var prefix = cljs.core.get.call(null, map__23904__$1, new cljs.core.Keyword(null, "prefix", "prefix", 4328760836));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), function read_json(xhrio) {
    var json = xhrio.getResponseJson(prefix);
    return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), keywords_QMARK_);
  }, new cljs.core.Keyword(null, "description", "description", 3584325486), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join("")], null);
};
ajax.core.get_default_format = function get_default_format(xhrio) {
  var ct = xhrio.getResponseHeader("Content-Type");
  var format = cljs.core.truth_(function() {
    var and__10250__auto__ = ct;
    if (cljs.core.truth_(and__10250__auto__)) {
      return ct.indexOf("json") >= 0;
    } else {
      return and__10250__auto__;
    }
  }()) ? ajax.core.json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY) : ajax.core.edn_response_format.call(null);
  return cljs.core.update_in.call(null, format, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "description", "description", 3584325486)], null), function(p1__23905_SHARP_) {
    return[cljs.core.str(p1__23905_SHARP_), cljs.core.str(" (default)")].join("");
  });
};
ajax.core.use_content_type = function use_content_type(format) {
  return cljs.core.dissoc.call(null, format, new cljs.core.Keyword(null, "write", "write", 1127304017));
};
ajax.core.codec = function codec(request_format, p__23906) {
  var map__23908 = p__23906;
  var map__23908__$1 = cljs.core.seq_QMARK_.call(null, map__23908) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23908) : map__23908;
  var response_format = map__23908__$1;
  var description = cljs.core.get.call(null, map__23908__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var read = cljs.core.get.call(null, map__23908__$1, new cljs.core.Keyword(null, "read", "read", 1017400584));
  return cljs.core.assoc.call(null, request_format, new cljs.core.Keyword(null, "read", "read", 1017400584), read, new cljs.core.Keyword(null, "description", "description", 3584325486), description);
};
ajax.core.get_format = function get_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1017400584), format, new cljs.core.Keyword(null, "description", "description", 3584325486), "custom"], null));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("unrecognized format: "), cljs.core.str(format)].join(""));
      } else {
        return null;
      }
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__23909, xhrio) {
  var map__23911 = p__23909;
  var map__23911__$1 = cljs.core.seq_QMARK_.call(null, map__23911) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23911) : map__23911;
  var description = cljs.core.get.call(null, map__23911__$1, new cljs.core.Keyword(null, "description", "description", 3584325486));
  var response = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "response", "response", 673580979), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), status_text, new cljs.core.Keyword(null, "is-parse-error", "is-parse-error", 4116943293), true, new cljs.core.Keyword(null, "original-text", "original-text", 2831108891), xhrio.getResponseText());
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "parse-error", "parse-error", 3528843744), parse_error);
  }
};
ajax.core.interpret_response = function interpret_response(format, response, get_default_format) {
  try {
    var xhrio = response.target;
    var status = xhrio.getStatus();
    var format__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format)) ? format : get_default_format.call(null, xhrio);
    var parse = (new cljs.core.Keyword(null, "read", "read", 1017400584)).cljs$core$IFn$_invoke$arity$1(format__$1);
    try {
      var response__$1 = parse.call(null, xhrio);
      if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response__$1], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), status, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), xhrio.getStatusText(), new cljs.core.Keyword(null, "response", "response", 673580979), response__$1], null)], null);
      }
    } catch (e23915) {
      if (e23915 instanceof Object) {
        var e = e23915;
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format__$1, xhrio)], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e23915;
        } else {
          return null;
        }
      }
    }
  } catch (e23914) {
    if (e23914 instanceof Object) {
      var e = e23914;
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", 4416389988), 0, new cljs.core.Keyword(null, "status-text", "status-text", 4371493274), e.message, new cljs.core.Keyword(null, "response", "response", 673580979), null], null)], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e23914;
      } else {
        return null;
      }
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.process_inputs = function process_inputs(uri, method, p__23916, p__23917) {
  var map__23921 = p__23916;
  var map__23921__$1 = cljs.core.seq_QMARK_.call(null, map__23921) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23921) : map__23921;
  var format = map__23921__$1;
  var content_type = cljs.core.get.call(null, map__23921__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
  var write = cljs.core.get.call(null, map__23921__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
  var map__23922 = p__23917;
  var map__23922__$1 = cljs.core.seq_QMARK_.call(null, map__23922) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23922) : map__23922;
  var headers = cljs.core.get.call(null, map__23922__$1, new cljs.core.Keyword(null, "headers", "headers", 1809212152));
  var params = cljs.core.get.call(null, map__23922__$1, new cljs.core.Keyword(null, "params", "params", 4313443576));
  if (cljs.core._EQ_.call(null, method, "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers], null);
  } else {
    var map__23923 = format;
    var map__23923__$1 = cljs.core.seq_QMARK_.call(null, map__23923) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23923) : map__23923;
    var content_type__$1 = cljs.core.get.call(null, map__23923__$1, new cljs.core.Keyword(null, "content-type", "content-type", 1799574400));
    var write__$1 = cljs.core.get.call(null, map__23923__$1, new cljs.core.Keyword(null, "write", "write", 1127304017));
    var body = write__$1.call(null, params);
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$1 = cljs.core.merge.call(null, function() {
      var or__10262__auto__ = headers;
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$1], null);
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.base_handler = function base_handler(format, p__23924) {
  var map__23926 = p__23924;
  var map__23926__$1 = cljs.core.seq_QMARK_.call(null, map__23926) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23926) : map__23926;
  var get_default_format = cljs.core.get.call(null, map__23926__$1, new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996));
  var handler = cljs.core.get.call(null, map__23926__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function(xhrio) {
    return handler.call(null, ajax.core.interpret_response.call(null, format, xhrio, function() {
      var or__10262__auto__ = get_default_format;
      if (cljs.core.truth_(or__10262__auto__)) {
        return or__10262__auto__;
      } else {
        return ajax.core.no_format;
      }
    }()));
  };
};
ajax.core.ajax_request = function() {
  var ajax_request = null;
  var ajax_request__3 = function(uri, method, opts) {
    return ajax_request.call(null, uri, method, opts, new goog.net.XhrIo);
  };
  var ajax_request__4 = function(uri, method, p__23927, js_ajax) {
    var map__23930 = p__23927;
    var map__23930__$1 = cljs.core.seq_QMARK_.call(null, map__23930) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23930) : map__23930;
    var opts = map__23930__$1;
    var format = cljs.core.get.call(null, map__23930__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
    var format__$1 = ajax.core.get_format.call(null, format);
    var method__$1 = ajax.core.normalize_method.call(null, method);
    var vec__23931 = ajax.core.process_inputs.call(null, uri, method__$1, format__$1, opts);
    var uri__$1 = cljs.core.nth.call(null, vec__23931, 0, null);
    var body = cljs.core.nth.call(null, vec__23931, 1, null);
    var headers = cljs.core.nth.call(null, vec__23931, 2, null);
    var handler = ajax.core.base_handler.call(null, format__$1, opts);
    return ajax.core._js_ajax_request.call(null, js_ajax, uri__$1, method__$1, body, cljs.core.clj__GT_js.call(null, headers), handler, opts);
  };
  ajax_request = function(uri, method, p__23927, js_ajax) {
    switch(arguments.length) {
      case 3:
        return ajax_request__3.call(this, uri, method, p__23927);
      case 4:
        return ajax_request__4.call(this, uri, method, p__23927, js_ajax);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ajax_request.cljs$core$IFn$_invoke$arity$3 = ajax_request__3;
  ajax_request.cljs$core$IFn$_invoke$arity$4 = ajax_request__4;
  return ajax_request;
}();
ajax.core.json_format = function json_format(format_params) {
  return ajax.core.codec.call(null, ajax.core.json_request_format.call(null), ajax.core.json_response_format.call(null, format_params));
};
ajax.core.edn_format = function edn_format() {
  return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), ajax.core.edn_response_format.call(null));
};
ajax.core.raw_format = function raw_format() {
  return ajax.core.codec.call(null, ajax.core.url_request_format.call(null), ajax.core.raw_response_format.call(null));
};
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  var G__23933 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "url", "url", 1014020321), G__23933)) {
    return ajax.core.url_request_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__23933)) {
      return ajax.core.url_request_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__23933)) {
        return ajax.core.edn_request_format.call(null);
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__23933)) {
          return ajax.core.json_request_format.call(null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  var G__23935 = format;
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "raw", "raw", 1014016922), G__23935)) {
    return ajax.core.raw_response_format.call(null);
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "edn", "edn", 1014004513), G__23935)) {
      return ajax.core.edn_response_format.call(null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "json", "json", 1017176154), G__23935)) {
        return ajax.core.json_response_format.call(null, format_params);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return null;
        } else {
          return null;
        }
      }
    }
  }
};
ajax.core.transform_handler = function transform_handler(p__23936) {
  var map__23941 = p__23936;
  var map__23941__$1 = cljs.core.seq_QMARK_.call(null, map__23941) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23941) : map__23941;
  var finally$ = cljs.core.get.call(null, map__23941__$1, new cljs.core.Keyword(null, "finally", "finally", 4455611637));
  var error_handler = cljs.core.get.call(null, map__23941__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671));
  var handler = cljs.core.get.call(null, map__23941__$1, new cljs.core.Keyword(null, "handler", "handler", 1706707644));
  return function easy_handler(p__23942) {
    var vec__23944 = p__23942;
    var ok = cljs.core.nth.call(null, vec__23944, 0, null);
    var result = cljs.core.nth.call(null, vec__23944, 1, null);
    var temp__4090__auto___23945 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4090__auto___23945)) {
      var h_23946 = temp__4090__auto___23945;
      h_23946.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
};
ajax.core.transform_format = function transform_format(p__23947) {
  var map__23949 = p__23947;
  var map__23949__$1 = cljs.core.seq_QMARK_.call(null, map__23949) ? cljs.core.apply.call(null, cljs.core.hash_map, map__23949) : map__23949;
  var opts = map__23949__$1;
  var response_format = cljs.core.get.call(null, map__23949__$1, new cljs.core.Keyword(null, "response-format", "response-format", 4250805877));
  var format = cljs.core.get.call(null, map__23949__$1, new cljs.core.Keyword(null, "format", "format", 4040092521));
  var rf = ajax.core.keyword_response_format.call(null, response_format, opts);
  if (format == null) {
    return ajax.core.codec.call(null, ajax.core.edn_request_format.call(null), rf);
  } else {
    if (format instanceof cljs.core.Keyword) {
      return ajax.core.codec.call(null, ajax.core.keyword_request_format.call(null, format, opts), rf);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return format;
      } else {
        return null;
      }
    }
  }
};
ajax.core.transform_opts = function transform_opts(opts) {
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", 1706707644), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", 4040092521), ajax.core.transform_format.call(null, opts), new cljs.core.Keyword(null, "get-default-format", "get-default-format", 1021569996), ajax.core.get_default_format);
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, p__23950) {
    var vec__23952 = p__23950;
    var opts = cljs.core.nth.call(null, vec__23952, 0, null);
    return ajax.core.ajax_request.call(null, uri, "GET", ajax.core.transform_opts.call(null, opts));
  };
  var GET = function(uri, var_args) {
    var p__23950 = null;
    if (arguments.length > 1) {
      p__23950 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return GET__delegate.call(this, uri, p__23950);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__23953) {
    var uri = cljs.core.first(arglist__23953);
    var p__23950 = cljs.core.rest(arglist__23953);
    return GET__delegate(uri, p__23950);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, p__23954) {
    var vec__23956 = p__23954;
    var opts = cljs.core.nth.call(null, vec__23956, 0, null);
    return ajax.core.ajax_request.call(null, uri, "PUT", ajax.core.transform_opts.call(null, opts));
  };
  var PUT = function(uri, var_args) {
    var p__23954 = null;
    if (arguments.length > 1) {
      p__23954 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return PUT__delegate.call(this, uri, p__23954);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__23957) {
    var uri = cljs.core.first(arglist__23957);
    var p__23954 = cljs.core.rest(arglist__23957);
    return PUT__delegate(uri, p__23954);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, p__23958) {
    var vec__23960 = p__23958;
    var opts = cljs.core.nth.call(null, vec__23960, 0, null);
    return ajax.core.ajax_request.call(null, uri, "POST", ajax.core.transform_opts.call(null, opts));
  };
  var POST = function(uri, var_args) {
    var p__23958 = null;
    if (arguments.length > 1) {
      p__23958 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return POST__delegate.call(this, uri, p__23958);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__23961) {
    var uri = cljs.core.first(arglist__23961);
    var p__23958 = cljs.core.rest(arglist__23961);
    return POST__delegate(uri, p__23958);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
goog.provide("quiescent");
goog.require("cljs.core");
quiescent._STAR_component_STAR_ = null;
quiescent.component = function component(renderer) {
  var react_component = React.createClass({"render":function() {
    var this$ = this;
    var _STAR_component_STAR_21234 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return cljs.core.apply.call(null, renderer, this$.props["value"], this$.props["statics"]);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_21234;
    }
  }, "shouldComponentUpdate":function(next_props, _) {
    var this$ = this;
    return cljs.core.not_EQ_.call(null, this$.props["value"], next_props["value"]);
  }});
  return function() {
    var G__21235__delegate = function(value, static_args) {
      return react_component.call(null, {"statics":static_args, "value":value});
    };
    var G__21235 = function(value, var_args) {
      var static_args = null;
      if (arguments.length > 1) {
        static_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__21235__delegate.call(this, value, static_args);
    };
    G__21235.cljs$lang$maxFixedArity = 1;
    G__21235.cljs$lang$applyTo = function(arglist__21236) {
      var value = cljs.core.first(arglist__21236);
      var static_args = cljs.core.rest(arglist__21236);
      return G__21235__delegate(value, static_args);
    };
    G__21235.cljs$core$IFn$_invoke$arity$variadic = G__21235__delegate;
    return G__21235;
  }();
};
quiescent.WrapperComponent = React.createClass({"componentDidMount":function() {
  var this$ = this;
  var temp__4092__auto__ = this$.props["onMount"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var f = temp__4092__auto__;
    return f.call(null, this$.getDOMNode());
  } else {
    return null;
  }
}, "componentDidUpdate":function(prev_props, prev_state) {
  var this$ = this;
  var temp__4092__auto__ = this$.props["onUpdate"];
  if (cljs.core.truth_(temp__4092__auto__)) {
    var f = temp__4092__auto__;
    var _STAR_component_STAR_21237 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_21237;
    }
  } else {
    return null;
  }
}, "render":function() {
  var this$ = this;
  return this$.props["wrappee"];
}});
quiescent.on_update = function on_update(child, f) {
  return quiescent.WrapperComponent.call(null, {"onUpdate":f, "wrappee":child});
};
quiescent.on_initial_render = function on_initial_render(child, f) {
  return quiescent.WrapperComponent.call(null, {"onMount":f, "wrappee":child});
};
quiescent.on_render = function on_render(child, f) {
  return quiescent.WrapperComponent.call(null, {"onMount":f, "onUpdate":f, "wrappee":child});
};
quiescent.render = function render(component, node) {
  return React.renderComponent(component, node);
};
goog.provide("quiescent.dom");
goog.require("cljs.core");
goog.require("quiescent");
goog.require("quiescent");
quiescent.dom.js_props = function js_props(obj) {
  if (cljs.core.map_QMARK_.call(null, obj)) {
    var o = function() {
      var obj17631 = {};
      return obj17631;
    }();
    var seq__17632_17638 = cljs.core.seq.call(null, obj);
    var chunk__17633_17639 = null;
    var count__17634_17640 = 0;
    var i__17635_17641 = 0;
    while (true) {
      if (i__17635_17641 < count__17634_17640) {
        var vec__17636_17642 = cljs.core._nth.call(null, chunk__17633_17639, i__17635_17641);
        var k_17643 = cljs.core.nth.call(null, vec__17636_17642, 0, null);
        var v_17644 = cljs.core.nth.call(null, vec__17636_17642, 1, null);
        o[cljs.core.name.call(null, k_17643)] = js_props.call(null, v_17644);
        var G__17645 = seq__17632_17638;
        var G__17646 = chunk__17633_17639;
        var G__17647 = count__17634_17640;
        var G__17648 = i__17635_17641 + 1;
        seq__17632_17638 = G__17645;
        chunk__17633_17639 = G__17646;
        count__17634_17640 = G__17647;
        i__17635_17641 = G__17648;
        continue;
      } else {
        var temp__4092__auto___17649 = cljs.core.seq.call(null, seq__17632_17638);
        if (temp__4092__auto___17649) {
          var seq__17632_17650__$1 = temp__4092__auto___17649;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17632_17650__$1)) {
            var c__11010__auto___17651 = cljs.core.chunk_first.call(null, seq__17632_17650__$1);
            var G__17652 = cljs.core.chunk_rest.call(null, seq__17632_17650__$1);
            var G__17653 = c__11010__auto___17651;
            var G__17654 = cljs.core.count.call(null, c__11010__auto___17651);
            var G__17655 = 0;
            seq__17632_17638 = G__17652;
            chunk__17633_17639 = G__17653;
            count__17634_17640 = G__17654;
            i__17635_17641 = G__17655;
            continue;
          } else {
            var vec__17637_17656 = cljs.core.first.call(null, seq__17632_17650__$1);
            var k_17657 = cljs.core.nth.call(null, vec__17637_17656, 0, null);
            var v_17658 = cljs.core.nth.call(null, vec__17637_17656, 1, null);
            o[cljs.core.name.call(null, k_17657)] = js_props.call(null, v_17658);
            var G__17659 = cljs.core.next.call(null, seq__17632_17650__$1);
            var G__17660 = null;
            var G__17661 = 0;
            var G__17662 = 0;
            seq__17632_17638 = G__17659;
            chunk__17633_17639 = G__17660;
            count__17634_17640 = G__17661;
            i__17635_17641 = G__17662;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o;
  } else {
    return obj;
  }
};
quiescent.dom.a = function() {
  var a__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17667_18615 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17668_18616 = null;
    var count__17669_18617 = 0;
    var i__17670_18618 = 0;
    while (true) {
      if (i__17670_18618 < count__17669_18617) {
        var arg__11642__auto___18619 = cljs.core._nth.call(null, chunk__17668_18616, i__17670_18618);
        a__11641__auto__.push(arg__11642__auto___18619);
        var G__18620 = seq__17667_18615;
        var G__18621 = chunk__17668_18616;
        var G__18622 = count__17669_18617;
        var G__18623 = i__17670_18618 + 1;
        seq__17667_18615 = G__18620;
        chunk__17668_18616 = G__18621;
        count__17669_18617 = G__18622;
        i__17670_18618 = G__18623;
        continue;
      } else {
        var temp__4092__auto___18624 = cljs.core.seq.call(null, seq__17667_18615);
        if (temp__4092__auto___18624) {
          var seq__17667_18625__$1 = temp__4092__auto___18624;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17667_18625__$1)) {
            var c__11010__auto___18626 = cljs.core.chunk_first.call(null, seq__17667_18625__$1);
            var G__18627 = cljs.core.chunk_rest.call(null, seq__17667_18625__$1);
            var G__18628 = c__11010__auto___18626;
            var G__18629 = cljs.core.count.call(null, c__11010__auto___18626);
            var G__18630 = 0;
            seq__17667_18615 = G__18627;
            chunk__17668_18616 = G__18628;
            count__17669_18617 = G__18629;
            i__17670_18618 = G__18630;
            continue;
          } else {
            var arg__11642__auto___18631 = cljs.core.first.call(null, seq__17667_18625__$1);
            a__11641__auto__.push(arg__11642__auto___18631);
            var G__18632 = cljs.core.next.call(null, seq__17667_18625__$1);
            var G__18633 = null;
            var G__18634 = 0;
            var G__18635 = 0;
            seq__17667_18615 = G__18632;
            chunk__17668_18616 = G__18633;
            count__17669_18617 = G__18634;
            i__17670_18618 = G__18635;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.a.apply(null, a__11641__auto__);
  };
  var a = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return a__delegate.call(this, args__11640__auto__);
  };
  a.cljs$lang$maxFixedArity = 0;
  a.cljs$lang$applyTo = function(arglist__18636) {
    var args__11640__auto__ = cljs.core.seq(arglist__18636);
    return a__delegate(args__11640__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
quiescent.dom.abbr = function() {
  var abbr__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17675_18637 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17676_18638 = null;
    var count__17677_18639 = 0;
    var i__17678_18640 = 0;
    while (true) {
      if (i__17678_18640 < count__17677_18639) {
        var arg__11642__auto___18641 = cljs.core._nth.call(null, chunk__17676_18638, i__17678_18640);
        a__11641__auto__.push(arg__11642__auto___18641);
        var G__18642 = seq__17675_18637;
        var G__18643 = chunk__17676_18638;
        var G__18644 = count__17677_18639;
        var G__18645 = i__17678_18640 + 1;
        seq__17675_18637 = G__18642;
        chunk__17676_18638 = G__18643;
        count__17677_18639 = G__18644;
        i__17678_18640 = G__18645;
        continue;
      } else {
        var temp__4092__auto___18646 = cljs.core.seq.call(null, seq__17675_18637);
        if (temp__4092__auto___18646) {
          var seq__17675_18647__$1 = temp__4092__auto___18646;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17675_18647__$1)) {
            var c__11010__auto___18648 = cljs.core.chunk_first.call(null, seq__17675_18647__$1);
            var G__18649 = cljs.core.chunk_rest.call(null, seq__17675_18647__$1);
            var G__18650 = c__11010__auto___18648;
            var G__18651 = cljs.core.count.call(null, c__11010__auto___18648);
            var G__18652 = 0;
            seq__17675_18637 = G__18649;
            chunk__17676_18638 = G__18650;
            count__17677_18639 = G__18651;
            i__17678_18640 = G__18652;
            continue;
          } else {
            var arg__11642__auto___18653 = cljs.core.first.call(null, seq__17675_18647__$1);
            a__11641__auto__.push(arg__11642__auto___18653);
            var G__18654 = cljs.core.next.call(null, seq__17675_18647__$1);
            var G__18655 = null;
            var G__18656 = 0;
            var G__18657 = 0;
            seq__17675_18637 = G__18654;
            chunk__17676_18638 = G__18655;
            count__17677_18639 = G__18656;
            i__17678_18640 = G__18657;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.abbr.apply(null, a__11641__auto__);
  };
  var abbr = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return abbr__delegate.call(this, args__11640__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 0;
  abbr.cljs$lang$applyTo = function(arglist__18658) {
    var args__11640__auto__ = cljs.core.seq(arglist__18658);
    return abbr__delegate(args__11640__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
quiescent.dom.address = function() {
  var address__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17683_18659 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17684_18660 = null;
    var count__17685_18661 = 0;
    var i__17686_18662 = 0;
    while (true) {
      if (i__17686_18662 < count__17685_18661) {
        var arg__11642__auto___18663 = cljs.core._nth.call(null, chunk__17684_18660, i__17686_18662);
        a__11641__auto__.push(arg__11642__auto___18663);
        var G__18664 = seq__17683_18659;
        var G__18665 = chunk__17684_18660;
        var G__18666 = count__17685_18661;
        var G__18667 = i__17686_18662 + 1;
        seq__17683_18659 = G__18664;
        chunk__17684_18660 = G__18665;
        count__17685_18661 = G__18666;
        i__17686_18662 = G__18667;
        continue;
      } else {
        var temp__4092__auto___18668 = cljs.core.seq.call(null, seq__17683_18659);
        if (temp__4092__auto___18668) {
          var seq__17683_18669__$1 = temp__4092__auto___18668;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17683_18669__$1)) {
            var c__11010__auto___18670 = cljs.core.chunk_first.call(null, seq__17683_18669__$1);
            var G__18671 = cljs.core.chunk_rest.call(null, seq__17683_18669__$1);
            var G__18672 = c__11010__auto___18670;
            var G__18673 = cljs.core.count.call(null, c__11010__auto___18670);
            var G__18674 = 0;
            seq__17683_18659 = G__18671;
            chunk__17684_18660 = G__18672;
            count__17685_18661 = G__18673;
            i__17686_18662 = G__18674;
            continue;
          } else {
            var arg__11642__auto___18675 = cljs.core.first.call(null, seq__17683_18669__$1);
            a__11641__auto__.push(arg__11642__auto___18675);
            var G__18676 = cljs.core.next.call(null, seq__17683_18669__$1);
            var G__18677 = null;
            var G__18678 = 0;
            var G__18679 = 0;
            seq__17683_18659 = G__18676;
            chunk__17684_18660 = G__18677;
            count__17685_18661 = G__18678;
            i__17686_18662 = G__18679;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.address.apply(null, a__11641__auto__);
  };
  var address = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return address__delegate.call(this, args__11640__auto__);
  };
  address.cljs$lang$maxFixedArity = 0;
  address.cljs$lang$applyTo = function(arglist__18680) {
    var args__11640__auto__ = cljs.core.seq(arglist__18680);
    return address__delegate(args__11640__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
quiescent.dom.area = function() {
  var area__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17691_18681 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17692_18682 = null;
    var count__17693_18683 = 0;
    var i__17694_18684 = 0;
    while (true) {
      if (i__17694_18684 < count__17693_18683) {
        var arg__11642__auto___18685 = cljs.core._nth.call(null, chunk__17692_18682, i__17694_18684);
        a__11641__auto__.push(arg__11642__auto___18685);
        var G__18686 = seq__17691_18681;
        var G__18687 = chunk__17692_18682;
        var G__18688 = count__17693_18683;
        var G__18689 = i__17694_18684 + 1;
        seq__17691_18681 = G__18686;
        chunk__17692_18682 = G__18687;
        count__17693_18683 = G__18688;
        i__17694_18684 = G__18689;
        continue;
      } else {
        var temp__4092__auto___18690 = cljs.core.seq.call(null, seq__17691_18681);
        if (temp__4092__auto___18690) {
          var seq__17691_18691__$1 = temp__4092__auto___18690;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17691_18691__$1)) {
            var c__11010__auto___18692 = cljs.core.chunk_first.call(null, seq__17691_18691__$1);
            var G__18693 = cljs.core.chunk_rest.call(null, seq__17691_18691__$1);
            var G__18694 = c__11010__auto___18692;
            var G__18695 = cljs.core.count.call(null, c__11010__auto___18692);
            var G__18696 = 0;
            seq__17691_18681 = G__18693;
            chunk__17692_18682 = G__18694;
            count__17693_18683 = G__18695;
            i__17694_18684 = G__18696;
            continue;
          } else {
            var arg__11642__auto___18697 = cljs.core.first.call(null, seq__17691_18691__$1);
            a__11641__auto__.push(arg__11642__auto___18697);
            var G__18698 = cljs.core.next.call(null, seq__17691_18691__$1);
            var G__18699 = null;
            var G__18700 = 0;
            var G__18701 = 0;
            seq__17691_18681 = G__18698;
            chunk__17692_18682 = G__18699;
            count__17693_18683 = G__18700;
            i__17694_18684 = G__18701;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.area.apply(null, a__11641__auto__);
  };
  var area = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return area__delegate.call(this, args__11640__auto__);
  };
  area.cljs$lang$maxFixedArity = 0;
  area.cljs$lang$applyTo = function(arglist__18702) {
    var args__11640__auto__ = cljs.core.seq(arglist__18702);
    return area__delegate(args__11640__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
quiescent.dom.article = function() {
  var article__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17699_18703 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17700_18704 = null;
    var count__17701_18705 = 0;
    var i__17702_18706 = 0;
    while (true) {
      if (i__17702_18706 < count__17701_18705) {
        var arg__11642__auto___18707 = cljs.core._nth.call(null, chunk__17700_18704, i__17702_18706);
        a__11641__auto__.push(arg__11642__auto___18707);
        var G__18708 = seq__17699_18703;
        var G__18709 = chunk__17700_18704;
        var G__18710 = count__17701_18705;
        var G__18711 = i__17702_18706 + 1;
        seq__17699_18703 = G__18708;
        chunk__17700_18704 = G__18709;
        count__17701_18705 = G__18710;
        i__17702_18706 = G__18711;
        continue;
      } else {
        var temp__4092__auto___18712 = cljs.core.seq.call(null, seq__17699_18703);
        if (temp__4092__auto___18712) {
          var seq__17699_18713__$1 = temp__4092__auto___18712;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17699_18713__$1)) {
            var c__11010__auto___18714 = cljs.core.chunk_first.call(null, seq__17699_18713__$1);
            var G__18715 = cljs.core.chunk_rest.call(null, seq__17699_18713__$1);
            var G__18716 = c__11010__auto___18714;
            var G__18717 = cljs.core.count.call(null, c__11010__auto___18714);
            var G__18718 = 0;
            seq__17699_18703 = G__18715;
            chunk__17700_18704 = G__18716;
            count__17701_18705 = G__18717;
            i__17702_18706 = G__18718;
            continue;
          } else {
            var arg__11642__auto___18719 = cljs.core.first.call(null, seq__17699_18713__$1);
            a__11641__auto__.push(arg__11642__auto___18719);
            var G__18720 = cljs.core.next.call(null, seq__17699_18713__$1);
            var G__18721 = null;
            var G__18722 = 0;
            var G__18723 = 0;
            seq__17699_18703 = G__18720;
            chunk__17700_18704 = G__18721;
            count__17701_18705 = G__18722;
            i__17702_18706 = G__18723;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.article.apply(null, a__11641__auto__);
  };
  var article = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return article__delegate.call(this, args__11640__auto__);
  };
  article.cljs$lang$maxFixedArity = 0;
  article.cljs$lang$applyTo = function(arglist__18724) {
    var args__11640__auto__ = cljs.core.seq(arglist__18724);
    return article__delegate(args__11640__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
quiescent.dom.aside = function() {
  var aside__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17707_18725 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17708_18726 = null;
    var count__17709_18727 = 0;
    var i__17710_18728 = 0;
    while (true) {
      if (i__17710_18728 < count__17709_18727) {
        var arg__11642__auto___18729 = cljs.core._nth.call(null, chunk__17708_18726, i__17710_18728);
        a__11641__auto__.push(arg__11642__auto___18729);
        var G__18730 = seq__17707_18725;
        var G__18731 = chunk__17708_18726;
        var G__18732 = count__17709_18727;
        var G__18733 = i__17710_18728 + 1;
        seq__17707_18725 = G__18730;
        chunk__17708_18726 = G__18731;
        count__17709_18727 = G__18732;
        i__17710_18728 = G__18733;
        continue;
      } else {
        var temp__4092__auto___18734 = cljs.core.seq.call(null, seq__17707_18725);
        if (temp__4092__auto___18734) {
          var seq__17707_18735__$1 = temp__4092__auto___18734;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17707_18735__$1)) {
            var c__11010__auto___18736 = cljs.core.chunk_first.call(null, seq__17707_18735__$1);
            var G__18737 = cljs.core.chunk_rest.call(null, seq__17707_18735__$1);
            var G__18738 = c__11010__auto___18736;
            var G__18739 = cljs.core.count.call(null, c__11010__auto___18736);
            var G__18740 = 0;
            seq__17707_18725 = G__18737;
            chunk__17708_18726 = G__18738;
            count__17709_18727 = G__18739;
            i__17710_18728 = G__18740;
            continue;
          } else {
            var arg__11642__auto___18741 = cljs.core.first.call(null, seq__17707_18735__$1);
            a__11641__auto__.push(arg__11642__auto___18741);
            var G__18742 = cljs.core.next.call(null, seq__17707_18735__$1);
            var G__18743 = null;
            var G__18744 = 0;
            var G__18745 = 0;
            seq__17707_18725 = G__18742;
            chunk__17708_18726 = G__18743;
            count__17709_18727 = G__18744;
            i__17710_18728 = G__18745;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.aside.apply(null, a__11641__auto__);
  };
  var aside = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return aside__delegate.call(this, args__11640__auto__);
  };
  aside.cljs$lang$maxFixedArity = 0;
  aside.cljs$lang$applyTo = function(arglist__18746) {
    var args__11640__auto__ = cljs.core.seq(arglist__18746);
    return aside__delegate(args__11640__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
quiescent.dom.audio = function() {
  var audio__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17715_18747 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17716_18748 = null;
    var count__17717_18749 = 0;
    var i__17718_18750 = 0;
    while (true) {
      if (i__17718_18750 < count__17717_18749) {
        var arg__11642__auto___18751 = cljs.core._nth.call(null, chunk__17716_18748, i__17718_18750);
        a__11641__auto__.push(arg__11642__auto___18751);
        var G__18752 = seq__17715_18747;
        var G__18753 = chunk__17716_18748;
        var G__18754 = count__17717_18749;
        var G__18755 = i__17718_18750 + 1;
        seq__17715_18747 = G__18752;
        chunk__17716_18748 = G__18753;
        count__17717_18749 = G__18754;
        i__17718_18750 = G__18755;
        continue;
      } else {
        var temp__4092__auto___18756 = cljs.core.seq.call(null, seq__17715_18747);
        if (temp__4092__auto___18756) {
          var seq__17715_18757__$1 = temp__4092__auto___18756;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17715_18757__$1)) {
            var c__11010__auto___18758 = cljs.core.chunk_first.call(null, seq__17715_18757__$1);
            var G__18759 = cljs.core.chunk_rest.call(null, seq__17715_18757__$1);
            var G__18760 = c__11010__auto___18758;
            var G__18761 = cljs.core.count.call(null, c__11010__auto___18758);
            var G__18762 = 0;
            seq__17715_18747 = G__18759;
            chunk__17716_18748 = G__18760;
            count__17717_18749 = G__18761;
            i__17718_18750 = G__18762;
            continue;
          } else {
            var arg__11642__auto___18763 = cljs.core.first.call(null, seq__17715_18757__$1);
            a__11641__auto__.push(arg__11642__auto___18763);
            var G__18764 = cljs.core.next.call(null, seq__17715_18757__$1);
            var G__18765 = null;
            var G__18766 = 0;
            var G__18767 = 0;
            seq__17715_18747 = G__18764;
            chunk__17716_18748 = G__18765;
            count__17717_18749 = G__18766;
            i__17718_18750 = G__18767;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.audio.apply(null, a__11641__auto__);
  };
  var audio = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return audio__delegate.call(this, args__11640__auto__);
  };
  audio.cljs$lang$maxFixedArity = 0;
  audio.cljs$lang$applyTo = function(arglist__18768) {
    var args__11640__auto__ = cljs.core.seq(arglist__18768);
    return audio__delegate(args__11640__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
quiescent.dom.b = function() {
  var b__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17723_18769 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17724_18770 = null;
    var count__17725_18771 = 0;
    var i__17726_18772 = 0;
    while (true) {
      if (i__17726_18772 < count__17725_18771) {
        var arg__11642__auto___18773 = cljs.core._nth.call(null, chunk__17724_18770, i__17726_18772);
        a__11641__auto__.push(arg__11642__auto___18773);
        var G__18774 = seq__17723_18769;
        var G__18775 = chunk__17724_18770;
        var G__18776 = count__17725_18771;
        var G__18777 = i__17726_18772 + 1;
        seq__17723_18769 = G__18774;
        chunk__17724_18770 = G__18775;
        count__17725_18771 = G__18776;
        i__17726_18772 = G__18777;
        continue;
      } else {
        var temp__4092__auto___18778 = cljs.core.seq.call(null, seq__17723_18769);
        if (temp__4092__auto___18778) {
          var seq__17723_18779__$1 = temp__4092__auto___18778;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17723_18779__$1)) {
            var c__11010__auto___18780 = cljs.core.chunk_first.call(null, seq__17723_18779__$1);
            var G__18781 = cljs.core.chunk_rest.call(null, seq__17723_18779__$1);
            var G__18782 = c__11010__auto___18780;
            var G__18783 = cljs.core.count.call(null, c__11010__auto___18780);
            var G__18784 = 0;
            seq__17723_18769 = G__18781;
            chunk__17724_18770 = G__18782;
            count__17725_18771 = G__18783;
            i__17726_18772 = G__18784;
            continue;
          } else {
            var arg__11642__auto___18785 = cljs.core.first.call(null, seq__17723_18779__$1);
            a__11641__auto__.push(arg__11642__auto___18785);
            var G__18786 = cljs.core.next.call(null, seq__17723_18779__$1);
            var G__18787 = null;
            var G__18788 = 0;
            var G__18789 = 0;
            seq__17723_18769 = G__18786;
            chunk__17724_18770 = G__18787;
            count__17725_18771 = G__18788;
            i__17726_18772 = G__18789;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.b.apply(null, a__11641__auto__);
  };
  var b = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return b__delegate.call(this, args__11640__auto__);
  };
  b.cljs$lang$maxFixedArity = 0;
  b.cljs$lang$applyTo = function(arglist__18790) {
    var args__11640__auto__ = cljs.core.seq(arglist__18790);
    return b__delegate(args__11640__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
quiescent.dom.base = function() {
  var base__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17731_18791 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17732_18792 = null;
    var count__17733_18793 = 0;
    var i__17734_18794 = 0;
    while (true) {
      if (i__17734_18794 < count__17733_18793) {
        var arg__11642__auto___18795 = cljs.core._nth.call(null, chunk__17732_18792, i__17734_18794);
        a__11641__auto__.push(arg__11642__auto___18795);
        var G__18796 = seq__17731_18791;
        var G__18797 = chunk__17732_18792;
        var G__18798 = count__17733_18793;
        var G__18799 = i__17734_18794 + 1;
        seq__17731_18791 = G__18796;
        chunk__17732_18792 = G__18797;
        count__17733_18793 = G__18798;
        i__17734_18794 = G__18799;
        continue;
      } else {
        var temp__4092__auto___18800 = cljs.core.seq.call(null, seq__17731_18791);
        if (temp__4092__auto___18800) {
          var seq__17731_18801__$1 = temp__4092__auto___18800;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17731_18801__$1)) {
            var c__11010__auto___18802 = cljs.core.chunk_first.call(null, seq__17731_18801__$1);
            var G__18803 = cljs.core.chunk_rest.call(null, seq__17731_18801__$1);
            var G__18804 = c__11010__auto___18802;
            var G__18805 = cljs.core.count.call(null, c__11010__auto___18802);
            var G__18806 = 0;
            seq__17731_18791 = G__18803;
            chunk__17732_18792 = G__18804;
            count__17733_18793 = G__18805;
            i__17734_18794 = G__18806;
            continue;
          } else {
            var arg__11642__auto___18807 = cljs.core.first.call(null, seq__17731_18801__$1);
            a__11641__auto__.push(arg__11642__auto___18807);
            var G__18808 = cljs.core.next.call(null, seq__17731_18801__$1);
            var G__18809 = null;
            var G__18810 = 0;
            var G__18811 = 0;
            seq__17731_18791 = G__18808;
            chunk__17732_18792 = G__18809;
            count__17733_18793 = G__18810;
            i__17734_18794 = G__18811;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.base.apply(null, a__11641__auto__);
  };
  var base = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return base__delegate.call(this, args__11640__auto__);
  };
  base.cljs$lang$maxFixedArity = 0;
  base.cljs$lang$applyTo = function(arglist__18812) {
    var args__11640__auto__ = cljs.core.seq(arglist__18812);
    return base__delegate(args__11640__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
quiescent.dom.bdi = function() {
  var bdi__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17739_18813 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17740_18814 = null;
    var count__17741_18815 = 0;
    var i__17742_18816 = 0;
    while (true) {
      if (i__17742_18816 < count__17741_18815) {
        var arg__11642__auto___18817 = cljs.core._nth.call(null, chunk__17740_18814, i__17742_18816);
        a__11641__auto__.push(arg__11642__auto___18817);
        var G__18818 = seq__17739_18813;
        var G__18819 = chunk__17740_18814;
        var G__18820 = count__17741_18815;
        var G__18821 = i__17742_18816 + 1;
        seq__17739_18813 = G__18818;
        chunk__17740_18814 = G__18819;
        count__17741_18815 = G__18820;
        i__17742_18816 = G__18821;
        continue;
      } else {
        var temp__4092__auto___18822 = cljs.core.seq.call(null, seq__17739_18813);
        if (temp__4092__auto___18822) {
          var seq__17739_18823__$1 = temp__4092__auto___18822;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17739_18823__$1)) {
            var c__11010__auto___18824 = cljs.core.chunk_first.call(null, seq__17739_18823__$1);
            var G__18825 = cljs.core.chunk_rest.call(null, seq__17739_18823__$1);
            var G__18826 = c__11010__auto___18824;
            var G__18827 = cljs.core.count.call(null, c__11010__auto___18824);
            var G__18828 = 0;
            seq__17739_18813 = G__18825;
            chunk__17740_18814 = G__18826;
            count__17741_18815 = G__18827;
            i__17742_18816 = G__18828;
            continue;
          } else {
            var arg__11642__auto___18829 = cljs.core.first.call(null, seq__17739_18823__$1);
            a__11641__auto__.push(arg__11642__auto___18829);
            var G__18830 = cljs.core.next.call(null, seq__17739_18823__$1);
            var G__18831 = null;
            var G__18832 = 0;
            var G__18833 = 0;
            seq__17739_18813 = G__18830;
            chunk__17740_18814 = G__18831;
            count__17741_18815 = G__18832;
            i__17742_18816 = G__18833;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdi.apply(null, a__11641__auto__);
  };
  var bdi = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdi__delegate.call(this, args__11640__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 0;
  bdi.cljs$lang$applyTo = function(arglist__18834) {
    var args__11640__auto__ = cljs.core.seq(arglist__18834);
    return bdi__delegate(args__11640__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
quiescent.dom.bdo = function() {
  var bdo__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17747_18835 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17748_18836 = null;
    var count__17749_18837 = 0;
    var i__17750_18838 = 0;
    while (true) {
      if (i__17750_18838 < count__17749_18837) {
        var arg__11642__auto___18839 = cljs.core._nth.call(null, chunk__17748_18836, i__17750_18838);
        a__11641__auto__.push(arg__11642__auto___18839);
        var G__18840 = seq__17747_18835;
        var G__18841 = chunk__17748_18836;
        var G__18842 = count__17749_18837;
        var G__18843 = i__17750_18838 + 1;
        seq__17747_18835 = G__18840;
        chunk__17748_18836 = G__18841;
        count__17749_18837 = G__18842;
        i__17750_18838 = G__18843;
        continue;
      } else {
        var temp__4092__auto___18844 = cljs.core.seq.call(null, seq__17747_18835);
        if (temp__4092__auto___18844) {
          var seq__17747_18845__$1 = temp__4092__auto___18844;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17747_18845__$1)) {
            var c__11010__auto___18846 = cljs.core.chunk_first.call(null, seq__17747_18845__$1);
            var G__18847 = cljs.core.chunk_rest.call(null, seq__17747_18845__$1);
            var G__18848 = c__11010__auto___18846;
            var G__18849 = cljs.core.count.call(null, c__11010__auto___18846);
            var G__18850 = 0;
            seq__17747_18835 = G__18847;
            chunk__17748_18836 = G__18848;
            count__17749_18837 = G__18849;
            i__17750_18838 = G__18850;
            continue;
          } else {
            var arg__11642__auto___18851 = cljs.core.first.call(null, seq__17747_18845__$1);
            a__11641__auto__.push(arg__11642__auto___18851);
            var G__18852 = cljs.core.next.call(null, seq__17747_18845__$1);
            var G__18853 = null;
            var G__18854 = 0;
            var G__18855 = 0;
            seq__17747_18835 = G__18852;
            chunk__17748_18836 = G__18853;
            count__17749_18837 = G__18854;
            i__17750_18838 = G__18855;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdo.apply(null, a__11641__auto__);
  };
  var bdo = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdo__delegate.call(this, args__11640__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 0;
  bdo.cljs$lang$applyTo = function(arglist__18856) {
    var args__11640__auto__ = cljs.core.seq(arglist__18856);
    return bdo__delegate(args__11640__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
quiescent.dom.big = function() {
  var big__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17755_18857 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17756_18858 = null;
    var count__17757_18859 = 0;
    var i__17758_18860 = 0;
    while (true) {
      if (i__17758_18860 < count__17757_18859) {
        var arg__11642__auto___18861 = cljs.core._nth.call(null, chunk__17756_18858, i__17758_18860);
        a__11641__auto__.push(arg__11642__auto___18861);
        var G__18862 = seq__17755_18857;
        var G__18863 = chunk__17756_18858;
        var G__18864 = count__17757_18859;
        var G__18865 = i__17758_18860 + 1;
        seq__17755_18857 = G__18862;
        chunk__17756_18858 = G__18863;
        count__17757_18859 = G__18864;
        i__17758_18860 = G__18865;
        continue;
      } else {
        var temp__4092__auto___18866 = cljs.core.seq.call(null, seq__17755_18857);
        if (temp__4092__auto___18866) {
          var seq__17755_18867__$1 = temp__4092__auto___18866;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17755_18867__$1)) {
            var c__11010__auto___18868 = cljs.core.chunk_first.call(null, seq__17755_18867__$1);
            var G__18869 = cljs.core.chunk_rest.call(null, seq__17755_18867__$1);
            var G__18870 = c__11010__auto___18868;
            var G__18871 = cljs.core.count.call(null, c__11010__auto___18868);
            var G__18872 = 0;
            seq__17755_18857 = G__18869;
            chunk__17756_18858 = G__18870;
            count__17757_18859 = G__18871;
            i__17758_18860 = G__18872;
            continue;
          } else {
            var arg__11642__auto___18873 = cljs.core.first.call(null, seq__17755_18867__$1);
            a__11641__auto__.push(arg__11642__auto___18873);
            var G__18874 = cljs.core.next.call(null, seq__17755_18867__$1);
            var G__18875 = null;
            var G__18876 = 0;
            var G__18877 = 0;
            seq__17755_18857 = G__18874;
            chunk__17756_18858 = G__18875;
            count__17757_18859 = G__18876;
            i__17758_18860 = G__18877;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.big.apply(null, a__11641__auto__);
  };
  var big = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return big__delegate.call(this, args__11640__auto__);
  };
  big.cljs$lang$maxFixedArity = 0;
  big.cljs$lang$applyTo = function(arglist__18878) {
    var args__11640__auto__ = cljs.core.seq(arglist__18878);
    return big__delegate(args__11640__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
quiescent.dom.blockquote = function() {
  var blockquote__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17763_18879 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17764_18880 = null;
    var count__17765_18881 = 0;
    var i__17766_18882 = 0;
    while (true) {
      if (i__17766_18882 < count__17765_18881) {
        var arg__11642__auto___18883 = cljs.core._nth.call(null, chunk__17764_18880, i__17766_18882);
        a__11641__auto__.push(arg__11642__auto___18883);
        var G__18884 = seq__17763_18879;
        var G__18885 = chunk__17764_18880;
        var G__18886 = count__17765_18881;
        var G__18887 = i__17766_18882 + 1;
        seq__17763_18879 = G__18884;
        chunk__17764_18880 = G__18885;
        count__17765_18881 = G__18886;
        i__17766_18882 = G__18887;
        continue;
      } else {
        var temp__4092__auto___18888 = cljs.core.seq.call(null, seq__17763_18879);
        if (temp__4092__auto___18888) {
          var seq__17763_18889__$1 = temp__4092__auto___18888;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17763_18889__$1)) {
            var c__11010__auto___18890 = cljs.core.chunk_first.call(null, seq__17763_18889__$1);
            var G__18891 = cljs.core.chunk_rest.call(null, seq__17763_18889__$1);
            var G__18892 = c__11010__auto___18890;
            var G__18893 = cljs.core.count.call(null, c__11010__auto___18890);
            var G__18894 = 0;
            seq__17763_18879 = G__18891;
            chunk__17764_18880 = G__18892;
            count__17765_18881 = G__18893;
            i__17766_18882 = G__18894;
            continue;
          } else {
            var arg__11642__auto___18895 = cljs.core.first.call(null, seq__17763_18889__$1);
            a__11641__auto__.push(arg__11642__auto___18895);
            var G__18896 = cljs.core.next.call(null, seq__17763_18889__$1);
            var G__18897 = null;
            var G__18898 = 0;
            var G__18899 = 0;
            seq__17763_18879 = G__18896;
            chunk__17764_18880 = G__18897;
            count__17765_18881 = G__18898;
            i__17766_18882 = G__18899;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.blockquote.apply(null, a__11641__auto__);
  };
  var blockquote = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return blockquote__delegate.call(this, args__11640__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 0;
  blockquote.cljs$lang$applyTo = function(arglist__18900) {
    var args__11640__auto__ = cljs.core.seq(arglist__18900);
    return blockquote__delegate(args__11640__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
quiescent.dom.body = function() {
  var body__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17771_18901 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17772_18902 = null;
    var count__17773_18903 = 0;
    var i__17774_18904 = 0;
    while (true) {
      if (i__17774_18904 < count__17773_18903) {
        var arg__11642__auto___18905 = cljs.core._nth.call(null, chunk__17772_18902, i__17774_18904);
        a__11641__auto__.push(arg__11642__auto___18905);
        var G__18906 = seq__17771_18901;
        var G__18907 = chunk__17772_18902;
        var G__18908 = count__17773_18903;
        var G__18909 = i__17774_18904 + 1;
        seq__17771_18901 = G__18906;
        chunk__17772_18902 = G__18907;
        count__17773_18903 = G__18908;
        i__17774_18904 = G__18909;
        continue;
      } else {
        var temp__4092__auto___18910 = cljs.core.seq.call(null, seq__17771_18901);
        if (temp__4092__auto___18910) {
          var seq__17771_18911__$1 = temp__4092__auto___18910;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17771_18911__$1)) {
            var c__11010__auto___18912 = cljs.core.chunk_first.call(null, seq__17771_18911__$1);
            var G__18913 = cljs.core.chunk_rest.call(null, seq__17771_18911__$1);
            var G__18914 = c__11010__auto___18912;
            var G__18915 = cljs.core.count.call(null, c__11010__auto___18912);
            var G__18916 = 0;
            seq__17771_18901 = G__18913;
            chunk__17772_18902 = G__18914;
            count__17773_18903 = G__18915;
            i__17774_18904 = G__18916;
            continue;
          } else {
            var arg__11642__auto___18917 = cljs.core.first.call(null, seq__17771_18911__$1);
            a__11641__auto__.push(arg__11642__auto___18917);
            var G__18918 = cljs.core.next.call(null, seq__17771_18911__$1);
            var G__18919 = null;
            var G__18920 = 0;
            var G__18921 = 0;
            seq__17771_18901 = G__18918;
            chunk__17772_18902 = G__18919;
            count__17773_18903 = G__18920;
            i__17774_18904 = G__18921;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.body.apply(null, a__11641__auto__);
  };
  var body = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return body__delegate.call(this, args__11640__auto__);
  };
  body.cljs$lang$maxFixedArity = 0;
  body.cljs$lang$applyTo = function(arglist__18922) {
    var args__11640__auto__ = cljs.core.seq(arglist__18922);
    return body__delegate(args__11640__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
quiescent.dom.br = function() {
  var br__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17779_18923 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17780_18924 = null;
    var count__17781_18925 = 0;
    var i__17782_18926 = 0;
    while (true) {
      if (i__17782_18926 < count__17781_18925) {
        var arg__11642__auto___18927 = cljs.core._nth.call(null, chunk__17780_18924, i__17782_18926);
        a__11641__auto__.push(arg__11642__auto___18927);
        var G__18928 = seq__17779_18923;
        var G__18929 = chunk__17780_18924;
        var G__18930 = count__17781_18925;
        var G__18931 = i__17782_18926 + 1;
        seq__17779_18923 = G__18928;
        chunk__17780_18924 = G__18929;
        count__17781_18925 = G__18930;
        i__17782_18926 = G__18931;
        continue;
      } else {
        var temp__4092__auto___18932 = cljs.core.seq.call(null, seq__17779_18923);
        if (temp__4092__auto___18932) {
          var seq__17779_18933__$1 = temp__4092__auto___18932;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17779_18933__$1)) {
            var c__11010__auto___18934 = cljs.core.chunk_first.call(null, seq__17779_18933__$1);
            var G__18935 = cljs.core.chunk_rest.call(null, seq__17779_18933__$1);
            var G__18936 = c__11010__auto___18934;
            var G__18937 = cljs.core.count.call(null, c__11010__auto___18934);
            var G__18938 = 0;
            seq__17779_18923 = G__18935;
            chunk__17780_18924 = G__18936;
            count__17781_18925 = G__18937;
            i__17782_18926 = G__18938;
            continue;
          } else {
            var arg__11642__auto___18939 = cljs.core.first.call(null, seq__17779_18933__$1);
            a__11641__auto__.push(arg__11642__auto___18939);
            var G__18940 = cljs.core.next.call(null, seq__17779_18933__$1);
            var G__18941 = null;
            var G__18942 = 0;
            var G__18943 = 0;
            seq__17779_18923 = G__18940;
            chunk__17780_18924 = G__18941;
            count__17781_18925 = G__18942;
            i__17782_18926 = G__18943;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.br.apply(null, a__11641__auto__);
  };
  var br = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return br__delegate.call(this, args__11640__auto__);
  };
  br.cljs$lang$maxFixedArity = 0;
  br.cljs$lang$applyTo = function(arglist__18944) {
    var args__11640__auto__ = cljs.core.seq(arglist__18944);
    return br__delegate(args__11640__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
quiescent.dom.button = function() {
  var button__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17787_18945 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17788_18946 = null;
    var count__17789_18947 = 0;
    var i__17790_18948 = 0;
    while (true) {
      if (i__17790_18948 < count__17789_18947) {
        var arg__11642__auto___18949 = cljs.core._nth.call(null, chunk__17788_18946, i__17790_18948);
        a__11641__auto__.push(arg__11642__auto___18949);
        var G__18950 = seq__17787_18945;
        var G__18951 = chunk__17788_18946;
        var G__18952 = count__17789_18947;
        var G__18953 = i__17790_18948 + 1;
        seq__17787_18945 = G__18950;
        chunk__17788_18946 = G__18951;
        count__17789_18947 = G__18952;
        i__17790_18948 = G__18953;
        continue;
      } else {
        var temp__4092__auto___18954 = cljs.core.seq.call(null, seq__17787_18945);
        if (temp__4092__auto___18954) {
          var seq__17787_18955__$1 = temp__4092__auto___18954;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17787_18955__$1)) {
            var c__11010__auto___18956 = cljs.core.chunk_first.call(null, seq__17787_18955__$1);
            var G__18957 = cljs.core.chunk_rest.call(null, seq__17787_18955__$1);
            var G__18958 = c__11010__auto___18956;
            var G__18959 = cljs.core.count.call(null, c__11010__auto___18956);
            var G__18960 = 0;
            seq__17787_18945 = G__18957;
            chunk__17788_18946 = G__18958;
            count__17789_18947 = G__18959;
            i__17790_18948 = G__18960;
            continue;
          } else {
            var arg__11642__auto___18961 = cljs.core.first.call(null, seq__17787_18955__$1);
            a__11641__auto__.push(arg__11642__auto___18961);
            var G__18962 = cljs.core.next.call(null, seq__17787_18955__$1);
            var G__18963 = null;
            var G__18964 = 0;
            var G__18965 = 0;
            seq__17787_18945 = G__18962;
            chunk__17788_18946 = G__18963;
            count__17789_18947 = G__18964;
            i__17790_18948 = G__18965;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.button.apply(null, a__11641__auto__);
  };
  var button = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return button__delegate.call(this, args__11640__auto__);
  };
  button.cljs$lang$maxFixedArity = 0;
  button.cljs$lang$applyTo = function(arglist__18966) {
    var args__11640__auto__ = cljs.core.seq(arglist__18966);
    return button__delegate(args__11640__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
quiescent.dom.canvas = function() {
  var canvas__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17795_18967 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17796_18968 = null;
    var count__17797_18969 = 0;
    var i__17798_18970 = 0;
    while (true) {
      if (i__17798_18970 < count__17797_18969) {
        var arg__11642__auto___18971 = cljs.core._nth.call(null, chunk__17796_18968, i__17798_18970);
        a__11641__auto__.push(arg__11642__auto___18971);
        var G__18972 = seq__17795_18967;
        var G__18973 = chunk__17796_18968;
        var G__18974 = count__17797_18969;
        var G__18975 = i__17798_18970 + 1;
        seq__17795_18967 = G__18972;
        chunk__17796_18968 = G__18973;
        count__17797_18969 = G__18974;
        i__17798_18970 = G__18975;
        continue;
      } else {
        var temp__4092__auto___18976 = cljs.core.seq.call(null, seq__17795_18967);
        if (temp__4092__auto___18976) {
          var seq__17795_18977__$1 = temp__4092__auto___18976;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17795_18977__$1)) {
            var c__11010__auto___18978 = cljs.core.chunk_first.call(null, seq__17795_18977__$1);
            var G__18979 = cljs.core.chunk_rest.call(null, seq__17795_18977__$1);
            var G__18980 = c__11010__auto___18978;
            var G__18981 = cljs.core.count.call(null, c__11010__auto___18978);
            var G__18982 = 0;
            seq__17795_18967 = G__18979;
            chunk__17796_18968 = G__18980;
            count__17797_18969 = G__18981;
            i__17798_18970 = G__18982;
            continue;
          } else {
            var arg__11642__auto___18983 = cljs.core.first.call(null, seq__17795_18977__$1);
            a__11641__auto__.push(arg__11642__auto___18983);
            var G__18984 = cljs.core.next.call(null, seq__17795_18977__$1);
            var G__18985 = null;
            var G__18986 = 0;
            var G__18987 = 0;
            seq__17795_18967 = G__18984;
            chunk__17796_18968 = G__18985;
            count__17797_18969 = G__18986;
            i__17798_18970 = G__18987;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.canvas.apply(null, a__11641__auto__);
  };
  var canvas = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return canvas__delegate.call(this, args__11640__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 0;
  canvas.cljs$lang$applyTo = function(arglist__18988) {
    var args__11640__auto__ = cljs.core.seq(arglist__18988);
    return canvas__delegate(args__11640__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
quiescent.dom.caption = function() {
  var caption__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17803_18989 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17804_18990 = null;
    var count__17805_18991 = 0;
    var i__17806_18992 = 0;
    while (true) {
      if (i__17806_18992 < count__17805_18991) {
        var arg__11642__auto___18993 = cljs.core._nth.call(null, chunk__17804_18990, i__17806_18992);
        a__11641__auto__.push(arg__11642__auto___18993);
        var G__18994 = seq__17803_18989;
        var G__18995 = chunk__17804_18990;
        var G__18996 = count__17805_18991;
        var G__18997 = i__17806_18992 + 1;
        seq__17803_18989 = G__18994;
        chunk__17804_18990 = G__18995;
        count__17805_18991 = G__18996;
        i__17806_18992 = G__18997;
        continue;
      } else {
        var temp__4092__auto___18998 = cljs.core.seq.call(null, seq__17803_18989);
        if (temp__4092__auto___18998) {
          var seq__17803_18999__$1 = temp__4092__auto___18998;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17803_18999__$1)) {
            var c__11010__auto___19000 = cljs.core.chunk_first.call(null, seq__17803_18999__$1);
            var G__19001 = cljs.core.chunk_rest.call(null, seq__17803_18999__$1);
            var G__19002 = c__11010__auto___19000;
            var G__19003 = cljs.core.count.call(null, c__11010__auto___19000);
            var G__19004 = 0;
            seq__17803_18989 = G__19001;
            chunk__17804_18990 = G__19002;
            count__17805_18991 = G__19003;
            i__17806_18992 = G__19004;
            continue;
          } else {
            var arg__11642__auto___19005 = cljs.core.first.call(null, seq__17803_18999__$1);
            a__11641__auto__.push(arg__11642__auto___19005);
            var G__19006 = cljs.core.next.call(null, seq__17803_18999__$1);
            var G__19007 = null;
            var G__19008 = 0;
            var G__19009 = 0;
            seq__17803_18989 = G__19006;
            chunk__17804_18990 = G__19007;
            count__17805_18991 = G__19008;
            i__17806_18992 = G__19009;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.caption.apply(null, a__11641__auto__);
  };
  var caption = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return caption__delegate.call(this, args__11640__auto__);
  };
  caption.cljs$lang$maxFixedArity = 0;
  caption.cljs$lang$applyTo = function(arglist__19010) {
    var args__11640__auto__ = cljs.core.seq(arglist__19010);
    return caption__delegate(args__11640__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
quiescent.dom.cite = function() {
  var cite__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17811_19011 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17812_19012 = null;
    var count__17813_19013 = 0;
    var i__17814_19014 = 0;
    while (true) {
      if (i__17814_19014 < count__17813_19013) {
        var arg__11642__auto___19015 = cljs.core._nth.call(null, chunk__17812_19012, i__17814_19014);
        a__11641__auto__.push(arg__11642__auto___19015);
        var G__19016 = seq__17811_19011;
        var G__19017 = chunk__17812_19012;
        var G__19018 = count__17813_19013;
        var G__19019 = i__17814_19014 + 1;
        seq__17811_19011 = G__19016;
        chunk__17812_19012 = G__19017;
        count__17813_19013 = G__19018;
        i__17814_19014 = G__19019;
        continue;
      } else {
        var temp__4092__auto___19020 = cljs.core.seq.call(null, seq__17811_19011);
        if (temp__4092__auto___19020) {
          var seq__17811_19021__$1 = temp__4092__auto___19020;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17811_19021__$1)) {
            var c__11010__auto___19022 = cljs.core.chunk_first.call(null, seq__17811_19021__$1);
            var G__19023 = cljs.core.chunk_rest.call(null, seq__17811_19021__$1);
            var G__19024 = c__11010__auto___19022;
            var G__19025 = cljs.core.count.call(null, c__11010__auto___19022);
            var G__19026 = 0;
            seq__17811_19011 = G__19023;
            chunk__17812_19012 = G__19024;
            count__17813_19013 = G__19025;
            i__17814_19014 = G__19026;
            continue;
          } else {
            var arg__11642__auto___19027 = cljs.core.first.call(null, seq__17811_19021__$1);
            a__11641__auto__.push(arg__11642__auto___19027);
            var G__19028 = cljs.core.next.call(null, seq__17811_19021__$1);
            var G__19029 = null;
            var G__19030 = 0;
            var G__19031 = 0;
            seq__17811_19011 = G__19028;
            chunk__17812_19012 = G__19029;
            count__17813_19013 = G__19030;
            i__17814_19014 = G__19031;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.cite.apply(null, a__11641__auto__);
  };
  var cite = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cite__delegate.call(this, args__11640__auto__);
  };
  cite.cljs$lang$maxFixedArity = 0;
  cite.cljs$lang$applyTo = function(arglist__19032) {
    var args__11640__auto__ = cljs.core.seq(arglist__19032);
    return cite__delegate(args__11640__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
quiescent.dom.code = function() {
  var code__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17819_19033 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17820_19034 = null;
    var count__17821_19035 = 0;
    var i__17822_19036 = 0;
    while (true) {
      if (i__17822_19036 < count__17821_19035) {
        var arg__11642__auto___19037 = cljs.core._nth.call(null, chunk__17820_19034, i__17822_19036);
        a__11641__auto__.push(arg__11642__auto___19037);
        var G__19038 = seq__17819_19033;
        var G__19039 = chunk__17820_19034;
        var G__19040 = count__17821_19035;
        var G__19041 = i__17822_19036 + 1;
        seq__17819_19033 = G__19038;
        chunk__17820_19034 = G__19039;
        count__17821_19035 = G__19040;
        i__17822_19036 = G__19041;
        continue;
      } else {
        var temp__4092__auto___19042 = cljs.core.seq.call(null, seq__17819_19033);
        if (temp__4092__auto___19042) {
          var seq__17819_19043__$1 = temp__4092__auto___19042;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17819_19043__$1)) {
            var c__11010__auto___19044 = cljs.core.chunk_first.call(null, seq__17819_19043__$1);
            var G__19045 = cljs.core.chunk_rest.call(null, seq__17819_19043__$1);
            var G__19046 = c__11010__auto___19044;
            var G__19047 = cljs.core.count.call(null, c__11010__auto___19044);
            var G__19048 = 0;
            seq__17819_19033 = G__19045;
            chunk__17820_19034 = G__19046;
            count__17821_19035 = G__19047;
            i__17822_19036 = G__19048;
            continue;
          } else {
            var arg__11642__auto___19049 = cljs.core.first.call(null, seq__17819_19043__$1);
            a__11641__auto__.push(arg__11642__auto___19049);
            var G__19050 = cljs.core.next.call(null, seq__17819_19043__$1);
            var G__19051 = null;
            var G__19052 = 0;
            var G__19053 = 0;
            seq__17819_19033 = G__19050;
            chunk__17820_19034 = G__19051;
            count__17821_19035 = G__19052;
            i__17822_19036 = G__19053;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.code.apply(null, a__11641__auto__);
  };
  var code = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return code__delegate.call(this, args__11640__auto__);
  };
  code.cljs$lang$maxFixedArity = 0;
  code.cljs$lang$applyTo = function(arglist__19054) {
    var args__11640__auto__ = cljs.core.seq(arglist__19054);
    return code__delegate(args__11640__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
quiescent.dom.col = function() {
  var col__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17827_19055 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17828_19056 = null;
    var count__17829_19057 = 0;
    var i__17830_19058 = 0;
    while (true) {
      if (i__17830_19058 < count__17829_19057) {
        var arg__11642__auto___19059 = cljs.core._nth.call(null, chunk__17828_19056, i__17830_19058);
        a__11641__auto__.push(arg__11642__auto___19059);
        var G__19060 = seq__17827_19055;
        var G__19061 = chunk__17828_19056;
        var G__19062 = count__17829_19057;
        var G__19063 = i__17830_19058 + 1;
        seq__17827_19055 = G__19060;
        chunk__17828_19056 = G__19061;
        count__17829_19057 = G__19062;
        i__17830_19058 = G__19063;
        continue;
      } else {
        var temp__4092__auto___19064 = cljs.core.seq.call(null, seq__17827_19055);
        if (temp__4092__auto___19064) {
          var seq__17827_19065__$1 = temp__4092__auto___19064;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17827_19065__$1)) {
            var c__11010__auto___19066 = cljs.core.chunk_first.call(null, seq__17827_19065__$1);
            var G__19067 = cljs.core.chunk_rest.call(null, seq__17827_19065__$1);
            var G__19068 = c__11010__auto___19066;
            var G__19069 = cljs.core.count.call(null, c__11010__auto___19066);
            var G__19070 = 0;
            seq__17827_19055 = G__19067;
            chunk__17828_19056 = G__19068;
            count__17829_19057 = G__19069;
            i__17830_19058 = G__19070;
            continue;
          } else {
            var arg__11642__auto___19071 = cljs.core.first.call(null, seq__17827_19065__$1);
            a__11641__auto__.push(arg__11642__auto___19071);
            var G__19072 = cljs.core.next.call(null, seq__17827_19065__$1);
            var G__19073 = null;
            var G__19074 = 0;
            var G__19075 = 0;
            seq__17827_19055 = G__19072;
            chunk__17828_19056 = G__19073;
            count__17829_19057 = G__19074;
            i__17830_19058 = G__19075;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.col.apply(null, a__11641__auto__);
  };
  var col = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col__delegate.call(this, args__11640__auto__);
  };
  col.cljs$lang$maxFixedArity = 0;
  col.cljs$lang$applyTo = function(arglist__19076) {
    var args__11640__auto__ = cljs.core.seq(arglist__19076);
    return col__delegate(args__11640__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
quiescent.dom.colgroup = function() {
  var colgroup__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17835_19077 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17836_19078 = null;
    var count__17837_19079 = 0;
    var i__17838_19080 = 0;
    while (true) {
      if (i__17838_19080 < count__17837_19079) {
        var arg__11642__auto___19081 = cljs.core._nth.call(null, chunk__17836_19078, i__17838_19080);
        a__11641__auto__.push(arg__11642__auto___19081);
        var G__19082 = seq__17835_19077;
        var G__19083 = chunk__17836_19078;
        var G__19084 = count__17837_19079;
        var G__19085 = i__17838_19080 + 1;
        seq__17835_19077 = G__19082;
        chunk__17836_19078 = G__19083;
        count__17837_19079 = G__19084;
        i__17838_19080 = G__19085;
        continue;
      } else {
        var temp__4092__auto___19086 = cljs.core.seq.call(null, seq__17835_19077);
        if (temp__4092__auto___19086) {
          var seq__17835_19087__$1 = temp__4092__auto___19086;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17835_19087__$1)) {
            var c__11010__auto___19088 = cljs.core.chunk_first.call(null, seq__17835_19087__$1);
            var G__19089 = cljs.core.chunk_rest.call(null, seq__17835_19087__$1);
            var G__19090 = c__11010__auto___19088;
            var G__19091 = cljs.core.count.call(null, c__11010__auto___19088);
            var G__19092 = 0;
            seq__17835_19077 = G__19089;
            chunk__17836_19078 = G__19090;
            count__17837_19079 = G__19091;
            i__17838_19080 = G__19092;
            continue;
          } else {
            var arg__11642__auto___19093 = cljs.core.first.call(null, seq__17835_19087__$1);
            a__11641__auto__.push(arg__11642__auto___19093);
            var G__19094 = cljs.core.next.call(null, seq__17835_19087__$1);
            var G__19095 = null;
            var G__19096 = 0;
            var G__19097 = 0;
            seq__17835_19077 = G__19094;
            chunk__17836_19078 = G__19095;
            count__17837_19079 = G__19096;
            i__17838_19080 = G__19097;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.colgroup.apply(null, a__11641__auto__);
  };
  var colgroup = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return colgroup__delegate.call(this, args__11640__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 0;
  colgroup.cljs$lang$applyTo = function(arglist__19098) {
    var args__11640__auto__ = cljs.core.seq(arglist__19098);
    return colgroup__delegate(args__11640__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
quiescent.dom.data = function() {
  var data__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17843_19099 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17844_19100 = null;
    var count__17845_19101 = 0;
    var i__17846_19102 = 0;
    while (true) {
      if (i__17846_19102 < count__17845_19101) {
        var arg__11642__auto___19103 = cljs.core._nth.call(null, chunk__17844_19100, i__17846_19102);
        a__11641__auto__.push(arg__11642__auto___19103);
        var G__19104 = seq__17843_19099;
        var G__19105 = chunk__17844_19100;
        var G__19106 = count__17845_19101;
        var G__19107 = i__17846_19102 + 1;
        seq__17843_19099 = G__19104;
        chunk__17844_19100 = G__19105;
        count__17845_19101 = G__19106;
        i__17846_19102 = G__19107;
        continue;
      } else {
        var temp__4092__auto___19108 = cljs.core.seq.call(null, seq__17843_19099);
        if (temp__4092__auto___19108) {
          var seq__17843_19109__$1 = temp__4092__auto___19108;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17843_19109__$1)) {
            var c__11010__auto___19110 = cljs.core.chunk_first.call(null, seq__17843_19109__$1);
            var G__19111 = cljs.core.chunk_rest.call(null, seq__17843_19109__$1);
            var G__19112 = c__11010__auto___19110;
            var G__19113 = cljs.core.count.call(null, c__11010__auto___19110);
            var G__19114 = 0;
            seq__17843_19099 = G__19111;
            chunk__17844_19100 = G__19112;
            count__17845_19101 = G__19113;
            i__17846_19102 = G__19114;
            continue;
          } else {
            var arg__11642__auto___19115 = cljs.core.first.call(null, seq__17843_19109__$1);
            a__11641__auto__.push(arg__11642__auto___19115);
            var G__19116 = cljs.core.next.call(null, seq__17843_19109__$1);
            var G__19117 = null;
            var G__19118 = 0;
            var G__19119 = 0;
            seq__17843_19099 = G__19116;
            chunk__17844_19100 = G__19117;
            count__17845_19101 = G__19118;
            i__17846_19102 = G__19119;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.data.apply(null, a__11641__auto__);
  };
  var data = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return data__delegate.call(this, args__11640__auto__);
  };
  data.cljs$lang$maxFixedArity = 0;
  data.cljs$lang$applyTo = function(arglist__19120) {
    var args__11640__auto__ = cljs.core.seq(arglist__19120);
    return data__delegate(args__11640__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
quiescent.dom.datalist = function() {
  var datalist__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17851_19121 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17852_19122 = null;
    var count__17853_19123 = 0;
    var i__17854_19124 = 0;
    while (true) {
      if (i__17854_19124 < count__17853_19123) {
        var arg__11642__auto___19125 = cljs.core._nth.call(null, chunk__17852_19122, i__17854_19124);
        a__11641__auto__.push(arg__11642__auto___19125);
        var G__19126 = seq__17851_19121;
        var G__19127 = chunk__17852_19122;
        var G__19128 = count__17853_19123;
        var G__19129 = i__17854_19124 + 1;
        seq__17851_19121 = G__19126;
        chunk__17852_19122 = G__19127;
        count__17853_19123 = G__19128;
        i__17854_19124 = G__19129;
        continue;
      } else {
        var temp__4092__auto___19130 = cljs.core.seq.call(null, seq__17851_19121);
        if (temp__4092__auto___19130) {
          var seq__17851_19131__$1 = temp__4092__auto___19130;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17851_19131__$1)) {
            var c__11010__auto___19132 = cljs.core.chunk_first.call(null, seq__17851_19131__$1);
            var G__19133 = cljs.core.chunk_rest.call(null, seq__17851_19131__$1);
            var G__19134 = c__11010__auto___19132;
            var G__19135 = cljs.core.count.call(null, c__11010__auto___19132);
            var G__19136 = 0;
            seq__17851_19121 = G__19133;
            chunk__17852_19122 = G__19134;
            count__17853_19123 = G__19135;
            i__17854_19124 = G__19136;
            continue;
          } else {
            var arg__11642__auto___19137 = cljs.core.first.call(null, seq__17851_19131__$1);
            a__11641__auto__.push(arg__11642__auto___19137);
            var G__19138 = cljs.core.next.call(null, seq__17851_19131__$1);
            var G__19139 = null;
            var G__19140 = 0;
            var G__19141 = 0;
            seq__17851_19121 = G__19138;
            chunk__17852_19122 = G__19139;
            count__17853_19123 = G__19140;
            i__17854_19124 = G__19141;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.datalist.apply(null, a__11641__auto__);
  };
  var datalist = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return datalist__delegate.call(this, args__11640__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 0;
  datalist.cljs$lang$applyTo = function(arglist__19142) {
    var args__11640__auto__ = cljs.core.seq(arglist__19142);
    return datalist__delegate(args__11640__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
quiescent.dom.dd = function() {
  var dd__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17859_19143 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17860_19144 = null;
    var count__17861_19145 = 0;
    var i__17862_19146 = 0;
    while (true) {
      if (i__17862_19146 < count__17861_19145) {
        var arg__11642__auto___19147 = cljs.core._nth.call(null, chunk__17860_19144, i__17862_19146);
        a__11641__auto__.push(arg__11642__auto___19147);
        var G__19148 = seq__17859_19143;
        var G__19149 = chunk__17860_19144;
        var G__19150 = count__17861_19145;
        var G__19151 = i__17862_19146 + 1;
        seq__17859_19143 = G__19148;
        chunk__17860_19144 = G__19149;
        count__17861_19145 = G__19150;
        i__17862_19146 = G__19151;
        continue;
      } else {
        var temp__4092__auto___19152 = cljs.core.seq.call(null, seq__17859_19143);
        if (temp__4092__auto___19152) {
          var seq__17859_19153__$1 = temp__4092__auto___19152;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17859_19153__$1)) {
            var c__11010__auto___19154 = cljs.core.chunk_first.call(null, seq__17859_19153__$1);
            var G__19155 = cljs.core.chunk_rest.call(null, seq__17859_19153__$1);
            var G__19156 = c__11010__auto___19154;
            var G__19157 = cljs.core.count.call(null, c__11010__auto___19154);
            var G__19158 = 0;
            seq__17859_19143 = G__19155;
            chunk__17860_19144 = G__19156;
            count__17861_19145 = G__19157;
            i__17862_19146 = G__19158;
            continue;
          } else {
            var arg__11642__auto___19159 = cljs.core.first.call(null, seq__17859_19153__$1);
            a__11641__auto__.push(arg__11642__auto___19159);
            var G__19160 = cljs.core.next.call(null, seq__17859_19153__$1);
            var G__19161 = null;
            var G__19162 = 0;
            var G__19163 = 0;
            seq__17859_19143 = G__19160;
            chunk__17860_19144 = G__19161;
            count__17861_19145 = G__19162;
            i__17862_19146 = G__19163;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dd.apply(null, a__11641__auto__);
  };
  var dd = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dd__delegate.call(this, args__11640__auto__);
  };
  dd.cljs$lang$maxFixedArity = 0;
  dd.cljs$lang$applyTo = function(arglist__19164) {
    var args__11640__auto__ = cljs.core.seq(arglist__19164);
    return dd__delegate(args__11640__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
quiescent.dom.del = function() {
  var del__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17867_19165 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17868_19166 = null;
    var count__17869_19167 = 0;
    var i__17870_19168 = 0;
    while (true) {
      if (i__17870_19168 < count__17869_19167) {
        var arg__11642__auto___19169 = cljs.core._nth.call(null, chunk__17868_19166, i__17870_19168);
        a__11641__auto__.push(arg__11642__auto___19169);
        var G__19170 = seq__17867_19165;
        var G__19171 = chunk__17868_19166;
        var G__19172 = count__17869_19167;
        var G__19173 = i__17870_19168 + 1;
        seq__17867_19165 = G__19170;
        chunk__17868_19166 = G__19171;
        count__17869_19167 = G__19172;
        i__17870_19168 = G__19173;
        continue;
      } else {
        var temp__4092__auto___19174 = cljs.core.seq.call(null, seq__17867_19165);
        if (temp__4092__auto___19174) {
          var seq__17867_19175__$1 = temp__4092__auto___19174;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17867_19175__$1)) {
            var c__11010__auto___19176 = cljs.core.chunk_first.call(null, seq__17867_19175__$1);
            var G__19177 = cljs.core.chunk_rest.call(null, seq__17867_19175__$1);
            var G__19178 = c__11010__auto___19176;
            var G__19179 = cljs.core.count.call(null, c__11010__auto___19176);
            var G__19180 = 0;
            seq__17867_19165 = G__19177;
            chunk__17868_19166 = G__19178;
            count__17869_19167 = G__19179;
            i__17870_19168 = G__19180;
            continue;
          } else {
            var arg__11642__auto___19181 = cljs.core.first.call(null, seq__17867_19175__$1);
            a__11641__auto__.push(arg__11642__auto___19181);
            var G__19182 = cljs.core.next.call(null, seq__17867_19175__$1);
            var G__19183 = null;
            var G__19184 = 0;
            var G__19185 = 0;
            seq__17867_19165 = G__19182;
            chunk__17868_19166 = G__19183;
            count__17869_19167 = G__19184;
            i__17870_19168 = G__19185;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.del.apply(null, a__11641__auto__);
  };
  var del = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return del__delegate.call(this, args__11640__auto__);
  };
  del.cljs$lang$maxFixedArity = 0;
  del.cljs$lang$applyTo = function(arglist__19186) {
    var args__11640__auto__ = cljs.core.seq(arglist__19186);
    return del__delegate(args__11640__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
quiescent.dom.details = function() {
  var details__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17875_19187 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17876_19188 = null;
    var count__17877_19189 = 0;
    var i__17878_19190 = 0;
    while (true) {
      if (i__17878_19190 < count__17877_19189) {
        var arg__11642__auto___19191 = cljs.core._nth.call(null, chunk__17876_19188, i__17878_19190);
        a__11641__auto__.push(arg__11642__auto___19191);
        var G__19192 = seq__17875_19187;
        var G__19193 = chunk__17876_19188;
        var G__19194 = count__17877_19189;
        var G__19195 = i__17878_19190 + 1;
        seq__17875_19187 = G__19192;
        chunk__17876_19188 = G__19193;
        count__17877_19189 = G__19194;
        i__17878_19190 = G__19195;
        continue;
      } else {
        var temp__4092__auto___19196 = cljs.core.seq.call(null, seq__17875_19187);
        if (temp__4092__auto___19196) {
          var seq__17875_19197__$1 = temp__4092__auto___19196;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17875_19197__$1)) {
            var c__11010__auto___19198 = cljs.core.chunk_first.call(null, seq__17875_19197__$1);
            var G__19199 = cljs.core.chunk_rest.call(null, seq__17875_19197__$1);
            var G__19200 = c__11010__auto___19198;
            var G__19201 = cljs.core.count.call(null, c__11010__auto___19198);
            var G__19202 = 0;
            seq__17875_19187 = G__19199;
            chunk__17876_19188 = G__19200;
            count__17877_19189 = G__19201;
            i__17878_19190 = G__19202;
            continue;
          } else {
            var arg__11642__auto___19203 = cljs.core.first.call(null, seq__17875_19197__$1);
            a__11641__auto__.push(arg__11642__auto___19203);
            var G__19204 = cljs.core.next.call(null, seq__17875_19197__$1);
            var G__19205 = null;
            var G__19206 = 0;
            var G__19207 = 0;
            seq__17875_19187 = G__19204;
            chunk__17876_19188 = G__19205;
            count__17877_19189 = G__19206;
            i__17878_19190 = G__19207;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.details.apply(null, a__11641__auto__);
  };
  var details = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return details__delegate.call(this, args__11640__auto__);
  };
  details.cljs$lang$maxFixedArity = 0;
  details.cljs$lang$applyTo = function(arglist__19208) {
    var args__11640__auto__ = cljs.core.seq(arglist__19208);
    return details__delegate(args__11640__auto__);
  };
  details.cljs$core$IFn$_invoke$arity$variadic = details__delegate;
  return details;
}();
quiescent.dom.dfn = function() {
  var dfn__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17883_19209 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17884_19210 = null;
    var count__17885_19211 = 0;
    var i__17886_19212 = 0;
    while (true) {
      if (i__17886_19212 < count__17885_19211) {
        var arg__11642__auto___19213 = cljs.core._nth.call(null, chunk__17884_19210, i__17886_19212);
        a__11641__auto__.push(arg__11642__auto___19213);
        var G__19214 = seq__17883_19209;
        var G__19215 = chunk__17884_19210;
        var G__19216 = count__17885_19211;
        var G__19217 = i__17886_19212 + 1;
        seq__17883_19209 = G__19214;
        chunk__17884_19210 = G__19215;
        count__17885_19211 = G__19216;
        i__17886_19212 = G__19217;
        continue;
      } else {
        var temp__4092__auto___19218 = cljs.core.seq.call(null, seq__17883_19209);
        if (temp__4092__auto___19218) {
          var seq__17883_19219__$1 = temp__4092__auto___19218;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17883_19219__$1)) {
            var c__11010__auto___19220 = cljs.core.chunk_first.call(null, seq__17883_19219__$1);
            var G__19221 = cljs.core.chunk_rest.call(null, seq__17883_19219__$1);
            var G__19222 = c__11010__auto___19220;
            var G__19223 = cljs.core.count.call(null, c__11010__auto___19220);
            var G__19224 = 0;
            seq__17883_19209 = G__19221;
            chunk__17884_19210 = G__19222;
            count__17885_19211 = G__19223;
            i__17886_19212 = G__19224;
            continue;
          } else {
            var arg__11642__auto___19225 = cljs.core.first.call(null, seq__17883_19219__$1);
            a__11641__auto__.push(arg__11642__auto___19225);
            var G__19226 = cljs.core.next.call(null, seq__17883_19219__$1);
            var G__19227 = null;
            var G__19228 = 0;
            var G__19229 = 0;
            seq__17883_19209 = G__19226;
            chunk__17884_19210 = G__19227;
            count__17885_19211 = G__19228;
            i__17886_19212 = G__19229;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dfn.apply(null, a__11641__auto__);
  };
  var dfn = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dfn__delegate.call(this, args__11640__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 0;
  dfn.cljs$lang$applyTo = function(arglist__19230) {
    var args__11640__auto__ = cljs.core.seq(arglist__19230);
    return dfn__delegate(args__11640__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
quiescent.dom.div = function() {
  var div__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17891_19231 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17892_19232 = null;
    var count__17893_19233 = 0;
    var i__17894_19234 = 0;
    while (true) {
      if (i__17894_19234 < count__17893_19233) {
        var arg__11642__auto___19235 = cljs.core._nth.call(null, chunk__17892_19232, i__17894_19234);
        a__11641__auto__.push(arg__11642__auto___19235);
        var G__19236 = seq__17891_19231;
        var G__19237 = chunk__17892_19232;
        var G__19238 = count__17893_19233;
        var G__19239 = i__17894_19234 + 1;
        seq__17891_19231 = G__19236;
        chunk__17892_19232 = G__19237;
        count__17893_19233 = G__19238;
        i__17894_19234 = G__19239;
        continue;
      } else {
        var temp__4092__auto___19240 = cljs.core.seq.call(null, seq__17891_19231);
        if (temp__4092__auto___19240) {
          var seq__17891_19241__$1 = temp__4092__auto___19240;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17891_19241__$1)) {
            var c__11010__auto___19242 = cljs.core.chunk_first.call(null, seq__17891_19241__$1);
            var G__19243 = cljs.core.chunk_rest.call(null, seq__17891_19241__$1);
            var G__19244 = c__11010__auto___19242;
            var G__19245 = cljs.core.count.call(null, c__11010__auto___19242);
            var G__19246 = 0;
            seq__17891_19231 = G__19243;
            chunk__17892_19232 = G__19244;
            count__17893_19233 = G__19245;
            i__17894_19234 = G__19246;
            continue;
          } else {
            var arg__11642__auto___19247 = cljs.core.first.call(null, seq__17891_19241__$1);
            a__11641__auto__.push(arg__11642__auto___19247);
            var G__19248 = cljs.core.next.call(null, seq__17891_19241__$1);
            var G__19249 = null;
            var G__19250 = 0;
            var G__19251 = 0;
            seq__17891_19231 = G__19248;
            chunk__17892_19232 = G__19249;
            count__17893_19233 = G__19250;
            i__17894_19234 = G__19251;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.div.apply(null, a__11641__auto__);
  };
  var div = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return div__delegate.call(this, args__11640__auto__);
  };
  div.cljs$lang$maxFixedArity = 0;
  div.cljs$lang$applyTo = function(arglist__19252) {
    var args__11640__auto__ = cljs.core.seq(arglist__19252);
    return div__delegate(args__11640__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
quiescent.dom.dl = function() {
  var dl__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17899_19253 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17900_19254 = null;
    var count__17901_19255 = 0;
    var i__17902_19256 = 0;
    while (true) {
      if (i__17902_19256 < count__17901_19255) {
        var arg__11642__auto___19257 = cljs.core._nth.call(null, chunk__17900_19254, i__17902_19256);
        a__11641__auto__.push(arg__11642__auto___19257);
        var G__19258 = seq__17899_19253;
        var G__19259 = chunk__17900_19254;
        var G__19260 = count__17901_19255;
        var G__19261 = i__17902_19256 + 1;
        seq__17899_19253 = G__19258;
        chunk__17900_19254 = G__19259;
        count__17901_19255 = G__19260;
        i__17902_19256 = G__19261;
        continue;
      } else {
        var temp__4092__auto___19262 = cljs.core.seq.call(null, seq__17899_19253);
        if (temp__4092__auto___19262) {
          var seq__17899_19263__$1 = temp__4092__auto___19262;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17899_19263__$1)) {
            var c__11010__auto___19264 = cljs.core.chunk_first.call(null, seq__17899_19263__$1);
            var G__19265 = cljs.core.chunk_rest.call(null, seq__17899_19263__$1);
            var G__19266 = c__11010__auto___19264;
            var G__19267 = cljs.core.count.call(null, c__11010__auto___19264);
            var G__19268 = 0;
            seq__17899_19253 = G__19265;
            chunk__17900_19254 = G__19266;
            count__17901_19255 = G__19267;
            i__17902_19256 = G__19268;
            continue;
          } else {
            var arg__11642__auto___19269 = cljs.core.first.call(null, seq__17899_19263__$1);
            a__11641__auto__.push(arg__11642__auto___19269);
            var G__19270 = cljs.core.next.call(null, seq__17899_19263__$1);
            var G__19271 = null;
            var G__19272 = 0;
            var G__19273 = 0;
            seq__17899_19253 = G__19270;
            chunk__17900_19254 = G__19271;
            count__17901_19255 = G__19272;
            i__17902_19256 = G__19273;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dl.apply(null, a__11641__auto__);
  };
  var dl = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dl__delegate.call(this, args__11640__auto__);
  };
  dl.cljs$lang$maxFixedArity = 0;
  dl.cljs$lang$applyTo = function(arglist__19274) {
    var args__11640__auto__ = cljs.core.seq(arglist__19274);
    return dl__delegate(args__11640__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
quiescent.dom.dt = function() {
  var dt__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17907_19275 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17908_19276 = null;
    var count__17909_19277 = 0;
    var i__17910_19278 = 0;
    while (true) {
      if (i__17910_19278 < count__17909_19277) {
        var arg__11642__auto___19279 = cljs.core._nth.call(null, chunk__17908_19276, i__17910_19278);
        a__11641__auto__.push(arg__11642__auto___19279);
        var G__19280 = seq__17907_19275;
        var G__19281 = chunk__17908_19276;
        var G__19282 = count__17909_19277;
        var G__19283 = i__17910_19278 + 1;
        seq__17907_19275 = G__19280;
        chunk__17908_19276 = G__19281;
        count__17909_19277 = G__19282;
        i__17910_19278 = G__19283;
        continue;
      } else {
        var temp__4092__auto___19284 = cljs.core.seq.call(null, seq__17907_19275);
        if (temp__4092__auto___19284) {
          var seq__17907_19285__$1 = temp__4092__auto___19284;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17907_19285__$1)) {
            var c__11010__auto___19286 = cljs.core.chunk_first.call(null, seq__17907_19285__$1);
            var G__19287 = cljs.core.chunk_rest.call(null, seq__17907_19285__$1);
            var G__19288 = c__11010__auto___19286;
            var G__19289 = cljs.core.count.call(null, c__11010__auto___19286);
            var G__19290 = 0;
            seq__17907_19275 = G__19287;
            chunk__17908_19276 = G__19288;
            count__17909_19277 = G__19289;
            i__17910_19278 = G__19290;
            continue;
          } else {
            var arg__11642__auto___19291 = cljs.core.first.call(null, seq__17907_19285__$1);
            a__11641__auto__.push(arg__11642__auto___19291);
            var G__19292 = cljs.core.next.call(null, seq__17907_19285__$1);
            var G__19293 = null;
            var G__19294 = 0;
            var G__19295 = 0;
            seq__17907_19275 = G__19292;
            chunk__17908_19276 = G__19293;
            count__17909_19277 = G__19294;
            i__17910_19278 = G__19295;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dt.apply(null, a__11641__auto__);
  };
  var dt = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dt__delegate.call(this, args__11640__auto__);
  };
  dt.cljs$lang$maxFixedArity = 0;
  dt.cljs$lang$applyTo = function(arglist__19296) {
    var args__11640__auto__ = cljs.core.seq(arglist__19296);
    return dt__delegate(args__11640__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
quiescent.dom.em = function() {
  var em__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17915_19297 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17916_19298 = null;
    var count__17917_19299 = 0;
    var i__17918_19300 = 0;
    while (true) {
      if (i__17918_19300 < count__17917_19299) {
        var arg__11642__auto___19301 = cljs.core._nth.call(null, chunk__17916_19298, i__17918_19300);
        a__11641__auto__.push(arg__11642__auto___19301);
        var G__19302 = seq__17915_19297;
        var G__19303 = chunk__17916_19298;
        var G__19304 = count__17917_19299;
        var G__19305 = i__17918_19300 + 1;
        seq__17915_19297 = G__19302;
        chunk__17916_19298 = G__19303;
        count__17917_19299 = G__19304;
        i__17918_19300 = G__19305;
        continue;
      } else {
        var temp__4092__auto___19306 = cljs.core.seq.call(null, seq__17915_19297);
        if (temp__4092__auto___19306) {
          var seq__17915_19307__$1 = temp__4092__auto___19306;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17915_19307__$1)) {
            var c__11010__auto___19308 = cljs.core.chunk_first.call(null, seq__17915_19307__$1);
            var G__19309 = cljs.core.chunk_rest.call(null, seq__17915_19307__$1);
            var G__19310 = c__11010__auto___19308;
            var G__19311 = cljs.core.count.call(null, c__11010__auto___19308);
            var G__19312 = 0;
            seq__17915_19297 = G__19309;
            chunk__17916_19298 = G__19310;
            count__17917_19299 = G__19311;
            i__17918_19300 = G__19312;
            continue;
          } else {
            var arg__11642__auto___19313 = cljs.core.first.call(null, seq__17915_19307__$1);
            a__11641__auto__.push(arg__11642__auto___19313);
            var G__19314 = cljs.core.next.call(null, seq__17915_19307__$1);
            var G__19315 = null;
            var G__19316 = 0;
            var G__19317 = 0;
            seq__17915_19297 = G__19314;
            chunk__17916_19298 = G__19315;
            count__17917_19299 = G__19316;
            i__17918_19300 = G__19317;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.em.apply(null, a__11641__auto__);
  };
  var em = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return em__delegate.call(this, args__11640__auto__);
  };
  em.cljs$lang$maxFixedArity = 0;
  em.cljs$lang$applyTo = function(arglist__19318) {
    var args__11640__auto__ = cljs.core.seq(arglist__19318);
    return em__delegate(args__11640__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
quiescent.dom.embed = function() {
  var embed__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17931_19319 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17932_19320 = null;
    var count__17933_19321 = 0;
    var i__17934_19322 = 0;
    while (true) {
      if (i__17934_19322 < count__17933_19321) {
        var arg__11642__auto___19323 = cljs.core._nth.call(null, chunk__17932_19320, i__17934_19322);
        a__11641__auto__.push(arg__11642__auto___19323);
        var G__19324 = seq__17931_19319;
        var G__19325 = chunk__17932_19320;
        var G__19326 = count__17933_19321;
        var G__19327 = i__17934_19322 + 1;
        seq__17931_19319 = G__19324;
        chunk__17932_19320 = G__19325;
        count__17933_19321 = G__19326;
        i__17934_19322 = G__19327;
        continue;
      } else {
        var temp__4092__auto___19328 = cljs.core.seq.call(null, seq__17931_19319);
        if (temp__4092__auto___19328) {
          var seq__17931_19329__$1 = temp__4092__auto___19328;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17931_19329__$1)) {
            var c__11010__auto___19330 = cljs.core.chunk_first.call(null, seq__17931_19329__$1);
            var G__19331 = cljs.core.chunk_rest.call(null, seq__17931_19329__$1);
            var G__19332 = c__11010__auto___19330;
            var G__19333 = cljs.core.count.call(null, c__11010__auto___19330);
            var G__19334 = 0;
            seq__17931_19319 = G__19331;
            chunk__17932_19320 = G__19332;
            count__17933_19321 = G__19333;
            i__17934_19322 = G__19334;
            continue;
          } else {
            var arg__11642__auto___19335 = cljs.core.first.call(null, seq__17931_19329__$1);
            a__11641__auto__.push(arg__11642__auto___19335);
            var G__19336 = cljs.core.next.call(null, seq__17931_19329__$1);
            var G__19337 = null;
            var G__19338 = 0;
            var G__19339 = 0;
            seq__17931_19319 = G__19336;
            chunk__17932_19320 = G__19337;
            count__17933_19321 = G__19338;
            i__17934_19322 = G__19339;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.embed.apply(null, a__11641__auto__);
  };
  var embed = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return embed__delegate.call(this, args__11640__auto__);
  };
  embed.cljs$lang$maxFixedArity = 0;
  embed.cljs$lang$applyTo = function(arglist__19340) {
    var args__11640__auto__ = cljs.core.seq(arglist__19340);
    return embed__delegate(args__11640__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
quiescent.dom.fieldset = function() {
  var fieldset__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17939_19341 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17940_19342 = null;
    var count__17941_19343 = 0;
    var i__17942_19344 = 0;
    while (true) {
      if (i__17942_19344 < count__17941_19343) {
        var arg__11642__auto___19345 = cljs.core._nth.call(null, chunk__17940_19342, i__17942_19344);
        a__11641__auto__.push(arg__11642__auto___19345);
        var G__19346 = seq__17939_19341;
        var G__19347 = chunk__17940_19342;
        var G__19348 = count__17941_19343;
        var G__19349 = i__17942_19344 + 1;
        seq__17939_19341 = G__19346;
        chunk__17940_19342 = G__19347;
        count__17941_19343 = G__19348;
        i__17942_19344 = G__19349;
        continue;
      } else {
        var temp__4092__auto___19350 = cljs.core.seq.call(null, seq__17939_19341);
        if (temp__4092__auto___19350) {
          var seq__17939_19351__$1 = temp__4092__auto___19350;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17939_19351__$1)) {
            var c__11010__auto___19352 = cljs.core.chunk_first.call(null, seq__17939_19351__$1);
            var G__19353 = cljs.core.chunk_rest.call(null, seq__17939_19351__$1);
            var G__19354 = c__11010__auto___19352;
            var G__19355 = cljs.core.count.call(null, c__11010__auto___19352);
            var G__19356 = 0;
            seq__17939_19341 = G__19353;
            chunk__17940_19342 = G__19354;
            count__17941_19343 = G__19355;
            i__17942_19344 = G__19356;
            continue;
          } else {
            var arg__11642__auto___19357 = cljs.core.first.call(null, seq__17939_19351__$1);
            a__11641__auto__.push(arg__11642__auto___19357);
            var G__19358 = cljs.core.next.call(null, seq__17939_19351__$1);
            var G__19359 = null;
            var G__19360 = 0;
            var G__19361 = 0;
            seq__17939_19341 = G__19358;
            chunk__17940_19342 = G__19359;
            count__17941_19343 = G__19360;
            i__17942_19344 = G__19361;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.fieldset.apply(null, a__11641__auto__);
  };
  var fieldset = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return fieldset__delegate.call(this, args__11640__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 0;
  fieldset.cljs$lang$applyTo = function(arglist__19362) {
    var args__11640__auto__ = cljs.core.seq(arglist__19362);
    return fieldset__delegate(args__11640__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
quiescent.dom.figcaption = function() {
  var figcaption__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17947_19363 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17948_19364 = null;
    var count__17949_19365 = 0;
    var i__17950_19366 = 0;
    while (true) {
      if (i__17950_19366 < count__17949_19365) {
        var arg__11642__auto___19367 = cljs.core._nth.call(null, chunk__17948_19364, i__17950_19366);
        a__11641__auto__.push(arg__11642__auto___19367);
        var G__19368 = seq__17947_19363;
        var G__19369 = chunk__17948_19364;
        var G__19370 = count__17949_19365;
        var G__19371 = i__17950_19366 + 1;
        seq__17947_19363 = G__19368;
        chunk__17948_19364 = G__19369;
        count__17949_19365 = G__19370;
        i__17950_19366 = G__19371;
        continue;
      } else {
        var temp__4092__auto___19372 = cljs.core.seq.call(null, seq__17947_19363);
        if (temp__4092__auto___19372) {
          var seq__17947_19373__$1 = temp__4092__auto___19372;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17947_19373__$1)) {
            var c__11010__auto___19374 = cljs.core.chunk_first.call(null, seq__17947_19373__$1);
            var G__19375 = cljs.core.chunk_rest.call(null, seq__17947_19373__$1);
            var G__19376 = c__11010__auto___19374;
            var G__19377 = cljs.core.count.call(null, c__11010__auto___19374);
            var G__19378 = 0;
            seq__17947_19363 = G__19375;
            chunk__17948_19364 = G__19376;
            count__17949_19365 = G__19377;
            i__17950_19366 = G__19378;
            continue;
          } else {
            var arg__11642__auto___19379 = cljs.core.first.call(null, seq__17947_19373__$1);
            a__11641__auto__.push(arg__11642__auto___19379);
            var G__19380 = cljs.core.next.call(null, seq__17947_19373__$1);
            var G__19381 = null;
            var G__19382 = 0;
            var G__19383 = 0;
            seq__17947_19363 = G__19380;
            chunk__17948_19364 = G__19381;
            count__17949_19365 = G__19382;
            i__17950_19366 = G__19383;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figcaption.apply(null, a__11641__auto__);
  };
  var figcaption = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figcaption__delegate.call(this, args__11640__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 0;
  figcaption.cljs$lang$applyTo = function(arglist__19384) {
    var args__11640__auto__ = cljs.core.seq(arglist__19384);
    return figcaption__delegate(args__11640__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
quiescent.dom.figure = function() {
  var figure__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17955_19385 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17956_19386 = null;
    var count__17957_19387 = 0;
    var i__17958_19388 = 0;
    while (true) {
      if (i__17958_19388 < count__17957_19387) {
        var arg__11642__auto___19389 = cljs.core._nth.call(null, chunk__17956_19386, i__17958_19388);
        a__11641__auto__.push(arg__11642__auto___19389);
        var G__19390 = seq__17955_19385;
        var G__19391 = chunk__17956_19386;
        var G__19392 = count__17957_19387;
        var G__19393 = i__17958_19388 + 1;
        seq__17955_19385 = G__19390;
        chunk__17956_19386 = G__19391;
        count__17957_19387 = G__19392;
        i__17958_19388 = G__19393;
        continue;
      } else {
        var temp__4092__auto___19394 = cljs.core.seq.call(null, seq__17955_19385);
        if (temp__4092__auto___19394) {
          var seq__17955_19395__$1 = temp__4092__auto___19394;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17955_19395__$1)) {
            var c__11010__auto___19396 = cljs.core.chunk_first.call(null, seq__17955_19395__$1);
            var G__19397 = cljs.core.chunk_rest.call(null, seq__17955_19395__$1);
            var G__19398 = c__11010__auto___19396;
            var G__19399 = cljs.core.count.call(null, c__11010__auto___19396);
            var G__19400 = 0;
            seq__17955_19385 = G__19397;
            chunk__17956_19386 = G__19398;
            count__17957_19387 = G__19399;
            i__17958_19388 = G__19400;
            continue;
          } else {
            var arg__11642__auto___19401 = cljs.core.first.call(null, seq__17955_19395__$1);
            a__11641__auto__.push(arg__11642__auto___19401);
            var G__19402 = cljs.core.next.call(null, seq__17955_19395__$1);
            var G__19403 = null;
            var G__19404 = 0;
            var G__19405 = 0;
            seq__17955_19385 = G__19402;
            chunk__17956_19386 = G__19403;
            count__17957_19387 = G__19404;
            i__17958_19388 = G__19405;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figure.apply(null, a__11641__auto__);
  };
  var figure = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figure__delegate.call(this, args__11640__auto__);
  };
  figure.cljs$lang$maxFixedArity = 0;
  figure.cljs$lang$applyTo = function(arglist__19406) {
    var args__11640__auto__ = cljs.core.seq(arglist__19406);
    return figure__delegate(args__11640__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
quiescent.dom.footer = function() {
  var footer__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17963_19407 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17964_19408 = null;
    var count__17965_19409 = 0;
    var i__17966_19410 = 0;
    while (true) {
      if (i__17966_19410 < count__17965_19409) {
        var arg__11642__auto___19411 = cljs.core._nth.call(null, chunk__17964_19408, i__17966_19410);
        a__11641__auto__.push(arg__11642__auto___19411);
        var G__19412 = seq__17963_19407;
        var G__19413 = chunk__17964_19408;
        var G__19414 = count__17965_19409;
        var G__19415 = i__17966_19410 + 1;
        seq__17963_19407 = G__19412;
        chunk__17964_19408 = G__19413;
        count__17965_19409 = G__19414;
        i__17966_19410 = G__19415;
        continue;
      } else {
        var temp__4092__auto___19416 = cljs.core.seq.call(null, seq__17963_19407);
        if (temp__4092__auto___19416) {
          var seq__17963_19417__$1 = temp__4092__auto___19416;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17963_19417__$1)) {
            var c__11010__auto___19418 = cljs.core.chunk_first.call(null, seq__17963_19417__$1);
            var G__19419 = cljs.core.chunk_rest.call(null, seq__17963_19417__$1);
            var G__19420 = c__11010__auto___19418;
            var G__19421 = cljs.core.count.call(null, c__11010__auto___19418);
            var G__19422 = 0;
            seq__17963_19407 = G__19419;
            chunk__17964_19408 = G__19420;
            count__17965_19409 = G__19421;
            i__17966_19410 = G__19422;
            continue;
          } else {
            var arg__11642__auto___19423 = cljs.core.first.call(null, seq__17963_19417__$1);
            a__11641__auto__.push(arg__11642__auto___19423);
            var G__19424 = cljs.core.next.call(null, seq__17963_19417__$1);
            var G__19425 = null;
            var G__19426 = 0;
            var G__19427 = 0;
            seq__17963_19407 = G__19424;
            chunk__17964_19408 = G__19425;
            count__17965_19409 = G__19426;
            i__17966_19410 = G__19427;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.footer.apply(null, a__11641__auto__);
  };
  var footer = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return footer__delegate.call(this, args__11640__auto__);
  };
  footer.cljs$lang$maxFixedArity = 0;
  footer.cljs$lang$applyTo = function(arglist__19428) {
    var args__11640__auto__ = cljs.core.seq(arglist__19428);
    return footer__delegate(args__11640__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
quiescent.dom.form = function() {
  var form__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17971_19429 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17972_19430 = null;
    var count__17973_19431 = 0;
    var i__17974_19432 = 0;
    while (true) {
      if (i__17974_19432 < count__17973_19431) {
        var arg__11642__auto___19433 = cljs.core._nth.call(null, chunk__17972_19430, i__17974_19432);
        a__11641__auto__.push(arg__11642__auto___19433);
        var G__19434 = seq__17971_19429;
        var G__19435 = chunk__17972_19430;
        var G__19436 = count__17973_19431;
        var G__19437 = i__17974_19432 + 1;
        seq__17971_19429 = G__19434;
        chunk__17972_19430 = G__19435;
        count__17973_19431 = G__19436;
        i__17974_19432 = G__19437;
        continue;
      } else {
        var temp__4092__auto___19438 = cljs.core.seq.call(null, seq__17971_19429);
        if (temp__4092__auto___19438) {
          var seq__17971_19439__$1 = temp__4092__auto___19438;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17971_19439__$1)) {
            var c__11010__auto___19440 = cljs.core.chunk_first.call(null, seq__17971_19439__$1);
            var G__19441 = cljs.core.chunk_rest.call(null, seq__17971_19439__$1);
            var G__19442 = c__11010__auto___19440;
            var G__19443 = cljs.core.count.call(null, c__11010__auto___19440);
            var G__19444 = 0;
            seq__17971_19429 = G__19441;
            chunk__17972_19430 = G__19442;
            count__17973_19431 = G__19443;
            i__17974_19432 = G__19444;
            continue;
          } else {
            var arg__11642__auto___19445 = cljs.core.first.call(null, seq__17971_19439__$1);
            a__11641__auto__.push(arg__11642__auto___19445);
            var G__19446 = cljs.core.next.call(null, seq__17971_19439__$1);
            var G__19447 = null;
            var G__19448 = 0;
            var G__19449 = 0;
            seq__17971_19429 = G__19446;
            chunk__17972_19430 = G__19447;
            count__17973_19431 = G__19448;
            i__17974_19432 = G__19449;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.form.apply(null, a__11641__auto__);
  };
  var form = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return form__delegate.call(this, args__11640__auto__);
  };
  form.cljs$lang$maxFixedArity = 0;
  form.cljs$lang$applyTo = function(arglist__19450) {
    var args__11640__auto__ = cljs.core.seq(arglist__19450);
    return form__delegate(args__11640__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
quiescent.dom.h1 = function() {
  var h1__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17979_19451 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17980_19452 = null;
    var count__17981_19453 = 0;
    var i__17982_19454 = 0;
    while (true) {
      if (i__17982_19454 < count__17981_19453) {
        var arg__11642__auto___19455 = cljs.core._nth.call(null, chunk__17980_19452, i__17982_19454);
        a__11641__auto__.push(arg__11642__auto___19455);
        var G__19456 = seq__17979_19451;
        var G__19457 = chunk__17980_19452;
        var G__19458 = count__17981_19453;
        var G__19459 = i__17982_19454 + 1;
        seq__17979_19451 = G__19456;
        chunk__17980_19452 = G__19457;
        count__17981_19453 = G__19458;
        i__17982_19454 = G__19459;
        continue;
      } else {
        var temp__4092__auto___19460 = cljs.core.seq.call(null, seq__17979_19451);
        if (temp__4092__auto___19460) {
          var seq__17979_19461__$1 = temp__4092__auto___19460;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17979_19461__$1)) {
            var c__11010__auto___19462 = cljs.core.chunk_first.call(null, seq__17979_19461__$1);
            var G__19463 = cljs.core.chunk_rest.call(null, seq__17979_19461__$1);
            var G__19464 = c__11010__auto___19462;
            var G__19465 = cljs.core.count.call(null, c__11010__auto___19462);
            var G__19466 = 0;
            seq__17979_19451 = G__19463;
            chunk__17980_19452 = G__19464;
            count__17981_19453 = G__19465;
            i__17982_19454 = G__19466;
            continue;
          } else {
            var arg__11642__auto___19467 = cljs.core.first.call(null, seq__17979_19461__$1);
            a__11641__auto__.push(arg__11642__auto___19467);
            var G__19468 = cljs.core.next.call(null, seq__17979_19461__$1);
            var G__19469 = null;
            var G__19470 = 0;
            var G__19471 = 0;
            seq__17979_19451 = G__19468;
            chunk__17980_19452 = G__19469;
            count__17981_19453 = G__19470;
            i__17982_19454 = G__19471;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h1.apply(null, a__11641__auto__);
  };
  var h1 = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h1__delegate.call(this, args__11640__auto__);
  };
  h1.cljs$lang$maxFixedArity = 0;
  h1.cljs$lang$applyTo = function(arglist__19472) {
    var args__11640__auto__ = cljs.core.seq(arglist__19472);
    return h1__delegate(args__11640__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
quiescent.dom.h2 = function() {
  var h2__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17987_19473 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17988_19474 = null;
    var count__17989_19475 = 0;
    var i__17990_19476 = 0;
    while (true) {
      if (i__17990_19476 < count__17989_19475) {
        var arg__11642__auto___19477 = cljs.core._nth.call(null, chunk__17988_19474, i__17990_19476);
        a__11641__auto__.push(arg__11642__auto___19477);
        var G__19478 = seq__17987_19473;
        var G__19479 = chunk__17988_19474;
        var G__19480 = count__17989_19475;
        var G__19481 = i__17990_19476 + 1;
        seq__17987_19473 = G__19478;
        chunk__17988_19474 = G__19479;
        count__17989_19475 = G__19480;
        i__17990_19476 = G__19481;
        continue;
      } else {
        var temp__4092__auto___19482 = cljs.core.seq.call(null, seq__17987_19473);
        if (temp__4092__auto___19482) {
          var seq__17987_19483__$1 = temp__4092__auto___19482;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17987_19483__$1)) {
            var c__11010__auto___19484 = cljs.core.chunk_first.call(null, seq__17987_19483__$1);
            var G__19485 = cljs.core.chunk_rest.call(null, seq__17987_19483__$1);
            var G__19486 = c__11010__auto___19484;
            var G__19487 = cljs.core.count.call(null, c__11010__auto___19484);
            var G__19488 = 0;
            seq__17987_19473 = G__19485;
            chunk__17988_19474 = G__19486;
            count__17989_19475 = G__19487;
            i__17990_19476 = G__19488;
            continue;
          } else {
            var arg__11642__auto___19489 = cljs.core.first.call(null, seq__17987_19483__$1);
            a__11641__auto__.push(arg__11642__auto___19489);
            var G__19490 = cljs.core.next.call(null, seq__17987_19483__$1);
            var G__19491 = null;
            var G__19492 = 0;
            var G__19493 = 0;
            seq__17987_19473 = G__19490;
            chunk__17988_19474 = G__19491;
            count__17989_19475 = G__19492;
            i__17990_19476 = G__19493;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h2.apply(null, a__11641__auto__);
  };
  var h2 = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h2__delegate.call(this, args__11640__auto__);
  };
  h2.cljs$lang$maxFixedArity = 0;
  h2.cljs$lang$applyTo = function(arglist__19494) {
    var args__11640__auto__ = cljs.core.seq(arglist__19494);
    return h2__delegate(args__11640__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
quiescent.dom.h3 = function() {
  var h3__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17995_19495 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17996_19496 = null;
    var count__17997_19497 = 0;
    var i__17998_19498 = 0;
    while (true) {
      if (i__17998_19498 < count__17997_19497) {
        var arg__11642__auto___19499 = cljs.core._nth.call(null, chunk__17996_19496, i__17998_19498);
        a__11641__auto__.push(arg__11642__auto___19499);
        var G__19500 = seq__17995_19495;
        var G__19501 = chunk__17996_19496;
        var G__19502 = count__17997_19497;
        var G__19503 = i__17998_19498 + 1;
        seq__17995_19495 = G__19500;
        chunk__17996_19496 = G__19501;
        count__17997_19497 = G__19502;
        i__17998_19498 = G__19503;
        continue;
      } else {
        var temp__4092__auto___19504 = cljs.core.seq.call(null, seq__17995_19495);
        if (temp__4092__auto___19504) {
          var seq__17995_19505__$1 = temp__4092__auto___19504;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17995_19505__$1)) {
            var c__11010__auto___19506 = cljs.core.chunk_first.call(null, seq__17995_19505__$1);
            var G__19507 = cljs.core.chunk_rest.call(null, seq__17995_19505__$1);
            var G__19508 = c__11010__auto___19506;
            var G__19509 = cljs.core.count.call(null, c__11010__auto___19506);
            var G__19510 = 0;
            seq__17995_19495 = G__19507;
            chunk__17996_19496 = G__19508;
            count__17997_19497 = G__19509;
            i__17998_19498 = G__19510;
            continue;
          } else {
            var arg__11642__auto___19511 = cljs.core.first.call(null, seq__17995_19505__$1);
            a__11641__auto__.push(arg__11642__auto___19511);
            var G__19512 = cljs.core.next.call(null, seq__17995_19505__$1);
            var G__19513 = null;
            var G__19514 = 0;
            var G__19515 = 0;
            seq__17995_19495 = G__19512;
            chunk__17996_19496 = G__19513;
            count__17997_19497 = G__19514;
            i__17998_19498 = G__19515;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h3.apply(null, a__11641__auto__);
  };
  var h3 = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h3__delegate.call(this, args__11640__auto__);
  };
  h3.cljs$lang$maxFixedArity = 0;
  h3.cljs$lang$applyTo = function(arglist__19516) {
    var args__11640__auto__ = cljs.core.seq(arglist__19516);
    return h3__delegate(args__11640__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
quiescent.dom.h4 = function() {
  var h4__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18003_19517 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18004_19518 = null;
    var count__18005_19519 = 0;
    var i__18006_19520 = 0;
    while (true) {
      if (i__18006_19520 < count__18005_19519) {
        var arg__11642__auto___19521 = cljs.core._nth.call(null, chunk__18004_19518, i__18006_19520);
        a__11641__auto__.push(arg__11642__auto___19521);
        var G__19522 = seq__18003_19517;
        var G__19523 = chunk__18004_19518;
        var G__19524 = count__18005_19519;
        var G__19525 = i__18006_19520 + 1;
        seq__18003_19517 = G__19522;
        chunk__18004_19518 = G__19523;
        count__18005_19519 = G__19524;
        i__18006_19520 = G__19525;
        continue;
      } else {
        var temp__4092__auto___19526 = cljs.core.seq.call(null, seq__18003_19517);
        if (temp__4092__auto___19526) {
          var seq__18003_19527__$1 = temp__4092__auto___19526;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18003_19527__$1)) {
            var c__11010__auto___19528 = cljs.core.chunk_first.call(null, seq__18003_19527__$1);
            var G__19529 = cljs.core.chunk_rest.call(null, seq__18003_19527__$1);
            var G__19530 = c__11010__auto___19528;
            var G__19531 = cljs.core.count.call(null, c__11010__auto___19528);
            var G__19532 = 0;
            seq__18003_19517 = G__19529;
            chunk__18004_19518 = G__19530;
            count__18005_19519 = G__19531;
            i__18006_19520 = G__19532;
            continue;
          } else {
            var arg__11642__auto___19533 = cljs.core.first.call(null, seq__18003_19527__$1);
            a__11641__auto__.push(arg__11642__auto___19533);
            var G__19534 = cljs.core.next.call(null, seq__18003_19527__$1);
            var G__19535 = null;
            var G__19536 = 0;
            var G__19537 = 0;
            seq__18003_19517 = G__19534;
            chunk__18004_19518 = G__19535;
            count__18005_19519 = G__19536;
            i__18006_19520 = G__19537;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h4.apply(null, a__11641__auto__);
  };
  var h4 = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h4__delegate.call(this, args__11640__auto__);
  };
  h4.cljs$lang$maxFixedArity = 0;
  h4.cljs$lang$applyTo = function(arglist__19538) {
    var args__11640__auto__ = cljs.core.seq(arglist__19538);
    return h4__delegate(args__11640__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
quiescent.dom.h5 = function() {
  var h5__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18011_19539 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18012_19540 = null;
    var count__18013_19541 = 0;
    var i__18014_19542 = 0;
    while (true) {
      if (i__18014_19542 < count__18013_19541) {
        var arg__11642__auto___19543 = cljs.core._nth.call(null, chunk__18012_19540, i__18014_19542);
        a__11641__auto__.push(arg__11642__auto___19543);
        var G__19544 = seq__18011_19539;
        var G__19545 = chunk__18012_19540;
        var G__19546 = count__18013_19541;
        var G__19547 = i__18014_19542 + 1;
        seq__18011_19539 = G__19544;
        chunk__18012_19540 = G__19545;
        count__18013_19541 = G__19546;
        i__18014_19542 = G__19547;
        continue;
      } else {
        var temp__4092__auto___19548 = cljs.core.seq.call(null, seq__18011_19539);
        if (temp__4092__auto___19548) {
          var seq__18011_19549__$1 = temp__4092__auto___19548;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18011_19549__$1)) {
            var c__11010__auto___19550 = cljs.core.chunk_first.call(null, seq__18011_19549__$1);
            var G__19551 = cljs.core.chunk_rest.call(null, seq__18011_19549__$1);
            var G__19552 = c__11010__auto___19550;
            var G__19553 = cljs.core.count.call(null, c__11010__auto___19550);
            var G__19554 = 0;
            seq__18011_19539 = G__19551;
            chunk__18012_19540 = G__19552;
            count__18013_19541 = G__19553;
            i__18014_19542 = G__19554;
            continue;
          } else {
            var arg__11642__auto___19555 = cljs.core.first.call(null, seq__18011_19549__$1);
            a__11641__auto__.push(arg__11642__auto___19555);
            var G__19556 = cljs.core.next.call(null, seq__18011_19549__$1);
            var G__19557 = null;
            var G__19558 = 0;
            var G__19559 = 0;
            seq__18011_19539 = G__19556;
            chunk__18012_19540 = G__19557;
            count__18013_19541 = G__19558;
            i__18014_19542 = G__19559;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h5.apply(null, a__11641__auto__);
  };
  var h5 = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h5__delegate.call(this, args__11640__auto__);
  };
  h5.cljs$lang$maxFixedArity = 0;
  h5.cljs$lang$applyTo = function(arglist__19560) {
    var args__11640__auto__ = cljs.core.seq(arglist__19560);
    return h5__delegate(args__11640__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
quiescent.dom.h6 = function() {
  var h6__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18019_19561 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18020_19562 = null;
    var count__18021_19563 = 0;
    var i__18022_19564 = 0;
    while (true) {
      if (i__18022_19564 < count__18021_19563) {
        var arg__11642__auto___19565 = cljs.core._nth.call(null, chunk__18020_19562, i__18022_19564);
        a__11641__auto__.push(arg__11642__auto___19565);
        var G__19566 = seq__18019_19561;
        var G__19567 = chunk__18020_19562;
        var G__19568 = count__18021_19563;
        var G__19569 = i__18022_19564 + 1;
        seq__18019_19561 = G__19566;
        chunk__18020_19562 = G__19567;
        count__18021_19563 = G__19568;
        i__18022_19564 = G__19569;
        continue;
      } else {
        var temp__4092__auto___19570 = cljs.core.seq.call(null, seq__18019_19561);
        if (temp__4092__auto___19570) {
          var seq__18019_19571__$1 = temp__4092__auto___19570;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18019_19571__$1)) {
            var c__11010__auto___19572 = cljs.core.chunk_first.call(null, seq__18019_19571__$1);
            var G__19573 = cljs.core.chunk_rest.call(null, seq__18019_19571__$1);
            var G__19574 = c__11010__auto___19572;
            var G__19575 = cljs.core.count.call(null, c__11010__auto___19572);
            var G__19576 = 0;
            seq__18019_19561 = G__19573;
            chunk__18020_19562 = G__19574;
            count__18021_19563 = G__19575;
            i__18022_19564 = G__19576;
            continue;
          } else {
            var arg__11642__auto___19577 = cljs.core.first.call(null, seq__18019_19571__$1);
            a__11641__auto__.push(arg__11642__auto___19577);
            var G__19578 = cljs.core.next.call(null, seq__18019_19571__$1);
            var G__19579 = null;
            var G__19580 = 0;
            var G__19581 = 0;
            seq__18019_19561 = G__19578;
            chunk__18020_19562 = G__19579;
            count__18021_19563 = G__19580;
            i__18022_19564 = G__19581;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h6.apply(null, a__11641__auto__);
  };
  var h6 = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h6__delegate.call(this, args__11640__auto__);
  };
  h6.cljs$lang$maxFixedArity = 0;
  h6.cljs$lang$applyTo = function(arglist__19582) {
    var args__11640__auto__ = cljs.core.seq(arglist__19582);
    return h6__delegate(args__11640__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
quiescent.dom.head = function() {
  var head__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18027_19583 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18028_19584 = null;
    var count__18029_19585 = 0;
    var i__18030_19586 = 0;
    while (true) {
      if (i__18030_19586 < count__18029_19585) {
        var arg__11642__auto___19587 = cljs.core._nth.call(null, chunk__18028_19584, i__18030_19586);
        a__11641__auto__.push(arg__11642__auto___19587);
        var G__19588 = seq__18027_19583;
        var G__19589 = chunk__18028_19584;
        var G__19590 = count__18029_19585;
        var G__19591 = i__18030_19586 + 1;
        seq__18027_19583 = G__19588;
        chunk__18028_19584 = G__19589;
        count__18029_19585 = G__19590;
        i__18030_19586 = G__19591;
        continue;
      } else {
        var temp__4092__auto___19592 = cljs.core.seq.call(null, seq__18027_19583);
        if (temp__4092__auto___19592) {
          var seq__18027_19593__$1 = temp__4092__auto___19592;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18027_19593__$1)) {
            var c__11010__auto___19594 = cljs.core.chunk_first.call(null, seq__18027_19593__$1);
            var G__19595 = cljs.core.chunk_rest.call(null, seq__18027_19593__$1);
            var G__19596 = c__11010__auto___19594;
            var G__19597 = cljs.core.count.call(null, c__11010__auto___19594);
            var G__19598 = 0;
            seq__18027_19583 = G__19595;
            chunk__18028_19584 = G__19596;
            count__18029_19585 = G__19597;
            i__18030_19586 = G__19598;
            continue;
          } else {
            var arg__11642__auto___19599 = cljs.core.first.call(null, seq__18027_19593__$1);
            a__11641__auto__.push(arg__11642__auto___19599);
            var G__19600 = cljs.core.next.call(null, seq__18027_19593__$1);
            var G__19601 = null;
            var G__19602 = 0;
            var G__19603 = 0;
            seq__18027_19583 = G__19600;
            chunk__18028_19584 = G__19601;
            count__18029_19585 = G__19602;
            i__18030_19586 = G__19603;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.head.apply(null, a__11641__auto__);
  };
  var head = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return head__delegate.call(this, args__11640__auto__);
  };
  head.cljs$lang$maxFixedArity = 0;
  head.cljs$lang$applyTo = function(arglist__19604) {
    var args__11640__auto__ = cljs.core.seq(arglist__19604);
    return head__delegate(args__11640__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
quiescent.dom.header = function() {
  var header__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18035_19605 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18036_19606 = null;
    var count__18037_19607 = 0;
    var i__18038_19608 = 0;
    while (true) {
      if (i__18038_19608 < count__18037_19607) {
        var arg__11642__auto___19609 = cljs.core._nth.call(null, chunk__18036_19606, i__18038_19608);
        a__11641__auto__.push(arg__11642__auto___19609);
        var G__19610 = seq__18035_19605;
        var G__19611 = chunk__18036_19606;
        var G__19612 = count__18037_19607;
        var G__19613 = i__18038_19608 + 1;
        seq__18035_19605 = G__19610;
        chunk__18036_19606 = G__19611;
        count__18037_19607 = G__19612;
        i__18038_19608 = G__19613;
        continue;
      } else {
        var temp__4092__auto___19614 = cljs.core.seq.call(null, seq__18035_19605);
        if (temp__4092__auto___19614) {
          var seq__18035_19615__$1 = temp__4092__auto___19614;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18035_19615__$1)) {
            var c__11010__auto___19616 = cljs.core.chunk_first.call(null, seq__18035_19615__$1);
            var G__19617 = cljs.core.chunk_rest.call(null, seq__18035_19615__$1);
            var G__19618 = c__11010__auto___19616;
            var G__19619 = cljs.core.count.call(null, c__11010__auto___19616);
            var G__19620 = 0;
            seq__18035_19605 = G__19617;
            chunk__18036_19606 = G__19618;
            count__18037_19607 = G__19619;
            i__18038_19608 = G__19620;
            continue;
          } else {
            var arg__11642__auto___19621 = cljs.core.first.call(null, seq__18035_19615__$1);
            a__11641__auto__.push(arg__11642__auto___19621);
            var G__19622 = cljs.core.next.call(null, seq__18035_19615__$1);
            var G__19623 = null;
            var G__19624 = 0;
            var G__19625 = 0;
            seq__18035_19605 = G__19622;
            chunk__18036_19606 = G__19623;
            count__18037_19607 = G__19624;
            i__18038_19608 = G__19625;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.header.apply(null, a__11641__auto__);
  };
  var header = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return header__delegate.call(this, args__11640__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__19626) {
    var args__11640__auto__ = cljs.core.seq(arglist__19626);
    return header__delegate(args__11640__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
quiescent.dom.hr = function() {
  var hr__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18043_19627 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18044_19628 = null;
    var count__18045_19629 = 0;
    var i__18046_19630 = 0;
    while (true) {
      if (i__18046_19630 < count__18045_19629) {
        var arg__11642__auto___19631 = cljs.core._nth.call(null, chunk__18044_19628, i__18046_19630);
        a__11641__auto__.push(arg__11642__auto___19631);
        var G__19632 = seq__18043_19627;
        var G__19633 = chunk__18044_19628;
        var G__19634 = count__18045_19629;
        var G__19635 = i__18046_19630 + 1;
        seq__18043_19627 = G__19632;
        chunk__18044_19628 = G__19633;
        count__18045_19629 = G__19634;
        i__18046_19630 = G__19635;
        continue;
      } else {
        var temp__4092__auto___19636 = cljs.core.seq.call(null, seq__18043_19627);
        if (temp__4092__auto___19636) {
          var seq__18043_19637__$1 = temp__4092__auto___19636;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18043_19637__$1)) {
            var c__11010__auto___19638 = cljs.core.chunk_first.call(null, seq__18043_19637__$1);
            var G__19639 = cljs.core.chunk_rest.call(null, seq__18043_19637__$1);
            var G__19640 = c__11010__auto___19638;
            var G__19641 = cljs.core.count.call(null, c__11010__auto___19638);
            var G__19642 = 0;
            seq__18043_19627 = G__19639;
            chunk__18044_19628 = G__19640;
            count__18045_19629 = G__19641;
            i__18046_19630 = G__19642;
            continue;
          } else {
            var arg__11642__auto___19643 = cljs.core.first.call(null, seq__18043_19637__$1);
            a__11641__auto__.push(arg__11642__auto___19643);
            var G__19644 = cljs.core.next.call(null, seq__18043_19637__$1);
            var G__19645 = null;
            var G__19646 = 0;
            var G__19647 = 0;
            seq__18043_19627 = G__19644;
            chunk__18044_19628 = G__19645;
            count__18045_19629 = G__19646;
            i__18046_19630 = G__19647;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.hr.apply(null, a__11641__auto__);
  };
  var hr = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hr__delegate.call(this, args__11640__auto__);
  };
  hr.cljs$lang$maxFixedArity = 0;
  hr.cljs$lang$applyTo = function(arglist__19648) {
    var args__11640__auto__ = cljs.core.seq(arglist__19648);
    return hr__delegate(args__11640__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
quiescent.dom.html = function() {
  var html__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18051_19649 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18052_19650 = null;
    var count__18053_19651 = 0;
    var i__18054_19652 = 0;
    while (true) {
      if (i__18054_19652 < count__18053_19651) {
        var arg__11642__auto___19653 = cljs.core._nth.call(null, chunk__18052_19650, i__18054_19652);
        a__11641__auto__.push(arg__11642__auto___19653);
        var G__19654 = seq__18051_19649;
        var G__19655 = chunk__18052_19650;
        var G__19656 = count__18053_19651;
        var G__19657 = i__18054_19652 + 1;
        seq__18051_19649 = G__19654;
        chunk__18052_19650 = G__19655;
        count__18053_19651 = G__19656;
        i__18054_19652 = G__19657;
        continue;
      } else {
        var temp__4092__auto___19658 = cljs.core.seq.call(null, seq__18051_19649);
        if (temp__4092__auto___19658) {
          var seq__18051_19659__$1 = temp__4092__auto___19658;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18051_19659__$1)) {
            var c__11010__auto___19660 = cljs.core.chunk_first.call(null, seq__18051_19659__$1);
            var G__19661 = cljs.core.chunk_rest.call(null, seq__18051_19659__$1);
            var G__19662 = c__11010__auto___19660;
            var G__19663 = cljs.core.count.call(null, c__11010__auto___19660);
            var G__19664 = 0;
            seq__18051_19649 = G__19661;
            chunk__18052_19650 = G__19662;
            count__18053_19651 = G__19663;
            i__18054_19652 = G__19664;
            continue;
          } else {
            var arg__11642__auto___19665 = cljs.core.first.call(null, seq__18051_19659__$1);
            a__11641__auto__.push(arg__11642__auto___19665);
            var G__19666 = cljs.core.next.call(null, seq__18051_19659__$1);
            var G__19667 = null;
            var G__19668 = 0;
            var G__19669 = 0;
            seq__18051_19649 = G__19666;
            chunk__18052_19650 = G__19667;
            count__18053_19651 = G__19668;
            i__18054_19652 = G__19669;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.html.apply(null, a__11641__auto__);
  };
  var html = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return html__delegate.call(this, args__11640__auto__);
  };
  html.cljs$lang$maxFixedArity = 0;
  html.cljs$lang$applyTo = function(arglist__19670) {
    var args__11640__auto__ = cljs.core.seq(arglist__19670);
    return html__delegate(args__11640__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
quiescent.dom.i = function() {
  var i__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18059_19671 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18060_19672 = null;
    var count__18061_19673 = 0;
    var i__18062_19674 = 0;
    while (true) {
      if (i__18062_19674 < count__18061_19673) {
        var arg__11642__auto___19675 = cljs.core._nth.call(null, chunk__18060_19672, i__18062_19674);
        a__11641__auto__.push(arg__11642__auto___19675);
        var G__19676 = seq__18059_19671;
        var G__19677 = chunk__18060_19672;
        var G__19678 = count__18061_19673;
        var G__19679 = i__18062_19674 + 1;
        seq__18059_19671 = G__19676;
        chunk__18060_19672 = G__19677;
        count__18061_19673 = G__19678;
        i__18062_19674 = G__19679;
        continue;
      } else {
        var temp__4092__auto___19680 = cljs.core.seq.call(null, seq__18059_19671);
        if (temp__4092__auto___19680) {
          var seq__18059_19681__$1 = temp__4092__auto___19680;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18059_19681__$1)) {
            var c__11010__auto___19682 = cljs.core.chunk_first.call(null, seq__18059_19681__$1);
            var G__19683 = cljs.core.chunk_rest.call(null, seq__18059_19681__$1);
            var G__19684 = c__11010__auto___19682;
            var G__19685 = cljs.core.count.call(null, c__11010__auto___19682);
            var G__19686 = 0;
            seq__18059_19671 = G__19683;
            chunk__18060_19672 = G__19684;
            count__18061_19673 = G__19685;
            i__18062_19674 = G__19686;
            continue;
          } else {
            var arg__11642__auto___19687 = cljs.core.first.call(null, seq__18059_19681__$1);
            a__11641__auto__.push(arg__11642__auto___19687);
            var G__19688 = cljs.core.next.call(null, seq__18059_19681__$1);
            var G__19689 = null;
            var G__19690 = 0;
            var G__19691 = 0;
            seq__18059_19671 = G__19688;
            chunk__18060_19672 = G__19689;
            count__18061_19673 = G__19690;
            i__18062_19674 = G__19691;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.i.apply(null, a__11641__auto__);
  };
  var i = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return i__delegate.call(this, args__11640__auto__);
  };
  i.cljs$lang$maxFixedArity = 0;
  i.cljs$lang$applyTo = function(arglist__19692) {
    var args__11640__auto__ = cljs.core.seq(arglist__19692);
    return i__delegate(args__11640__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
quiescent.dom.iframe = function() {
  var iframe__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18067_19693 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18068_19694 = null;
    var count__18069_19695 = 0;
    var i__18070_19696 = 0;
    while (true) {
      if (i__18070_19696 < count__18069_19695) {
        var arg__11642__auto___19697 = cljs.core._nth.call(null, chunk__18068_19694, i__18070_19696);
        a__11641__auto__.push(arg__11642__auto___19697);
        var G__19698 = seq__18067_19693;
        var G__19699 = chunk__18068_19694;
        var G__19700 = count__18069_19695;
        var G__19701 = i__18070_19696 + 1;
        seq__18067_19693 = G__19698;
        chunk__18068_19694 = G__19699;
        count__18069_19695 = G__19700;
        i__18070_19696 = G__19701;
        continue;
      } else {
        var temp__4092__auto___19702 = cljs.core.seq.call(null, seq__18067_19693);
        if (temp__4092__auto___19702) {
          var seq__18067_19703__$1 = temp__4092__auto___19702;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18067_19703__$1)) {
            var c__11010__auto___19704 = cljs.core.chunk_first.call(null, seq__18067_19703__$1);
            var G__19705 = cljs.core.chunk_rest.call(null, seq__18067_19703__$1);
            var G__19706 = c__11010__auto___19704;
            var G__19707 = cljs.core.count.call(null, c__11010__auto___19704);
            var G__19708 = 0;
            seq__18067_19693 = G__19705;
            chunk__18068_19694 = G__19706;
            count__18069_19695 = G__19707;
            i__18070_19696 = G__19708;
            continue;
          } else {
            var arg__11642__auto___19709 = cljs.core.first.call(null, seq__18067_19703__$1);
            a__11641__auto__.push(arg__11642__auto___19709);
            var G__19710 = cljs.core.next.call(null, seq__18067_19703__$1);
            var G__19711 = null;
            var G__19712 = 0;
            var G__19713 = 0;
            seq__18067_19693 = G__19710;
            chunk__18068_19694 = G__19711;
            count__18069_19695 = G__19712;
            i__18070_19696 = G__19713;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.iframe.apply(null, a__11641__auto__);
  };
  var iframe = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return iframe__delegate.call(this, args__11640__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 0;
  iframe.cljs$lang$applyTo = function(arglist__19714) {
    var args__11640__auto__ = cljs.core.seq(arglist__19714);
    return iframe__delegate(args__11640__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
quiescent.dom.img = function() {
  var img__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18075_19715 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18076_19716 = null;
    var count__18077_19717 = 0;
    var i__18078_19718 = 0;
    while (true) {
      if (i__18078_19718 < count__18077_19717) {
        var arg__11642__auto___19719 = cljs.core._nth.call(null, chunk__18076_19716, i__18078_19718);
        a__11641__auto__.push(arg__11642__auto___19719);
        var G__19720 = seq__18075_19715;
        var G__19721 = chunk__18076_19716;
        var G__19722 = count__18077_19717;
        var G__19723 = i__18078_19718 + 1;
        seq__18075_19715 = G__19720;
        chunk__18076_19716 = G__19721;
        count__18077_19717 = G__19722;
        i__18078_19718 = G__19723;
        continue;
      } else {
        var temp__4092__auto___19724 = cljs.core.seq.call(null, seq__18075_19715);
        if (temp__4092__auto___19724) {
          var seq__18075_19725__$1 = temp__4092__auto___19724;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18075_19725__$1)) {
            var c__11010__auto___19726 = cljs.core.chunk_first.call(null, seq__18075_19725__$1);
            var G__19727 = cljs.core.chunk_rest.call(null, seq__18075_19725__$1);
            var G__19728 = c__11010__auto___19726;
            var G__19729 = cljs.core.count.call(null, c__11010__auto___19726);
            var G__19730 = 0;
            seq__18075_19715 = G__19727;
            chunk__18076_19716 = G__19728;
            count__18077_19717 = G__19729;
            i__18078_19718 = G__19730;
            continue;
          } else {
            var arg__11642__auto___19731 = cljs.core.first.call(null, seq__18075_19725__$1);
            a__11641__auto__.push(arg__11642__auto___19731);
            var G__19732 = cljs.core.next.call(null, seq__18075_19725__$1);
            var G__19733 = null;
            var G__19734 = 0;
            var G__19735 = 0;
            seq__18075_19715 = G__19732;
            chunk__18076_19716 = G__19733;
            count__18077_19717 = G__19734;
            i__18078_19718 = G__19735;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.img.apply(null, a__11641__auto__);
  };
  var img = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return img__delegate.call(this, args__11640__auto__);
  };
  img.cljs$lang$maxFixedArity = 0;
  img.cljs$lang$applyTo = function(arglist__19736) {
    var args__11640__auto__ = cljs.core.seq(arglist__19736);
    return img__delegate(args__11640__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
quiescent.dom.input = function() {
  var input__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18083_19737 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18084_19738 = null;
    var count__18085_19739 = 0;
    var i__18086_19740 = 0;
    while (true) {
      if (i__18086_19740 < count__18085_19739) {
        var arg__11642__auto___19741 = cljs.core._nth.call(null, chunk__18084_19738, i__18086_19740);
        a__11641__auto__.push(arg__11642__auto___19741);
        var G__19742 = seq__18083_19737;
        var G__19743 = chunk__18084_19738;
        var G__19744 = count__18085_19739;
        var G__19745 = i__18086_19740 + 1;
        seq__18083_19737 = G__19742;
        chunk__18084_19738 = G__19743;
        count__18085_19739 = G__19744;
        i__18086_19740 = G__19745;
        continue;
      } else {
        var temp__4092__auto___19746 = cljs.core.seq.call(null, seq__18083_19737);
        if (temp__4092__auto___19746) {
          var seq__18083_19747__$1 = temp__4092__auto___19746;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18083_19747__$1)) {
            var c__11010__auto___19748 = cljs.core.chunk_first.call(null, seq__18083_19747__$1);
            var G__19749 = cljs.core.chunk_rest.call(null, seq__18083_19747__$1);
            var G__19750 = c__11010__auto___19748;
            var G__19751 = cljs.core.count.call(null, c__11010__auto___19748);
            var G__19752 = 0;
            seq__18083_19737 = G__19749;
            chunk__18084_19738 = G__19750;
            count__18085_19739 = G__19751;
            i__18086_19740 = G__19752;
            continue;
          } else {
            var arg__11642__auto___19753 = cljs.core.first.call(null, seq__18083_19747__$1);
            a__11641__auto__.push(arg__11642__auto___19753);
            var G__19754 = cljs.core.next.call(null, seq__18083_19747__$1);
            var G__19755 = null;
            var G__19756 = 0;
            var G__19757 = 0;
            seq__18083_19737 = G__19754;
            chunk__18084_19738 = G__19755;
            count__18085_19739 = G__19756;
            i__18086_19740 = G__19757;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.input.apply(null, a__11641__auto__);
  };
  var input = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return input__delegate.call(this, args__11640__auto__);
  };
  input.cljs$lang$maxFixedArity = 0;
  input.cljs$lang$applyTo = function(arglist__19758) {
    var args__11640__auto__ = cljs.core.seq(arglist__19758);
    return input__delegate(args__11640__auto__);
  };
  input.cljs$core$IFn$_invoke$arity$variadic = input__delegate;
  return input;
}();
quiescent.dom.ins = function() {
  var ins__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18091_19759 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18092_19760 = null;
    var count__18093_19761 = 0;
    var i__18094_19762 = 0;
    while (true) {
      if (i__18094_19762 < count__18093_19761) {
        var arg__11642__auto___19763 = cljs.core._nth.call(null, chunk__18092_19760, i__18094_19762);
        a__11641__auto__.push(arg__11642__auto___19763);
        var G__19764 = seq__18091_19759;
        var G__19765 = chunk__18092_19760;
        var G__19766 = count__18093_19761;
        var G__19767 = i__18094_19762 + 1;
        seq__18091_19759 = G__19764;
        chunk__18092_19760 = G__19765;
        count__18093_19761 = G__19766;
        i__18094_19762 = G__19767;
        continue;
      } else {
        var temp__4092__auto___19768 = cljs.core.seq.call(null, seq__18091_19759);
        if (temp__4092__auto___19768) {
          var seq__18091_19769__$1 = temp__4092__auto___19768;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18091_19769__$1)) {
            var c__11010__auto___19770 = cljs.core.chunk_first.call(null, seq__18091_19769__$1);
            var G__19771 = cljs.core.chunk_rest.call(null, seq__18091_19769__$1);
            var G__19772 = c__11010__auto___19770;
            var G__19773 = cljs.core.count.call(null, c__11010__auto___19770);
            var G__19774 = 0;
            seq__18091_19759 = G__19771;
            chunk__18092_19760 = G__19772;
            count__18093_19761 = G__19773;
            i__18094_19762 = G__19774;
            continue;
          } else {
            var arg__11642__auto___19775 = cljs.core.first.call(null, seq__18091_19769__$1);
            a__11641__auto__.push(arg__11642__auto___19775);
            var G__19776 = cljs.core.next.call(null, seq__18091_19769__$1);
            var G__19777 = null;
            var G__19778 = 0;
            var G__19779 = 0;
            seq__18091_19759 = G__19776;
            chunk__18092_19760 = G__19777;
            count__18093_19761 = G__19778;
            i__18094_19762 = G__19779;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ins.apply(null, a__11641__auto__);
  };
  var ins = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ins__delegate.call(this, args__11640__auto__);
  };
  ins.cljs$lang$maxFixedArity = 0;
  ins.cljs$lang$applyTo = function(arglist__19780) {
    var args__11640__auto__ = cljs.core.seq(arglist__19780);
    return ins__delegate(args__11640__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
quiescent.dom.kbd = function() {
  var kbd__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18099_19781 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18100_19782 = null;
    var count__18101_19783 = 0;
    var i__18102_19784 = 0;
    while (true) {
      if (i__18102_19784 < count__18101_19783) {
        var arg__11642__auto___19785 = cljs.core._nth.call(null, chunk__18100_19782, i__18102_19784);
        a__11641__auto__.push(arg__11642__auto___19785);
        var G__19786 = seq__18099_19781;
        var G__19787 = chunk__18100_19782;
        var G__19788 = count__18101_19783;
        var G__19789 = i__18102_19784 + 1;
        seq__18099_19781 = G__19786;
        chunk__18100_19782 = G__19787;
        count__18101_19783 = G__19788;
        i__18102_19784 = G__19789;
        continue;
      } else {
        var temp__4092__auto___19790 = cljs.core.seq.call(null, seq__18099_19781);
        if (temp__4092__auto___19790) {
          var seq__18099_19791__$1 = temp__4092__auto___19790;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18099_19791__$1)) {
            var c__11010__auto___19792 = cljs.core.chunk_first.call(null, seq__18099_19791__$1);
            var G__19793 = cljs.core.chunk_rest.call(null, seq__18099_19791__$1);
            var G__19794 = c__11010__auto___19792;
            var G__19795 = cljs.core.count.call(null, c__11010__auto___19792);
            var G__19796 = 0;
            seq__18099_19781 = G__19793;
            chunk__18100_19782 = G__19794;
            count__18101_19783 = G__19795;
            i__18102_19784 = G__19796;
            continue;
          } else {
            var arg__11642__auto___19797 = cljs.core.first.call(null, seq__18099_19791__$1);
            a__11641__auto__.push(arg__11642__auto___19797);
            var G__19798 = cljs.core.next.call(null, seq__18099_19791__$1);
            var G__19799 = null;
            var G__19800 = 0;
            var G__19801 = 0;
            seq__18099_19781 = G__19798;
            chunk__18100_19782 = G__19799;
            count__18101_19783 = G__19800;
            i__18102_19784 = G__19801;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.kbd.apply(null, a__11641__auto__);
  };
  var kbd = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return kbd__delegate.call(this, args__11640__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 0;
  kbd.cljs$lang$applyTo = function(arglist__19802) {
    var args__11640__auto__ = cljs.core.seq(arglist__19802);
    return kbd__delegate(args__11640__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
quiescent.dom.keygen = function() {
  var keygen__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18107_19803 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18108_19804 = null;
    var count__18109_19805 = 0;
    var i__18110_19806 = 0;
    while (true) {
      if (i__18110_19806 < count__18109_19805) {
        var arg__11642__auto___19807 = cljs.core._nth.call(null, chunk__18108_19804, i__18110_19806);
        a__11641__auto__.push(arg__11642__auto___19807);
        var G__19808 = seq__18107_19803;
        var G__19809 = chunk__18108_19804;
        var G__19810 = count__18109_19805;
        var G__19811 = i__18110_19806 + 1;
        seq__18107_19803 = G__19808;
        chunk__18108_19804 = G__19809;
        count__18109_19805 = G__19810;
        i__18110_19806 = G__19811;
        continue;
      } else {
        var temp__4092__auto___19812 = cljs.core.seq.call(null, seq__18107_19803);
        if (temp__4092__auto___19812) {
          var seq__18107_19813__$1 = temp__4092__auto___19812;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18107_19813__$1)) {
            var c__11010__auto___19814 = cljs.core.chunk_first.call(null, seq__18107_19813__$1);
            var G__19815 = cljs.core.chunk_rest.call(null, seq__18107_19813__$1);
            var G__19816 = c__11010__auto___19814;
            var G__19817 = cljs.core.count.call(null, c__11010__auto___19814);
            var G__19818 = 0;
            seq__18107_19803 = G__19815;
            chunk__18108_19804 = G__19816;
            count__18109_19805 = G__19817;
            i__18110_19806 = G__19818;
            continue;
          } else {
            var arg__11642__auto___19819 = cljs.core.first.call(null, seq__18107_19813__$1);
            a__11641__auto__.push(arg__11642__auto___19819);
            var G__19820 = cljs.core.next.call(null, seq__18107_19813__$1);
            var G__19821 = null;
            var G__19822 = 0;
            var G__19823 = 0;
            seq__18107_19803 = G__19820;
            chunk__18108_19804 = G__19821;
            count__18109_19805 = G__19822;
            i__18110_19806 = G__19823;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.keygen.apply(null, a__11641__auto__);
  };
  var keygen = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return keygen__delegate.call(this, args__11640__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 0;
  keygen.cljs$lang$applyTo = function(arglist__19824) {
    var args__11640__auto__ = cljs.core.seq(arglist__19824);
    return keygen__delegate(args__11640__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
quiescent.dom.label = function() {
  var label__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18115_19825 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18116_19826 = null;
    var count__18117_19827 = 0;
    var i__18118_19828 = 0;
    while (true) {
      if (i__18118_19828 < count__18117_19827) {
        var arg__11642__auto___19829 = cljs.core._nth.call(null, chunk__18116_19826, i__18118_19828);
        a__11641__auto__.push(arg__11642__auto___19829);
        var G__19830 = seq__18115_19825;
        var G__19831 = chunk__18116_19826;
        var G__19832 = count__18117_19827;
        var G__19833 = i__18118_19828 + 1;
        seq__18115_19825 = G__19830;
        chunk__18116_19826 = G__19831;
        count__18117_19827 = G__19832;
        i__18118_19828 = G__19833;
        continue;
      } else {
        var temp__4092__auto___19834 = cljs.core.seq.call(null, seq__18115_19825);
        if (temp__4092__auto___19834) {
          var seq__18115_19835__$1 = temp__4092__auto___19834;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18115_19835__$1)) {
            var c__11010__auto___19836 = cljs.core.chunk_first.call(null, seq__18115_19835__$1);
            var G__19837 = cljs.core.chunk_rest.call(null, seq__18115_19835__$1);
            var G__19838 = c__11010__auto___19836;
            var G__19839 = cljs.core.count.call(null, c__11010__auto___19836);
            var G__19840 = 0;
            seq__18115_19825 = G__19837;
            chunk__18116_19826 = G__19838;
            count__18117_19827 = G__19839;
            i__18118_19828 = G__19840;
            continue;
          } else {
            var arg__11642__auto___19841 = cljs.core.first.call(null, seq__18115_19835__$1);
            a__11641__auto__.push(arg__11642__auto___19841);
            var G__19842 = cljs.core.next.call(null, seq__18115_19835__$1);
            var G__19843 = null;
            var G__19844 = 0;
            var G__19845 = 0;
            seq__18115_19825 = G__19842;
            chunk__18116_19826 = G__19843;
            count__18117_19827 = G__19844;
            i__18118_19828 = G__19845;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.label.apply(null, a__11641__auto__);
  };
  var label = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return label__delegate.call(this, args__11640__auto__);
  };
  label.cljs$lang$maxFixedArity = 0;
  label.cljs$lang$applyTo = function(arglist__19846) {
    var args__11640__auto__ = cljs.core.seq(arglist__19846);
    return label__delegate(args__11640__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
quiescent.dom.legend = function() {
  var legend__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18123_19847 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18124_19848 = null;
    var count__18125_19849 = 0;
    var i__18126_19850 = 0;
    while (true) {
      if (i__18126_19850 < count__18125_19849) {
        var arg__11642__auto___19851 = cljs.core._nth.call(null, chunk__18124_19848, i__18126_19850);
        a__11641__auto__.push(arg__11642__auto___19851);
        var G__19852 = seq__18123_19847;
        var G__19853 = chunk__18124_19848;
        var G__19854 = count__18125_19849;
        var G__19855 = i__18126_19850 + 1;
        seq__18123_19847 = G__19852;
        chunk__18124_19848 = G__19853;
        count__18125_19849 = G__19854;
        i__18126_19850 = G__19855;
        continue;
      } else {
        var temp__4092__auto___19856 = cljs.core.seq.call(null, seq__18123_19847);
        if (temp__4092__auto___19856) {
          var seq__18123_19857__$1 = temp__4092__auto___19856;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18123_19857__$1)) {
            var c__11010__auto___19858 = cljs.core.chunk_first.call(null, seq__18123_19857__$1);
            var G__19859 = cljs.core.chunk_rest.call(null, seq__18123_19857__$1);
            var G__19860 = c__11010__auto___19858;
            var G__19861 = cljs.core.count.call(null, c__11010__auto___19858);
            var G__19862 = 0;
            seq__18123_19847 = G__19859;
            chunk__18124_19848 = G__19860;
            count__18125_19849 = G__19861;
            i__18126_19850 = G__19862;
            continue;
          } else {
            var arg__11642__auto___19863 = cljs.core.first.call(null, seq__18123_19857__$1);
            a__11641__auto__.push(arg__11642__auto___19863);
            var G__19864 = cljs.core.next.call(null, seq__18123_19857__$1);
            var G__19865 = null;
            var G__19866 = 0;
            var G__19867 = 0;
            seq__18123_19847 = G__19864;
            chunk__18124_19848 = G__19865;
            count__18125_19849 = G__19866;
            i__18126_19850 = G__19867;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.legend.apply(null, a__11641__auto__);
  };
  var legend = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return legend__delegate.call(this, args__11640__auto__);
  };
  legend.cljs$lang$maxFixedArity = 0;
  legend.cljs$lang$applyTo = function(arglist__19868) {
    var args__11640__auto__ = cljs.core.seq(arglist__19868);
    return legend__delegate(args__11640__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
quiescent.dom.li = function() {
  var li__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18131_19869 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18132_19870 = null;
    var count__18133_19871 = 0;
    var i__18134_19872 = 0;
    while (true) {
      if (i__18134_19872 < count__18133_19871) {
        var arg__11642__auto___19873 = cljs.core._nth.call(null, chunk__18132_19870, i__18134_19872);
        a__11641__auto__.push(arg__11642__auto___19873);
        var G__19874 = seq__18131_19869;
        var G__19875 = chunk__18132_19870;
        var G__19876 = count__18133_19871;
        var G__19877 = i__18134_19872 + 1;
        seq__18131_19869 = G__19874;
        chunk__18132_19870 = G__19875;
        count__18133_19871 = G__19876;
        i__18134_19872 = G__19877;
        continue;
      } else {
        var temp__4092__auto___19878 = cljs.core.seq.call(null, seq__18131_19869);
        if (temp__4092__auto___19878) {
          var seq__18131_19879__$1 = temp__4092__auto___19878;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18131_19879__$1)) {
            var c__11010__auto___19880 = cljs.core.chunk_first.call(null, seq__18131_19879__$1);
            var G__19881 = cljs.core.chunk_rest.call(null, seq__18131_19879__$1);
            var G__19882 = c__11010__auto___19880;
            var G__19883 = cljs.core.count.call(null, c__11010__auto___19880);
            var G__19884 = 0;
            seq__18131_19869 = G__19881;
            chunk__18132_19870 = G__19882;
            count__18133_19871 = G__19883;
            i__18134_19872 = G__19884;
            continue;
          } else {
            var arg__11642__auto___19885 = cljs.core.first.call(null, seq__18131_19879__$1);
            a__11641__auto__.push(arg__11642__auto___19885);
            var G__19886 = cljs.core.next.call(null, seq__18131_19879__$1);
            var G__19887 = null;
            var G__19888 = 0;
            var G__19889 = 0;
            seq__18131_19869 = G__19886;
            chunk__18132_19870 = G__19887;
            count__18133_19871 = G__19888;
            i__18134_19872 = G__19889;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.li.apply(null, a__11641__auto__);
  };
  var li = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return li__delegate.call(this, args__11640__auto__);
  };
  li.cljs$lang$maxFixedArity = 0;
  li.cljs$lang$applyTo = function(arglist__19890) {
    var args__11640__auto__ = cljs.core.seq(arglist__19890);
    return li__delegate(args__11640__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
quiescent.dom.link = function() {
  var link__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18139_19891 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18140_19892 = null;
    var count__18141_19893 = 0;
    var i__18142_19894 = 0;
    while (true) {
      if (i__18142_19894 < count__18141_19893) {
        var arg__11642__auto___19895 = cljs.core._nth.call(null, chunk__18140_19892, i__18142_19894);
        a__11641__auto__.push(arg__11642__auto___19895);
        var G__19896 = seq__18139_19891;
        var G__19897 = chunk__18140_19892;
        var G__19898 = count__18141_19893;
        var G__19899 = i__18142_19894 + 1;
        seq__18139_19891 = G__19896;
        chunk__18140_19892 = G__19897;
        count__18141_19893 = G__19898;
        i__18142_19894 = G__19899;
        continue;
      } else {
        var temp__4092__auto___19900 = cljs.core.seq.call(null, seq__18139_19891);
        if (temp__4092__auto___19900) {
          var seq__18139_19901__$1 = temp__4092__auto___19900;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18139_19901__$1)) {
            var c__11010__auto___19902 = cljs.core.chunk_first.call(null, seq__18139_19901__$1);
            var G__19903 = cljs.core.chunk_rest.call(null, seq__18139_19901__$1);
            var G__19904 = c__11010__auto___19902;
            var G__19905 = cljs.core.count.call(null, c__11010__auto___19902);
            var G__19906 = 0;
            seq__18139_19891 = G__19903;
            chunk__18140_19892 = G__19904;
            count__18141_19893 = G__19905;
            i__18142_19894 = G__19906;
            continue;
          } else {
            var arg__11642__auto___19907 = cljs.core.first.call(null, seq__18139_19901__$1);
            a__11641__auto__.push(arg__11642__auto___19907);
            var G__19908 = cljs.core.next.call(null, seq__18139_19901__$1);
            var G__19909 = null;
            var G__19910 = 0;
            var G__19911 = 0;
            seq__18139_19891 = G__19908;
            chunk__18140_19892 = G__19909;
            count__18141_19893 = G__19910;
            i__18142_19894 = G__19911;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.link.apply(null, a__11641__auto__);
  };
  var link = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return link__delegate.call(this, args__11640__auto__);
  };
  link.cljs$lang$maxFixedArity = 0;
  link.cljs$lang$applyTo = function(arglist__19912) {
    var args__11640__auto__ = cljs.core.seq(arglist__19912);
    return link__delegate(args__11640__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
quiescent.dom.main = function() {
  var main__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18147_19913 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18148_19914 = null;
    var count__18149_19915 = 0;
    var i__18150_19916 = 0;
    while (true) {
      if (i__18150_19916 < count__18149_19915) {
        var arg__11642__auto___19917 = cljs.core._nth.call(null, chunk__18148_19914, i__18150_19916);
        a__11641__auto__.push(arg__11642__auto___19917);
        var G__19918 = seq__18147_19913;
        var G__19919 = chunk__18148_19914;
        var G__19920 = count__18149_19915;
        var G__19921 = i__18150_19916 + 1;
        seq__18147_19913 = G__19918;
        chunk__18148_19914 = G__19919;
        count__18149_19915 = G__19920;
        i__18150_19916 = G__19921;
        continue;
      } else {
        var temp__4092__auto___19922 = cljs.core.seq.call(null, seq__18147_19913);
        if (temp__4092__auto___19922) {
          var seq__18147_19923__$1 = temp__4092__auto___19922;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18147_19923__$1)) {
            var c__11010__auto___19924 = cljs.core.chunk_first.call(null, seq__18147_19923__$1);
            var G__19925 = cljs.core.chunk_rest.call(null, seq__18147_19923__$1);
            var G__19926 = c__11010__auto___19924;
            var G__19927 = cljs.core.count.call(null, c__11010__auto___19924);
            var G__19928 = 0;
            seq__18147_19913 = G__19925;
            chunk__18148_19914 = G__19926;
            count__18149_19915 = G__19927;
            i__18150_19916 = G__19928;
            continue;
          } else {
            var arg__11642__auto___19929 = cljs.core.first.call(null, seq__18147_19923__$1);
            a__11641__auto__.push(arg__11642__auto___19929);
            var G__19930 = cljs.core.next.call(null, seq__18147_19923__$1);
            var G__19931 = null;
            var G__19932 = 0;
            var G__19933 = 0;
            seq__18147_19913 = G__19930;
            chunk__18148_19914 = G__19931;
            count__18149_19915 = G__19932;
            i__18150_19916 = G__19933;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.main.apply(null, a__11641__auto__);
  };
  var main = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return main__delegate.call(this, args__11640__auto__);
  };
  main.cljs$lang$maxFixedArity = 0;
  main.cljs$lang$applyTo = function(arglist__19934) {
    var args__11640__auto__ = cljs.core.seq(arglist__19934);
    return main__delegate(args__11640__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
quiescent.dom.map = function() {
  var map__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18155_19935 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18156_19936 = null;
    var count__18157_19937 = 0;
    var i__18158_19938 = 0;
    while (true) {
      if (i__18158_19938 < count__18157_19937) {
        var arg__11642__auto___19939 = cljs.core._nth.call(null, chunk__18156_19936, i__18158_19938);
        a__11641__auto__.push(arg__11642__auto___19939);
        var G__19940 = seq__18155_19935;
        var G__19941 = chunk__18156_19936;
        var G__19942 = count__18157_19937;
        var G__19943 = i__18158_19938 + 1;
        seq__18155_19935 = G__19940;
        chunk__18156_19936 = G__19941;
        count__18157_19937 = G__19942;
        i__18158_19938 = G__19943;
        continue;
      } else {
        var temp__4092__auto___19944 = cljs.core.seq.call(null, seq__18155_19935);
        if (temp__4092__auto___19944) {
          var seq__18155_19945__$1 = temp__4092__auto___19944;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18155_19945__$1)) {
            var c__11010__auto___19946 = cljs.core.chunk_first.call(null, seq__18155_19945__$1);
            var G__19947 = cljs.core.chunk_rest.call(null, seq__18155_19945__$1);
            var G__19948 = c__11010__auto___19946;
            var G__19949 = cljs.core.count.call(null, c__11010__auto___19946);
            var G__19950 = 0;
            seq__18155_19935 = G__19947;
            chunk__18156_19936 = G__19948;
            count__18157_19937 = G__19949;
            i__18158_19938 = G__19950;
            continue;
          } else {
            var arg__11642__auto___19951 = cljs.core.first.call(null, seq__18155_19945__$1);
            a__11641__auto__.push(arg__11642__auto___19951);
            var G__19952 = cljs.core.next.call(null, seq__18155_19945__$1);
            var G__19953 = null;
            var G__19954 = 0;
            var G__19955 = 0;
            seq__18155_19935 = G__19952;
            chunk__18156_19936 = G__19953;
            count__18157_19937 = G__19954;
            i__18158_19938 = G__19955;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.map.apply(null, a__11641__auto__);
  };
  var map = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return map__delegate.call(this, args__11640__auto__);
  };
  map.cljs$lang$maxFixedArity = 0;
  map.cljs$lang$applyTo = function(arglist__19956) {
    var args__11640__auto__ = cljs.core.seq(arglist__19956);
    return map__delegate(args__11640__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
quiescent.dom.mark = function() {
  var mark__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18163_19957 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18164_19958 = null;
    var count__18165_19959 = 0;
    var i__18166_19960 = 0;
    while (true) {
      if (i__18166_19960 < count__18165_19959) {
        var arg__11642__auto___19961 = cljs.core._nth.call(null, chunk__18164_19958, i__18166_19960);
        a__11641__auto__.push(arg__11642__auto___19961);
        var G__19962 = seq__18163_19957;
        var G__19963 = chunk__18164_19958;
        var G__19964 = count__18165_19959;
        var G__19965 = i__18166_19960 + 1;
        seq__18163_19957 = G__19962;
        chunk__18164_19958 = G__19963;
        count__18165_19959 = G__19964;
        i__18166_19960 = G__19965;
        continue;
      } else {
        var temp__4092__auto___19966 = cljs.core.seq.call(null, seq__18163_19957);
        if (temp__4092__auto___19966) {
          var seq__18163_19967__$1 = temp__4092__auto___19966;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18163_19967__$1)) {
            var c__11010__auto___19968 = cljs.core.chunk_first.call(null, seq__18163_19967__$1);
            var G__19969 = cljs.core.chunk_rest.call(null, seq__18163_19967__$1);
            var G__19970 = c__11010__auto___19968;
            var G__19971 = cljs.core.count.call(null, c__11010__auto___19968);
            var G__19972 = 0;
            seq__18163_19957 = G__19969;
            chunk__18164_19958 = G__19970;
            count__18165_19959 = G__19971;
            i__18166_19960 = G__19972;
            continue;
          } else {
            var arg__11642__auto___19973 = cljs.core.first.call(null, seq__18163_19967__$1);
            a__11641__auto__.push(arg__11642__auto___19973);
            var G__19974 = cljs.core.next.call(null, seq__18163_19967__$1);
            var G__19975 = null;
            var G__19976 = 0;
            var G__19977 = 0;
            seq__18163_19957 = G__19974;
            chunk__18164_19958 = G__19975;
            count__18165_19959 = G__19976;
            i__18166_19960 = G__19977;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.mark.apply(null, a__11641__auto__);
  };
  var mark = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return mark__delegate.call(this, args__11640__auto__);
  };
  mark.cljs$lang$maxFixedArity = 0;
  mark.cljs$lang$applyTo = function(arglist__19978) {
    var args__11640__auto__ = cljs.core.seq(arglist__19978);
    return mark__delegate(args__11640__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
quiescent.dom.menu = function() {
  var menu__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18171_19979 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18172_19980 = null;
    var count__18173_19981 = 0;
    var i__18174_19982 = 0;
    while (true) {
      if (i__18174_19982 < count__18173_19981) {
        var arg__11642__auto___19983 = cljs.core._nth.call(null, chunk__18172_19980, i__18174_19982);
        a__11641__auto__.push(arg__11642__auto___19983);
        var G__19984 = seq__18171_19979;
        var G__19985 = chunk__18172_19980;
        var G__19986 = count__18173_19981;
        var G__19987 = i__18174_19982 + 1;
        seq__18171_19979 = G__19984;
        chunk__18172_19980 = G__19985;
        count__18173_19981 = G__19986;
        i__18174_19982 = G__19987;
        continue;
      } else {
        var temp__4092__auto___19988 = cljs.core.seq.call(null, seq__18171_19979);
        if (temp__4092__auto___19988) {
          var seq__18171_19989__$1 = temp__4092__auto___19988;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18171_19989__$1)) {
            var c__11010__auto___19990 = cljs.core.chunk_first.call(null, seq__18171_19989__$1);
            var G__19991 = cljs.core.chunk_rest.call(null, seq__18171_19989__$1);
            var G__19992 = c__11010__auto___19990;
            var G__19993 = cljs.core.count.call(null, c__11010__auto___19990);
            var G__19994 = 0;
            seq__18171_19979 = G__19991;
            chunk__18172_19980 = G__19992;
            count__18173_19981 = G__19993;
            i__18174_19982 = G__19994;
            continue;
          } else {
            var arg__11642__auto___19995 = cljs.core.first.call(null, seq__18171_19989__$1);
            a__11641__auto__.push(arg__11642__auto___19995);
            var G__19996 = cljs.core.next.call(null, seq__18171_19989__$1);
            var G__19997 = null;
            var G__19998 = 0;
            var G__19999 = 0;
            seq__18171_19979 = G__19996;
            chunk__18172_19980 = G__19997;
            count__18173_19981 = G__19998;
            i__18174_19982 = G__19999;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menu.apply(null, a__11641__auto__);
  };
  var menu = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menu__delegate.call(this, args__11640__auto__);
  };
  menu.cljs$lang$maxFixedArity = 0;
  menu.cljs$lang$applyTo = function(arglist__20000) {
    var args__11640__auto__ = cljs.core.seq(arglist__20000);
    return menu__delegate(args__11640__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
quiescent.dom.menuitem = function() {
  var menuitem__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18179_20001 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18180_20002 = null;
    var count__18181_20003 = 0;
    var i__18182_20004 = 0;
    while (true) {
      if (i__18182_20004 < count__18181_20003) {
        var arg__11642__auto___20005 = cljs.core._nth.call(null, chunk__18180_20002, i__18182_20004);
        a__11641__auto__.push(arg__11642__auto___20005);
        var G__20006 = seq__18179_20001;
        var G__20007 = chunk__18180_20002;
        var G__20008 = count__18181_20003;
        var G__20009 = i__18182_20004 + 1;
        seq__18179_20001 = G__20006;
        chunk__18180_20002 = G__20007;
        count__18181_20003 = G__20008;
        i__18182_20004 = G__20009;
        continue;
      } else {
        var temp__4092__auto___20010 = cljs.core.seq.call(null, seq__18179_20001);
        if (temp__4092__auto___20010) {
          var seq__18179_20011__$1 = temp__4092__auto___20010;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18179_20011__$1)) {
            var c__11010__auto___20012 = cljs.core.chunk_first.call(null, seq__18179_20011__$1);
            var G__20013 = cljs.core.chunk_rest.call(null, seq__18179_20011__$1);
            var G__20014 = c__11010__auto___20012;
            var G__20015 = cljs.core.count.call(null, c__11010__auto___20012);
            var G__20016 = 0;
            seq__18179_20001 = G__20013;
            chunk__18180_20002 = G__20014;
            count__18181_20003 = G__20015;
            i__18182_20004 = G__20016;
            continue;
          } else {
            var arg__11642__auto___20017 = cljs.core.first.call(null, seq__18179_20011__$1);
            a__11641__auto__.push(arg__11642__auto___20017);
            var G__20018 = cljs.core.next.call(null, seq__18179_20011__$1);
            var G__20019 = null;
            var G__20020 = 0;
            var G__20021 = 0;
            seq__18179_20001 = G__20018;
            chunk__18180_20002 = G__20019;
            count__18181_20003 = G__20020;
            i__18182_20004 = G__20021;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menuitem.apply(null, a__11641__auto__);
  };
  var menuitem = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menuitem__delegate.call(this, args__11640__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 0;
  menuitem.cljs$lang$applyTo = function(arglist__20022) {
    var args__11640__auto__ = cljs.core.seq(arglist__20022);
    return menuitem__delegate(args__11640__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
quiescent.dom.meta = function() {
  var meta__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18187_20023 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18188_20024 = null;
    var count__18189_20025 = 0;
    var i__18190_20026 = 0;
    while (true) {
      if (i__18190_20026 < count__18189_20025) {
        var arg__11642__auto___20027 = cljs.core._nth.call(null, chunk__18188_20024, i__18190_20026);
        a__11641__auto__.push(arg__11642__auto___20027);
        var G__20028 = seq__18187_20023;
        var G__20029 = chunk__18188_20024;
        var G__20030 = count__18189_20025;
        var G__20031 = i__18190_20026 + 1;
        seq__18187_20023 = G__20028;
        chunk__18188_20024 = G__20029;
        count__18189_20025 = G__20030;
        i__18190_20026 = G__20031;
        continue;
      } else {
        var temp__4092__auto___20032 = cljs.core.seq.call(null, seq__18187_20023);
        if (temp__4092__auto___20032) {
          var seq__18187_20033__$1 = temp__4092__auto___20032;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18187_20033__$1)) {
            var c__11010__auto___20034 = cljs.core.chunk_first.call(null, seq__18187_20033__$1);
            var G__20035 = cljs.core.chunk_rest.call(null, seq__18187_20033__$1);
            var G__20036 = c__11010__auto___20034;
            var G__20037 = cljs.core.count.call(null, c__11010__auto___20034);
            var G__20038 = 0;
            seq__18187_20023 = G__20035;
            chunk__18188_20024 = G__20036;
            count__18189_20025 = G__20037;
            i__18190_20026 = G__20038;
            continue;
          } else {
            var arg__11642__auto___20039 = cljs.core.first.call(null, seq__18187_20033__$1);
            a__11641__auto__.push(arg__11642__auto___20039);
            var G__20040 = cljs.core.next.call(null, seq__18187_20033__$1);
            var G__20041 = null;
            var G__20042 = 0;
            var G__20043 = 0;
            seq__18187_20023 = G__20040;
            chunk__18188_20024 = G__20041;
            count__18189_20025 = G__20042;
            i__18190_20026 = G__20043;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meta.apply(null, a__11641__auto__);
  };
  var meta = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meta__delegate.call(this, args__11640__auto__);
  };
  meta.cljs$lang$maxFixedArity = 0;
  meta.cljs$lang$applyTo = function(arglist__20044) {
    var args__11640__auto__ = cljs.core.seq(arglist__20044);
    return meta__delegate(args__11640__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
quiescent.dom.meter = function() {
  var meter__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18195_20045 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18196_20046 = null;
    var count__18197_20047 = 0;
    var i__18198_20048 = 0;
    while (true) {
      if (i__18198_20048 < count__18197_20047) {
        var arg__11642__auto___20049 = cljs.core._nth.call(null, chunk__18196_20046, i__18198_20048);
        a__11641__auto__.push(arg__11642__auto___20049);
        var G__20050 = seq__18195_20045;
        var G__20051 = chunk__18196_20046;
        var G__20052 = count__18197_20047;
        var G__20053 = i__18198_20048 + 1;
        seq__18195_20045 = G__20050;
        chunk__18196_20046 = G__20051;
        count__18197_20047 = G__20052;
        i__18198_20048 = G__20053;
        continue;
      } else {
        var temp__4092__auto___20054 = cljs.core.seq.call(null, seq__18195_20045);
        if (temp__4092__auto___20054) {
          var seq__18195_20055__$1 = temp__4092__auto___20054;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18195_20055__$1)) {
            var c__11010__auto___20056 = cljs.core.chunk_first.call(null, seq__18195_20055__$1);
            var G__20057 = cljs.core.chunk_rest.call(null, seq__18195_20055__$1);
            var G__20058 = c__11010__auto___20056;
            var G__20059 = cljs.core.count.call(null, c__11010__auto___20056);
            var G__20060 = 0;
            seq__18195_20045 = G__20057;
            chunk__18196_20046 = G__20058;
            count__18197_20047 = G__20059;
            i__18198_20048 = G__20060;
            continue;
          } else {
            var arg__11642__auto___20061 = cljs.core.first.call(null, seq__18195_20055__$1);
            a__11641__auto__.push(arg__11642__auto___20061);
            var G__20062 = cljs.core.next.call(null, seq__18195_20055__$1);
            var G__20063 = null;
            var G__20064 = 0;
            var G__20065 = 0;
            seq__18195_20045 = G__20062;
            chunk__18196_20046 = G__20063;
            count__18197_20047 = G__20064;
            i__18198_20048 = G__20065;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meter.apply(null, a__11641__auto__);
  };
  var meter = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meter__delegate.call(this, args__11640__auto__);
  };
  meter.cljs$lang$maxFixedArity = 0;
  meter.cljs$lang$applyTo = function(arglist__20066) {
    var args__11640__auto__ = cljs.core.seq(arglist__20066);
    return meter__delegate(args__11640__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
quiescent.dom.nav = function() {
  var nav__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18203_20067 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18204_20068 = null;
    var count__18205_20069 = 0;
    var i__18206_20070 = 0;
    while (true) {
      if (i__18206_20070 < count__18205_20069) {
        var arg__11642__auto___20071 = cljs.core._nth.call(null, chunk__18204_20068, i__18206_20070);
        a__11641__auto__.push(arg__11642__auto___20071);
        var G__20072 = seq__18203_20067;
        var G__20073 = chunk__18204_20068;
        var G__20074 = count__18205_20069;
        var G__20075 = i__18206_20070 + 1;
        seq__18203_20067 = G__20072;
        chunk__18204_20068 = G__20073;
        count__18205_20069 = G__20074;
        i__18206_20070 = G__20075;
        continue;
      } else {
        var temp__4092__auto___20076 = cljs.core.seq.call(null, seq__18203_20067);
        if (temp__4092__auto___20076) {
          var seq__18203_20077__$1 = temp__4092__auto___20076;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18203_20077__$1)) {
            var c__11010__auto___20078 = cljs.core.chunk_first.call(null, seq__18203_20077__$1);
            var G__20079 = cljs.core.chunk_rest.call(null, seq__18203_20077__$1);
            var G__20080 = c__11010__auto___20078;
            var G__20081 = cljs.core.count.call(null, c__11010__auto___20078);
            var G__20082 = 0;
            seq__18203_20067 = G__20079;
            chunk__18204_20068 = G__20080;
            count__18205_20069 = G__20081;
            i__18206_20070 = G__20082;
            continue;
          } else {
            var arg__11642__auto___20083 = cljs.core.first.call(null, seq__18203_20077__$1);
            a__11641__auto__.push(arg__11642__auto___20083);
            var G__20084 = cljs.core.next.call(null, seq__18203_20077__$1);
            var G__20085 = null;
            var G__20086 = 0;
            var G__20087 = 0;
            seq__18203_20067 = G__20084;
            chunk__18204_20068 = G__20085;
            count__18205_20069 = G__20086;
            i__18206_20070 = G__20087;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.nav.apply(null, a__11641__auto__);
  };
  var nav = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return nav__delegate.call(this, args__11640__auto__);
  };
  nav.cljs$lang$maxFixedArity = 0;
  nav.cljs$lang$applyTo = function(arglist__20088) {
    var args__11640__auto__ = cljs.core.seq(arglist__20088);
    return nav__delegate(args__11640__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
quiescent.dom.noscript = function() {
  var noscript__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18211_20089 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18212_20090 = null;
    var count__18213_20091 = 0;
    var i__18214_20092 = 0;
    while (true) {
      if (i__18214_20092 < count__18213_20091) {
        var arg__11642__auto___20093 = cljs.core._nth.call(null, chunk__18212_20090, i__18214_20092);
        a__11641__auto__.push(arg__11642__auto___20093);
        var G__20094 = seq__18211_20089;
        var G__20095 = chunk__18212_20090;
        var G__20096 = count__18213_20091;
        var G__20097 = i__18214_20092 + 1;
        seq__18211_20089 = G__20094;
        chunk__18212_20090 = G__20095;
        count__18213_20091 = G__20096;
        i__18214_20092 = G__20097;
        continue;
      } else {
        var temp__4092__auto___20098 = cljs.core.seq.call(null, seq__18211_20089);
        if (temp__4092__auto___20098) {
          var seq__18211_20099__$1 = temp__4092__auto___20098;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18211_20099__$1)) {
            var c__11010__auto___20100 = cljs.core.chunk_first.call(null, seq__18211_20099__$1);
            var G__20101 = cljs.core.chunk_rest.call(null, seq__18211_20099__$1);
            var G__20102 = c__11010__auto___20100;
            var G__20103 = cljs.core.count.call(null, c__11010__auto___20100);
            var G__20104 = 0;
            seq__18211_20089 = G__20101;
            chunk__18212_20090 = G__20102;
            count__18213_20091 = G__20103;
            i__18214_20092 = G__20104;
            continue;
          } else {
            var arg__11642__auto___20105 = cljs.core.first.call(null, seq__18211_20099__$1);
            a__11641__auto__.push(arg__11642__auto___20105);
            var G__20106 = cljs.core.next.call(null, seq__18211_20099__$1);
            var G__20107 = null;
            var G__20108 = 0;
            var G__20109 = 0;
            seq__18211_20089 = G__20106;
            chunk__18212_20090 = G__20107;
            count__18213_20091 = G__20108;
            i__18214_20092 = G__20109;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.noscript.apply(null, a__11641__auto__);
  };
  var noscript = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return noscript__delegate.call(this, args__11640__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 0;
  noscript.cljs$lang$applyTo = function(arglist__20110) {
    var args__11640__auto__ = cljs.core.seq(arglist__20110);
    return noscript__delegate(args__11640__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
quiescent.dom.object = function() {
  var object__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18219_20111 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18220_20112 = null;
    var count__18221_20113 = 0;
    var i__18222_20114 = 0;
    while (true) {
      if (i__18222_20114 < count__18221_20113) {
        var arg__11642__auto___20115 = cljs.core._nth.call(null, chunk__18220_20112, i__18222_20114);
        a__11641__auto__.push(arg__11642__auto___20115);
        var G__20116 = seq__18219_20111;
        var G__20117 = chunk__18220_20112;
        var G__20118 = count__18221_20113;
        var G__20119 = i__18222_20114 + 1;
        seq__18219_20111 = G__20116;
        chunk__18220_20112 = G__20117;
        count__18221_20113 = G__20118;
        i__18222_20114 = G__20119;
        continue;
      } else {
        var temp__4092__auto___20120 = cljs.core.seq.call(null, seq__18219_20111);
        if (temp__4092__auto___20120) {
          var seq__18219_20121__$1 = temp__4092__auto___20120;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18219_20121__$1)) {
            var c__11010__auto___20122 = cljs.core.chunk_first.call(null, seq__18219_20121__$1);
            var G__20123 = cljs.core.chunk_rest.call(null, seq__18219_20121__$1);
            var G__20124 = c__11010__auto___20122;
            var G__20125 = cljs.core.count.call(null, c__11010__auto___20122);
            var G__20126 = 0;
            seq__18219_20111 = G__20123;
            chunk__18220_20112 = G__20124;
            count__18221_20113 = G__20125;
            i__18222_20114 = G__20126;
            continue;
          } else {
            var arg__11642__auto___20127 = cljs.core.first.call(null, seq__18219_20121__$1);
            a__11641__auto__.push(arg__11642__auto___20127);
            var G__20128 = cljs.core.next.call(null, seq__18219_20121__$1);
            var G__20129 = null;
            var G__20130 = 0;
            var G__20131 = 0;
            seq__18219_20111 = G__20128;
            chunk__18220_20112 = G__20129;
            count__18221_20113 = G__20130;
            i__18222_20114 = G__20131;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.object.apply(null, a__11641__auto__);
  };
  var object = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return object__delegate.call(this, args__11640__auto__);
  };
  object.cljs$lang$maxFixedArity = 0;
  object.cljs$lang$applyTo = function(arglist__20132) {
    var args__11640__auto__ = cljs.core.seq(arglist__20132);
    return object__delegate(args__11640__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
quiescent.dom.ol = function() {
  var ol__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18227_20133 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18228_20134 = null;
    var count__18229_20135 = 0;
    var i__18230_20136 = 0;
    while (true) {
      if (i__18230_20136 < count__18229_20135) {
        var arg__11642__auto___20137 = cljs.core._nth.call(null, chunk__18228_20134, i__18230_20136);
        a__11641__auto__.push(arg__11642__auto___20137);
        var G__20138 = seq__18227_20133;
        var G__20139 = chunk__18228_20134;
        var G__20140 = count__18229_20135;
        var G__20141 = i__18230_20136 + 1;
        seq__18227_20133 = G__20138;
        chunk__18228_20134 = G__20139;
        count__18229_20135 = G__20140;
        i__18230_20136 = G__20141;
        continue;
      } else {
        var temp__4092__auto___20142 = cljs.core.seq.call(null, seq__18227_20133);
        if (temp__4092__auto___20142) {
          var seq__18227_20143__$1 = temp__4092__auto___20142;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18227_20143__$1)) {
            var c__11010__auto___20144 = cljs.core.chunk_first.call(null, seq__18227_20143__$1);
            var G__20145 = cljs.core.chunk_rest.call(null, seq__18227_20143__$1);
            var G__20146 = c__11010__auto___20144;
            var G__20147 = cljs.core.count.call(null, c__11010__auto___20144);
            var G__20148 = 0;
            seq__18227_20133 = G__20145;
            chunk__18228_20134 = G__20146;
            count__18229_20135 = G__20147;
            i__18230_20136 = G__20148;
            continue;
          } else {
            var arg__11642__auto___20149 = cljs.core.first.call(null, seq__18227_20143__$1);
            a__11641__auto__.push(arg__11642__auto___20149);
            var G__20150 = cljs.core.next.call(null, seq__18227_20143__$1);
            var G__20151 = null;
            var G__20152 = 0;
            var G__20153 = 0;
            seq__18227_20133 = G__20150;
            chunk__18228_20134 = G__20151;
            count__18229_20135 = G__20152;
            i__18230_20136 = G__20153;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ol.apply(null, a__11641__auto__);
  };
  var ol = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ol__delegate.call(this, args__11640__auto__);
  };
  ol.cljs$lang$maxFixedArity = 0;
  ol.cljs$lang$applyTo = function(arglist__20154) {
    var args__11640__auto__ = cljs.core.seq(arglist__20154);
    return ol__delegate(args__11640__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
quiescent.dom.optgroup = function() {
  var optgroup__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18235_20155 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18236_20156 = null;
    var count__18237_20157 = 0;
    var i__18238_20158 = 0;
    while (true) {
      if (i__18238_20158 < count__18237_20157) {
        var arg__11642__auto___20159 = cljs.core._nth.call(null, chunk__18236_20156, i__18238_20158);
        a__11641__auto__.push(arg__11642__auto___20159);
        var G__20160 = seq__18235_20155;
        var G__20161 = chunk__18236_20156;
        var G__20162 = count__18237_20157;
        var G__20163 = i__18238_20158 + 1;
        seq__18235_20155 = G__20160;
        chunk__18236_20156 = G__20161;
        count__18237_20157 = G__20162;
        i__18238_20158 = G__20163;
        continue;
      } else {
        var temp__4092__auto___20164 = cljs.core.seq.call(null, seq__18235_20155);
        if (temp__4092__auto___20164) {
          var seq__18235_20165__$1 = temp__4092__auto___20164;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18235_20165__$1)) {
            var c__11010__auto___20166 = cljs.core.chunk_first.call(null, seq__18235_20165__$1);
            var G__20167 = cljs.core.chunk_rest.call(null, seq__18235_20165__$1);
            var G__20168 = c__11010__auto___20166;
            var G__20169 = cljs.core.count.call(null, c__11010__auto___20166);
            var G__20170 = 0;
            seq__18235_20155 = G__20167;
            chunk__18236_20156 = G__20168;
            count__18237_20157 = G__20169;
            i__18238_20158 = G__20170;
            continue;
          } else {
            var arg__11642__auto___20171 = cljs.core.first.call(null, seq__18235_20165__$1);
            a__11641__auto__.push(arg__11642__auto___20171);
            var G__20172 = cljs.core.next.call(null, seq__18235_20165__$1);
            var G__20173 = null;
            var G__20174 = 0;
            var G__20175 = 0;
            seq__18235_20155 = G__20172;
            chunk__18236_20156 = G__20173;
            count__18237_20157 = G__20174;
            i__18238_20158 = G__20175;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.optgroup.apply(null, a__11641__auto__);
  };
  var optgroup = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return optgroup__delegate.call(this, args__11640__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 0;
  optgroup.cljs$lang$applyTo = function(arglist__20176) {
    var args__11640__auto__ = cljs.core.seq(arglist__20176);
    return optgroup__delegate(args__11640__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
quiescent.dom.option = function() {
  var option__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18243_20177 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18244_20178 = null;
    var count__18245_20179 = 0;
    var i__18246_20180 = 0;
    while (true) {
      if (i__18246_20180 < count__18245_20179) {
        var arg__11642__auto___20181 = cljs.core._nth.call(null, chunk__18244_20178, i__18246_20180);
        a__11641__auto__.push(arg__11642__auto___20181);
        var G__20182 = seq__18243_20177;
        var G__20183 = chunk__18244_20178;
        var G__20184 = count__18245_20179;
        var G__20185 = i__18246_20180 + 1;
        seq__18243_20177 = G__20182;
        chunk__18244_20178 = G__20183;
        count__18245_20179 = G__20184;
        i__18246_20180 = G__20185;
        continue;
      } else {
        var temp__4092__auto___20186 = cljs.core.seq.call(null, seq__18243_20177);
        if (temp__4092__auto___20186) {
          var seq__18243_20187__$1 = temp__4092__auto___20186;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18243_20187__$1)) {
            var c__11010__auto___20188 = cljs.core.chunk_first.call(null, seq__18243_20187__$1);
            var G__20189 = cljs.core.chunk_rest.call(null, seq__18243_20187__$1);
            var G__20190 = c__11010__auto___20188;
            var G__20191 = cljs.core.count.call(null, c__11010__auto___20188);
            var G__20192 = 0;
            seq__18243_20177 = G__20189;
            chunk__18244_20178 = G__20190;
            count__18245_20179 = G__20191;
            i__18246_20180 = G__20192;
            continue;
          } else {
            var arg__11642__auto___20193 = cljs.core.first.call(null, seq__18243_20187__$1);
            a__11641__auto__.push(arg__11642__auto___20193);
            var G__20194 = cljs.core.next.call(null, seq__18243_20187__$1);
            var G__20195 = null;
            var G__20196 = 0;
            var G__20197 = 0;
            seq__18243_20177 = G__20194;
            chunk__18244_20178 = G__20195;
            count__18245_20179 = G__20196;
            i__18246_20180 = G__20197;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.option.apply(null, a__11641__auto__);
  };
  var option = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return option__delegate.call(this, args__11640__auto__);
  };
  option.cljs$lang$maxFixedArity = 0;
  option.cljs$lang$applyTo = function(arglist__20198) {
    var args__11640__auto__ = cljs.core.seq(arglist__20198);
    return option__delegate(args__11640__auto__);
  };
  option.cljs$core$IFn$_invoke$arity$variadic = option__delegate;
  return option;
}();
quiescent.dom.output = function() {
  var output__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18251_20199 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18252_20200 = null;
    var count__18253_20201 = 0;
    var i__18254_20202 = 0;
    while (true) {
      if (i__18254_20202 < count__18253_20201) {
        var arg__11642__auto___20203 = cljs.core._nth.call(null, chunk__18252_20200, i__18254_20202);
        a__11641__auto__.push(arg__11642__auto___20203);
        var G__20204 = seq__18251_20199;
        var G__20205 = chunk__18252_20200;
        var G__20206 = count__18253_20201;
        var G__20207 = i__18254_20202 + 1;
        seq__18251_20199 = G__20204;
        chunk__18252_20200 = G__20205;
        count__18253_20201 = G__20206;
        i__18254_20202 = G__20207;
        continue;
      } else {
        var temp__4092__auto___20208 = cljs.core.seq.call(null, seq__18251_20199);
        if (temp__4092__auto___20208) {
          var seq__18251_20209__$1 = temp__4092__auto___20208;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18251_20209__$1)) {
            var c__11010__auto___20210 = cljs.core.chunk_first.call(null, seq__18251_20209__$1);
            var G__20211 = cljs.core.chunk_rest.call(null, seq__18251_20209__$1);
            var G__20212 = c__11010__auto___20210;
            var G__20213 = cljs.core.count.call(null, c__11010__auto___20210);
            var G__20214 = 0;
            seq__18251_20199 = G__20211;
            chunk__18252_20200 = G__20212;
            count__18253_20201 = G__20213;
            i__18254_20202 = G__20214;
            continue;
          } else {
            var arg__11642__auto___20215 = cljs.core.first.call(null, seq__18251_20209__$1);
            a__11641__auto__.push(arg__11642__auto___20215);
            var G__20216 = cljs.core.next.call(null, seq__18251_20209__$1);
            var G__20217 = null;
            var G__20218 = 0;
            var G__20219 = 0;
            seq__18251_20199 = G__20216;
            chunk__18252_20200 = G__20217;
            count__18253_20201 = G__20218;
            i__18254_20202 = G__20219;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.output.apply(null, a__11641__auto__);
  };
  var output = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return output__delegate.call(this, args__11640__auto__);
  };
  output.cljs$lang$maxFixedArity = 0;
  output.cljs$lang$applyTo = function(arglist__20220) {
    var args__11640__auto__ = cljs.core.seq(arglist__20220);
    return output__delegate(args__11640__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
quiescent.dom.p = function() {
  var p__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18259_20221 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18260_20222 = null;
    var count__18261_20223 = 0;
    var i__18262_20224 = 0;
    while (true) {
      if (i__18262_20224 < count__18261_20223) {
        var arg__11642__auto___20225 = cljs.core._nth.call(null, chunk__18260_20222, i__18262_20224);
        a__11641__auto__.push(arg__11642__auto___20225);
        var G__20226 = seq__18259_20221;
        var G__20227 = chunk__18260_20222;
        var G__20228 = count__18261_20223;
        var G__20229 = i__18262_20224 + 1;
        seq__18259_20221 = G__20226;
        chunk__18260_20222 = G__20227;
        count__18261_20223 = G__20228;
        i__18262_20224 = G__20229;
        continue;
      } else {
        var temp__4092__auto___20230 = cljs.core.seq.call(null, seq__18259_20221);
        if (temp__4092__auto___20230) {
          var seq__18259_20231__$1 = temp__4092__auto___20230;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18259_20231__$1)) {
            var c__11010__auto___20232 = cljs.core.chunk_first.call(null, seq__18259_20231__$1);
            var G__20233 = cljs.core.chunk_rest.call(null, seq__18259_20231__$1);
            var G__20234 = c__11010__auto___20232;
            var G__20235 = cljs.core.count.call(null, c__11010__auto___20232);
            var G__20236 = 0;
            seq__18259_20221 = G__20233;
            chunk__18260_20222 = G__20234;
            count__18261_20223 = G__20235;
            i__18262_20224 = G__20236;
            continue;
          } else {
            var arg__11642__auto___20237 = cljs.core.first.call(null, seq__18259_20231__$1);
            a__11641__auto__.push(arg__11642__auto___20237);
            var G__20238 = cljs.core.next.call(null, seq__18259_20231__$1);
            var G__20239 = null;
            var G__20240 = 0;
            var G__20241 = 0;
            seq__18259_20221 = G__20238;
            chunk__18260_20222 = G__20239;
            count__18261_20223 = G__20240;
            i__18262_20224 = G__20241;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.p.apply(null, a__11641__auto__);
  };
  var p = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return p__delegate.call(this, args__11640__auto__);
  };
  p.cljs$lang$maxFixedArity = 0;
  p.cljs$lang$applyTo = function(arglist__20242) {
    var args__11640__auto__ = cljs.core.seq(arglist__20242);
    return p__delegate(args__11640__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
quiescent.dom.param = function() {
  var param__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18267_20243 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18268_20244 = null;
    var count__18269_20245 = 0;
    var i__18270_20246 = 0;
    while (true) {
      if (i__18270_20246 < count__18269_20245) {
        var arg__11642__auto___20247 = cljs.core._nth.call(null, chunk__18268_20244, i__18270_20246);
        a__11641__auto__.push(arg__11642__auto___20247);
        var G__20248 = seq__18267_20243;
        var G__20249 = chunk__18268_20244;
        var G__20250 = count__18269_20245;
        var G__20251 = i__18270_20246 + 1;
        seq__18267_20243 = G__20248;
        chunk__18268_20244 = G__20249;
        count__18269_20245 = G__20250;
        i__18270_20246 = G__20251;
        continue;
      } else {
        var temp__4092__auto___20252 = cljs.core.seq.call(null, seq__18267_20243);
        if (temp__4092__auto___20252) {
          var seq__18267_20253__$1 = temp__4092__auto___20252;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18267_20253__$1)) {
            var c__11010__auto___20254 = cljs.core.chunk_first.call(null, seq__18267_20253__$1);
            var G__20255 = cljs.core.chunk_rest.call(null, seq__18267_20253__$1);
            var G__20256 = c__11010__auto___20254;
            var G__20257 = cljs.core.count.call(null, c__11010__auto___20254);
            var G__20258 = 0;
            seq__18267_20243 = G__20255;
            chunk__18268_20244 = G__20256;
            count__18269_20245 = G__20257;
            i__18270_20246 = G__20258;
            continue;
          } else {
            var arg__11642__auto___20259 = cljs.core.first.call(null, seq__18267_20253__$1);
            a__11641__auto__.push(arg__11642__auto___20259);
            var G__20260 = cljs.core.next.call(null, seq__18267_20253__$1);
            var G__20261 = null;
            var G__20262 = 0;
            var G__20263 = 0;
            seq__18267_20243 = G__20260;
            chunk__18268_20244 = G__20261;
            count__18269_20245 = G__20262;
            i__18270_20246 = G__20263;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.param.apply(null, a__11641__auto__);
  };
  var param = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return param__delegate.call(this, args__11640__auto__);
  };
  param.cljs$lang$maxFixedArity = 0;
  param.cljs$lang$applyTo = function(arglist__20264) {
    var args__11640__auto__ = cljs.core.seq(arglist__20264);
    return param__delegate(args__11640__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
quiescent.dom.pre = function() {
  var pre__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18275_20265 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18276_20266 = null;
    var count__18277_20267 = 0;
    var i__18278_20268 = 0;
    while (true) {
      if (i__18278_20268 < count__18277_20267) {
        var arg__11642__auto___20269 = cljs.core._nth.call(null, chunk__18276_20266, i__18278_20268);
        a__11641__auto__.push(arg__11642__auto___20269);
        var G__20270 = seq__18275_20265;
        var G__20271 = chunk__18276_20266;
        var G__20272 = count__18277_20267;
        var G__20273 = i__18278_20268 + 1;
        seq__18275_20265 = G__20270;
        chunk__18276_20266 = G__20271;
        count__18277_20267 = G__20272;
        i__18278_20268 = G__20273;
        continue;
      } else {
        var temp__4092__auto___20274 = cljs.core.seq.call(null, seq__18275_20265);
        if (temp__4092__auto___20274) {
          var seq__18275_20275__$1 = temp__4092__auto___20274;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18275_20275__$1)) {
            var c__11010__auto___20276 = cljs.core.chunk_first.call(null, seq__18275_20275__$1);
            var G__20277 = cljs.core.chunk_rest.call(null, seq__18275_20275__$1);
            var G__20278 = c__11010__auto___20276;
            var G__20279 = cljs.core.count.call(null, c__11010__auto___20276);
            var G__20280 = 0;
            seq__18275_20265 = G__20277;
            chunk__18276_20266 = G__20278;
            count__18277_20267 = G__20279;
            i__18278_20268 = G__20280;
            continue;
          } else {
            var arg__11642__auto___20281 = cljs.core.first.call(null, seq__18275_20275__$1);
            a__11641__auto__.push(arg__11642__auto___20281);
            var G__20282 = cljs.core.next.call(null, seq__18275_20275__$1);
            var G__20283 = null;
            var G__20284 = 0;
            var G__20285 = 0;
            seq__18275_20265 = G__20282;
            chunk__18276_20266 = G__20283;
            count__18277_20267 = G__20284;
            i__18278_20268 = G__20285;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.pre.apply(null, a__11641__auto__);
  };
  var pre = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pre__delegate.call(this, args__11640__auto__);
  };
  pre.cljs$lang$maxFixedArity = 0;
  pre.cljs$lang$applyTo = function(arglist__20286) {
    var args__11640__auto__ = cljs.core.seq(arglist__20286);
    return pre__delegate(args__11640__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
quiescent.dom.progress = function() {
  var progress__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18283_20287 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18284_20288 = null;
    var count__18285_20289 = 0;
    var i__18286_20290 = 0;
    while (true) {
      if (i__18286_20290 < count__18285_20289) {
        var arg__11642__auto___20291 = cljs.core._nth.call(null, chunk__18284_20288, i__18286_20290);
        a__11641__auto__.push(arg__11642__auto___20291);
        var G__20292 = seq__18283_20287;
        var G__20293 = chunk__18284_20288;
        var G__20294 = count__18285_20289;
        var G__20295 = i__18286_20290 + 1;
        seq__18283_20287 = G__20292;
        chunk__18284_20288 = G__20293;
        count__18285_20289 = G__20294;
        i__18286_20290 = G__20295;
        continue;
      } else {
        var temp__4092__auto___20296 = cljs.core.seq.call(null, seq__18283_20287);
        if (temp__4092__auto___20296) {
          var seq__18283_20297__$1 = temp__4092__auto___20296;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18283_20297__$1)) {
            var c__11010__auto___20298 = cljs.core.chunk_first.call(null, seq__18283_20297__$1);
            var G__20299 = cljs.core.chunk_rest.call(null, seq__18283_20297__$1);
            var G__20300 = c__11010__auto___20298;
            var G__20301 = cljs.core.count.call(null, c__11010__auto___20298);
            var G__20302 = 0;
            seq__18283_20287 = G__20299;
            chunk__18284_20288 = G__20300;
            count__18285_20289 = G__20301;
            i__18286_20290 = G__20302;
            continue;
          } else {
            var arg__11642__auto___20303 = cljs.core.first.call(null, seq__18283_20297__$1);
            a__11641__auto__.push(arg__11642__auto___20303);
            var G__20304 = cljs.core.next.call(null, seq__18283_20297__$1);
            var G__20305 = null;
            var G__20306 = 0;
            var G__20307 = 0;
            seq__18283_20287 = G__20304;
            chunk__18284_20288 = G__20305;
            count__18285_20289 = G__20306;
            i__18286_20290 = G__20307;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.progress.apply(null, a__11641__auto__);
  };
  var progress = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return progress__delegate.call(this, args__11640__auto__);
  };
  progress.cljs$lang$maxFixedArity = 0;
  progress.cljs$lang$applyTo = function(arglist__20308) {
    var args__11640__auto__ = cljs.core.seq(arglist__20308);
    return progress__delegate(args__11640__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
quiescent.dom.q = function() {
  var q__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18291_20309 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18292_20310 = null;
    var count__18293_20311 = 0;
    var i__18294_20312 = 0;
    while (true) {
      if (i__18294_20312 < count__18293_20311) {
        var arg__11642__auto___20313 = cljs.core._nth.call(null, chunk__18292_20310, i__18294_20312);
        a__11641__auto__.push(arg__11642__auto___20313);
        var G__20314 = seq__18291_20309;
        var G__20315 = chunk__18292_20310;
        var G__20316 = count__18293_20311;
        var G__20317 = i__18294_20312 + 1;
        seq__18291_20309 = G__20314;
        chunk__18292_20310 = G__20315;
        count__18293_20311 = G__20316;
        i__18294_20312 = G__20317;
        continue;
      } else {
        var temp__4092__auto___20318 = cljs.core.seq.call(null, seq__18291_20309);
        if (temp__4092__auto___20318) {
          var seq__18291_20319__$1 = temp__4092__auto___20318;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18291_20319__$1)) {
            var c__11010__auto___20320 = cljs.core.chunk_first.call(null, seq__18291_20319__$1);
            var G__20321 = cljs.core.chunk_rest.call(null, seq__18291_20319__$1);
            var G__20322 = c__11010__auto___20320;
            var G__20323 = cljs.core.count.call(null, c__11010__auto___20320);
            var G__20324 = 0;
            seq__18291_20309 = G__20321;
            chunk__18292_20310 = G__20322;
            count__18293_20311 = G__20323;
            i__18294_20312 = G__20324;
            continue;
          } else {
            var arg__11642__auto___20325 = cljs.core.first.call(null, seq__18291_20319__$1);
            a__11641__auto__.push(arg__11642__auto___20325);
            var G__20326 = cljs.core.next.call(null, seq__18291_20319__$1);
            var G__20327 = null;
            var G__20328 = 0;
            var G__20329 = 0;
            seq__18291_20309 = G__20326;
            chunk__18292_20310 = G__20327;
            count__18293_20311 = G__20328;
            i__18294_20312 = G__20329;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.q.apply(null, a__11641__auto__);
  };
  var q = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return q__delegate.call(this, args__11640__auto__);
  };
  q.cljs$lang$maxFixedArity = 0;
  q.cljs$lang$applyTo = function(arglist__20330) {
    var args__11640__auto__ = cljs.core.seq(arglist__20330);
    return q__delegate(args__11640__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
quiescent.dom.rp = function() {
  var rp__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18299_20331 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18300_20332 = null;
    var count__18301_20333 = 0;
    var i__18302_20334 = 0;
    while (true) {
      if (i__18302_20334 < count__18301_20333) {
        var arg__11642__auto___20335 = cljs.core._nth.call(null, chunk__18300_20332, i__18302_20334);
        a__11641__auto__.push(arg__11642__auto___20335);
        var G__20336 = seq__18299_20331;
        var G__20337 = chunk__18300_20332;
        var G__20338 = count__18301_20333;
        var G__20339 = i__18302_20334 + 1;
        seq__18299_20331 = G__20336;
        chunk__18300_20332 = G__20337;
        count__18301_20333 = G__20338;
        i__18302_20334 = G__20339;
        continue;
      } else {
        var temp__4092__auto___20340 = cljs.core.seq.call(null, seq__18299_20331);
        if (temp__4092__auto___20340) {
          var seq__18299_20341__$1 = temp__4092__auto___20340;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18299_20341__$1)) {
            var c__11010__auto___20342 = cljs.core.chunk_first.call(null, seq__18299_20341__$1);
            var G__20343 = cljs.core.chunk_rest.call(null, seq__18299_20341__$1);
            var G__20344 = c__11010__auto___20342;
            var G__20345 = cljs.core.count.call(null, c__11010__auto___20342);
            var G__20346 = 0;
            seq__18299_20331 = G__20343;
            chunk__18300_20332 = G__20344;
            count__18301_20333 = G__20345;
            i__18302_20334 = G__20346;
            continue;
          } else {
            var arg__11642__auto___20347 = cljs.core.first.call(null, seq__18299_20341__$1);
            a__11641__auto__.push(arg__11642__auto___20347);
            var G__20348 = cljs.core.next.call(null, seq__18299_20341__$1);
            var G__20349 = null;
            var G__20350 = 0;
            var G__20351 = 0;
            seq__18299_20331 = G__20348;
            chunk__18300_20332 = G__20349;
            count__18301_20333 = G__20350;
            i__18302_20334 = G__20351;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rp.apply(null, a__11641__auto__);
  };
  var rp = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rp__delegate.call(this, args__11640__auto__);
  };
  rp.cljs$lang$maxFixedArity = 0;
  rp.cljs$lang$applyTo = function(arglist__20352) {
    var args__11640__auto__ = cljs.core.seq(arglist__20352);
    return rp__delegate(args__11640__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
quiescent.dom.rt = function() {
  var rt__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18307_20353 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18308_20354 = null;
    var count__18309_20355 = 0;
    var i__18310_20356 = 0;
    while (true) {
      if (i__18310_20356 < count__18309_20355) {
        var arg__11642__auto___20357 = cljs.core._nth.call(null, chunk__18308_20354, i__18310_20356);
        a__11641__auto__.push(arg__11642__auto___20357);
        var G__20358 = seq__18307_20353;
        var G__20359 = chunk__18308_20354;
        var G__20360 = count__18309_20355;
        var G__20361 = i__18310_20356 + 1;
        seq__18307_20353 = G__20358;
        chunk__18308_20354 = G__20359;
        count__18309_20355 = G__20360;
        i__18310_20356 = G__20361;
        continue;
      } else {
        var temp__4092__auto___20362 = cljs.core.seq.call(null, seq__18307_20353);
        if (temp__4092__auto___20362) {
          var seq__18307_20363__$1 = temp__4092__auto___20362;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18307_20363__$1)) {
            var c__11010__auto___20364 = cljs.core.chunk_first.call(null, seq__18307_20363__$1);
            var G__20365 = cljs.core.chunk_rest.call(null, seq__18307_20363__$1);
            var G__20366 = c__11010__auto___20364;
            var G__20367 = cljs.core.count.call(null, c__11010__auto___20364);
            var G__20368 = 0;
            seq__18307_20353 = G__20365;
            chunk__18308_20354 = G__20366;
            count__18309_20355 = G__20367;
            i__18310_20356 = G__20368;
            continue;
          } else {
            var arg__11642__auto___20369 = cljs.core.first.call(null, seq__18307_20363__$1);
            a__11641__auto__.push(arg__11642__auto___20369);
            var G__20370 = cljs.core.next.call(null, seq__18307_20363__$1);
            var G__20371 = null;
            var G__20372 = 0;
            var G__20373 = 0;
            seq__18307_20353 = G__20370;
            chunk__18308_20354 = G__20371;
            count__18309_20355 = G__20372;
            i__18310_20356 = G__20373;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rt.apply(null, a__11641__auto__);
  };
  var rt = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rt__delegate.call(this, args__11640__auto__);
  };
  rt.cljs$lang$maxFixedArity = 0;
  rt.cljs$lang$applyTo = function(arglist__20374) {
    var args__11640__auto__ = cljs.core.seq(arglist__20374);
    return rt__delegate(args__11640__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
quiescent.dom.ruby = function() {
  var ruby__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18315_20375 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18316_20376 = null;
    var count__18317_20377 = 0;
    var i__18318_20378 = 0;
    while (true) {
      if (i__18318_20378 < count__18317_20377) {
        var arg__11642__auto___20379 = cljs.core._nth.call(null, chunk__18316_20376, i__18318_20378);
        a__11641__auto__.push(arg__11642__auto___20379);
        var G__20380 = seq__18315_20375;
        var G__20381 = chunk__18316_20376;
        var G__20382 = count__18317_20377;
        var G__20383 = i__18318_20378 + 1;
        seq__18315_20375 = G__20380;
        chunk__18316_20376 = G__20381;
        count__18317_20377 = G__20382;
        i__18318_20378 = G__20383;
        continue;
      } else {
        var temp__4092__auto___20384 = cljs.core.seq.call(null, seq__18315_20375);
        if (temp__4092__auto___20384) {
          var seq__18315_20385__$1 = temp__4092__auto___20384;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18315_20385__$1)) {
            var c__11010__auto___20386 = cljs.core.chunk_first.call(null, seq__18315_20385__$1);
            var G__20387 = cljs.core.chunk_rest.call(null, seq__18315_20385__$1);
            var G__20388 = c__11010__auto___20386;
            var G__20389 = cljs.core.count.call(null, c__11010__auto___20386);
            var G__20390 = 0;
            seq__18315_20375 = G__20387;
            chunk__18316_20376 = G__20388;
            count__18317_20377 = G__20389;
            i__18318_20378 = G__20390;
            continue;
          } else {
            var arg__11642__auto___20391 = cljs.core.first.call(null, seq__18315_20385__$1);
            a__11641__auto__.push(arg__11642__auto___20391);
            var G__20392 = cljs.core.next.call(null, seq__18315_20385__$1);
            var G__20393 = null;
            var G__20394 = 0;
            var G__20395 = 0;
            seq__18315_20375 = G__20392;
            chunk__18316_20376 = G__20393;
            count__18317_20377 = G__20394;
            i__18318_20378 = G__20395;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ruby.apply(null, a__11641__auto__);
  };
  var ruby = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ruby__delegate.call(this, args__11640__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 0;
  ruby.cljs$lang$applyTo = function(arglist__20396) {
    var args__11640__auto__ = cljs.core.seq(arglist__20396);
    return ruby__delegate(args__11640__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
quiescent.dom.s = function() {
  var s__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18323_20397 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18324_20398 = null;
    var count__18325_20399 = 0;
    var i__18326_20400 = 0;
    while (true) {
      if (i__18326_20400 < count__18325_20399) {
        var arg__11642__auto___20401 = cljs.core._nth.call(null, chunk__18324_20398, i__18326_20400);
        a__11641__auto__.push(arg__11642__auto___20401);
        var G__20402 = seq__18323_20397;
        var G__20403 = chunk__18324_20398;
        var G__20404 = count__18325_20399;
        var G__20405 = i__18326_20400 + 1;
        seq__18323_20397 = G__20402;
        chunk__18324_20398 = G__20403;
        count__18325_20399 = G__20404;
        i__18326_20400 = G__20405;
        continue;
      } else {
        var temp__4092__auto___20406 = cljs.core.seq.call(null, seq__18323_20397);
        if (temp__4092__auto___20406) {
          var seq__18323_20407__$1 = temp__4092__auto___20406;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18323_20407__$1)) {
            var c__11010__auto___20408 = cljs.core.chunk_first.call(null, seq__18323_20407__$1);
            var G__20409 = cljs.core.chunk_rest.call(null, seq__18323_20407__$1);
            var G__20410 = c__11010__auto___20408;
            var G__20411 = cljs.core.count.call(null, c__11010__auto___20408);
            var G__20412 = 0;
            seq__18323_20397 = G__20409;
            chunk__18324_20398 = G__20410;
            count__18325_20399 = G__20411;
            i__18326_20400 = G__20412;
            continue;
          } else {
            var arg__11642__auto___20413 = cljs.core.first.call(null, seq__18323_20407__$1);
            a__11641__auto__.push(arg__11642__auto___20413);
            var G__20414 = cljs.core.next.call(null, seq__18323_20407__$1);
            var G__20415 = null;
            var G__20416 = 0;
            var G__20417 = 0;
            seq__18323_20397 = G__20414;
            chunk__18324_20398 = G__20415;
            count__18325_20399 = G__20416;
            i__18326_20400 = G__20417;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.s.apply(null, a__11641__auto__);
  };
  var s = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return s__delegate.call(this, args__11640__auto__);
  };
  s.cljs$lang$maxFixedArity = 0;
  s.cljs$lang$applyTo = function(arglist__20418) {
    var args__11640__auto__ = cljs.core.seq(arglist__20418);
    return s__delegate(args__11640__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
quiescent.dom.samp = function() {
  var samp__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18331_20419 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18332_20420 = null;
    var count__18333_20421 = 0;
    var i__18334_20422 = 0;
    while (true) {
      if (i__18334_20422 < count__18333_20421) {
        var arg__11642__auto___20423 = cljs.core._nth.call(null, chunk__18332_20420, i__18334_20422);
        a__11641__auto__.push(arg__11642__auto___20423);
        var G__20424 = seq__18331_20419;
        var G__20425 = chunk__18332_20420;
        var G__20426 = count__18333_20421;
        var G__20427 = i__18334_20422 + 1;
        seq__18331_20419 = G__20424;
        chunk__18332_20420 = G__20425;
        count__18333_20421 = G__20426;
        i__18334_20422 = G__20427;
        continue;
      } else {
        var temp__4092__auto___20428 = cljs.core.seq.call(null, seq__18331_20419);
        if (temp__4092__auto___20428) {
          var seq__18331_20429__$1 = temp__4092__auto___20428;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18331_20429__$1)) {
            var c__11010__auto___20430 = cljs.core.chunk_first.call(null, seq__18331_20429__$1);
            var G__20431 = cljs.core.chunk_rest.call(null, seq__18331_20429__$1);
            var G__20432 = c__11010__auto___20430;
            var G__20433 = cljs.core.count.call(null, c__11010__auto___20430);
            var G__20434 = 0;
            seq__18331_20419 = G__20431;
            chunk__18332_20420 = G__20432;
            count__18333_20421 = G__20433;
            i__18334_20422 = G__20434;
            continue;
          } else {
            var arg__11642__auto___20435 = cljs.core.first.call(null, seq__18331_20429__$1);
            a__11641__auto__.push(arg__11642__auto___20435);
            var G__20436 = cljs.core.next.call(null, seq__18331_20429__$1);
            var G__20437 = null;
            var G__20438 = 0;
            var G__20439 = 0;
            seq__18331_20419 = G__20436;
            chunk__18332_20420 = G__20437;
            count__18333_20421 = G__20438;
            i__18334_20422 = G__20439;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.samp.apply(null, a__11641__auto__);
  };
  var samp = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return samp__delegate.call(this, args__11640__auto__);
  };
  samp.cljs$lang$maxFixedArity = 0;
  samp.cljs$lang$applyTo = function(arglist__20440) {
    var args__11640__auto__ = cljs.core.seq(arglist__20440);
    return samp__delegate(args__11640__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
quiescent.dom.script = function() {
  var script__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18339_20441 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18340_20442 = null;
    var count__18341_20443 = 0;
    var i__18342_20444 = 0;
    while (true) {
      if (i__18342_20444 < count__18341_20443) {
        var arg__11642__auto___20445 = cljs.core._nth.call(null, chunk__18340_20442, i__18342_20444);
        a__11641__auto__.push(arg__11642__auto___20445);
        var G__20446 = seq__18339_20441;
        var G__20447 = chunk__18340_20442;
        var G__20448 = count__18341_20443;
        var G__20449 = i__18342_20444 + 1;
        seq__18339_20441 = G__20446;
        chunk__18340_20442 = G__20447;
        count__18341_20443 = G__20448;
        i__18342_20444 = G__20449;
        continue;
      } else {
        var temp__4092__auto___20450 = cljs.core.seq.call(null, seq__18339_20441);
        if (temp__4092__auto___20450) {
          var seq__18339_20451__$1 = temp__4092__auto___20450;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18339_20451__$1)) {
            var c__11010__auto___20452 = cljs.core.chunk_first.call(null, seq__18339_20451__$1);
            var G__20453 = cljs.core.chunk_rest.call(null, seq__18339_20451__$1);
            var G__20454 = c__11010__auto___20452;
            var G__20455 = cljs.core.count.call(null, c__11010__auto___20452);
            var G__20456 = 0;
            seq__18339_20441 = G__20453;
            chunk__18340_20442 = G__20454;
            count__18341_20443 = G__20455;
            i__18342_20444 = G__20456;
            continue;
          } else {
            var arg__11642__auto___20457 = cljs.core.first.call(null, seq__18339_20451__$1);
            a__11641__auto__.push(arg__11642__auto___20457);
            var G__20458 = cljs.core.next.call(null, seq__18339_20451__$1);
            var G__20459 = null;
            var G__20460 = 0;
            var G__20461 = 0;
            seq__18339_20441 = G__20458;
            chunk__18340_20442 = G__20459;
            count__18341_20443 = G__20460;
            i__18342_20444 = G__20461;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.script.apply(null, a__11641__auto__);
  };
  var script = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return script__delegate.call(this, args__11640__auto__);
  };
  script.cljs$lang$maxFixedArity = 0;
  script.cljs$lang$applyTo = function(arglist__20462) {
    var args__11640__auto__ = cljs.core.seq(arglist__20462);
    return script__delegate(args__11640__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
quiescent.dom.section = function() {
  var section__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18347_20463 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18348_20464 = null;
    var count__18349_20465 = 0;
    var i__18350_20466 = 0;
    while (true) {
      if (i__18350_20466 < count__18349_20465) {
        var arg__11642__auto___20467 = cljs.core._nth.call(null, chunk__18348_20464, i__18350_20466);
        a__11641__auto__.push(arg__11642__auto___20467);
        var G__20468 = seq__18347_20463;
        var G__20469 = chunk__18348_20464;
        var G__20470 = count__18349_20465;
        var G__20471 = i__18350_20466 + 1;
        seq__18347_20463 = G__20468;
        chunk__18348_20464 = G__20469;
        count__18349_20465 = G__20470;
        i__18350_20466 = G__20471;
        continue;
      } else {
        var temp__4092__auto___20472 = cljs.core.seq.call(null, seq__18347_20463);
        if (temp__4092__auto___20472) {
          var seq__18347_20473__$1 = temp__4092__auto___20472;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18347_20473__$1)) {
            var c__11010__auto___20474 = cljs.core.chunk_first.call(null, seq__18347_20473__$1);
            var G__20475 = cljs.core.chunk_rest.call(null, seq__18347_20473__$1);
            var G__20476 = c__11010__auto___20474;
            var G__20477 = cljs.core.count.call(null, c__11010__auto___20474);
            var G__20478 = 0;
            seq__18347_20463 = G__20475;
            chunk__18348_20464 = G__20476;
            count__18349_20465 = G__20477;
            i__18350_20466 = G__20478;
            continue;
          } else {
            var arg__11642__auto___20479 = cljs.core.first.call(null, seq__18347_20473__$1);
            a__11641__auto__.push(arg__11642__auto___20479);
            var G__20480 = cljs.core.next.call(null, seq__18347_20473__$1);
            var G__20481 = null;
            var G__20482 = 0;
            var G__20483 = 0;
            seq__18347_20463 = G__20480;
            chunk__18348_20464 = G__20481;
            count__18349_20465 = G__20482;
            i__18350_20466 = G__20483;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.section.apply(null, a__11641__auto__);
  };
  var section = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return section__delegate.call(this, args__11640__auto__);
  };
  section.cljs$lang$maxFixedArity = 0;
  section.cljs$lang$applyTo = function(arglist__20484) {
    var args__11640__auto__ = cljs.core.seq(arglist__20484);
    return section__delegate(args__11640__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
quiescent.dom.select = function() {
  var select__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18355_20485 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18356_20486 = null;
    var count__18357_20487 = 0;
    var i__18358_20488 = 0;
    while (true) {
      if (i__18358_20488 < count__18357_20487) {
        var arg__11642__auto___20489 = cljs.core._nth.call(null, chunk__18356_20486, i__18358_20488);
        a__11641__auto__.push(arg__11642__auto___20489);
        var G__20490 = seq__18355_20485;
        var G__20491 = chunk__18356_20486;
        var G__20492 = count__18357_20487;
        var G__20493 = i__18358_20488 + 1;
        seq__18355_20485 = G__20490;
        chunk__18356_20486 = G__20491;
        count__18357_20487 = G__20492;
        i__18358_20488 = G__20493;
        continue;
      } else {
        var temp__4092__auto___20494 = cljs.core.seq.call(null, seq__18355_20485);
        if (temp__4092__auto___20494) {
          var seq__18355_20495__$1 = temp__4092__auto___20494;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18355_20495__$1)) {
            var c__11010__auto___20496 = cljs.core.chunk_first.call(null, seq__18355_20495__$1);
            var G__20497 = cljs.core.chunk_rest.call(null, seq__18355_20495__$1);
            var G__20498 = c__11010__auto___20496;
            var G__20499 = cljs.core.count.call(null, c__11010__auto___20496);
            var G__20500 = 0;
            seq__18355_20485 = G__20497;
            chunk__18356_20486 = G__20498;
            count__18357_20487 = G__20499;
            i__18358_20488 = G__20500;
            continue;
          } else {
            var arg__11642__auto___20501 = cljs.core.first.call(null, seq__18355_20495__$1);
            a__11641__auto__.push(arg__11642__auto___20501);
            var G__20502 = cljs.core.next.call(null, seq__18355_20495__$1);
            var G__20503 = null;
            var G__20504 = 0;
            var G__20505 = 0;
            seq__18355_20485 = G__20502;
            chunk__18356_20486 = G__20503;
            count__18357_20487 = G__20504;
            i__18358_20488 = G__20505;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.select.apply(null, a__11641__auto__);
  };
  var select = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return select__delegate.call(this, args__11640__auto__);
  };
  select.cljs$lang$maxFixedArity = 0;
  select.cljs$lang$applyTo = function(arglist__20506) {
    var args__11640__auto__ = cljs.core.seq(arglist__20506);
    return select__delegate(args__11640__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
quiescent.dom.small = function() {
  var small__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18363_20507 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18364_20508 = null;
    var count__18365_20509 = 0;
    var i__18366_20510 = 0;
    while (true) {
      if (i__18366_20510 < count__18365_20509) {
        var arg__11642__auto___20511 = cljs.core._nth.call(null, chunk__18364_20508, i__18366_20510);
        a__11641__auto__.push(arg__11642__auto___20511);
        var G__20512 = seq__18363_20507;
        var G__20513 = chunk__18364_20508;
        var G__20514 = count__18365_20509;
        var G__20515 = i__18366_20510 + 1;
        seq__18363_20507 = G__20512;
        chunk__18364_20508 = G__20513;
        count__18365_20509 = G__20514;
        i__18366_20510 = G__20515;
        continue;
      } else {
        var temp__4092__auto___20516 = cljs.core.seq.call(null, seq__18363_20507);
        if (temp__4092__auto___20516) {
          var seq__18363_20517__$1 = temp__4092__auto___20516;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18363_20517__$1)) {
            var c__11010__auto___20518 = cljs.core.chunk_first.call(null, seq__18363_20517__$1);
            var G__20519 = cljs.core.chunk_rest.call(null, seq__18363_20517__$1);
            var G__20520 = c__11010__auto___20518;
            var G__20521 = cljs.core.count.call(null, c__11010__auto___20518);
            var G__20522 = 0;
            seq__18363_20507 = G__20519;
            chunk__18364_20508 = G__20520;
            count__18365_20509 = G__20521;
            i__18366_20510 = G__20522;
            continue;
          } else {
            var arg__11642__auto___20523 = cljs.core.first.call(null, seq__18363_20517__$1);
            a__11641__auto__.push(arg__11642__auto___20523);
            var G__20524 = cljs.core.next.call(null, seq__18363_20517__$1);
            var G__20525 = null;
            var G__20526 = 0;
            var G__20527 = 0;
            seq__18363_20507 = G__20524;
            chunk__18364_20508 = G__20525;
            count__18365_20509 = G__20526;
            i__18366_20510 = G__20527;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.small.apply(null, a__11641__auto__);
  };
  var small = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return small__delegate.call(this, args__11640__auto__);
  };
  small.cljs$lang$maxFixedArity = 0;
  small.cljs$lang$applyTo = function(arglist__20528) {
    var args__11640__auto__ = cljs.core.seq(arglist__20528);
    return small__delegate(args__11640__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
quiescent.dom.source = function() {
  var source__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18371_20529 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18372_20530 = null;
    var count__18373_20531 = 0;
    var i__18374_20532 = 0;
    while (true) {
      if (i__18374_20532 < count__18373_20531) {
        var arg__11642__auto___20533 = cljs.core._nth.call(null, chunk__18372_20530, i__18374_20532);
        a__11641__auto__.push(arg__11642__auto___20533);
        var G__20534 = seq__18371_20529;
        var G__20535 = chunk__18372_20530;
        var G__20536 = count__18373_20531;
        var G__20537 = i__18374_20532 + 1;
        seq__18371_20529 = G__20534;
        chunk__18372_20530 = G__20535;
        count__18373_20531 = G__20536;
        i__18374_20532 = G__20537;
        continue;
      } else {
        var temp__4092__auto___20538 = cljs.core.seq.call(null, seq__18371_20529);
        if (temp__4092__auto___20538) {
          var seq__18371_20539__$1 = temp__4092__auto___20538;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18371_20539__$1)) {
            var c__11010__auto___20540 = cljs.core.chunk_first.call(null, seq__18371_20539__$1);
            var G__20541 = cljs.core.chunk_rest.call(null, seq__18371_20539__$1);
            var G__20542 = c__11010__auto___20540;
            var G__20543 = cljs.core.count.call(null, c__11010__auto___20540);
            var G__20544 = 0;
            seq__18371_20529 = G__20541;
            chunk__18372_20530 = G__20542;
            count__18373_20531 = G__20543;
            i__18374_20532 = G__20544;
            continue;
          } else {
            var arg__11642__auto___20545 = cljs.core.first.call(null, seq__18371_20539__$1);
            a__11641__auto__.push(arg__11642__auto___20545);
            var G__20546 = cljs.core.next.call(null, seq__18371_20539__$1);
            var G__20547 = null;
            var G__20548 = 0;
            var G__20549 = 0;
            seq__18371_20529 = G__20546;
            chunk__18372_20530 = G__20547;
            count__18373_20531 = G__20548;
            i__18374_20532 = G__20549;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.source.apply(null, a__11641__auto__);
  };
  var source = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return source__delegate.call(this, args__11640__auto__);
  };
  source.cljs$lang$maxFixedArity = 0;
  source.cljs$lang$applyTo = function(arglist__20550) {
    var args__11640__auto__ = cljs.core.seq(arglist__20550);
    return source__delegate(args__11640__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
quiescent.dom.span = function() {
  var span__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18379_20551 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18380_20552 = null;
    var count__18381_20553 = 0;
    var i__18382_20554 = 0;
    while (true) {
      if (i__18382_20554 < count__18381_20553) {
        var arg__11642__auto___20555 = cljs.core._nth.call(null, chunk__18380_20552, i__18382_20554);
        a__11641__auto__.push(arg__11642__auto___20555);
        var G__20556 = seq__18379_20551;
        var G__20557 = chunk__18380_20552;
        var G__20558 = count__18381_20553;
        var G__20559 = i__18382_20554 + 1;
        seq__18379_20551 = G__20556;
        chunk__18380_20552 = G__20557;
        count__18381_20553 = G__20558;
        i__18382_20554 = G__20559;
        continue;
      } else {
        var temp__4092__auto___20560 = cljs.core.seq.call(null, seq__18379_20551);
        if (temp__4092__auto___20560) {
          var seq__18379_20561__$1 = temp__4092__auto___20560;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18379_20561__$1)) {
            var c__11010__auto___20562 = cljs.core.chunk_first.call(null, seq__18379_20561__$1);
            var G__20563 = cljs.core.chunk_rest.call(null, seq__18379_20561__$1);
            var G__20564 = c__11010__auto___20562;
            var G__20565 = cljs.core.count.call(null, c__11010__auto___20562);
            var G__20566 = 0;
            seq__18379_20551 = G__20563;
            chunk__18380_20552 = G__20564;
            count__18381_20553 = G__20565;
            i__18382_20554 = G__20566;
            continue;
          } else {
            var arg__11642__auto___20567 = cljs.core.first.call(null, seq__18379_20561__$1);
            a__11641__auto__.push(arg__11642__auto___20567);
            var G__20568 = cljs.core.next.call(null, seq__18379_20561__$1);
            var G__20569 = null;
            var G__20570 = 0;
            var G__20571 = 0;
            seq__18379_20551 = G__20568;
            chunk__18380_20552 = G__20569;
            count__18381_20553 = G__20570;
            i__18382_20554 = G__20571;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.span.apply(null, a__11641__auto__);
  };
  var span = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return span__delegate.call(this, args__11640__auto__);
  };
  span.cljs$lang$maxFixedArity = 0;
  span.cljs$lang$applyTo = function(arglist__20572) {
    var args__11640__auto__ = cljs.core.seq(arglist__20572);
    return span__delegate(args__11640__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
quiescent.dom.strong = function() {
  var strong__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18387_20573 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18388_20574 = null;
    var count__18389_20575 = 0;
    var i__18390_20576 = 0;
    while (true) {
      if (i__18390_20576 < count__18389_20575) {
        var arg__11642__auto___20577 = cljs.core._nth.call(null, chunk__18388_20574, i__18390_20576);
        a__11641__auto__.push(arg__11642__auto___20577);
        var G__20578 = seq__18387_20573;
        var G__20579 = chunk__18388_20574;
        var G__20580 = count__18389_20575;
        var G__20581 = i__18390_20576 + 1;
        seq__18387_20573 = G__20578;
        chunk__18388_20574 = G__20579;
        count__18389_20575 = G__20580;
        i__18390_20576 = G__20581;
        continue;
      } else {
        var temp__4092__auto___20582 = cljs.core.seq.call(null, seq__18387_20573);
        if (temp__4092__auto___20582) {
          var seq__18387_20583__$1 = temp__4092__auto___20582;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18387_20583__$1)) {
            var c__11010__auto___20584 = cljs.core.chunk_first.call(null, seq__18387_20583__$1);
            var G__20585 = cljs.core.chunk_rest.call(null, seq__18387_20583__$1);
            var G__20586 = c__11010__auto___20584;
            var G__20587 = cljs.core.count.call(null, c__11010__auto___20584);
            var G__20588 = 0;
            seq__18387_20573 = G__20585;
            chunk__18388_20574 = G__20586;
            count__18389_20575 = G__20587;
            i__18390_20576 = G__20588;
            continue;
          } else {
            var arg__11642__auto___20589 = cljs.core.first.call(null, seq__18387_20583__$1);
            a__11641__auto__.push(arg__11642__auto___20589);
            var G__20590 = cljs.core.next.call(null, seq__18387_20583__$1);
            var G__20591 = null;
            var G__20592 = 0;
            var G__20593 = 0;
            seq__18387_20573 = G__20590;
            chunk__18388_20574 = G__20591;
            count__18389_20575 = G__20592;
            i__18390_20576 = G__20593;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.strong.apply(null, a__11641__auto__);
  };
  var strong = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return strong__delegate.call(this, args__11640__auto__);
  };
  strong.cljs$lang$maxFixedArity = 0;
  strong.cljs$lang$applyTo = function(arglist__20594) {
    var args__11640__auto__ = cljs.core.seq(arglist__20594);
    return strong__delegate(args__11640__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
quiescent.dom.style = function() {
  var style__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18395_20595 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18396_20596 = null;
    var count__18397_20597 = 0;
    var i__18398_20598 = 0;
    while (true) {
      if (i__18398_20598 < count__18397_20597) {
        var arg__11642__auto___20599 = cljs.core._nth.call(null, chunk__18396_20596, i__18398_20598);
        a__11641__auto__.push(arg__11642__auto___20599);
        var G__20600 = seq__18395_20595;
        var G__20601 = chunk__18396_20596;
        var G__20602 = count__18397_20597;
        var G__20603 = i__18398_20598 + 1;
        seq__18395_20595 = G__20600;
        chunk__18396_20596 = G__20601;
        count__18397_20597 = G__20602;
        i__18398_20598 = G__20603;
        continue;
      } else {
        var temp__4092__auto___20604 = cljs.core.seq.call(null, seq__18395_20595);
        if (temp__4092__auto___20604) {
          var seq__18395_20605__$1 = temp__4092__auto___20604;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18395_20605__$1)) {
            var c__11010__auto___20606 = cljs.core.chunk_first.call(null, seq__18395_20605__$1);
            var G__20607 = cljs.core.chunk_rest.call(null, seq__18395_20605__$1);
            var G__20608 = c__11010__auto___20606;
            var G__20609 = cljs.core.count.call(null, c__11010__auto___20606);
            var G__20610 = 0;
            seq__18395_20595 = G__20607;
            chunk__18396_20596 = G__20608;
            count__18397_20597 = G__20609;
            i__18398_20598 = G__20610;
            continue;
          } else {
            var arg__11642__auto___20611 = cljs.core.first.call(null, seq__18395_20605__$1);
            a__11641__auto__.push(arg__11642__auto___20611);
            var G__20612 = cljs.core.next.call(null, seq__18395_20605__$1);
            var G__20613 = null;
            var G__20614 = 0;
            var G__20615 = 0;
            seq__18395_20595 = G__20612;
            chunk__18396_20596 = G__20613;
            count__18397_20597 = G__20614;
            i__18398_20598 = G__20615;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.style.apply(null, a__11641__auto__);
  };
  var style = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return style__delegate.call(this, args__11640__auto__);
  };
  style.cljs$lang$maxFixedArity = 0;
  style.cljs$lang$applyTo = function(arglist__20616) {
    var args__11640__auto__ = cljs.core.seq(arglist__20616);
    return style__delegate(args__11640__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
quiescent.dom.sub = function() {
  var sub__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18403_20617 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18404_20618 = null;
    var count__18405_20619 = 0;
    var i__18406_20620 = 0;
    while (true) {
      if (i__18406_20620 < count__18405_20619) {
        var arg__11642__auto___20621 = cljs.core._nth.call(null, chunk__18404_20618, i__18406_20620);
        a__11641__auto__.push(arg__11642__auto___20621);
        var G__20622 = seq__18403_20617;
        var G__20623 = chunk__18404_20618;
        var G__20624 = count__18405_20619;
        var G__20625 = i__18406_20620 + 1;
        seq__18403_20617 = G__20622;
        chunk__18404_20618 = G__20623;
        count__18405_20619 = G__20624;
        i__18406_20620 = G__20625;
        continue;
      } else {
        var temp__4092__auto___20626 = cljs.core.seq.call(null, seq__18403_20617);
        if (temp__4092__auto___20626) {
          var seq__18403_20627__$1 = temp__4092__auto___20626;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18403_20627__$1)) {
            var c__11010__auto___20628 = cljs.core.chunk_first.call(null, seq__18403_20627__$1);
            var G__20629 = cljs.core.chunk_rest.call(null, seq__18403_20627__$1);
            var G__20630 = c__11010__auto___20628;
            var G__20631 = cljs.core.count.call(null, c__11010__auto___20628);
            var G__20632 = 0;
            seq__18403_20617 = G__20629;
            chunk__18404_20618 = G__20630;
            count__18405_20619 = G__20631;
            i__18406_20620 = G__20632;
            continue;
          } else {
            var arg__11642__auto___20633 = cljs.core.first.call(null, seq__18403_20627__$1);
            a__11641__auto__.push(arg__11642__auto___20633);
            var G__20634 = cljs.core.next.call(null, seq__18403_20627__$1);
            var G__20635 = null;
            var G__20636 = 0;
            var G__20637 = 0;
            seq__18403_20617 = G__20634;
            chunk__18404_20618 = G__20635;
            count__18405_20619 = G__20636;
            i__18406_20620 = G__20637;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sub.apply(null, a__11641__auto__);
  };
  var sub = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sub__delegate.call(this, args__11640__auto__);
  };
  sub.cljs$lang$maxFixedArity = 0;
  sub.cljs$lang$applyTo = function(arglist__20638) {
    var args__11640__auto__ = cljs.core.seq(arglist__20638);
    return sub__delegate(args__11640__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
quiescent.dom.summary = function() {
  var summary__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18411_20639 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18412_20640 = null;
    var count__18413_20641 = 0;
    var i__18414_20642 = 0;
    while (true) {
      if (i__18414_20642 < count__18413_20641) {
        var arg__11642__auto___20643 = cljs.core._nth.call(null, chunk__18412_20640, i__18414_20642);
        a__11641__auto__.push(arg__11642__auto___20643);
        var G__20644 = seq__18411_20639;
        var G__20645 = chunk__18412_20640;
        var G__20646 = count__18413_20641;
        var G__20647 = i__18414_20642 + 1;
        seq__18411_20639 = G__20644;
        chunk__18412_20640 = G__20645;
        count__18413_20641 = G__20646;
        i__18414_20642 = G__20647;
        continue;
      } else {
        var temp__4092__auto___20648 = cljs.core.seq.call(null, seq__18411_20639);
        if (temp__4092__auto___20648) {
          var seq__18411_20649__$1 = temp__4092__auto___20648;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18411_20649__$1)) {
            var c__11010__auto___20650 = cljs.core.chunk_first.call(null, seq__18411_20649__$1);
            var G__20651 = cljs.core.chunk_rest.call(null, seq__18411_20649__$1);
            var G__20652 = c__11010__auto___20650;
            var G__20653 = cljs.core.count.call(null, c__11010__auto___20650);
            var G__20654 = 0;
            seq__18411_20639 = G__20651;
            chunk__18412_20640 = G__20652;
            count__18413_20641 = G__20653;
            i__18414_20642 = G__20654;
            continue;
          } else {
            var arg__11642__auto___20655 = cljs.core.first.call(null, seq__18411_20649__$1);
            a__11641__auto__.push(arg__11642__auto___20655);
            var G__20656 = cljs.core.next.call(null, seq__18411_20649__$1);
            var G__20657 = null;
            var G__20658 = 0;
            var G__20659 = 0;
            seq__18411_20639 = G__20656;
            chunk__18412_20640 = G__20657;
            count__18413_20641 = G__20658;
            i__18414_20642 = G__20659;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.summary.apply(null, a__11641__auto__);
  };
  var summary = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return summary__delegate.call(this, args__11640__auto__);
  };
  summary.cljs$lang$maxFixedArity = 0;
  summary.cljs$lang$applyTo = function(arglist__20660) {
    var args__11640__auto__ = cljs.core.seq(arglist__20660);
    return summary__delegate(args__11640__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
quiescent.dom.sup = function() {
  var sup__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18419_20661 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18420_20662 = null;
    var count__18421_20663 = 0;
    var i__18422_20664 = 0;
    while (true) {
      if (i__18422_20664 < count__18421_20663) {
        var arg__11642__auto___20665 = cljs.core._nth.call(null, chunk__18420_20662, i__18422_20664);
        a__11641__auto__.push(arg__11642__auto___20665);
        var G__20666 = seq__18419_20661;
        var G__20667 = chunk__18420_20662;
        var G__20668 = count__18421_20663;
        var G__20669 = i__18422_20664 + 1;
        seq__18419_20661 = G__20666;
        chunk__18420_20662 = G__20667;
        count__18421_20663 = G__20668;
        i__18422_20664 = G__20669;
        continue;
      } else {
        var temp__4092__auto___20670 = cljs.core.seq.call(null, seq__18419_20661);
        if (temp__4092__auto___20670) {
          var seq__18419_20671__$1 = temp__4092__auto___20670;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18419_20671__$1)) {
            var c__11010__auto___20672 = cljs.core.chunk_first.call(null, seq__18419_20671__$1);
            var G__20673 = cljs.core.chunk_rest.call(null, seq__18419_20671__$1);
            var G__20674 = c__11010__auto___20672;
            var G__20675 = cljs.core.count.call(null, c__11010__auto___20672);
            var G__20676 = 0;
            seq__18419_20661 = G__20673;
            chunk__18420_20662 = G__20674;
            count__18421_20663 = G__20675;
            i__18422_20664 = G__20676;
            continue;
          } else {
            var arg__11642__auto___20677 = cljs.core.first.call(null, seq__18419_20671__$1);
            a__11641__auto__.push(arg__11642__auto___20677);
            var G__20678 = cljs.core.next.call(null, seq__18419_20671__$1);
            var G__20679 = null;
            var G__20680 = 0;
            var G__20681 = 0;
            seq__18419_20661 = G__20678;
            chunk__18420_20662 = G__20679;
            count__18421_20663 = G__20680;
            i__18422_20664 = G__20681;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sup.apply(null, a__11641__auto__);
  };
  var sup = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sup__delegate.call(this, args__11640__auto__);
  };
  sup.cljs$lang$maxFixedArity = 0;
  sup.cljs$lang$applyTo = function(arglist__20682) {
    var args__11640__auto__ = cljs.core.seq(arglist__20682);
    return sup__delegate(args__11640__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
quiescent.dom.table = function() {
  var table__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18427_20683 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18428_20684 = null;
    var count__18429_20685 = 0;
    var i__18430_20686 = 0;
    while (true) {
      if (i__18430_20686 < count__18429_20685) {
        var arg__11642__auto___20687 = cljs.core._nth.call(null, chunk__18428_20684, i__18430_20686);
        a__11641__auto__.push(arg__11642__auto___20687);
        var G__20688 = seq__18427_20683;
        var G__20689 = chunk__18428_20684;
        var G__20690 = count__18429_20685;
        var G__20691 = i__18430_20686 + 1;
        seq__18427_20683 = G__20688;
        chunk__18428_20684 = G__20689;
        count__18429_20685 = G__20690;
        i__18430_20686 = G__20691;
        continue;
      } else {
        var temp__4092__auto___20692 = cljs.core.seq.call(null, seq__18427_20683);
        if (temp__4092__auto___20692) {
          var seq__18427_20693__$1 = temp__4092__auto___20692;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18427_20693__$1)) {
            var c__11010__auto___20694 = cljs.core.chunk_first.call(null, seq__18427_20693__$1);
            var G__20695 = cljs.core.chunk_rest.call(null, seq__18427_20693__$1);
            var G__20696 = c__11010__auto___20694;
            var G__20697 = cljs.core.count.call(null, c__11010__auto___20694);
            var G__20698 = 0;
            seq__18427_20683 = G__20695;
            chunk__18428_20684 = G__20696;
            count__18429_20685 = G__20697;
            i__18430_20686 = G__20698;
            continue;
          } else {
            var arg__11642__auto___20699 = cljs.core.first.call(null, seq__18427_20693__$1);
            a__11641__auto__.push(arg__11642__auto___20699);
            var G__20700 = cljs.core.next.call(null, seq__18427_20693__$1);
            var G__20701 = null;
            var G__20702 = 0;
            var G__20703 = 0;
            seq__18427_20683 = G__20700;
            chunk__18428_20684 = G__20701;
            count__18429_20685 = G__20702;
            i__18430_20686 = G__20703;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.table.apply(null, a__11641__auto__);
  };
  var table = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return table__delegate.call(this, args__11640__auto__);
  };
  table.cljs$lang$maxFixedArity = 0;
  table.cljs$lang$applyTo = function(arglist__20704) {
    var args__11640__auto__ = cljs.core.seq(arglist__20704);
    return table__delegate(args__11640__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
quiescent.dom.tbody = function() {
  var tbody__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18435_20705 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18436_20706 = null;
    var count__18437_20707 = 0;
    var i__18438_20708 = 0;
    while (true) {
      if (i__18438_20708 < count__18437_20707) {
        var arg__11642__auto___20709 = cljs.core._nth.call(null, chunk__18436_20706, i__18438_20708);
        a__11641__auto__.push(arg__11642__auto___20709);
        var G__20710 = seq__18435_20705;
        var G__20711 = chunk__18436_20706;
        var G__20712 = count__18437_20707;
        var G__20713 = i__18438_20708 + 1;
        seq__18435_20705 = G__20710;
        chunk__18436_20706 = G__20711;
        count__18437_20707 = G__20712;
        i__18438_20708 = G__20713;
        continue;
      } else {
        var temp__4092__auto___20714 = cljs.core.seq.call(null, seq__18435_20705);
        if (temp__4092__auto___20714) {
          var seq__18435_20715__$1 = temp__4092__auto___20714;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18435_20715__$1)) {
            var c__11010__auto___20716 = cljs.core.chunk_first.call(null, seq__18435_20715__$1);
            var G__20717 = cljs.core.chunk_rest.call(null, seq__18435_20715__$1);
            var G__20718 = c__11010__auto___20716;
            var G__20719 = cljs.core.count.call(null, c__11010__auto___20716);
            var G__20720 = 0;
            seq__18435_20705 = G__20717;
            chunk__18436_20706 = G__20718;
            count__18437_20707 = G__20719;
            i__18438_20708 = G__20720;
            continue;
          } else {
            var arg__11642__auto___20721 = cljs.core.first.call(null, seq__18435_20715__$1);
            a__11641__auto__.push(arg__11642__auto___20721);
            var G__20722 = cljs.core.next.call(null, seq__18435_20715__$1);
            var G__20723 = null;
            var G__20724 = 0;
            var G__20725 = 0;
            seq__18435_20705 = G__20722;
            chunk__18436_20706 = G__20723;
            count__18437_20707 = G__20724;
            i__18438_20708 = G__20725;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tbody.apply(null, a__11641__auto__);
  };
  var tbody = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tbody__delegate.call(this, args__11640__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 0;
  tbody.cljs$lang$applyTo = function(arglist__20726) {
    var args__11640__auto__ = cljs.core.seq(arglist__20726);
    return tbody__delegate(args__11640__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
quiescent.dom.td = function() {
  var td__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18443_20727 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18444_20728 = null;
    var count__18445_20729 = 0;
    var i__18446_20730 = 0;
    while (true) {
      if (i__18446_20730 < count__18445_20729) {
        var arg__11642__auto___20731 = cljs.core._nth.call(null, chunk__18444_20728, i__18446_20730);
        a__11641__auto__.push(arg__11642__auto___20731);
        var G__20732 = seq__18443_20727;
        var G__20733 = chunk__18444_20728;
        var G__20734 = count__18445_20729;
        var G__20735 = i__18446_20730 + 1;
        seq__18443_20727 = G__20732;
        chunk__18444_20728 = G__20733;
        count__18445_20729 = G__20734;
        i__18446_20730 = G__20735;
        continue;
      } else {
        var temp__4092__auto___20736 = cljs.core.seq.call(null, seq__18443_20727);
        if (temp__4092__auto___20736) {
          var seq__18443_20737__$1 = temp__4092__auto___20736;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18443_20737__$1)) {
            var c__11010__auto___20738 = cljs.core.chunk_first.call(null, seq__18443_20737__$1);
            var G__20739 = cljs.core.chunk_rest.call(null, seq__18443_20737__$1);
            var G__20740 = c__11010__auto___20738;
            var G__20741 = cljs.core.count.call(null, c__11010__auto___20738);
            var G__20742 = 0;
            seq__18443_20727 = G__20739;
            chunk__18444_20728 = G__20740;
            count__18445_20729 = G__20741;
            i__18446_20730 = G__20742;
            continue;
          } else {
            var arg__11642__auto___20743 = cljs.core.first.call(null, seq__18443_20737__$1);
            a__11641__auto__.push(arg__11642__auto___20743);
            var G__20744 = cljs.core.next.call(null, seq__18443_20737__$1);
            var G__20745 = null;
            var G__20746 = 0;
            var G__20747 = 0;
            seq__18443_20727 = G__20744;
            chunk__18444_20728 = G__20745;
            count__18445_20729 = G__20746;
            i__18446_20730 = G__20747;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.td.apply(null, a__11641__auto__);
  };
  var td = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return td__delegate.call(this, args__11640__auto__);
  };
  td.cljs$lang$maxFixedArity = 0;
  td.cljs$lang$applyTo = function(arglist__20748) {
    var args__11640__auto__ = cljs.core.seq(arglist__20748);
    return td__delegate(args__11640__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
quiescent.dom.textarea = function() {
  var textarea__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18451_20749 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18452_20750 = null;
    var count__18453_20751 = 0;
    var i__18454_20752 = 0;
    while (true) {
      if (i__18454_20752 < count__18453_20751) {
        var arg__11642__auto___20753 = cljs.core._nth.call(null, chunk__18452_20750, i__18454_20752);
        a__11641__auto__.push(arg__11642__auto___20753);
        var G__20754 = seq__18451_20749;
        var G__20755 = chunk__18452_20750;
        var G__20756 = count__18453_20751;
        var G__20757 = i__18454_20752 + 1;
        seq__18451_20749 = G__20754;
        chunk__18452_20750 = G__20755;
        count__18453_20751 = G__20756;
        i__18454_20752 = G__20757;
        continue;
      } else {
        var temp__4092__auto___20758 = cljs.core.seq.call(null, seq__18451_20749);
        if (temp__4092__auto___20758) {
          var seq__18451_20759__$1 = temp__4092__auto___20758;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18451_20759__$1)) {
            var c__11010__auto___20760 = cljs.core.chunk_first.call(null, seq__18451_20759__$1);
            var G__20761 = cljs.core.chunk_rest.call(null, seq__18451_20759__$1);
            var G__20762 = c__11010__auto___20760;
            var G__20763 = cljs.core.count.call(null, c__11010__auto___20760);
            var G__20764 = 0;
            seq__18451_20749 = G__20761;
            chunk__18452_20750 = G__20762;
            count__18453_20751 = G__20763;
            i__18454_20752 = G__20764;
            continue;
          } else {
            var arg__11642__auto___20765 = cljs.core.first.call(null, seq__18451_20759__$1);
            a__11641__auto__.push(arg__11642__auto___20765);
            var G__20766 = cljs.core.next.call(null, seq__18451_20759__$1);
            var G__20767 = null;
            var G__20768 = 0;
            var G__20769 = 0;
            seq__18451_20749 = G__20766;
            chunk__18452_20750 = G__20767;
            count__18453_20751 = G__20768;
            i__18454_20752 = G__20769;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.textarea.apply(null, a__11641__auto__);
  };
  var textarea = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return textarea__delegate.call(this, args__11640__auto__);
  };
  textarea.cljs$lang$maxFixedArity = 0;
  textarea.cljs$lang$applyTo = function(arglist__20770) {
    var args__11640__auto__ = cljs.core.seq(arglist__20770);
    return textarea__delegate(args__11640__auto__);
  };
  textarea.cljs$core$IFn$_invoke$arity$variadic = textarea__delegate;
  return textarea;
}();
quiescent.dom.tfoot = function() {
  var tfoot__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18459_20771 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18460_20772 = null;
    var count__18461_20773 = 0;
    var i__18462_20774 = 0;
    while (true) {
      if (i__18462_20774 < count__18461_20773) {
        var arg__11642__auto___20775 = cljs.core._nth.call(null, chunk__18460_20772, i__18462_20774);
        a__11641__auto__.push(arg__11642__auto___20775);
        var G__20776 = seq__18459_20771;
        var G__20777 = chunk__18460_20772;
        var G__20778 = count__18461_20773;
        var G__20779 = i__18462_20774 + 1;
        seq__18459_20771 = G__20776;
        chunk__18460_20772 = G__20777;
        count__18461_20773 = G__20778;
        i__18462_20774 = G__20779;
        continue;
      } else {
        var temp__4092__auto___20780 = cljs.core.seq.call(null, seq__18459_20771);
        if (temp__4092__auto___20780) {
          var seq__18459_20781__$1 = temp__4092__auto___20780;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18459_20781__$1)) {
            var c__11010__auto___20782 = cljs.core.chunk_first.call(null, seq__18459_20781__$1);
            var G__20783 = cljs.core.chunk_rest.call(null, seq__18459_20781__$1);
            var G__20784 = c__11010__auto___20782;
            var G__20785 = cljs.core.count.call(null, c__11010__auto___20782);
            var G__20786 = 0;
            seq__18459_20771 = G__20783;
            chunk__18460_20772 = G__20784;
            count__18461_20773 = G__20785;
            i__18462_20774 = G__20786;
            continue;
          } else {
            var arg__11642__auto___20787 = cljs.core.first.call(null, seq__18459_20781__$1);
            a__11641__auto__.push(arg__11642__auto___20787);
            var G__20788 = cljs.core.next.call(null, seq__18459_20781__$1);
            var G__20789 = null;
            var G__20790 = 0;
            var G__20791 = 0;
            seq__18459_20771 = G__20788;
            chunk__18460_20772 = G__20789;
            count__18461_20773 = G__20790;
            i__18462_20774 = G__20791;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tfoot.apply(null, a__11641__auto__);
  };
  var tfoot = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tfoot__delegate.call(this, args__11640__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 0;
  tfoot.cljs$lang$applyTo = function(arglist__20792) {
    var args__11640__auto__ = cljs.core.seq(arglist__20792);
    return tfoot__delegate(args__11640__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
quiescent.dom.th = function() {
  var th__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18467_20793 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18468_20794 = null;
    var count__18469_20795 = 0;
    var i__18470_20796 = 0;
    while (true) {
      if (i__18470_20796 < count__18469_20795) {
        var arg__11642__auto___20797 = cljs.core._nth.call(null, chunk__18468_20794, i__18470_20796);
        a__11641__auto__.push(arg__11642__auto___20797);
        var G__20798 = seq__18467_20793;
        var G__20799 = chunk__18468_20794;
        var G__20800 = count__18469_20795;
        var G__20801 = i__18470_20796 + 1;
        seq__18467_20793 = G__20798;
        chunk__18468_20794 = G__20799;
        count__18469_20795 = G__20800;
        i__18470_20796 = G__20801;
        continue;
      } else {
        var temp__4092__auto___20802 = cljs.core.seq.call(null, seq__18467_20793);
        if (temp__4092__auto___20802) {
          var seq__18467_20803__$1 = temp__4092__auto___20802;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18467_20803__$1)) {
            var c__11010__auto___20804 = cljs.core.chunk_first.call(null, seq__18467_20803__$1);
            var G__20805 = cljs.core.chunk_rest.call(null, seq__18467_20803__$1);
            var G__20806 = c__11010__auto___20804;
            var G__20807 = cljs.core.count.call(null, c__11010__auto___20804);
            var G__20808 = 0;
            seq__18467_20793 = G__20805;
            chunk__18468_20794 = G__20806;
            count__18469_20795 = G__20807;
            i__18470_20796 = G__20808;
            continue;
          } else {
            var arg__11642__auto___20809 = cljs.core.first.call(null, seq__18467_20803__$1);
            a__11641__auto__.push(arg__11642__auto___20809);
            var G__20810 = cljs.core.next.call(null, seq__18467_20803__$1);
            var G__20811 = null;
            var G__20812 = 0;
            var G__20813 = 0;
            seq__18467_20793 = G__20810;
            chunk__18468_20794 = G__20811;
            count__18469_20795 = G__20812;
            i__18470_20796 = G__20813;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.th.apply(null, a__11641__auto__);
  };
  var th = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return th__delegate.call(this, args__11640__auto__);
  };
  th.cljs$lang$maxFixedArity = 0;
  th.cljs$lang$applyTo = function(arglist__20814) {
    var args__11640__auto__ = cljs.core.seq(arglist__20814);
    return th__delegate(args__11640__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
quiescent.dom.thead = function() {
  var thead__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18475_20815 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18476_20816 = null;
    var count__18477_20817 = 0;
    var i__18478_20818 = 0;
    while (true) {
      if (i__18478_20818 < count__18477_20817) {
        var arg__11642__auto___20819 = cljs.core._nth.call(null, chunk__18476_20816, i__18478_20818);
        a__11641__auto__.push(arg__11642__auto___20819);
        var G__20820 = seq__18475_20815;
        var G__20821 = chunk__18476_20816;
        var G__20822 = count__18477_20817;
        var G__20823 = i__18478_20818 + 1;
        seq__18475_20815 = G__20820;
        chunk__18476_20816 = G__20821;
        count__18477_20817 = G__20822;
        i__18478_20818 = G__20823;
        continue;
      } else {
        var temp__4092__auto___20824 = cljs.core.seq.call(null, seq__18475_20815);
        if (temp__4092__auto___20824) {
          var seq__18475_20825__$1 = temp__4092__auto___20824;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18475_20825__$1)) {
            var c__11010__auto___20826 = cljs.core.chunk_first.call(null, seq__18475_20825__$1);
            var G__20827 = cljs.core.chunk_rest.call(null, seq__18475_20825__$1);
            var G__20828 = c__11010__auto___20826;
            var G__20829 = cljs.core.count.call(null, c__11010__auto___20826);
            var G__20830 = 0;
            seq__18475_20815 = G__20827;
            chunk__18476_20816 = G__20828;
            count__18477_20817 = G__20829;
            i__18478_20818 = G__20830;
            continue;
          } else {
            var arg__11642__auto___20831 = cljs.core.first.call(null, seq__18475_20825__$1);
            a__11641__auto__.push(arg__11642__auto___20831);
            var G__20832 = cljs.core.next.call(null, seq__18475_20825__$1);
            var G__20833 = null;
            var G__20834 = 0;
            var G__20835 = 0;
            seq__18475_20815 = G__20832;
            chunk__18476_20816 = G__20833;
            count__18477_20817 = G__20834;
            i__18478_20818 = G__20835;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.thead.apply(null, a__11641__auto__);
  };
  var thead = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return thead__delegate.call(this, args__11640__auto__);
  };
  thead.cljs$lang$maxFixedArity = 0;
  thead.cljs$lang$applyTo = function(arglist__20836) {
    var args__11640__auto__ = cljs.core.seq(arglist__20836);
    return thead__delegate(args__11640__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
quiescent.dom.time = function() {
  var time__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18483_20837 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18484_20838 = null;
    var count__18485_20839 = 0;
    var i__18486_20840 = 0;
    while (true) {
      if (i__18486_20840 < count__18485_20839) {
        var arg__11642__auto___20841 = cljs.core._nth.call(null, chunk__18484_20838, i__18486_20840);
        a__11641__auto__.push(arg__11642__auto___20841);
        var G__20842 = seq__18483_20837;
        var G__20843 = chunk__18484_20838;
        var G__20844 = count__18485_20839;
        var G__20845 = i__18486_20840 + 1;
        seq__18483_20837 = G__20842;
        chunk__18484_20838 = G__20843;
        count__18485_20839 = G__20844;
        i__18486_20840 = G__20845;
        continue;
      } else {
        var temp__4092__auto___20846 = cljs.core.seq.call(null, seq__18483_20837);
        if (temp__4092__auto___20846) {
          var seq__18483_20847__$1 = temp__4092__auto___20846;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18483_20847__$1)) {
            var c__11010__auto___20848 = cljs.core.chunk_first.call(null, seq__18483_20847__$1);
            var G__20849 = cljs.core.chunk_rest.call(null, seq__18483_20847__$1);
            var G__20850 = c__11010__auto___20848;
            var G__20851 = cljs.core.count.call(null, c__11010__auto___20848);
            var G__20852 = 0;
            seq__18483_20837 = G__20849;
            chunk__18484_20838 = G__20850;
            count__18485_20839 = G__20851;
            i__18486_20840 = G__20852;
            continue;
          } else {
            var arg__11642__auto___20853 = cljs.core.first.call(null, seq__18483_20847__$1);
            a__11641__auto__.push(arg__11642__auto___20853);
            var G__20854 = cljs.core.next.call(null, seq__18483_20847__$1);
            var G__20855 = null;
            var G__20856 = 0;
            var G__20857 = 0;
            seq__18483_20837 = G__20854;
            chunk__18484_20838 = G__20855;
            count__18485_20839 = G__20856;
            i__18486_20840 = G__20857;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.time.apply(null, a__11641__auto__);
  };
  var time = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return time__delegate.call(this, args__11640__auto__);
  };
  time.cljs$lang$maxFixedArity = 0;
  time.cljs$lang$applyTo = function(arglist__20858) {
    var args__11640__auto__ = cljs.core.seq(arglist__20858);
    return time__delegate(args__11640__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
quiescent.dom.title = function() {
  var title__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18491_20859 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18492_20860 = null;
    var count__18493_20861 = 0;
    var i__18494_20862 = 0;
    while (true) {
      if (i__18494_20862 < count__18493_20861) {
        var arg__11642__auto___20863 = cljs.core._nth.call(null, chunk__18492_20860, i__18494_20862);
        a__11641__auto__.push(arg__11642__auto___20863);
        var G__20864 = seq__18491_20859;
        var G__20865 = chunk__18492_20860;
        var G__20866 = count__18493_20861;
        var G__20867 = i__18494_20862 + 1;
        seq__18491_20859 = G__20864;
        chunk__18492_20860 = G__20865;
        count__18493_20861 = G__20866;
        i__18494_20862 = G__20867;
        continue;
      } else {
        var temp__4092__auto___20868 = cljs.core.seq.call(null, seq__18491_20859);
        if (temp__4092__auto___20868) {
          var seq__18491_20869__$1 = temp__4092__auto___20868;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18491_20869__$1)) {
            var c__11010__auto___20870 = cljs.core.chunk_first.call(null, seq__18491_20869__$1);
            var G__20871 = cljs.core.chunk_rest.call(null, seq__18491_20869__$1);
            var G__20872 = c__11010__auto___20870;
            var G__20873 = cljs.core.count.call(null, c__11010__auto___20870);
            var G__20874 = 0;
            seq__18491_20859 = G__20871;
            chunk__18492_20860 = G__20872;
            count__18493_20861 = G__20873;
            i__18494_20862 = G__20874;
            continue;
          } else {
            var arg__11642__auto___20875 = cljs.core.first.call(null, seq__18491_20869__$1);
            a__11641__auto__.push(arg__11642__auto___20875);
            var G__20876 = cljs.core.next.call(null, seq__18491_20869__$1);
            var G__20877 = null;
            var G__20878 = 0;
            var G__20879 = 0;
            seq__18491_20859 = G__20876;
            chunk__18492_20860 = G__20877;
            count__18493_20861 = G__20878;
            i__18494_20862 = G__20879;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.title.apply(null, a__11641__auto__);
  };
  var title = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return title__delegate.call(this, args__11640__auto__);
  };
  title.cljs$lang$maxFixedArity = 0;
  title.cljs$lang$applyTo = function(arglist__20880) {
    var args__11640__auto__ = cljs.core.seq(arglist__20880);
    return title__delegate(args__11640__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
quiescent.dom.tr = function() {
  var tr__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18499_20881 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18500_20882 = null;
    var count__18501_20883 = 0;
    var i__18502_20884 = 0;
    while (true) {
      if (i__18502_20884 < count__18501_20883) {
        var arg__11642__auto___20885 = cljs.core._nth.call(null, chunk__18500_20882, i__18502_20884);
        a__11641__auto__.push(arg__11642__auto___20885);
        var G__20886 = seq__18499_20881;
        var G__20887 = chunk__18500_20882;
        var G__20888 = count__18501_20883;
        var G__20889 = i__18502_20884 + 1;
        seq__18499_20881 = G__20886;
        chunk__18500_20882 = G__20887;
        count__18501_20883 = G__20888;
        i__18502_20884 = G__20889;
        continue;
      } else {
        var temp__4092__auto___20890 = cljs.core.seq.call(null, seq__18499_20881);
        if (temp__4092__auto___20890) {
          var seq__18499_20891__$1 = temp__4092__auto___20890;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18499_20891__$1)) {
            var c__11010__auto___20892 = cljs.core.chunk_first.call(null, seq__18499_20891__$1);
            var G__20893 = cljs.core.chunk_rest.call(null, seq__18499_20891__$1);
            var G__20894 = c__11010__auto___20892;
            var G__20895 = cljs.core.count.call(null, c__11010__auto___20892);
            var G__20896 = 0;
            seq__18499_20881 = G__20893;
            chunk__18500_20882 = G__20894;
            count__18501_20883 = G__20895;
            i__18502_20884 = G__20896;
            continue;
          } else {
            var arg__11642__auto___20897 = cljs.core.first.call(null, seq__18499_20891__$1);
            a__11641__auto__.push(arg__11642__auto___20897);
            var G__20898 = cljs.core.next.call(null, seq__18499_20891__$1);
            var G__20899 = null;
            var G__20900 = 0;
            var G__20901 = 0;
            seq__18499_20881 = G__20898;
            chunk__18500_20882 = G__20899;
            count__18501_20883 = G__20900;
            i__18502_20884 = G__20901;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tr.apply(null, a__11641__auto__);
  };
  var tr = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tr__delegate.call(this, args__11640__auto__);
  };
  tr.cljs$lang$maxFixedArity = 0;
  tr.cljs$lang$applyTo = function(arglist__20902) {
    var args__11640__auto__ = cljs.core.seq(arglist__20902);
    return tr__delegate(args__11640__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
quiescent.dom.track = function() {
  var track__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18507_20903 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18508_20904 = null;
    var count__18509_20905 = 0;
    var i__18510_20906 = 0;
    while (true) {
      if (i__18510_20906 < count__18509_20905) {
        var arg__11642__auto___20907 = cljs.core._nth.call(null, chunk__18508_20904, i__18510_20906);
        a__11641__auto__.push(arg__11642__auto___20907);
        var G__20908 = seq__18507_20903;
        var G__20909 = chunk__18508_20904;
        var G__20910 = count__18509_20905;
        var G__20911 = i__18510_20906 + 1;
        seq__18507_20903 = G__20908;
        chunk__18508_20904 = G__20909;
        count__18509_20905 = G__20910;
        i__18510_20906 = G__20911;
        continue;
      } else {
        var temp__4092__auto___20912 = cljs.core.seq.call(null, seq__18507_20903);
        if (temp__4092__auto___20912) {
          var seq__18507_20913__$1 = temp__4092__auto___20912;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18507_20913__$1)) {
            var c__11010__auto___20914 = cljs.core.chunk_first.call(null, seq__18507_20913__$1);
            var G__20915 = cljs.core.chunk_rest.call(null, seq__18507_20913__$1);
            var G__20916 = c__11010__auto___20914;
            var G__20917 = cljs.core.count.call(null, c__11010__auto___20914);
            var G__20918 = 0;
            seq__18507_20903 = G__20915;
            chunk__18508_20904 = G__20916;
            count__18509_20905 = G__20917;
            i__18510_20906 = G__20918;
            continue;
          } else {
            var arg__11642__auto___20919 = cljs.core.first.call(null, seq__18507_20913__$1);
            a__11641__auto__.push(arg__11642__auto___20919);
            var G__20920 = cljs.core.next.call(null, seq__18507_20913__$1);
            var G__20921 = null;
            var G__20922 = 0;
            var G__20923 = 0;
            seq__18507_20903 = G__20920;
            chunk__18508_20904 = G__20921;
            count__18509_20905 = G__20922;
            i__18510_20906 = G__20923;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.track.apply(null, a__11641__auto__);
  };
  var track = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return track__delegate.call(this, args__11640__auto__);
  };
  track.cljs$lang$maxFixedArity = 0;
  track.cljs$lang$applyTo = function(arglist__20924) {
    var args__11640__auto__ = cljs.core.seq(arglist__20924);
    return track__delegate(args__11640__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
quiescent.dom.u = function() {
  var u__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18515_20925 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18516_20926 = null;
    var count__18517_20927 = 0;
    var i__18518_20928 = 0;
    while (true) {
      if (i__18518_20928 < count__18517_20927) {
        var arg__11642__auto___20929 = cljs.core._nth.call(null, chunk__18516_20926, i__18518_20928);
        a__11641__auto__.push(arg__11642__auto___20929);
        var G__20930 = seq__18515_20925;
        var G__20931 = chunk__18516_20926;
        var G__20932 = count__18517_20927;
        var G__20933 = i__18518_20928 + 1;
        seq__18515_20925 = G__20930;
        chunk__18516_20926 = G__20931;
        count__18517_20927 = G__20932;
        i__18518_20928 = G__20933;
        continue;
      } else {
        var temp__4092__auto___20934 = cljs.core.seq.call(null, seq__18515_20925);
        if (temp__4092__auto___20934) {
          var seq__18515_20935__$1 = temp__4092__auto___20934;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18515_20935__$1)) {
            var c__11010__auto___20936 = cljs.core.chunk_first.call(null, seq__18515_20935__$1);
            var G__20937 = cljs.core.chunk_rest.call(null, seq__18515_20935__$1);
            var G__20938 = c__11010__auto___20936;
            var G__20939 = cljs.core.count.call(null, c__11010__auto___20936);
            var G__20940 = 0;
            seq__18515_20925 = G__20937;
            chunk__18516_20926 = G__20938;
            count__18517_20927 = G__20939;
            i__18518_20928 = G__20940;
            continue;
          } else {
            var arg__11642__auto___20941 = cljs.core.first.call(null, seq__18515_20935__$1);
            a__11641__auto__.push(arg__11642__auto___20941);
            var G__20942 = cljs.core.next.call(null, seq__18515_20935__$1);
            var G__20943 = null;
            var G__20944 = 0;
            var G__20945 = 0;
            seq__18515_20925 = G__20942;
            chunk__18516_20926 = G__20943;
            count__18517_20927 = G__20944;
            i__18518_20928 = G__20945;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.u.apply(null, a__11641__auto__);
  };
  var u = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return u__delegate.call(this, args__11640__auto__);
  };
  u.cljs$lang$maxFixedArity = 0;
  u.cljs$lang$applyTo = function(arglist__20946) {
    var args__11640__auto__ = cljs.core.seq(arglist__20946);
    return u__delegate(args__11640__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
quiescent.dom.ul = function() {
  var ul__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18523_20947 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18524_20948 = null;
    var count__18525_20949 = 0;
    var i__18526_20950 = 0;
    while (true) {
      if (i__18526_20950 < count__18525_20949) {
        var arg__11642__auto___20951 = cljs.core._nth.call(null, chunk__18524_20948, i__18526_20950);
        a__11641__auto__.push(arg__11642__auto___20951);
        var G__20952 = seq__18523_20947;
        var G__20953 = chunk__18524_20948;
        var G__20954 = count__18525_20949;
        var G__20955 = i__18526_20950 + 1;
        seq__18523_20947 = G__20952;
        chunk__18524_20948 = G__20953;
        count__18525_20949 = G__20954;
        i__18526_20950 = G__20955;
        continue;
      } else {
        var temp__4092__auto___20956 = cljs.core.seq.call(null, seq__18523_20947);
        if (temp__4092__auto___20956) {
          var seq__18523_20957__$1 = temp__4092__auto___20956;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18523_20957__$1)) {
            var c__11010__auto___20958 = cljs.core.chunk_first.call(null, seq__18523_20957__$1);
            var G__20959 = cljs.core.chunk_rest.call(null, seq__18523_20957__$1);
            var G__20960 = c__11010__auto___20958;
            var G__20961 = cljs.core.count.call(null, c__11010__auto___20958);
            var G__20962 = 0;
            seq__18523_20947 = G__20959;
            chunk__18524_20948 = G__20960;
            count__18525_20949 = G__20961;
            i__18526_20950 = G__20962;
            continue;
          } else {
            var arg__11642__auto___20963 = cljs.core.first.call(null, seq__18523_20957__$1);
            a__11641__auto__.push(arg__11642__auto___20963);
            var G__20964 = cljs.core.next.call(null, seq__18523_20957__$1);
            var G__20965 = null;
            var G__20966 = 0;
            var G__20967 = 0;
            seq__18523_20947 = G__20964;
            chunk__18524_20948 = G__20965;
            count__18525_20949 = G__20966;
            i__18526_20950 = G__20967;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ul.apply(null, a__11641__auto__);
  };
  var ul = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ul__delegate.call(this, args__11640__auto__);
  };
  ul.cljs$lang$maxFixedArity = 0;
  ul.cljs$lang$applyTo = function(arglist__20968) {
    var args__11640__auto__ = cljs.core.seq(arglist__20968);
    return ul__delegate(args__11640__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
quiescent.dom.var$ = function() {
  var var$__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18531_20969 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18532_20970 = null;
    var count__18533_20971 = 0;
    var i__18534_20972 = 0;
    while (true) {
      if (i__18534_20972 < count__18533_20971) {
        var arg__11642__auto___20973 = cljs.core._nth.call(null, chunk__18532_20970, i__18534_20972);
        a__11641__auto__.push(arg__11642__auto___20973);
        var G__20974 = seq__18531_20969;
        var G__20975 = chunk__18532_20970;
        var G__20976 = count__18533_20971;
        var G__20977 = i__18534_20972 + 1;
        seq__18531_20969 = G__20974;
        chunk__18532_20970 = G__20975;
        count__18533_20971 = G__20976;
        i__18534_20972 = G__20977;
        continue;
      } else {
        var temp__4092__auto___20978 = cljs.core.seq.call(null, seq__18531_20969);
        if (temp__4092__auto___20978) {
          var seq__18531_20979__$1 = temp__4092__auto___20978;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18531_20979__$1)) {
            var c__11010__auto___20980 = cljs.core.chunk_first.call(null, seq__18531_20979__$1);
            var G__20981 = cljs.core.chunk_rest.call(null, seq__18531_20979__$1);
            var G__20982 = c__11010__auto___20980;
            var G__20983 = cljs.core.count.call(null, c__11010__auto___20980);
            var G__20984 = 0;
            seq__18531_20969 = G__20981;
            chunk__18532_20970 = G__20982;
            count__18533_20971 = G__20983;
            i__18534_20972 = G__20984;
            continue;
          } else {
            var arg__11642__auto___20985 = cljs.core.first.call(null, seq__18531_20979__$1);
            a__11641__auto__.push(arg__11642__auto___20985);
            var G__20986 = cljs.core.next.call(null, seq__18531_20979__$1);
            var G__20987 = null;
            var G__20988 = 0;
            var G__20989 = 0;
            seq__18531_20969 = G__20986;
            chunk__18532_20970 = G__20987;
            count__18533_20971 = G__20988;
            i__18534_20972 = G__20989;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.var$.apply(null, a__11641__auto__);
  };
  var var$ = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return var$__delegate.call(this, args__11640__auto__);
  };
  var$.cljs$lang$maxFixedArity = 0;
  var$.cljs$lang$applyTo = function(arglist__20990) {
    var args__11640__auto__ = cljs.core.seq(arglist__20990);
    return var$__delegate(args__11640__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
quiescent.dom.video = function() {
  var video__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18539_20991 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18540_20992 = null;
    var count__18541_20993 = 0;
    var i__18542_20994 = 0;
    while (true) {
      if (i__18542_20994 < count__18541_20993) {
        var arg__11642__auto___20995 = cljs.core._nth.call(null, chunk__18540_20992, i__18542_20994);
        a__11641__auto__.push(arg__11642__auto___20995);
        var G__20996 = seq__18539_20991;
        var G__20997 = chunk__18540_20992;
        var G__20998 = count__18541_20993;
        var G__20999 = i__18542_20994 + 1;
        seq__18539_20991 = G__20996;
        chunk__18540_20992 = G__20997;
        count__18541_20993 = G__20998;
        i__18542_20994 = G__20999;
        continue;
      } else {
        var temp__4092__auto___21000 = cljs.core.seq.call(null, seq__18539_20991);
        if (temp__4092__auto___21000) {
          var seq__18539_21001__$1 = temp__4092__auto___21000;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18539_21001__$1)) {
            var c__11010__auto___21002 = cljs.core.chunk_first.call(null, seq__18539_21001__$1);
            var G__21003 = cljs.core.chunk_rest.call(null, seq__18539_21001__$1);
            var G__21004 = c__11010__auto___21002;
            var G__21005 = cljs.core.count.call(null, c__11010__auto___21002);
            var G__21006 = 0;
            seq__18539_20991 = G__21003;
            chunk__18540_20992 = G__21004;
            count__18541_20993 = G__21005;
            i__18542_20994 = G__21006;
            continue;
          } else {
            var arg__11642__auto___21007 = cljs.core.first.call(null, seq__18539_21001__$1);
            a__11641__auto__.push(arg__11642__auto___21007);
            var G__21008 = cljs.core.next.call(null, seq__18539_21001__$1);
            var G__21009 = null;
            var G__21010 = 0;
            var G__21011 = 0;
            seq__18539_20991 = G__21008;
            chunk__18540_20992 = G__21009;
            count__18541_20993 = G__21010;
            i__18542_20994 = G__21011;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.video.apply(null, a__11641__auto__);
  };
  var video = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return video__delegate.call(this, args__11640__auto__);
  };
  video.cljs$lang$maxFixedArity = 0;
  video.cljs$lang$applyTo = function(arglist__21012) {
    var args__11640__auto__ = cljs.core.seq(arglist__21012);
    return video__delegate(args__11640__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
quiescent.dom.wbr = function() {
  var wbr__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18547_21013 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18548_21014 = null;
    var count__18549_21015 = 0;
    var i__18550_21016 = 0;
    while (true) {
      if (i__18550_21016 < count__18549_21015) {
        var arg__11642__auto___21017 = cljs.core._nth.call(null, chunk__18548_21014, i__18550_21016);
        a__11641__auto__.push(arg__11642__auto___21017);
        var G__21018 = seq__18547_21013;
        var G__21019 = chunk__18548_21014;
        var G__21020 = count__18549_21015;
        var G__21021 = i__18550_21016 + 1;
        seq__18547_21013 = G__21018;
        chunk__18548_21014 = G__21019;
        count__18549_21015 = G__21020;
        i__18550_21016 = G__21021;
        continue;
      } else {
        var temp__4092__auto___21022 = cljs.core.seq.call(null, seq__18547_21013);
        if (temp__4092__auto___21022) {
          var seq__18547_21023__$1 = temp__4092__auto___21022;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18547_21023__$1)) {
            var c__11010__auto___21024 = cljs.core.chunk_first.call(null, seq__18547_21023__$1);
            var G__21025 = cljs.core.chunk_rest.call(null, seq__18547_21023__$1);
            var G__21026 = c__11010__auto___21024;
            var G__21027 = cljs.core.count.call(null, c__11010__auto___21024);
            var G__21028 = 0;
            seq__18547_21013 = G__21025;
            chunk__18548_21014 = G__21026;
            count__18549_21015 = G__21027;
            i__18550_21016 = G__21028;
            continue;
          } else {
            var arg__11642__auto___21029 = cljs.core.first.call(null, seq__18547_21023__$1);
            a__11641__auto__.push(arg__11642__auto___21029);
            var G__21030 = cljs.core.next.call(null, seq__18547_21023__$1);
            var G__21031 = null;
            var G__21032 = 0;
            var G__21033 = 0;
            seq__18547_21013 = G__21030;
            chunk__18548_21014 = G__21031;
            count__18549_21015 = G__21032;
            i__18550_21016 = G__21033;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.wbr.apply(null, a__11641__auto__);
  };
  var wbr = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return wbr__delegate.call(this, args__11640__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 0;
  wbr.cljs$lang$applyTo = function(arglist__21034) {
    var args__11640__auto__ = cljs.core.seq(arglist__21034);
    return wbr__delegate(args__11640__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
quiescent.dom.circle = function() {
  var circle__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18555_21035 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18556_21036 = null;
    var count__18557_21037 = 0;
    var i__18558_21038 = 0;
    while (true) {
      if (i__18558_21038 < count__18557_21037) {
        var arg__11642__auto___21039 = cljs.core._nth.call(null, chunk__18556_21036, i__18558_21038);
        a__11641__auto__.push(arg__11642__auto___21039);
        var G__21040 = seq__18555_21035;
        var G__21041 = chunk__18556_21036;
        var G__21042 = count__18557_21037;
        var G__21043 = i__18558_21038 + 1;
        seq__18555_21035 = G__21040;
        chunk__18556_21036 = G__21041;
        count__18557_21037 = G__21042;
        i__18558_21038 = G__21043;
        continue;
      } else {
        var temp__4092__auto___21044 = cljs.core.seq.call(null, seq__18555_21035);
        if (temp__4092__auto___21044) {
          var seq__18555_21045__$1 = temp__4092__auto___21044;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18555_21045__$1)) {
            var c__11010__auto___21046 = cljs.core.chunk_first.call(null, seq__18555_21045__$1);
            var G__21047 = cljs.core.chunk_rest.call(null, seq__18555_21045__$1);
            var G__21048 = c__11010__auto___21046;
            var G__21049 = cljs.core.count.call(null, c__11010__auto___21046);
            var G__21050 = 0;
            seq__18555_21035 = G__21047;
            chunk__18556_21036 = G__21048;
            count__18557_21037 = G__21049;
            i__18558_21038 = G__21050;
            continue;
          } else {
            var arg__11642__auto___21051 = cljs.core.first.call(null, seq__18555_21045__$1);
            a__11641__auto__.push(arg__11642__auto___21051);
            var G__21052 = cljs.core.next.call(null, seq__18555_21045__$1);
            var G__21053 = null;
            var G__21054 = 0;
            var G__21055 = 0;
            seq__18555_21035 = G__21052;
            chunk__18556_21036 = G__21053;
            count__18557_21037 = G__21054;
            i__18558_21038 = G__21055;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.circle.apply(null, a__11641__auto__);
  };
  var circle = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return circle__delegate.call(this, args__11640__auto__);
  };
  circle.cljs$lang$maxFixedArity = 0;
  circle.cljs$lang$applyTo = function(arglist__21056) {
    var args__11640__auto__ = cljs.core.seq(arglist__21056);
    return circle__delegate(args__11640__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
quiescent.dom.g = function() {
  var g__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18563_21057 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18564_21058 = null;
    var count__18565_21059 = 0;
    var i__18566_21060 = 0;
    while (true) {
      if (i__18566_21060 < count__18565_21059) {
        var arg__11642__auto___21061 = cljs.core._nth.call(null, chunk__18564_21058, i__18566_21060);
        a__11641__auto__.push(arg__11642__auto___21061);
        var G__21062 = seq__18563_21057;
        var G__21063 = chunk__18564_21058;
        var G__21064 = count__18565_21059;
        var G__21065 = i__18566_21060 + 1;
        seq__18563_21057 = G__21062;
        chunk__18564_21058 = G__21063;
        count__18565_21059 = G__21064;
        i__18566_21060 = G__21065;
        continue;
      } else {
        var temp__4092__auto___21066 = cljs.core.seq.call(null, seq__18563_21057);
        if (temp__4092__auto___21066) {
          var seq__18563_21067__$1 = temp__4092__auto___21066;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18563_21067__$1)) {
            var c__11010__auto___21068 = cljs.core.chunk_first.call(null, seq__18563_21067__$1);
            var G__21069 = cljs.core.chunk_rest.call(null, seq__18563_21067__$1);
            var G__21070 = c__11010__auto___21068;
            var G__21071 = cljs.core.count.call(null, c__11010__auto___21068);
            var G__21072 = 0;
            seq__18563_21057 = G__21069;
            chunk__18564_21058 = G__21070;
            count__18565_21059 = G__21071;
            i__18566_21060 = G__21072;
            continue;
          } else {
            var arg__11642__auto___21073 = cljs.core.first.call(null, seq__18563_21067__$1);
            a__11641__auto__.push(arg__11642__auto___21073);
            var G__21074 = cljs.core.next.call(null, seq__18563_21067__$1);
            var G__21075 = null;
            var G__21076 = 0;
            var G__21077 = 0;
            seq__18563_21057 = G__21074;
            chunk__18564_21058 = G__21075;
            count__18565_21059 = G__21076;
            i__18566_21060 = G__21077;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.g.apply(null, a__11641__auto__);
  };
  var g = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return g__delegate.call(this, args__11640__auto__);
  };
  g.cljs$lang$maxFixedArity = 0;
  g.cljs$lang$applyTo = function(arglist__21078) {
    var args__11640__auto__ = cljs.core.seq(arglist__21078);
    return g__delegate(args__11640__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
quiescent.dom.line = function() {
  var line__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18571_21079 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18572_21080 = null;
    var count__18573_21081 = 0;
    var i__18574_21082 = 0;
    while (true) {
      if (i__18574_21082 < count__18573_21081) {
        var arg__11642__auto___21083 = cljs.core._nth.call(null, chunk__18572_21080, i__18574_21082);
        a__11641__auto__.push(arg__11642__auto___21083);
        var G__21084 = seq__18571_21079;
        var G__21085 = chunk__18572_21080;
        var G__21086 = count__18573_21081;
        var G__21087 = i__18574_21082 + 1;
        seq__18571_21079 = G__21084;
        chunk__18572_21080 = G__21085;
        count__18573_21081 = G__21086;
        i__18574_21082 = G__21087;
        continue;
      } else {
        var temp__4092__auto___21088 = cljs.core.seq.call(null, seq__18571_21079);
        if (temp__4092__auto___21088) {
          var seq__18571_21089__$1 = temp__4092__auto___21088;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18571_21089__$1)) {
            var c__11010__auto___21090 = cljs.core.chunk_first.call(null, seq__18571_21089__$1);
            var G__21091 = cljs.core.chunk_rest.call(null, seq__18571_21089__$1);
            var G__21092 = c__11010__auto___21090;
            var G__21093 = cljs.core.count.call(null, c__11010__auto___21090);
            var G__21094 = 0;
            seq__18571_21079 = G__21091;
            chunk__18572_21080 = G__21092;
            count__18573_21081 = G__21093;
            i__18574_21082 = G__21094;
            continue;
          } else {
            var arg__11642__auto___21095 = cljs.core.first.call(null, seq__18571_21089__$1);
            a__11641__auto__.push(arg__11642__auto___21095);
            var G__21096 = cljs.core.next.call(null, seq__18571_21089__$1);
            var G__21097 = null;
            var G__21098 = 0;
            var G__21099 = 0;
            seq__18571_21079 = G__21096;
            chunk__18572_21080 = G__21097;
            count__18573_21081 = G__21098;
            i__18574_21082 = G__21099;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.line.apply(null, a__11641__auto__);
  };
  var line = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return line__delegate.call(this, args__11640__auto__);
  };
  line.cljs$lang$maxFixedArity = 0;
  line.cljs$lang$applyTo = function(arglist__21100) {
    var args__11640__auto__ = cljs.core.seq(arglist__21100);
    return line__delegate(args__11640__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
quiescent.dom.path = function() {
  var path__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18579_21101 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18580_21102 = null;
    var count__18581_21103 = 0;
    var i__18582_21104 = 0;
    while (true) {
      if (i__18582_21104 < count__18581_21103) {
        var arg__11642__auto___21105 = cljs.core._nth.call(null, chunk__18580_21102, i__18582_21104);
        a__11641__auto__.push(arg__11642__auto___21105);
        var G__21106 = seq__18579_21101;
        var G__21107 = chunk__18580_21102;
        var G__21108 = count__18581_21103;
        var G__21109 = i__18582_21104 + 1;
        seq__18579_21101 = G__21106;
        chunk__18580_21102 = G__21107;
        count__18581_21103 = G__21108;
        i__18582_21104 = G__21109;
        continue;
      } else {
        var temp__4092__auto___21110 = cljs.core.seq.call(null, seq__18579_21101);
        if (temp__4092__auto___21110) {
          var seq__18579_21111__$1 = temp__4092__auto___21110;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18579_21111__$1)) {
            var c__11010__auto___21112 = cljs.core.chunk_first.call(null, seq__18579_21111__$1);
            var G__21113 = cljs.core.chunk_rest.call(null, seq__18579_21111__$1);
            var G__21114 = c__11010__auto___21112;
            var G__21115 = cljs.core.count.call(null, c__11010__auto___21112);
            var G__21116 = 0;
            seq__18579_21101 = G__21113;
            chunk__18580_21102 = G__21114;
            count__18581_21103 = G__21115;
            i__18582_21104 = G__21116;
            continue;
          } else {
            var arg__11642__auto___21117 = cljs.core.first.call(null, seq__18579_21111__$1);
            a__11641__auto__.push(arg__11642__auto___21117);
            var G__21118 = cljs.core.next.call(null, seq__18579_21111__$1);
            var G__21119 = null;
            var G__21120 = 0;
            var G__21121 = 0;
            seq__18579_21101 = G__21118;
            chunk__18580_21102 = G__21119;
            count__18581_21103 = G__21120;
            i__18582_21104 = G__21121;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.path.apply(null, a__11641__auto__);
  };
  var path = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return path__delegate.call(this, args__11640__auto__);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__21122) {
    var args__11640__auto__ = cljs.core.seq(arglist__21122);
    return path__delegate(args__11640__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
quiescent.dom.polygon = function() {
  var polygon__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18587_21123 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18588_21124 = null;
    var count__18589_21125 = 0;
    var i__18590_21126 = 0;
    while (true) {
      if (i__18590_21126 < count__18589_21125) {
        var arg__11642__auto___21127 = cljs.core._nth.call(null, chunk__18588_21124, i__18590_21126);
        a__11641__auto__.push(arg__11642__auto___21127);
        var G__21128 = seq__18587_21123;
        var G__21129 = chunk__18588_21124;
        var G__21130 = count__18589_21125;
        var G__21131 = i__18590_21126 + 1;
        seq__18587_21123 = G__21128;
        chunk__18588_21124 = G__21129;
        count__18589_21125 = G__21130;
        i__18590_21126 = G__21131;
        continue;
      } else {
        var temp__4092__auto___21132 = cljs.core.seq.call(null, seq__18587_21123);
        if (temp__4092__auto___21132) {
          var seq__18587_21133__$1 = temp__4092__auto___21132;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18587_21133__$1)) {
            var c__11010__auto___21134 = cljs.core.chunk_first.call(null, seq__18587_21133__$1);
            var G__21135 = cljs.core.chunk_rest.call(null, seq__18587_21133__$1);
            var G__21136 = c__11010__auto___21134;
            var G__21137 = cljs.core.count.call(null, c__11010__auto___21134);
            var G__21138 = 0;
            seq__18587_21123 = G__21135;
            chunk__18588_21124 = G__21136;
            count__18589_21125 = G__21137;
            i__18590_21126 = G__21138;
            continue;
          } else {
            var arg__11642__auto___21139 = cljs.core.first.call(null, seq__18587_21133__$1);
            a__11641__auto__.push(arg__11642__auto___21139);
            var G__21140 = cljs.core.next.call(null, seq__18587_21133__$1);
            var G__21141 = null;
            var G__21142 = 0;
            var G__21143 = 0;
            seq__18587_21123 = G__21140;
            chunk__18588_21124 = G__21141;
            count__18589_21125 = G__21142;
            i__18590_21126 = G__21143;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polygon.apply(null, a__11641__auto__);
  };
  var polygon = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polygon__delegate.call(this, args__11640__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 0;
  polygon.cljs$lang$applyTo = function(arglist__21144) {
    var args__11640__auto__ = cljs.core.seq(arglist__21144);
    return polygon__delegate(args__11640__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
quiescent.dom.polyline = function() {
  var polyline__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18595_21145 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18596_21146 = null;
    var count__18597_21147 = 0;
    var i__18598_21148 = 0;
    while (true) {
      if (i__18598_21148 < count__18597_21147) {
        var arg__11642__auto___21149 = cljs.core._nth.call(null, chunk__18596_21146, i__18598_21148);
        a__11641__auto__.push(arg__11642__auto___21149);
        var G__21150 = seq__18595_21145;
        var G__21151 = chunk__18596_21146;
        var G__21152 = count__18597_21147;
        var G__21153 = i__18598_21148 + 1;
        seq__18595_21145 = G__21150;
        chunk__18596_21146 = G__21151;
        count__18597_21147 = G__21152;
        i__18598_21148 = G__21153;
        continue;
      } else {
        var temp__4092__auto___21154 = cljs.core.seq.call(null, seq__18595_21145);
        if (temp__4092__auto___21154) {
          var seq__18595_21155__$1 = temp__4092__auto___21154;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18595_21155__$1)) {
            var c__11010__auto___21156 = cljs.core.chunk_first.call(null, seq__18595_21155__$1);
            var G__21157 = cljs.core.chunk_rest.call(null, seq__18595_21155__$1);
            var G__21158 = c__11010__auto___21156;
            var G__21159 = cljs.core.count.call(null, c__11010__auto___21156);
            var G__21160 = 0;
            seq__18595_21145 = G__21157;
            chunk__18596_21146 = G__21158;
            count__18597_21147 = G__21159;
            i__18598_21148 = G__21160;
            continue;
          } else {
            var arg__11642__auto___21161 = cljs.core.first.call(null, seq__18595_21155__$1);
            a__11641__auto__.push(arg__11642__auto___21161);
            var G__21162 = cljs.core.next.call(null, seq__18595_21155__$1);
            var G__21163 = null;
            var G__21164 = 0;
            var G__21165 = 0;
            seq__18595_21145 = G__21162;
            chunk__18596_21146 = G__21163;
            count__18597_21147 = G__21164;
            i__18598_21148 = G__21165;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polyline.apply(null, a__11641__auto__);
  };
  var polyline = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polyline__delegate.call(this, args__11640__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 0;
  polyline.cljs$lang$applyTo = function(arglist__21166) {
    var args__11640__auto__ = cljs.core.seq(arglist__21166);
    return polyline__delegate(args__11640__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
quiescent.dom.rect = function() {
  var rect__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18603_21167 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18604_21168 = null;
    var count__18605_21169 = 0;
    var i__18606_21170 = 0;
    while (true) {
      if (i__18606_21170 < count__18605_21169) {
        var arg__11642__auto___21171 = cljs.core._nth.call(null, chunk__18604_21168, i__18606_21170);
        a__11641__auto__.push(arg__11642__auto___21171);
        var G__21172 = seq__18603_21167;
        var G__21173 = chunk__18604_21168;
        var G__21174 = count__18605_21169;
        var G__21175 = i__18606_21170 + 1;
        seq__18603_21167 = G__21172;
        chunk__18604_21168 = G__21173;
        count__18605_21169 = G__21174;
        i__18606_21170 = G__21175;
        continue;
      } else {
        var temp__4092__auto___21176 = cljs.core.seq.call(null, seq__18603_21167);
        if (temp__4092__auto___21176) {
          var seq__18603_21177__$1 = temp__4092__auto___21176;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18603_21177__$1)) {
            var c__11010__auto___21178 = cljs.core.chunk_first.call(null, seq__18603_21177__$1);
            var G__21179 = cljs.core.chunk_rest.call(null, seq__18603_21177__$1);
            var G__21180 = c__11010__auto___21178;
            var G__21181 = cljs.core.count.call(null, c__11010__auto___21178);
            var G__21182 = 0;
            seq__18603_21167 = G__21179;
            chunk__18604_21168 = G__21180;
            count__18605_21169 = G__21181;
            i__18606_21170 = G__21182;
            continue;
          } else {
            var arg__11642__auto___21183 = cljs.core.first.call(null, seq__18603_21177__$1);
            a__11641__auto__.push(arg__11642__auto___21183);
            var G__21184 = cljs.core.next.call(null, seq__18603_21177__$1);
            var G__21185 = null;
            var G__21186 = 0;
            var G__21187 = 0;
            seq__18603_21167 = G__21184;
            chunk__18604_21168 = G__21185;
            count__18605_21169 = G__21186;
            i__18606_21170 = G__21187;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rect.apply(null, a__11641__auto__);
  };
  var rect = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rect__delegate.call(this, args__11640__auto__);
  };
  rect.cljs$lang$maxFixedArity = 0;
  rect.cljs$lang$applyTo = function(arglist__21188) {
    var args__11640__auto__ = cljs.core.seq(arglist__21188);
    return rect__delegate(args__11640__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
quiescent.dom.svg = function() {
  var svg__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__18611_21189 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__18612_21190 = null;
    var count__18613_21191 = 0;
    var i__18614_21192 = 0;
    while (true) {
      if (i__18614_21192 < count__18613_21191) {
        var arg__11642__auto___21193 = cljs.core._nth.call(null, chunk__18612_21190, i__18614_21192);
        a__11641__auto__.push(arg__11642__auto___21193);
        var G__21194 = seq__18611_21189;
        var G__21195 = chunk__18612_21190;
        var G__21196 = count__18613_21191;
        var G__21197 = i__18614_21192 + 1;
        seq__18611_21189 = G__21194;
        chunk__18612_21190 = G__21195;
        count__18613_21191 = G__21196;
        i__18614_21192 = G__21197;
        continue;
      } else {
        var temp__4092__auto___21198 = cljs.core.seq.call(null, seq__18611_21189);
        if (temp__4092__auto___21198) {
          var seq__18611_21199__$1 = temp__4092__auto___21198;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18611_21199__$1)) {
            var c__11010__auto___21200 = cljs.core.chunk_first.call(null, seq__18611_21199__$1);
            var G__21201 = cljs.core.chunk_rest.call(null, seq__18611_21199__$1);
            var G__21202 = c__11010__auto___21200;
            var G__21203 = cljs.core.count.call(null, c__11010__auto___21200);
            var G__21204 = 0;
            seq__18611_21189 = G__21201;
            chunk__18612_21190 = G__21202;
            count__18613_21191 = G__21203;
            i__18614_21192 = G__21204;
            continue;
          } else {
            var arg__11642__auto___21205 = cljs.core.first.call(null, seq__18611_21199__$1);
            a__11641__auto__.push(arg__11642__auto___21205);
            var G__21206 = cljs.core.next.call(null, seq__18611_21199__$1);
            var G__21207 = null;
            var G__21208 = 0;
            var G__21209 = 0;
            seq__18611_21189 = G__21206;
            chunk__18612_21190 = G__21207;
            count__18613_21191 = G__21208;
            i__18614_21192 = G__21209;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.svg.apply(null, a__11641__auto__);
  };
  var svg = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return svg__delegate.call(this, args__11640__auto__);
  };
  svg.cljs$lang$maxFixedArity = 0;
  svg.cljs$lang$applyTo = function(arglist__21210) {
    var args__11640__auto__ = cljs.core.seq(arglist__21210);
    return svg__delegate(args__11640__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
quiescent.dom.text = function() {
  var text__delegate = function(args__11640__auto__) {
    var a__11641__auto__ = [];
    a__11641__auto__.push(quiescent.dom.js_props.call(null, cljs.core.first.call(null, args__11640__auto__)));
    var seq__17923_21211 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__11640__auto__));
    var chunk__17924_21212 = null;
    var count__17925_21213 = 0;
    var i__17926_21214 = 0;
    while (true) {
      if (i__17926_21214 < count__17925_21213) {
        var arg__11642__auto___21215 = cljs.core._nth.call(null, chunk__17924_21212, i__17926_21214);
        a__11641__auto__.push(arg__11642__auto___21215);
        var G__21216 = seq__17923_21211;
        var G__21217 = chunk__17924_21212;
        var G__21218 = count__17925_21213;
        var G__21219 = i__17926_21214 + 1;
        seq__17923_21211 = G__21216;
        chunk__17924_21212 = G__21217;
        count__17925_21213 = G__21218;
        i__17926_21214 = G__21219;
        continue;
      } else {
        var temp__4092__auto___21220 = cljs.core.seq.call(null, seq__17923_21211);
        if (temp__4092__auto___21220) {
          var seq__17923_21221__$1 = temp__4092__auto___21220;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__17923_21221__$1)) {
            var c__11010__auto___21222 = cljs.core.chunk_first.call(null, seq__17923_21221__$1);
            var G__21223 = cljs.core.chunk_rest.call(null, seq__17923_21221__$1);
            var G__21224 = c__11010__auto___21222;
            var G__21225 = cljs.core.count.call(null, c__11010__auto___21222);
            var G__21226 = 0;
            seq__17923_21211 = G__21223;
            chunk__17924_21212 = G__21224;
            count__17925_21213 = G__21225;
            i__17926_21214 = G__21226;
            continue;
          } else {
            var arg__11642__auto___21227 = cljs.core.first.call(null, seq__17923_21221__$1);
            a__11641__auto__.push(arg__11642__auto___21227);
            var G__21228 = cljs.core.next.call(null, seq__17923_21221__$1);
            var G__21229 = null;
            var G__21230 = 0;
            var G__21231 = 0;
            seq__17923_21211 = G__21228;
            chunk__17924_21212 = G__21229;
            count__17925_21213 = G__21230;
            i__17926_21214 = G__21231;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.text.apply(null, a__11641__auto__);
  };
  var text = function(var_args) {
    var args__11640__auto__ = null;
    if (arguments.length > 0) {
      args__11640__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return text__delegate.call(this, args__11640__auto__);
  };
  text.cljs$lang$maxFixedArity = 0;
  text.cljs$lang$applyTo = function(arglist__21232) {
    var args__11640__auto__ = cljs.core.seq(arglist__21232);
    return text__delegate(args__11640__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
goog.provide("todomvc.render");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("quiescent.dom");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("quiescent");
goog.require("cljs.core.async");
todomvc.render.enter_key_QMARK_ = function enter_key_QMARK_(evt) {
  return cljs.core._EQ_.call(null, 13, evt.keyCode);
};
todomvc.render.Header = quiescent.component.call(null, function(_, channel) {
  return quiescent.dom.header.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "header"], null), quiescent.dom.h1.call(null, cljs.core.PersistentArrayMap.EMPTY, "todos"), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", 1013907597), "new-todo", new cljs.core.Keyword(null, "placeholder", "placeholder", 1612151013), "What needs to be done?", new cljs.core.Keyword(null, "onKeyDown", 
  "onKeyDown", 1534256180), function(evt) {
    if (todomvc.render.enter_key_QMARK_.call(null, evt)) {
      var text = evt.target.value;
      cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "create-item", "create-item", 4768804022), text], null));
      return evt.target.value = "";
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "autoFocus", "autoFocus", 2651959259), true], null)));
});
todomvc.render.ItemFilter = quiescent.component.call(null, function(current_filter, this_filter, label, href, channel) {
  return quiescent.dom.li.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "className", "className", 1004015509), cljs.core._EQ_.call(null, current_filter, this_filter) ? "selected" : null, new cljs.core.Keyword(null, "href", "href", 1017115293), href, new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), function() {
    cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "set-filter", "set-filter", 2331384501), this_filter], null));
    return false;
  }], null), label));
});
todomvc.render.Filters = quiescent.component.call(null, function(current_filter, channel) {
  return quiescent.dom.ul.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "filters"], null), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, "all", "all", 1014000915), "All", "#/", channel), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, "active", "active", 3885920888), "Active", "#/active", channel), todomvc.render.ItemFilter.call(null, current_filter, new cljs.core.Keyword(null, 
  "completed", "completed", 3905939901), "Completed", "#/completed", channel));
});
todomvc.render.Footer = quiescent.component.call(null, function(p__16190, channel) {
  var vec__16191 = p__16190;
  var current_filter = cljs.core.nth.call(null, vec__16191, 0, null);
  var items = cljs.core.nth.call(null, vec__16191, 1, null);
  var completed = cljs.core.count.call(null, cljs.core.filter.call(null, new cljs.core.Keyword(null, "completed", "completed", 3905939901), items));
  var left = cljs.core.count.call(null, items) - completed;
  return quiescent.dom.footer.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "footer"], null), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-count"], null), quiescent.dom.strong.call(null, cljs.core.PersistentArrayMap.EMPTY, [cljs.core.str(left), cljs.core.str(" item(s) left")].join(""))), todomvc.render.Filters.call(null, current_filter, channel), 0 < 
  completed ? quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "clear-completed", new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), function() {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "clear-completed", "clear-completed", 888981053)], null));
  }], null), [cljs.core.str("Clear completed ("), cljs.core.str(completed), cljs.core.str(")")].join("")) : null);
});
todomvc.render.class_name = function class_name(classes) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.map.call(null, cljs.core.identity, classes)));
};
todomvc.render.hidden_QMARK_ = function hidden_QMARK_(completed, current_filter) {
  var or__10262__auto__ = function() {
    var and__10250__auto__ = completed;
    if (cljs.core.truth_(and__10250__auto__)) {
      return cljs.core._EQ_.call(null, current_filter, new cljs.core.Keyword(null, "active", "active", 3885920888));
    } else {
      return and__10250__auto__;
    }
  }();
  if (cljs.core.truth_(or__10262__auto__)) {
    return or__10262__auto__;
  } else {
    return cljs.core.not.call(null, completed) && cljs.core._EQ_.call(null, current_filter, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
  }
};
todomvc.render.Item = quiescent.component.call(null, function(p__16192, channel) {
  var vec__16193 = p__16192;
  var map__16194 = cljs.core.nth.call(null, vec__16193, 0, null);
  var map__16194__$1 = cljs.core.seq_QMARK_.call(null, map__16194) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16194) : map__16194;
  var editing = cljs.core.get.call(null, map__16194__$1, new cljs.core.Keyword(null, "editing", "editing", 3420907786));
  var completed = cljs.core.get.call(null, map__16194__$1, new cljs.core.Keyword(null, "completed", "completed", 3905939901));
  var text = cljs.core.get.call(null, map__16194__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
  var id = cljs.core.get.call(null, map__16194__$1, new cljs.core.Keyword(null, "id", "id", 1013907597));
  var current_filter = cljs.core.nth.call(null, vec__16193, 1, null);
  var completed__$1 = cljs.core.boolean$.call(null, completed);
  return quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "key", "key", 1014010321), id, new cljs.core.Keyword(null, "className", "className", 1004015509), todomvc.render.class_name.call(null, cljs.core.PersistentHashSet.fromArray([completed__$1 ? "completed" : null, cljs.core.truth_(todomvc.render.hidden_QMARK_.call(null, completed__$1, current_filter)) ? "hidden" : null, cljs.core.truth_(editing) ? "editing" : null], true)), new cljs.core.Keyword(null, 
  "onDoubleClick", "onDoubleClick", 4144140362), function(_) {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "start-edit", "start-edit", 3689098247), id], null));
  }], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", 1004015509), "view"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "className", "className", 1004015509), "toggle", new cljs.core.Keyword(null, "type", "type", 1017479852), "checkbox", new cljs.core.Keyword(null, "checked", "checked", 1756218137), completed__$1, new cljs.core.Keyword(null, "onChange", 
  "onChange", 2050678241), function(_) {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "toggle-item", "toggle-item", 4616866142), id], null));
  }], null)), quiescent.dom.label.call(null, cljs.core.PersistentArrayMap.EMPTY, text), quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", 1004015509), "destroy", new cljs.core.Keyword(null, "onClick", "onClick", 3956969051), function(_) {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remove-item", "remove-item", 673860142), id], null));
  }], null))), quiescent.dom.input.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "className", "className", 1004015509), "edit", new cljs.core.Keyword(null, "defaultValue", "defaultValue", 4649746210), text, new cljs.core.Keyword(null, "onKeyDown", "onKeyDown", 1534256180), function(evt) {
    if (todomvc.render.enter_key_QMARK_.call(null, evt)) {
      return evt.target.blur();
    } else {
      return null;
    }
  }, new cljs.core.Keyword(null, "onBlur", "onBlur", 4295401048), function(evt) {
    var text__$1 = evt.target.value;
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "complete-edit", "complete-edit", 1152265616), id, text__$1], null));
  }], null), cljs.core.truth_(editing) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "autoFocus", "autoFocus", 2651959259), true], null) : cljs.core.PersistentArrayMap.EMPTY)));
});
todomvc.render.TodoList = quiescent.component.call(null, function(p__16196, channel) {
  var vec__16197 = p__16196;
  var current_filter = cljs.core.nth.call(null, vec__16197, 0, null);
  var items = cljs.core.nth.call(null, vec__16197, 1, null);
  return cljs.core.apply.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-list"], null), cljs.core.map.call(null, function(p1__16195_SHARP_) {
    return todomvc.render.Item.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16195_SHARP_, current_filter], null), channel);
  }, items));
});
todomvc.render.App = quiescent.component.call(null, function(p__16198, channel) {
  var map__16199 = p__16198;
  var map__16199__$1 = cljs.core.seq_QMARK_.call(null, map__16199) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16199) : map__16199;
  var error = cljs.core.get.call(null, map__16199__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
  var items = cljs.core.get.call(null, map__16199__$1, new cljs.core.Keyword(null, "items", "items", 1114430258));
  var current_filter = cljs.core.get.call(null, map__16199__$1, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582));
  var all_done_QMARK_ = cljs.core.get.call(null, map__16199__$1, new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259));
  return quiescent.dom.div.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.truth_(error) ? quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), "todo-error", new cljs.core.Keyword(null, "className", "className", 1004015509), "alert alert-info"], null), "Error occured, reloading page recommended.") : null, quiescent.dom.section.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 
  1013907597), "todoapp"], null), quiescent.dom.div.call(null, cljs.core.PersistentArrayMap.EMPTY, todomvc.render.Header.call(null, null, channel), quiescent.dom.section.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "id", "id", 1013907597), "main"], null), quiescent.dom.input.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "id", "id", 1013907597), "toggle-all", new cljs.core.Keyword(null, "type", "type", 1017479852), "checkbox", 
  new cljs.core.Keyword(null, "checked", "checked", 1756218137), all_done_QMARK_, new cljs.core.Keyword(null, "onChange", "onChange", 2050678241), function() {
    return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "toggle-all", "toggle-all", 4455256858)], null));
  }], null)), quiescent.dom.label.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "htmlFor", "htmlFor", 2249940112), "toggle-all"], null), "Mark all as complete"), todomvc.render.TodoList.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [current_filter, items], null), channel)), todomvc.render.Footer.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [current_filter, items], null), 
  channel))));
});
todomvc.render.main = function main(p__16200) {
  var map__16202 = p__16200;
  var map__16202__$1 = cljs.core.seq_QMARK_.call(null, map__16202) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16202) : map__16202;
  var channel = cljs.core.get.call(null, map__16202__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var state = cljs.core.get.call(null, map__16202__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  var render_pending_QMARK_ = cljs.core.get.call(null, map__16202__$1, new cljs.core.Keyword(null, "render-pending?", "render-pending?", 2215462737));
  if (cljs.core.compare_and_set_BANG_.call(null, render_pending_QMARK_, false, true)) {
    return window.requestAnimationFrame(function() {
      quiescent.render.call(null, todomvc.render.App.call(null, cljs.core.deref.call(null, state), channel), document.getElementById("todopane"));
      return cljs.core.reset_BANG_.call(null, render_pending_QMARK_, false);
    });
  } else {
    return null;
  }
};
goog.provide("todomvc.services");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("ajax.core");
goog.require("ajax.core");
goog.require("cljs.core.async");
todomvc.services.current_url = function current_url() {
  return[cljs.core.str(document.URL)].join("");
};
todomvc.services.error_handler = function error_handler(channel) {
  return cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "error", "error", 1110689146)], null));
};
todomvc.services.handle = function() {
  var method_table__11120__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__11121__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__11122__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__11123__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__11124__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("handle", function(channel, action) {
    return cljs.core.first.call(null, action);
  }, new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__11124__auto__, method_table__11120__auto__, prefer_table__11121__auto__, method_cache__11122__auto__, cached_hierarchy__11123__auto__);
}();
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "create-item", "create-item", 4768804022), function(channel, p__16479) {
  var vec__16480 = p__16479;
  var _ = cljs.core.nth.call(null, vec__16480, 0, null);
  var text = cljs.core.nth.call(null, vec__16480, 1, null);
  console.log([cljs.core.str("create-item"), cljs.core.str(text)].join(""));
  var id = -4;
  cljs.core.async.put_BANG_.call(null, channel, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "add-item", "add-item", 4026553393), id, text], null));
  console.log([cljs.core.str("toL "), cljs.core.str(todomvc.services.current_url.call(null))].join(""));
  return ajax.core.POST.call(null, todomvc.services.current_url.call(null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "params", "params", 4313443576), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "id", "id", 1013907597), id, new cljs.core.Keyword(null, "text", "text", 1017460895), text], null), new cljs.core.Keyword(null, "handler", "handler", 1706707644), function(res) {
    return console.log([cljs.core.str("Succesful res: "), cljs.core.str(res)].join(""));
  }, new cljs.core.Keyword(null, "error-handler", "error-handler", 1866823671), todomvc.services.error_handler.call(null, channel)], null));
});
cljs.core._add_method.call(null, todomvc.services.handle, new cljs.core.Keyword(null, "default", "default", 2558708147), function(_, ___$1) {
  return null;
});
todomvc.services.start_services = function start_services(app) {
  console.log([cljs.core.str("Url is: "), cljs.core.str(document.URL)].join(""));
  var map__16512 = app;
  var map__16512__$1 = cljs.core.seq_QMARK_.call(null, map__16512) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16512) : map__16512;
  var emit = cljs.core.get.call(null, map__16512__$1, new cljs.core.Keyword(null, "emit", "emit", 1017021253));
  var channel = cljs.core.get.call(null, map__16512__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var c__13886__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13887__auto__ = function() {
      var switch__13816__auto__ = function(state_16527) {
        var state_val_16528 = state_16527[1];
        if (state_val_16528 === 7) {
          var inst_16516 = state_16527[2];
          var inst_16517 = [cljs.core.str("service: "), cljs.core.str(inst_16516)].join("");
          var inst_16518 = console.log(inst_16517);
          var inst_16519 = todomvc.services.handle.call(null, channel, inst_16516);
          var state_16527__$1 = function() {
            var statearr_16529 = state_16527;
            statearr_16529[7] = inst_16518;
            statearr_16529[8] = inst_16519;
            return statearr_16529;
          }();
          var statearr_16530_16543 = state_16527__$1;
          statearr_16530_16543[2] = null;
          statearr_16530_16543[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_16528 === 6) {
            var inst_16523 = state_16527[2];
            var state_16527__$1 = state_16527;
            var statearr_16531_16544 = state_16527__$1;
            statearr_16531_16544[2] = inst_16523;
            statearr_16531_16544[1] = 3;
            return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
          } else {
            if (state_val_16528 === 5) {
              var state_16527__$1 = state_16527;
              var statearr_16532_16545 = state_16527__$1;
              statearr_16532_16545[2] = null;
              statearr_16532_16545[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16528 === 4) {
                var state_16527__$1 = state_16527;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16527__$1, 7, emit);
              } else {
                if (state_val_16528 === 3) {
                  var inst_16525 = state_16527[2];
                  var state_16527__$1 = state_16527;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16527__$1, inst_16525);
                } else {
                  if (state_val_16528 === 2) {
                    var state_16527__$1 = state_16527;
                    if (true) {
                      var statearr_16533_16546 = state_16527__$1;
                      statearr_16533_16546[1] = 4;
                    } else {
                      var statearr_16534_16547 = state_16527__$1;
                      statearr_16534_16547[1] = 5;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (state_val_16528 === 1) {
                      var state_16527__$1 = state_16527;
                      var statearr_16535_16548 = state_16527__$1;
                      statearr_16535_16548[2] = null;
                      statearr_16535_16548[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13816__auto__) {
        return function() {
          var state_machine__13817__auto__ = null;
          var state_machine__13817__auto____0 = function() {
            var statearr_16539 = [null, null, null, null, null, null, null, null, null];
            statearr_16539[0] = state_machine__13817__auto__;
            statearr_16539[1] = 1;
            return statearr_16539;
          };
          var state_machine__13817__auto____1 = function(state_16527) {
            while (true) {
              var ret_value__13818__auto__ = function() {
                try {
                  while (true) {
                    var result__13819__auto__ = switch__13816__auto__.call(null, state_16527);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13819__auto__;
                    }
                    break;
                  }
                } catch (e16540) {
                  if (e16540 instanceof Object) {
                    var ex__13820__auto__ = e16540;
                    var statearr_16541_16549 = state_16527;
                    statearr_16541_16549[5] = ex__13820__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16527);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e16540;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__16550 = state_16527;
                state_16527 = G__16550;
                continue;
              } else {
                return ret_value__13818__auto__;
              }
              break;
            }
          };
          state_machine__13817__auto__ = function(state_16527) {
            switch(arguments.length) {
              case 0:
                return state_machine__13817__auto____0.call(this);
              case 1:
                return state_machine__13817__auto____1.call(this, state_16527);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
          return state_machine__13817__auto__;
        }();
      }(switch__13816__auto__);
    }();
    var state__13888__auto__ = function() {
      var statearr_16542 = f__13887__auto__.call(null);
      statearr_16542[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto__;
      return statearr_16542;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
  });
  return c__13886__auto__;
};
goog.provide("todomvc.application");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("todomvc.services");
goog.require("todomvc.services");
goog.require("todomvc.transact");
goog.require("todomvc.transact");
goog.require("todomvc.render");
goog.require("todomvc.render");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.events");
todomvc.application.state_to_string = function state_to_string(p__16393) {
  var map__16395 = p__16393;
  var map__16395__$1 = cljs.core.seq_QMARK_.call(null, map__16395) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16395) : map__16395;
  var error = cljs.core.get.call(null, map__16395__$1, new cljs.core.Keyword(null, "error", "error", 1110689146));
  var items = cljs.core.get.call(null, map__16395__$1, new cljs.core.Keyword(null, "items", "items", 1114430258));
  var next_id = cljs.core.get.call(null, map__16395__$1, new cljs.core.Keyword(null, "next-id", "next-id", 2860930471));
  var current_filter = cljs.core.get.call(null, map__16395__$1, new cljs.core.Keyword(null, "current-filter", "current-filter", 2062811582));
  var all_done_QMARK_ = cljs.core.get.call(null, map__16395__$1, new cljs.core.Keyword(null, "all-done?", "all-done?", 3774632259));
  return[cljs.core.str("{:all-done? "), cljs.core.str(all_done_QMARK_), cljs.core.str("\n"), cljs.core.str(" :current-filter "), cljs.core.str(current_filter), cljs.core.str("\n"), cljs.core.str(" :next-id "), cljs.core.str(next_id), cljs.core.str("\n"), cljs.core.str(" :items ["), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, "\n         ", items))), cljs.core.str("]\n"), cljs.core.str(cljs.core.truth_(error) ? [cljs.core.str(" :error "), cljs.core.str(error), 
  cljs.core.str("\n")].join("") : null), cljs.core.str("}")].join("");
};
todomvc.application.pp_state = function pp_state(state) {
  return console.log(todomvc.application.state_to_string.call(null, state));
};
todomvc.application.pp_transaction = function pp_transaction(transaction) {
  return console.log([cljs.core.str("\n(transact state "), cljs.core.str(transaction), cljs.core.str(") \x3d\x3e")].join(""));
};
todomvc.application.load_app = function load_app() {
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "state", "state", 1123661827), cljs.core.atom.call(null, todomvc.transact.initial_state.call(null)), new cljs.core.Keyword(null, "channel", "channel", 1752854645), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "emit", "emit", 1017021253), cljs.core.async.chan.call(null), new cljs.core.Keyword(null, "transact", "transact", 2294782044), todomvc.transact.main, new cljs.core.Keyword(null, "render-pending?", 
  "render-pending?", 2215462737), cljs.core.atom.call(null, false), new cljs.core.Keyword(null, "render", "render", 4374279432), todomvc.render.main], null);
};
todomvc.application.init_updates = function init_updates(p__16396) {
  var map__16433 = p__16396;
  var map__16433__$1 = cljs.core.seq_QMARK_.call(null, map__16433) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16433) : map__16433;
  var app = map__16433__$1;
  var render = cljs.core.get.call(null, map__16433__$1, new cljs.core.Keyword(null, "render", "render", 4374279432));
  var transact = cljs.core.get.call(null, map__16433__$1, new cljs.core.Keyword(null, "transact", "transact", 2294782044));
  var emit = cljs.core.get.call(null, map__16433__$1, new cljs.core.Keyword(null, "emit", "emit", 1017021253));
  var channel = cljs.core.get.call(null, map__16433__$1, new cljs.core.Keyword(null, "channel", "channel", 1752854645));
  var state = cljs.core.get.call(null, map__16433__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  var c__13886__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function() {
    var f__13887__auto__ = function() {
      var switch__13816__auto__ = function(state_16452) {
        var state_val_16453 = state_16452[1];
        if (state_val_16453 === 8) {
          var inst_16437 = state_16452[7];
          var inst_16439 = state_16452[2];
          var inst_16440 = cljs.core.swap_BANG_.call(null, state, transact, inst_16437);
          var inst_16441 = todomvc.application.pp_transaction.call(null, inst_16437);
          var inst_16442 = cljs.core.deref.call(null, state);
          var inst_16443 = todomvc.application.pp_state.call(null, inst_16442);
          var inst_16444 = render.call(null, app);
          var state_16452__$1 = function() {
            var statearr_16454 = state_16452;
            statearr_16454[8] = inst_16444;
            statearr_16454[9] = inst_16443;
            statearr_16454[10] = inst_16441;
            statearr_16454[11] = inst_16440;
            statearr_16454[12] = inst_16439;
            return statearr_16454;
          }();
          var statearr_16455_16469 = state_16452__$1;
          statearr_16455_16469[2] = null;
          statearr_16455_16469[1] = 2;
          return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
        } else {
          if (state_val_16453 === 7) {
            var inst_16437 = state_16452[7];
            var inst_16437__$1 = state_16452[2];
            var state_16452__$1 = function() {
              var statearr_16456 = state_16452;
              statearr_16456[7] = inst_16437__$1;
              return statearr_16456;
            }();
            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16452__$1, 8, emit, inst_16437__$1);
          } else {
            if (state_val_16453 === 6) {
              var inst_16448 = state_16452[2];
              var state_16452__$1 = state_16452;
              var statearr_16457_16470 = state_16452__$1;
              statearr_16457_16470[2] = inst_16448;
              statearr_16457_16470[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
            } else {
              if (state_val_16453 === 5) {
                var state_16452__$1 = state_16452;
                var statearr_16458_16471 = state_16452__$1;
                statearr_16458_16471[2] = null;
                statearr_16458_16471[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
              } else {
                if (state_val_16453 === 4) {
                  var state_16452__$1 = state_16452;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16452__$1, 7, channel);
                } else {
                  if (state_val_16453 === 3) {
                    var inst_16450 = state_16452[2];
                    var state_16452__$1 = state_16452;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16452__$1, inst_16450);
                  } else {
                    if (state_val_16453 === 2) {
                      var state_16452__$1 = state_16452;
                      if (true) {
                        var statearr_16459_16472 = state_16452__$1;
                        statearr_16459_16472[1] = 4;
                      } else {
                        var statearr_16460_16473 = state_16452__$1;
                        statearr_16460_16473[1] = 5;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                    } else {
                      if (state_val_16453 === 1) {
                        var state_16452__$1 = state_16452;
                        var statearr_16461_16474 = state_16452__$1;
                        statearr_16461_16474[2] = null;
                        statearr_16461_16474[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      return function(switch__13816__auto__) {
        return function() {
          var state_machine__13817__auto__ = null;
          var state_machine__13817__auto____0 = function() {
            var statearr_16465 = [null, null, null, null, null, null, null, null, null, null, null, null, null];
            statearr_16465[0] = state_machine__13817__auto__;
            statearr_16465[1] = 1;
            return statearr_16465;
          };
          var state_machine__13817__auto____1 = function(state_16452) {
            while (true) {
              var ret_value__13818__auto__ = function() {
                try {
                  while (true) {
                    var result__13819__auto__ = switch__13816__auto__.call(null, state_16452);
                    if (cljs.core.keyword_identical_QMARK_.call(null, result__13819__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                      continue;
                    } else {
                      return result__13819__auto__;
                    }
                    break;
                  }
                } catch (e16466) {
                  if (e16466 instanceof Object) {
                    var ex__13820__auto__ = e16466;
                    var statearr_16467_16475 = state_16452;
                    statearr_16467_16475[5] = ex__13820__auto__;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16452);
                    return new cljs.core.Keyword(null, "recur", "recur", 1122293407);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      throw e16466;
                    } else {
                      return null;
                    }
                  }
                }
              }();
              if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__13818__auto__, new cljs.core.Keyword(null, "recur", "recur", 1122293407))) {
                var G__16476 = state_16452;
                state_16452 = G__16476;
                continue;
              } else {
                return ret_value__13818__auto__;
              }
              break;
            }
          };
          state_machine__13817__auto__ = function(state_16452) {
            switch(arguments.length) {
              case 0:
                return state_machine__13817__auto____0.call(this);
              case 1:
                return state_machine__13817__auto____1.call(this, state_16452);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__13817__auto____0;
          state_machine__13817__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__13817__auto____1;
          return state_machine__13817__auto__;
        }();
      }(switch__13816__auto__);
    }();
    var state__13888__auto__ = function() {
      var statearr_16468 = f__13887__auto__.call(null);
      statearr_16468[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__13886__auto__;
      return statearr_16468;
    }();
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__13888__auto__);
  });
  return c__13886__auto__;
};
todomvc.application.main = function main() {
  var map__16478 = todomvc.application.load_app.call(null);
  var map__16478__$1 = cljs.core.seq_QMARK_.call(null, map__16478) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16478) : map__16478;
  var app = map__16478__$1;
  var render = cljs.core.get.call(null, map__16478__$1, new cljs.core.Keyword(null, "render", "render", 4374279432));
  var state = cljs.core.get.call(null, map__16478__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
  todomvc.application.init_updates.call(null, app);
  todomvc.services.start_services.call(null, app);
  todomvc.application.pp_state.call(null, cljs.core.deref.call(null, state));
  render.call(null, app);
  todomvc.application.app_hook = app;
};
goog.exportSymbol("todomvc.application.main", todomvc.application.main);
